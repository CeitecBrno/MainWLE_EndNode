
MainWLE_EndNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001cb50  08000138  08000138  00001138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f48  0801cc88  0801cc88  0001dc88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  0801dbd0  0801dbd0  0001ebd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801dca8  0801dca8  0001f15c  2**0
                  CONTENTS
  5 .ARM          00000008  0801dca8  0801dca8  0001eca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801dcb0  0801dcb0  0001f15c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801dcb0  0801dcb0  0001ecb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  0801dcb4  0801dcb4  0001ecb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         0000015c  20000000  0801dcb8  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002330  2000015c  0801de14  0001f15c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000248c  0801de14  0001f48c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0001f15c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00043d6b  00000000  00000000  0001f186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a799  00000000  00000000  00062ef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003380  00000000  00000000  0006d690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002713  00000000  00000000  00070a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002913b  00000000  00000000  00073123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00040201  00000000  00000000  0009c25e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd33f  00000000  00000000  000dc45f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a979e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d39c  00000000  00000000  001a97e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  001b6b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000015c 	.word	0x2000015c
 8000154:	00000000 	.word	0x00000000
 8000158:	0801cc70 	.word	0x0801cc70

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000160 	.word	0x20000160
 8000174:	0801cc70 	.word	0x0801cc70

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	@ 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	@ 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_fmul>:
 800087c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000884:	bf1e      	ittt	ne
 8000886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800088a:	ea92 0f0c 	teqne	r2, ip
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d06f      	beq.n	8000974 <__aeabi_fmul+0xf8>
 8000894:	441a      	add	r2, r3
 8000896:	ea80 0c01 	eor.w	ip, r0, r1
 800089a:	0240      	lsls	r0, r0, #9
 800089c:	bf18      	it	ne
 800089e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008a2:	d01e      	beq.n	80008e2 <__aeabi_fmul+0x66>
 80008a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80008a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b0:	fba0 3101 	umull	r3, r1, r0, r1
 80008b4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80008b8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80008bc:	bf3e      	ittt	cc
 80008be:	0049      	lslcc	r1, r1, #1
 80008c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	ea40 0001 	orr.w	r0, r0, r1
 80008ca:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80008ce:	2afd      	cmp	r2, #253	@ 0xfd
 80008d0:	d81d      	bhi.n	800090e <__aeabi_fmul+0x92>
 80008d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80008ea:	bf08      	it	eq
 80008ec:	0249      	lsleq	r1, r1, #9
 80008ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008f6:	3a7f      	subs	r2, #127	@ 0x7f
 80008f8:	bfc2      	ittt	gt
 80008fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80008fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000902:	4770      	bxgt	lr
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	3a01      	subs	r2, #1
 800090e:	dc5d      	bgt.n	80009cc <__aeabi_fmul+0x150>
 8000910:	f112 0f19 	cmn.w	r2, #25
 8000914:	bfdc      	itt	le
 8000916:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800091a:	4770      	bxle	lr
 800091c:	f1c2 0200 	rsb	r2, r2, #0
 8000920:	0041      	lsls	r1, r0, #1
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	f1c2 0220 	rsb	r2, r2, #32
 800092a:	fa00 fc02 	lsl.w	ip, r0, r2
 800092e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000932:	f140 0000 	adc.w	r0, r0, #0
 8000936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800093a:	bf08      	it	eq
 800093c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000940:	4770      	bx	lr
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xce>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xe6>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e78f      	b.n	8000894 <__aeabi_fmul+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	bf18      	it	ne
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d00a      	beq.n	800099a <__aeabi_fmul+0x11e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800098e:	d1d8      	bne.n	8000942 <__aeabi_fmul+0xc6>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000998:	4770      	bx	lr
 800099a:	f090 0f00 	teq	r0, #0
 800099e:	bf17      	itett	ne
 80009a0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80009a4:	4608      	moveq	r0, r1
 80009a6:	f091 0f00 	teqne	r1, #0
 80009aa:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80009ae:	d014      	beq.n	80009da <__aeabi_fmul+0x15e>
 80009b0:	ea92 0f0c 	teq	r2, ip
 80009b4:	d101      	bne.n	80009ba <__aeabi_fmul+0x13e>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d10f      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009ba:	ea93 0f0c 	teq	r3, ip
 80009be:	d103      	bne.n	80009c8 <__aeabi_fmul+0x14c>
 80009c0:	024b      	lsls	r3, r1, #9
 80009c2:	bf18      	it	ne
 80009c4:	4608      	movne	r0, r1
 80009c6:	d108      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009c8:	ea80 0001 	eor.w	r0, r0, r1
 80009cc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009d8:	4770      	bx	lr
 80009da:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009de:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fdiv>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d069      	beq.n	8000ad0 <__aeabi_fdiv+0xec>
 80009fc:	eba2 0203 	sub.w	r2, r2, r3
 8000a00:	ea80 0c01 	eor.w	ip, r0, r1
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a0a:	d037      	beq.n	8000a7c <__aeabi_fdiv+0x98>
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a18:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	bf38      	it	cc
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000a26:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	bf24      	itt	cs
 8000a2e:	1a5b      	subcs	r3, r3, r1
 8000a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a38:	bf24      	itt	cs
 8000a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a46:	bf24      	itt	cs
 8000a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a54:	bf24      	itt	cs
 8000a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	bf18      	it	ne
 8000a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a66:	d1e0      	bne.n	8000a2a <__aeabi_fdiv+0x46>
 8000a68:	2afd      	cmp	r2, #253	@ 0xfd
 8000a6a:	f63f af50 	bhi.w	800090e <__aeabi_fmul+0x92>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a84:	327f      	adds	r2, #127	@ 0x7f
 8000a86:	bfc2      	ittt	gt
 8000a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a90:	4770      	bxgt	lr
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	e737      	b.n	800090e <__aeabi_fmul+0x92>
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xc2>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xda>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e795      	b.n	80009fc <__aeabi_fdiv+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	d108      	bne.n	8000aec <__aeabi_fdiv+0x108>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	f47f af7d 	bne.w	80009da <__aeabi_fmul+0x15e>
 8000ae0:	ea93 0f0c 	teq	r3, ip
 8000ae4:	f47f af70 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	e776      	b.n	80009da <__aeabi_fmul+0x15e>
 8000aec:	ea93 0f0c 	teq	r3, ip
 8000af0:	d104      	bne.n	8000afc <__aeabi_fdiv+0x118>
 8000af2:	024b      	lsls	r3, r1, #9
 8000af4:	f43f af4c 	beq.w	8000990 <__aeabi_fmul+0x114>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e76e      	b.n	80009da <__aeabi_fmul+0x15e>
 8000afc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000b00:	bf18      	it	ne
 8000b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000b06:	d1ca      	bne.n	8000a9e <__aeabi_fdiv+0xba>
 8000b08:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000b0c:	f47f af5c 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000b10:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000b14:	f47f af3c 	bne.w	8000990 <__aeabi_fmul+0x114>
 8000b18:	e75f      	b.n	80009da <__aeabi_fmul+0x15e>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_f2iz>:
 8000b1c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b20:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000b24:	d30f      	bcc.n	8000b46 <__aeabi_f2iz+0x2a>
 8000b26:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000b2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_f2iz+0x30>
 8000b30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b34:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b38:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b3c:	fa23 f002 	lsr.w	r0, r3, r2
 8000b40:	bf18      	it	ne
 8000b42:	4240      	negne	r0, r0
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	4770      	bx	lr
 8000b4c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000b50:	d101      	bne.n	8000b56 <__aeabi_f2iz+0x3a>
 8000b52:	0242      	lsls	r2, r0, #9
 8000b54:	d105      	bne.n	8000b62 <__aeabi_f2iz+0x46>
 8000b56:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000b5a:	bf08      	it	eq
 8000b5c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_f2uiz>:
 8000b68:	0042      	lsls	r2, r0, #1
 8000b6a:	d20e      	bcs.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000b70:	d30b      	bcc.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b72:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000b76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b7a:	d409      	bmi.n	8000b90 <__aeabi_f2uiz+0x28>
 8000b7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b80:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b84:	fa23 f002 	lsr.w	r0, r3, r2
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0000 	mov.w	r0, #0
 8000b8e:	4770      	bx	lr
 8000b90:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000b94:	d101      	bne.n	8000b9a <__aeabi_f2uiz+0x32>
 8000b96:	0242      	lsls	r2, r0, #9
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_f2uiz+0x38>
 8000b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ea0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ea4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ea6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000eb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000eb4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
}
 8000ebe:	bf00      	nop
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr

08000ec8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ed0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ed4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000ed6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ee0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ee4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000eec:	68fb      	ldr	r3, [r7, #12]
}
 8000eee:	bf00      	nop
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr

08000ef8 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000f00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f04:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f0e:	4013      	ands	r3, r2
 8000f10:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr

08000f1c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000f20:	4b23      	ldr	r3, [pc, #140]	@ (8000fb0 <MX_ADC_Init+0x94>)
 8000f22:	4a24      	ldr	r2, [pc, #144]	@ (8000fb4 <MX_ADC_Init+0x98>)
 8000f24:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f26:	4b22      	ldr	r3, [pc, #136]	@ (8000fb0 <MX_ADC_Init+0x94>)
 8000f28:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000f2c:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000f2e:	4b20      	ldr	r3, [pc, #128]	@ (8000fb0 <MX_ADC_Init+0x94>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f34:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb0 <MX_ADC_Init+0x94>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f3a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb0 <MX_ADC_Init+0x94>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f40:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb0 <MX_ADC_Init+0x94>)
 8000f42:	2204      	movs	r2, #4
 8000f44:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000f46:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb0 <MX_ADC_Init+0x94>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000f4c:	4b18      	ldr	r3, [pc, #96]	@ (8000fb0 <MX_ADC_Init+0x94>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000f52:	4b17      	ldr	r3, [pc, #92]	@ (8000fb0 <MX_ADC_Init+0x94>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000f58:	4b15      	ldr	r3, [pc, #84]	@ (8000fb0 <MX_ADC_Init+0x94>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000f5e:	4b14      	ldr	r3, [pc, #80]	@ (8000fb0 <MX_ADC_Init+0x94>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f66:	4b12      	ldr	r3, [pc, #72]	@ (8000fb0 <MX_ADC_Init+0x94>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f6c:	4b10      	ldr	r3, [pc, #64]	@ (8000fb0 <MX_ADC_Init+0x94>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000f72:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb0 <MX_ADC_Init+0x94>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb0 <MX_ADC_Init+0x94>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000f80:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb0 <MX_ADC_Init+0x94>)
 8000f82:	2207      	movs	r2, #7
 8000f84:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000f86:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb0 <MX_ADC_Init+0x94>)
 8000f88:	2207      	movs	r2, #7
 8000f8a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000f8c:	4b08      	ldr	r3, [pc, #32]	@ (8000fb0 <MX_ADC_Init+0x94>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000f94:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <MX_ADC_Init+0x94>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000f9a:	4805      	ldr	r0, [pc, #20]	@ (8000fb0 <MX_ADC_Init+0x94>)
 8000f9c:	f002 fa22 	bl	80033e4 <HAL_ADC_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_ADC_Init+0x8e>
  {
    Error_Handler();
 8000fa6:	f000 fcc1 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000178 	.word	0x20000178
 8000fb4:	40012400 	.word	0x40012400

08000fb8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a0c      	ldr	r2, [pc, #48]	@ (8001008 <HAL_ADC_MspInit+0x50>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d112      	bne.n	8001000 <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fda:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000fde:	f7ff ff73 	bl	8000ec8 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe2:	2002      	movs	r0, #2
 8000fe4:	f7ff ff58 	bl	8000e98 <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB3     ------> ADC_IN2
    PB4     ------> ADC_IN3
    PB2     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = VBAT_Pin|CURROUT_Pin|GPIO_PIN_2;
 8000fe8:	231c      	movs	r3, #28
 8000fea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fec:	2303      	movs	r3, #3
 8000fee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4804      	ldr	r0, [pc, #16]	@ (800100c <HAL_ADC_MspInit+0x54>)
 8000ffc:	f004 f820 	bl	8005040 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8001000:	bf00      	nop
 8001002:	3720      	adds	r7, #32
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40012400 	.word	0x40012400
 800100c:	48000400 	.word	0x48000400

08001010 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a07      	ldr	r2, [pc, #28]	@ (800103c <HAL_ADC_MspDeInit+0x2c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d107      	bne.n	8001032 <HAL_ADC_MspDeInit+0x22>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8001022:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001026:	f7ff ff67 	bl	8000ef8 <LL_APB2_GRP1_DisableClock>
    /**ADC GPIO Configuration
    PB3     ------> ADC_IN2
    PB4     ------> ADC_IN3
    PB2     ------> ADC_IN4
    */
    HAL_GPIO_DeInit(GPIOB, VBAT_Pin|CURROUT_Pin|GPIO_PIN_2);
 800102a:	211c      	movs	r1, #28
 800102c:	4804      	ldr	r0, [pc, #16]	@ (8001040 <HAL_ADC_MspDeInit+0x30>)
 800102e:	f004 f967 	bl	8005300 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40012400 	.word	0x40012400
 8001040:	48000400 	.word	0x48000400

08001044 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8001048:	4b03      	ldr	r3, [pc, #12]	@ (8001058 <SYS_InitMeasurement+0x14>)
 800104a:	4a04      	ldr	r2, [pc, #16]	@ (800105c <SYS_InitMeasurement+0x18>)
 800104c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	20000178 	.word	0x20000178
 800105c:	40012400 	.word	0x40012400

08001060 <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  __IO int16_t temperatureDegreeC = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	803b      	strh	r3, [r7, #0]
  uint32_t measuredLevel = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 800106e:	f000 f869 	bl	8001144 <SYS_GetBatteryLevel>
 8001072:	4603      	mov	r3, r0
 8001074:	807b      	strh	r3, [r7, #2]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8001076:	482d      	ldr	r0, [pc, #180]	@ (800112c <SYS_GetTemperatureLevel+0xcc>)
 8001078:	f000 f898 	bl	80011ac <ADC_ReadChannels>
 800107c:	6078      	str	r0, [r7, #4]

  /* convert ADC level to temperature */
  /* check whether device has temperature sensor calibrated in production */
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 800107e:	4b2c      	ldr	r3, [pc, #176]	@ (8001130 <SYS_GetTemperatureLevel+0xd0>)
 8001080:	881a      	ldrh	r2, [r3, #0]
 8001082:	4b2c      	ldr	r3, [pc, #176]	@ (8001134 <SYS_GetTemperatureLevel+0xd4>)
 8001084:	881b      	ldrh	r3, [r3, #0]
 8001086:	429a      	cmp	r2, r3
 8001088:	d026      	beq.n	80010d8 <SYS_GetTemperatureLevel+0x78>
  {
    /* Device with temperature sensor calibrated in production:
       use device optimized parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 800108a:	4b29      	ldr	r3, [pc, #164]	@ (8001130 <SYS_GetTemperatureLevel+0xd0>)
 800108c:	881a      	ldrh	r2, [r3, #0]
 800108e:	4b29      	ldr	r3, [pc, #164]	@ (8001134 <SYS_GetTemperatureLevel+0xd4>)
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	429a      	cmp	r2, r3
 8001094:	d01c      	beq.n	80010d0 <SYS_GetTemperatureLevel+0x70>
 8001096:	887b      	ldrh	r3, [r7, #2]
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	fb02 f303 	mul.w	r3, r2, r3
 800109e:	089b      	lsrs	r3, r3, #2
 80010a0:	4a25      	ldr	r2, [pc, #148]	@ (8001138 <SYS_GetTemperatureLevel+0xd8>)
 80010a2:	fba2 2303 	umull	r2, r3, r2, r3
 80010a6:	095b      	lsrs	r3, r3, #5
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b22      	ldr	r3, [pc, #136]	@ (8001134 <SYS_GetTemperatureLevel+0xd4>)
 80010ac:	881b      	ldrh	r3, [r3, #0]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	2264      	movs	r2, #100	@ 0x64
 80010b2:	fb03 f202 	mul.w	r2, r3, r2
 80010b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001130 <SYS_GetTemperatureLevel+0xd0>)
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	4619      	mov	r1, r3
 80010bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001134 <SYS_GetTemperatureLevel+0xd4>)
 80010be:	881b      	ldrh	r3, [r3, #0]
 80010c0:	1acb      	subs	r3, r1, r3
 80010c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	331e      	adds	r3, #30
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	b21b      	sxth	r3, r3
 80010ce:	e001      	b.n	80010d4 <SYS_GetTemperatureLevel+0x74>
 80010d0:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80010d4:	803b      	strh	r3, [r7, #0]
 80010d6:	e01d      	b.n	8001114 <SYS_GetTemperatureLevel+0xb4>
  }
  else
  {
    /* Device with temperature sensor not calibrated in production:
       use generic parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 80010d8:	887b      	ldrh	r3, [r7, #2]
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	fb03 f202 	mul.w	r2, r3, r2
 80010e0:	4b16      	ldr	r3, [pc, #88]	@ (800113c <SYS_GetTemperatureLevel+0xdc>)
 80010e2:	fba3 1302 	umull	r1, r3, r3, r2
 80010e6:	1ad2      	subs	r2, r2, r3
 80010e8:	0852      	lsrs	r2, r2, #1
 80010ea:	4413      	add	r3, r2
 80010ec:	0adb      	lsrs	r3, r3, #11
 80010ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010f2:	fb02 f303 	mul.w	r3, r2, r3
 80010f6:	f5a3 2339 	sub.w	r3, r3, #757760	@ 0xb9000
 80010fa:	f5a3 630c 	sub.w	r3, r3, #2240	@ 0x8c0
 80010fe:	4a10      	ldr	r2, [pc, #64]	@ (8001140 <SYS_GetTemperatureLevel+0xe0>)
 8001100:	fb82 1203 	smull	r1, r2, r2, r3
 8001104:	1292      	asrs	r2, r2, #10
 8001106:	17db      	asrs	r3, r3, #31
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	b29b      	uxth	r3, r3
 800110c:	331e      	adds	r3, #30
 800110e:	b29b      	uxth	r3, r3
 8001110:	b21b      	sxth	r3, r3
 8001112:	803b      	strh	r3, [r7, #0]
                                                              measuredLevel,
                                                              LL_ADC_RESOLUTION_12B);
  }

  /* from int16 to q8.7*/
  temperatureDegreeC <<= 8;
 8001114:	883b      	ldrh	r3, [r7, #0]
 8001116:	b21b      	sxth	r3, r3
 8001118:	021b      	lsls	r3, r3, #8
 800111a:	b21b      	sxth	r3, r3
 800111c:	803b      	strh	r3, [r7, #0]

  return (int16_t) temperatureDegreeC;
 800111e:	883b      	ldrh	r3, [r7, #0]
 8001120:	b21b      	sxth	r3, r3
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	b0001000 	.word	0xb0001000
 8001130:	1fff75c8 	.word	0x1fff75c8
 8001134:	1fff75a8 	.word	0x1fff75a8
 8001138:	09ee009f 	.word	0x09ee009f
 800113c:	00100101 	.word	0x00100101
 8001140:	68db8bad 	.word	0x68db8bad

08001144 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8001152:	4813      	ldr	r0, [pc, #76]	@ (80011a0 <SYS_GetBatteryLevel+0x5c>)
 8001154:	f000 f82a 	bl	80011ac <ADC_ReadChannels>
 8001158:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d102      	bne.n	8001166 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	80fb      	strh	r3, [r7, #6]
 8001164:	e016      	b.n	8001194 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001166:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <SYS_GetBatteryLevel+0x60>)
 8001168:	881b      	ldrh	r3, [r3, #0]
 800116a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800116e:	4293      	cmp	r3, r2
 8001170:	d00b      	beq.n	800118a <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8001172:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <SYS_GetBatteryLevel+0x60>)
 8001174:	881b      	ldrh	r3, [r3, #0]
 8001176:	461a      	mov	r2, r3
 8001178:	f640 43e4 	movw	r3, #3300	@ 0xce4
 800117c:	fb03 f202 	mul.w	r2, r3, r2
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	fbb2 f3f3 	udiv	r3, r2, r3
 8001186:	80fb      	strh	r3, [r7, #6]
 8001188:	e004      	b.n	8001194 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 800118a:	4a07      	ldr	r2, [pc, #28]	@ (80011a8 <SYS_GetBatteryLevel+0x64>)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001192:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8001194:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	b4002000 	.word	0xb4002000
 80011a4:	1fff75aa 	.word	0x1fff75aa
 80011a8:	004c08d8 	.word	0x004c08d8

080011ac <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011b8:	f107 0308 	add.w	r3, r7, #8
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 80011c4:	f7ff feaa 	bl	8000f1c <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 80011c8:	481a      	ldr	r0, [pc, #104]	@ (8001234 <ADC_ReadChannels+0x88>)
 80011ca:	f002 ff2a 	bl	8004022 <HAL_ADCEx_Calibration_Start>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 80011d4:	f000 fbaa 	bl	800192c <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011dc:	2300      	movs	r3, #0
 80011de:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80011e4:	f107 0308 	add.w	r3, r7, #8
 80011e8:	4619      	mov	r1, r3
 80011ea:	4812      	ldr	r0, [pc, #72]	@ (8001234 <ADC_ReadChannels+0x88>)
 80011ec:	f002 fc36 	bl	8003a5c <HAL_ADC_ConfigChannel>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 80011f6:	f000 fb99 	bl	800192c <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80011fa:	480e      	ldr	r0, [pc, #56]	@ (8001234 <ADC_ReadChannels+0x88>)
 80011fc:	f002 fb12 	bl	8003824 <HAL_ADC_Start>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8001206:	f000 fb91 	bl	800192c <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800120a:	f04f 31ff 	mov.w	r1, #4294967295
 800120e:	4809      	ldr	r0, [pc, #36]	@ (8001234 <ADC_ReadChannels+0x88>)
 8001210:	f002 fb80 	bl	8003914 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8001214:	4807      	ldr	r0, [pc, #28]	@ (8001234 <ADC_ReadChannels+0x88>)
 8001216:	f002 fb4b 	bl	80038b0 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 800121a:	4806      	ldr	r0, [pc, #24]	@ (8001234 <ADC_ReadChannels+0x88>)
 800121c:	f002 fc11 	bl	8003a42 <HAL_ADC_GetValue>
 8001220:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8001222:	4804      	ldr	r0, [pc, #16]	@ (8001234 <ADC_ReadChannels+0x88>)
 8001224:	f002 fa72 	bl	800370c <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8001228:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 800122a:	4618      	mov	r0, r3
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000178 	.word	0x20000178

08001238 <LL_AHB1_GRP1_EnableClock>:
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001240:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001244:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001246:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4313      	orrs	r3, r2
 800124e:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001250:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001254:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4013      	ands	r3, r2
 800125a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800125c:	68fb      	ldr	r3, [r7, #12]
}
 800125e:	bf00      	nop
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr

08001268 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800126c:	2004      	movs	r0, #4
 800126e:	f7ff ffe3 	bl	8001238 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001272:	2001      	movs	r0, #1
 8001274:	f7ff ffe0 	bl	8001238 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 1, 0);
 8001278:	2200      	movs	r2, #0
 800127a:	2101      	movs	r1, #1
 800127c:	200e      	movs	r0, #14
 800127e:	f003 f898 	bl	80043b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001282:	200e      	movs	r0, #14
 8001284:	f003 f8af 	bl	80043e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8001288:	2200      	movs	r2, #0
 800128a:	2102      	movs	r1, #2
 800128c:	200f      	movs	r0, #15
 800128e:	f003 f890 	bl	80043b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001292:	200f      	movs	r0, #15
 8001294:	f003 f8a7 	bl	80043e6 <HAL_NVIC_EnableIRQ>

}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}

0800129c <FLASH_IF_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
FLASH_IF_StatusTypedef FLASH_IF_Init(void *pAllocRamBuffer)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 80012a4:	2300      	movs	r3, #0
 80012a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Init_1 */

  /* USER CODE END FLASH_IF_Init_1 */
  pAllocatedBuffer = (uint8_t *)pAllocRamBuffer;
 80012a8:	4a04      	ldr	r2, [pc, #16]	@ (80012bc <FLASH_IF_Init+0x20>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN FLASH_IF_Init_2 */

  /* USER CODE END FLASH_IF_Init_2 */
  return ret_status;
 80012ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr
 80012bc:	200001dc 	.word	0x200001dc

080012c0 <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80012cc:	23ff      	movs	r3, #255	@ 0xff
 80012ce:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80012d6:	d311      	bcc.n	80012fc <FLASH_IF_Write+0x3c>
 80012d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001308 <FLASH_IF_Write+0x48>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	029a      	lsls	r2, r3, #10
 80012de:	4b0b      	ldr	r3, [pc, #44]	@ (800130c <FLASH_IF_Write+0x4c>)
 80012e0:	4013      	ands	r3, r2
 80012e2:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80012e6:	3b01      	subs	r3, #1
 80012e8:	68fa      	ldr	r2, [r7, #12]
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d306      	bcc.n	80012fc <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	68b9      	ldr	r1, [r7, #8]
 80012f2:	68f8      	ldr	r0, [r7, #12]
 80012f4:	f000 f85a 	bl	80013ac <FLASH_IF_INT_Write>
 80012f8:	4603      	mov	r3, r0
 80012fa:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 80012fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	1fff75e0 	.word	0x1fff75e0
 800130c:	03fffc00 	.word	0x03fffc00

08001310 <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 800131c:	23ff      	movs	r3, #255	@ 0xff
 800131e:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001326:	d311      	bcc.n	800134c <FLASH_IF_Read+0x3c>
 8001328:	4b0b      	ldr	r3, [pc, #44]	@ (8001358 <FLASH_IF_Read+0x48>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	029a      	lsls	r2, r3, #10
 800132e:	4b0b      	ldr	r3, [pc, #44]	@ (800135c <FLASH_IF_Read+0x4c>)
 8001330:	4013      	ands	r3, r2
 8001332:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001336:	3b01      	subs	r3, #1
 8001338:	68ba      	ldr	r2, [r7, #8]
 800133a:	4293      	cmp	r3, r2
 800133c:	d306      	bcc.n	800134c <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	68b9      	ldr	r1, [r7, #8]
 8001342:	68f8      	ldr	r0, [r7, #12]
 8001344:	f000 f93a 	bl	80015bc <FLASH_IF_INT_Read>
 8001348:	4603      	mov	r3, r0
 800134a:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 800134c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	1fff75e0 	.word	0x1fff75e0
 800135c:	03fffc00 	.word	0x03fffc00

08001360 <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 800136a:	23ff      	movs	r3, #255	@ 0xff
 800136c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001374:	d310      	bcc.n	8001398 <FLASH_IF_Erase+0x38>
 8001376:	4b0b      	ldr	r3, [pc, #44]	@ (80013a4 <FLASH_IF_Erase+0x44>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	029a      	lsls	r2, r3, #10
 800137c:	4b0a      	ldr	r3, [pc, #40]	@ (80013a8 <FLASH_IF_Erase+0x48>)
 800137e:	4013      	ands	r3, r2
 8001380:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001384:	3b01      	subs	r3, #1
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	4293      	cmp	r3, r2
 800138a:	d305      	bcc.n	8001398 <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 800138c:	6839      	ldr	r1, [r7, #0]
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 f932 	bl	80015f8 <FLASH_IF_INT_Erase>
 8001394:	4603      	mov	r3, r0
 8001396:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 8001398:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	1fff75e0 	.word	0x1fff75e0
 80013a8:	03fffc00 	.word	0x03fffc00

080013ac <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b090      	sub	sp, #64	@ 0x40
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 80013b8:	2300      	movs	r3, #0
 80013ba:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t uSource = (uint32_t)pSource;
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t length = uLength;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d00c      	beq.n	80013ea <FLASH_IF_INT_Write+0x3e>
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d009      	beq.n	80013ea <FLASH_IF_INT_Write+0x3e>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d104      	bne.n	80013ea <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d002      	beq.n	80013f0 <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 80013ea:	f06f 0305 	mvn.w	r3, #5
 80013ee:	e0da      	b.n	80015a6 <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 80013f0:	f000 f992 	bl	8001718 <FLASH_IF_INT_Clear_Error>
 80013f4:	4603      	mov	r3, r0
 80013f6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  if (ret_status == FLASH_IF_OK)
 80013fa:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f040 80cf 	bne.w	80015a2 <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001404:	f003 fc46 	bl	8004c94 <HAL_FLASH_Unlock>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	f040 80c6 	bne.w	800159c <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 8001410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001412:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 8001416:	4b66      	ldr	r3, [pc, #408]	@ (80015b0 <FLASH_IF_INT_Write+0x204>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	0299      	lsls	r1, r3, #10
 800141c:	4b65      	ldr	r3, [pc, #404]	@ (80015b4 <FLASH_IF_INT_Write+0x208>)
 800141e:	400b      	ands	r3, r1
 8001420:	fbb2 f1f3 	udiv	r1, r2, r3
 8001424:	fb01 f303 	mul.w	r3, r1, r3
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	0adb      	lsrs	r3, r3, #11
 800142c:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 800142e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4413      	add	r3, r2
 8001434:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8001438:	3b01      	subs	r3, #1
 800143a:	4a5d      	ldr	r2, [pc, #372]	@ (80015b0 <FLASH_IF_INT_Write+0x204>)
 800143c:	6812      	ldr	r2, [r2, #0]
 800143e:	0291      	lsls	r1, r2, #10
 8001440:	4a5c      	ldr	r2, [pc, #368]	@ (80015b4 <FLASH_IF_INT_Write+0x208>)
 8001442:	400a      	ands	r2, r1
 8001444:	fbb3 f1f2 	udiv	r1, r3, r2
 8001448:	fb01 f202 	mul.w	r2, r1, r2
 800144c:	1a9b      	subs	r3, r3, r2
 800144e:	0ada      	lsrs	r2, r3, #11
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	3301      	adds	r3, #1
 8001456:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d905      	bls.n	800146a <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 800145e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001460:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001464:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001468:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800146e:	e089      	b.n	8001584 <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 8001470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001472:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001476:	02db      	lsls	r3, r3, #11
 8001478:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 800147a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800147c:	68f8      	ldr	r0, [r7, #12]
 800147e:	f000 f925 	bl	80016cc <FLASH_IF_INT_IsEmpty>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d031      	beq.n	80014ec <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 8001488:	4b4b      	ldr	r3, [pc, #300]	@ (80015b8 <FLASH_IF_INT_Write+0x20c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d103      	bne.n	8001498 <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 8001490:	23fa      	movs	r3, #250	@ 0xfa
 8001492:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break; /* exit for loop */
 8001496:	e07e      	b.n	8001596 <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 8001498:	4b47      	ldr	r3, [pc, #284]	@ (80015b8 <FLASH_IF_INT_Write+0x20c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6939      	ldr	r1, [r7, #16]
 800149e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 f88a 	bl	80015bc <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 80014a8:	4b43      	ldr	r3, [pc, #268]	@ (80015b8 <FLASH_IF_INT_Write+0x20c>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014b2:	4413      	add	r3, r2
 80014b4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80014b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80014b8:	b292      	uxth	r2, r2
 80014ba:	4618      	mov	r0, r3
 80014bc:	f01a f868 	bl	801b590 <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 f896 	bl	80015f8 <FLASH_IF_INT_Erase>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 80014d2:	23fe      	movs	r3, #254	@ 0xfe
 80014d4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break; /* exit for loop */
 80014d8:	e05d      	b.n	8001596 <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	627b      	str	r3, [r7, #36]	@ 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 80014de:	4b36      	ldr	r3, [pc, #216]	@ (80015b8 <FLASH_IF_INT_Write+0x20c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 80014e4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80014e8:	61fb      	str	r3, [r7, #28]
 80014ea:	e005      	b.n	80014f8 <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 80014ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014ee:	627b      	str	r3, [r7, #36]	@ 0x24
          current_source = uSource;
 80014f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014f2:	623b      	str	r3, [r7, #32]
          current_length = length;
 80014f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014f6:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80014f8:	2300      	movs	r3, #0
 80014fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014fc:	e026      	b.n	800154c <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 80014fe:	6a3a      	ldr	r2, [r7, #32]
 8001500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001502:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 8001504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001508:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800150a:	2001      	movs	r0, #1
 800150c:	f003 fb7e 	bl	8004c0c <HAL_FLASH_Program>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d113      	bne.n	800153e <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 8001516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001518:	e9d3 0100 	ldrd	r0, r1, [r3]
 800151c:	6a3a      	ldr	r2, [r7, #32]
 800151e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001520:	4413      	add	r3, r2
 8001522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001526:	4299      	cmp	r1, r3
 8001528:	bf08      	it	eq
 800152a:	4290      	cmpeq	r0, r2
 800152c:	d003      	beq.n	8001536 <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 800152e:	23fc      	movs	r3, #252	@ 0xfc
 8001530:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
              break;
 8001534:	e00e      	b.n	8001554 <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 8001536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001538:	3308      	adds	r3, #8
 800153a:	627b      	str	r3, [r7, #36]	@ 0x24
 800153c:	e003      	b.n	8001546 <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 800153e:	23fc      	movs	r3, #252	@ 0xfc
 8001540:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break;
 8001544:	e006      	b.n	8001554 <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001548:	3308      	adds	r3, #8
 800154a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800154c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	429a      	cmp	r2, r3
 8001552:	d3d4      	bcc.n	80014fe <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 8001554:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8001558:	2b00      	cmp	r3, #0
 800155a:	d11b      	bne.n	8001594 <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 800155c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800155e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001560:	4413      	add	r3, r2
 8001562:	63bb      	str	r3, [r7, #56]	@ 0x38
        uSource += length;
 8001564:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001568:	4413      	add	r3, r2
 800156a:	637b      	str	r3, [r7, #52]	@ 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001576:	bf28      	it	cs
 8001578:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 800157c:	633b      	str	r3, [r7, #48]	@ 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 800157e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001580:	3301      	adds	r3, #1
 8001582:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	4413      	add	r3, r2
 800158a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800158c:	429a      	cmp	r2, r3
 800158e:	f4ff af6f 	bcc.w	8001470 <FLASH_IF_INT_Write+0xc4>
 8001592:	e000      	b.n	8001596 <FLASH_IF_INT_Write+0x1ea>
          break;
 8001594:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001596:	f003 fb9f 	bl	8004cd8 <HAL_FLASH_Lock>
 800159a:	e002      	b.n	80015a2 <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 800159c:	23fb      	movs	r3, #251	@ 0xfb
 800159e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 80015a2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3740      	adds	r7, #64	@ 0x40
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	1fff75e0 	.word	0x1fff75e0
 80015b4:	03fffc00 	.word	0x03fffc00
 80015b8:	200001dc 	.word	0x200001dc

080015bc <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 80015c8:	2300      	movs	r3, #0
 80015ca:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d002      	beq.n	80015d8 <FLASH_IF_INT_Read+0x1c>
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d102      	bne.n	80015de <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 80015d8:	f06f 0305 	mvn.w	r3, #5
 80015dc:	e008      	b.n	80015f0 <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	461a      	mov	r2, r3
 80015e4:	68b9      	ldr	r1, [r7, #8]
 80015e6:	68f8      	ldr	r0, [r7, #12]
 80015e8:	f019 ffd2 	bl	801b590 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 80015ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001602:	2300      	movs	r3, #0
 8001604:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d102      	bne.n	800161e <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 8001618:	f06f 0305 	mvn.w	r3, #5
 800161c:	e04e      	b.n	80016bc <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 800161e:	f000 f87b 	bl	8001718 <FLASH_IF_INT_Clear_Error>
 8001622:	4603      	mov	r3, r0
 8001624:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 8001626:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d144      	bne.n	80016b8 <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 800162e:	f003 fb31 	bl	8004c94 <HAL_FLASH_Unlock>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d13d      	bne.n	80016b4 <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001638:	2302      	movs	r3, #2
 800163a:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 8001642:	4b20      	ldr	r3, [pc, #128]	@ (80016c4 <FLASH_IF_INT_Erase+0xcc>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	0299      	lsls	r1, r3, #10
 8001648:	4b1f      	ldr	r3, [pc, #124]	@ (80016c8 <FLASH_IF_INT_Erase+0xd0>)
 800164a:	400b      	ands	r3, r1
 800164c:	fbb2 f1f3 	udiv	r1, r2, r3
 8001650:	fb01 f303 	mul.w	r3, r1, r3
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	0adb      	lsrs	r3, r3, #11
 8001658:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	4413      	add	r3, r2
 8001660:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8001664:	3b01      	subs	r3, #1
 8001666:	4a17      	ldr	r2, [pc, #92]	@ (80016c4 <FLASH_IF_INT_Erase+0xcc>)
 8001668:	6812      	ldr	r2, [r2, #0]
 800166a:	0291      	lsls	r1, r2, #10
 800166c:	4a16      	ldr	r2, [pc, #88]	@ (80016c8 <FLASH_IF_INT_Erase+0xd0>)
 800166e:	400a      	ands	r2, r1
 8001670:	fbb3 f1f2 	udiv	r1, r3, r2
 8001674:	fb01 f202 	mul.w	r2, r1, r2
 8001678:	1a9b      	subs	r3, r3, r2
 800167a:	0ada      	lsrs	r2, r3, #11
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	3301      	adds	r3, #1
 8001682:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8001684:	f107 0214 	add.w	r2, r7, #20
 8001688:	f107 0308 	add.w	r3, r7, #8
 800168c:	4611      	mov	r1, r2
 800168e:	4618      	mov	r0, r3
 8001690:	f003 fc02 	bl	8004e98 <HAL_FLASHEx_Erase>
 8001694:	4603      	mov	r3, r0
 8001696:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 8001698:	7fbb      	ldrb	r3, [r7, #30]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d007      	beq.n	80016ae <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 800169e:	7fbb      	ldrb	r3, [r7, #30]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d101      	bne.n	80016a8 <FLASH_IF_INT_Erase+0xb0>
 80016a4:	2301      	movs	r3, #1
 80016a6:	e001      	b.n	80016ac <FLASH_IF_INT_Erase+0xb4>
 80016a8:	f06f 0301 	mvn.w	r3, #1
 80016ac:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 80016ae:	f003 fb13 	bl	8004cd8 <HAL_FLASH_Lock>
 80016b2:	e001      	b.n	80016b8 <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 80016b4:	23fb      	movs	r3, #251	@ 0xfb
 80016b6:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 80016b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3720      	adds	r7, #32
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	1fff75e0 	.word	0x1fff75e0
 80016c8:	03fffc00 	.word	0x03fffc00

080016cc <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 80016da:	2300      	movs	r3, #0
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	e011      	b.n	8001704 <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ea:	bf08      	it	eq
 80016ec:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80016f0:	d002      	beq.n	80016f8 <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 80016f2:	2301      	movs	r3, #1
 80016f4:	60fb      	str	r3, [r7, #12]
      break;
 80016f6:	e009      	b.n	800170c <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3308      	adds	r3, #8
 80016fc:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	3308      	adds	r3, #8
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68ba      	ldr	r2, [r7, #8]
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	429a      	cmp	r2, r3
 800170a:	d3e9      	bcc.n	80016e0 <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 800170c:	68fb      	ldr	r3, [r7, #12]
}
 800170e:	4618      	mov	r0, r3
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr

08001718 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 800171e:	23fb      	movs	r3, #251	@ 0xfb
 8001720:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8001722:	f003 fab7 	bl	8004c94 <HAL_FLASH_Unlock>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d110      	bne.n	800174e <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 800172c:	4b0b      	ldr	r3, [pc, #44]	@ (800175c <FLASH_IF_INT_Clear_Error+0x44>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	4a0a      	ldr	r2, [pc, #40]	@ (800175c <FLASH_IF_INT_Clear_Error+0x44>)
 8001732:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8001736:	6193      	str	r3, [r2, #24]
 8001738:	4b08      	ldr	r3, [pc, #32]	@ (800175c <FLASH_IF_INT_Clear_Error+0x44>)
 800173a:	f24c 32fa 	movw	r2, #50170	@ 0xc3fa
 800173e:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001740:	f003 faca 	bl	8004cd8 <HAL_FLASH_Lock>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 800174a:	2300      	movs	r3, #0
 800174c:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	58004000 	.word	0x58004000

08001760 <LL_AHB2_GRP1_EnableClock>:
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001768:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800176c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800176e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4313      	orrs	r3, r2
 8001776:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001778:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800177c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4013      	ands	r3, r2
 8001782:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001784:	68fb      	ldr	r3, [r7, #12]
}
 8001786:	bf00      	nop
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr

08001790 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a4:	2002      	movs	r0, #2
 80017a6:	f7ff ffdb 	bl	8001760 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017aa:	2001      	movs	r0, #1
 80017ac:	f7ff ffd8 	bl	8001760 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b0:	2004      	movs	r0, #4
 80017b2:	f7ff ffd5 	bl	8001760 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 80017b6:	2200      	movs	r2, #0
 80017b8:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 80017bc:	4815      	ldr	r0, [pc, #84]	@ (8001814 <MX_GPIO_Init+0x84>)
 80017be:	f003 fe6d 	bl	800549c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VOUT_EN_Pin|CURROUT_EN_Pin|FE_CTRL1_Pin|FE_CTRL2_Pin
 80017c2:	2200      	movs	r2, #0
 80017c4:	f641 0173 	movw	r1, #6259	@ 0x1873
 80017c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017cc:	f003 fe66 	bl	800549c <HAL_GPIO_WritePin>
                          |FE_CTRL3_Pin|RS485_nRE_Pin|RS485_DE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin|LED1_Pin;
 80017d0:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 80017d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d6:	2301      	movs	r3, #1
 80017d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017de:	2300      	movs	r3, #0
 80017e0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	4619      	mov	r1, r3
 80017e6:	480b      	ldr	r0, [pc, #44]	@ (8001814 <MX_GPIO_Init+0x84>)
 80017e8:	f003 fc2a 	bl	8005040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = VOUT_EN_Pin|CURROUT_EN_Pin|FE_CTRL1_Pin|FE_CTRL2_Pin
 80017ec:	f641 0373 	movw	r3, #6259	@ 0x1873
 80017f0:	607b      	str	r3, [r7, #4]
                          |FE_CTRL3_Pin|RS485_nRE_Pin|RS485_DE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f2:	2301      	movs	r3, #1
 80017f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fe:	1d3b      	adds	r3, r7, #4
 8001800:	4619      	mov	r1, r3
 8001802:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001806:	f003 fc1b 	bl	8005040 <HAL_GPIO_Init>

}
 800180a:	bf00      	nop
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	48000400 	.word	0x48000400

08001818 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001820:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001828:	f023 0218 	bic.w	r2, r3, #24
 800182c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4313      	orrs	r3, r2
 8001834:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr

08001842 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001846:	f001 fb93 	bl	8002f70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800184a:	f000 f807 	bl	800185c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800184e:	f7ff ff9f 	bl	8001790 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001852:	f008 fc57 	bl	800a104 <MX_LoRaWAN_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8001856:	f008 fc5d 	bl	800a114 <MX_LoRaWAN_Process>
 800185a:	e7fc      	b.n	8001856 <main+0x14>

0800185c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b09a      	sub	sp, #104	@ 0x68
 8001860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001862:	f107 0320 	add.w	r3, r7, #32
 8001866:	2248      	movs	r2, #72	@ 0x48
 8001868:	2100      	movs	r1, #0
 800186a:	4618      	mov	r0, r3
 800186c:	f01b f952 	bl	801cb14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001870:	f107 0308 	add.w	r3, r7, #8
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
 8001880:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001882:	f003 fe3b 	bl	80054fc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001886:	2000      	movs	r0, #0
 8001888:	f7ff ffc6 	bl	8001818 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800188c:	4b26      	ldr	r3, [pc, #152]	@ (8001928 <SystemClock_Config+0xcc>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001894:	4a24      	ldr	r2, [pc, #144]	@ (8001928 <SystemClock_Config+0xcc>)
 8001896:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800189a:	6013      	str	r3, [r2, #0]
 800189c:	4b22      	ldr	r3, [pc, #136]	@ (8001928 <SystemClock_Config+0xcc>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80018a4:	607b      	str	r3, [r7, #4]
 80018a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80018a8:	2324      	movs	r3, #36	@ 0x24
 80018aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80018ac:	2381      	movs	r3, #129	@ 0x81
 80018ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80018b0:	2301      	movs	r3, #1
 80018b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80018b4:	2300      	movs	r3, #0
 80018b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80018b8:	2360      	movs	r3, #96	@ 0x60
 80018ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018bc:	2302      	movs	r3, #2
 80018be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80018c0:	2301      	movs	r3, #1
 80018c2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80018c4:	2300      	movs	r3, #0
 80018c6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 24;
 80018c8:	2318      	movs	r3, #24
 80018ca:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018d2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80018d6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018dc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018de:	f107 0320 	add.w	r3, r7, #32
 80018e2:	4618      	mov	r0, r3
 80018e4:	f004 f956 	bl	8005b94 <HAL_RCC_OscConfig>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80018ee:	f000 f81d 	bl	800192c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80018f2:	234f      	movs	r3, #79	@ 0x4f
 80018f4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018f6:	2303      	movs	r3, #3
 80018f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001902:	2300      	movs	r3, #0
 8001904:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800190a:	f107 0308 	add.w	r3, r7, #8
 800190e:	2102      	movs	r1, #2
 8001910:	4618      	mov	r0, r3
 8001912:	f004 fcc1 	bl	8006298 <HAL_RCC_ClockConfig>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800191c:	f000 f806 	bl	800192c <Error_Handler>
  }
}
 8001920:	bf00      	nop
 8001922:	3768      	adds	r7, #104	@ 0x68
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	58000400 	.word	0x58000400

0800192c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001930:	b672      	cpsid	i
}
 8001932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001934:	bf00      	nop
 8001936:	e7fd      	b.n	8001934 <Error_Handler+0x8>

08001938 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800193c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001940:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001944:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001948:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800194c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr

08001958 <LL_APB1_GRP1_EnableClock>:
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001960:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001964:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001966:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4313      	orrs	r3, r2
 800196e:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001970:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001974:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4013      	ands	r3, r2
 800197a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800197c:	68fb      	ldr	r3, [r7, #12]
}
 800197e:	bf00      	nop
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08c      	sub	sp, #48	@ 0x30
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 800198e:	1d3b      	adds	r3, r7, #4
 8001990:	222c      	movs	r2, #44	@ 0x2c
 8001992:	2100      	movs	r1, #0
 8001994:	4618      	mov	r0, r3
 8001996:	f01b f8bd 	bl	801cb14 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800199a:	4b22      	ldr	r3, [pc, #136]	@ (8001a24 <MX_RTC_Init+0x9c>)
 800199c:	4a22      	ldr	r2, [pc, #136]	@ (8001a28 <MX_RTC_Init+0xa0>)
 800199e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80019a0:	4b20      	ldr	r3, [pc, #128]	@ (8001a24 <MX_RTC_Init+0x9c>)
 80019a2:	221f      	movs	r2, #31
 80019a4:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80019a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a24 <MX_RTC_Init+0x9c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80019ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001a24 <MX_RTC_Init+0x9c>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80019b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a24 <MX_RTC_Init+0x9c>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80019b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a24 <MX_RTC_Init+0x9c>)
 80019ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019be:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80019c0:	4b18      	ldr	r3, [pc, #96]	@ (8001a24 <MX_RTC_Init+0x9c>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 80019c6:	4b17      	ldr	r3, [pc, #92]	@ (8001a24 <MX_RTC_Init+0x9c>)
 80019c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019cc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80019ce:	4815      	ldr	r0, [pc, #84]	@ (8001a24 <MX_RTC_Init+0x9c>)
 80019d0:	f005 f91e 	bl	8006c10 <HAL_RTC_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_RTC_Init+0x56>
  {
    Error_Handler();
 80019da:	f7ff ffa7 	bl	800192c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 80019de:	4811      	ldr	r0, [pc, #68]	@ (8001a24 <MX_RTC_Init+0x9c>)
 80019e0:	f005 fc14 	bl	800720c <HAL_RTCEx_SetSSRU_IT>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80019ea:	f7ff ff9f 	bl	800192c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80019ee:	2300      	movs	r3, #0
 80019f0:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80019fa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80019fe:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001a00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001a06:	1d3b      	adds	r3, r7, #4
 8001a08:	2200      	movs	r2, #0
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4805      	ldr	r0, [pc, #20]	@ (8001a24 <MX_RTC_Init+0x9c>)
 8001a0e:	f005 f981 	bl	8006d14 <HAL_RTC_SetAlarm_IT>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001a18:	f7ff ff88 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a1c:	bf00      	nop
 8001a1e:	3730      	adds	r7, #48	@ 0x30
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	200001e0 	.word	0x200001e0
 8001a28:	40002800 	.word	0x40002800

08001a2c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b090      	sub	sp, #64	@ 0x40
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a34:	f107 0308 	add.w	r3, r7, #8
 8001a38:	2238      	movs	r2, #56	@ 0x38
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f01b f869 	bl	801cb14 <memset>
  if(rtcHandle->Instance==RTC)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a16      	ldr	r2, [pc, #88]	@ (8001aa0 <HAL_RTC_MspInit+0x74>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d125      	bne.n	8001a98 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a4c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a50:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001a52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a56:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a58:	f107 0308 	add.w	r3, r7, #8
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f004 ffbd 	bl	80069dc <HAL_RCCEx_PeriphCLKConfig>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001a68:	f7ff ff60 	bl	800192c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a6c:	f7ff ff64 	bl	8001938 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001a70:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001a74:	f7ff ff70 	bl	8001958 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	2002      	movs	r0, #2
 8001a7e:	f002 fc98 	bl	80043b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001a82:	2002      	movs	r0, #2
 8001a84:	f002 fcaf 	bl	80043e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	202a      	movs	r0, #42	@ 0x2a
 8001a8e:	f002 fc90 	bl	80043b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001a92:	202a      	movs	r0, #42	@ 0x2a
 8001a94:	f002 fca7 	bl	80043e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001a98:	bf00      	nop
 8001a9a:	3740      	adds	r7, #64	@ 0x40
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40002800 	.word	0x40002800

08001aa4 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001aa8:	4b03      	ldr	r3, [pc, #12]	@ (8001ab8 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr
 8001ab8:	58000400 	.word	0x58000400

08001abc <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr

08001ac8 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr

08001ad4 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001ad8:	f001 fab6 	bl	8003048 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001adc:	f7ff ffe2 	bl	8001aa4 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	f003 fd9d 	bl	8005620 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8001aee:	f001 fab9 	bl	8003064 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8001af2:	f001 f8ab 	bl	8002c4c <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}

08001afa <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8001afe:	f001 faa3 	bl	8003048 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001b02:	2101      	movs	r1, #1
 8001b04:	2000      	movs	r0, #0
 8001b06:	f003 fd07 	bl	8005518 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001b12:	f001 faa7 	bl	8003064 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr

08001b26 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b2a:	bf00      	nop
 8001b2c:	e7fd      	b.n	8001b2a <NMI_Handler+0x4>

08001b2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b32:	bf00      	nop
 8001b34:	e7fd      	b.n	8001b32 <HardFault_Handler+0x4>

08001b36 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b3a:	bf00      	nop
 8001b3c:	e7fd      	b.n	8001b3a <MemManage_Handler+0x4>

08001b3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b42:	bf00      	nop
 8001b44:	e7fd      	b.n	8001b42 <BusFault_Handler+0x4>

08001b46 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b4a:	bf00      	nop
 8001b4c:	e7fd      	b.n	8001b4a <UsageFault_Handler+0x4>

08001b4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr

08001b5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr

08001b66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr

08001b72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b76:	f001 fa55 	bl	8003024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001b84:	4802      	ldr	r0, [pc, #8]	@ (8001b90 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001b86:	f005 fb7d 	bl	8007284 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	200001e0 	.word	0x200001e0

08001b94 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 4 Interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001b98:	4802      	ldr	r0, [pc, #8]	@ (8001ba4 <DMA1_Channel4_IRQHandler+0x10>)
 8001b9a:	f002 fec7 	bl	800492c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000354 	.word	0x20000354

08001ba8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001bac:	4802      	ldr	r0, [pc, #8]	@ (8001bb8 <DMA1_Channel5_IRQHandler+0x10>)
 8001bae:	f002 febd 	bl	800492c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	200003b4 	.word	0x200003b4

08001bbc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001bc0:	4802      	ldr	r0, [pc, #8]	@ (8001bcc <USART1_IRQHandler+0x10>)
 8001bc2:	f006 f9a9 	bl	8007f18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	2000022c 	.word	0x2000022c

08001bd0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001bd4:	4802      	ldr	r0, [pc, #8]	@ (8001be0 <USART2_IRQHandler+0x10>)
 8001bd6:	f006 f99f 	bl	8007f18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	200002c0 	.word	0x200002c0

08001be4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001be8:	4802      	ldr	r0, [pc, #8]	@ (8001bf4 <RTC_Alarm_IRQHandler+0x10>)
 8001bea:	f005 f9fb 	bl	8006fe4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	200001e0 	.word	0x200001e0

08001bf8 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001bfc:	4802      	ldr	r0, [pc, #8]	@ (8001c08 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001bfe:	f005 feaf 	bl	8007960 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000218 	.word	0x20000218

08001c0c <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001c14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c18:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001c1a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001c24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c28:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c30:	68fb      	ldr	r3, [r7, #12]
}
 8001c32:	bf00      	nop
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr

08001c3c <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001c40:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <MX_SUBGHZ_Init+0x20>)
 8001c42:	2208      	movs	r2, #8
 8001c44:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001c46:	4805      	ldr	r0, [pc, #20]	@ (8001c5c <MX_SUBGHZ_Init+0x20>)
 8001c48:	f005 fc08 	bl	800745c <HAL_SUBGHZ_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001c52:	f7ff fe6b 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000218 	.word	0x20000218

08001c60 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001c68:	2001      	movs	r0, #1
 8001c6a:	f7ff ffcf 	bl	8001c0c <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2100      	movs	r1, #0
 8001c72:	2032      	movs	r0, #50	@ 0x32
 8001c74:	f002 fb9d 	bl	80043b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001c78:	2032      	movs	r0, #50	@ 0x32
 8001c7a:	f002 fbb4 	bl	80043e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001c8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001c98:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	608b      	str	r3, [r1, #8]
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001cb0:	4b02      	ldr	r3, [pc, #8]	@ (8001cbc <LL_FLASH_GetUDN+0x10>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr
 8001cbc:	1fff7580 	.word	0x1fff7580

08001cc0 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001cc4:	4b03      	ldr	r3, [pc, #12]	@ (8001cd4 <LL_FLASH_GetDeviceID+0x14>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	b2db      	uxtb	r3, r3
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	1fff7584 	.word	0x1fff7584

08001cd8 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001cdc:	4b03      	ldr	r3, [pc, #12]	@ (8001cec <LL_FLASH_GetSTCompanyID+0x14>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	0a1b      	lsrs	r3, r3, #8
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	1fff7584 	.word	0x1fff7584

08001cf0 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	f7ff ffc6 	bl	8001c86 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001cfa:	f01a f9d5 	bl	801c0a8 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001cfe:	4b10      	ldr	r3, [pc, #64]	@ (8001d40 <SystemApp_Init+0x50>)
 8001d00:	2201      	movs	r2, #1
 8001d02:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8001d04:	f000 f99a 	bl	800203c <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001d08:	f01a fc5e 	bl	801c5c8 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001d0c:	480d      	ldr	r0, [pc, #52]	@ (8001d44 <SystemApp_Init+0x54>)
 8001d0e:	f01a fd09 	bl	801c724 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001d12:	4b0d      	ldr	r3, [pc, #52]	@ (8001d48 <SystemApp_Init+0x58>)
 8001d14:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001d18:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001d1a:	2003      	movs	r0, #3
 8001d1c:	f01a fd10 	bl	801c740 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001d20:	f7ff f990 	bl	8001044 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001d24:	f000 faa2 	bl	800226c <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001d28:	f019 fb8c 	bl	801b444 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	2001      	movs	r0, #1
 8001d30:	f019 fbc8 	bl	801b4c4 <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001d34:	2101      	movs	r1, #1
 8001d36:	2001      	movs	r0, #1
 8001d38:	f019 fb94 	bl	801b464 <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001d3c:	bf00      	nop
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20000224 	.word	0x20000224
 8001d44:	08001f19 	.word	0x08001f19
 8001d48:	58004000 	.word	0x58004000

08001d4c <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8001d50:	f019 fbe8 	bl	801b524 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8001d54:	bf00      	nop
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001d62:	f7ff f9ef 	bl	8001144 <SYS_GetBatteryLevel>
 8001d66:	4603      	mov	r3, r0
 8001d68:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8001d6a:	88bb      	ldrh	r3, [r7, #4]
 8001d6c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d902      	bls.n	8001d7a <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8001d74:	23fe      	movs	r3, #254	@ 0xfe
 8001d76:	71fb      	strb	r3, [r7, #7]
 8001d78:	e014      	b.n	8001da4 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8001d7a:	88bb      	ldrh	r3, [r7, #4]
 8001d7c:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8001d80:	d202      	bcs.n	8001d88 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8001d82:	2300      	movs	r3, #0
 8001d84:	71fb      	strb	r3, [r7, #7]
 8001d86:	e00d      	b.n	8001da4 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001d88:	88bb      	ldrh	r3, [r7, #4]
 8001d8a:	f5a3 63e1 	sub.w	r3, r3, #1800	@ 0x708
 8001d8e:	461a      	mov	r2, r3
 8001d90:	4613      	mov	r3, r2
 8001d92:	01db      	lsls	r3, r3, #7
 8001d94:	1a9b      	subs	r3, r3, r2
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4b05      	ldr	r3, [pc, #20]	@ (8001db0 <GetBatteryLevel+0x58>)
 8001d9c:	fba3 2302 	umull	r2, r3, r3, r2
 8001da0:	09db      	lsrs	r3, r3, #7
 8001da2:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8001da4:	79fb      	ldrb	r3, [r7, #7]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	1b4e81b5 	.word	0x1b4e81b5

08001db4 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b088      	sub	sp, #32
 8001db8:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 8001dbe:	1d3b      	adds	r3, r7, #4
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f000 fa21 	bl	8002208 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe fea7 	bl	8000b1c <__aeabi_f2iz>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001dd2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3720      	adds	r7, #32
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8001dde:	b590      	push	{r4, r7, lr}
 8001de0:	b087      	sub	sp, #28
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8001dea:	f7ff ff5f 	bl	8001cac <LL_FLASH_GetUDN>
 8001dee:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df6:	d138      	bne.n	8001e6a <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001df8:	f001 f942 	bl	8003080 <HAL_GetUIDw0>
 8001dfc:	4604      	mov	r4, r0
 8001dfe:	f001 f953 	bl	80030a8 <HAL_GetUIDw2>
 8001e02:	4603      	mov	r3, r0
 8001e04:	4423      	add	r3, r4
 8001e06:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001e08:	f001 f944 	bl	8003094 <HAL_GetUIDw1>
 8001e0c:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	0e1a      	lsrs	r2, r3, #24
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3307      	adds	r3, #7
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	0c1a      	lsrs	r2, r3, #16
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3306      	adds	r3, #6
 8001e22:	b2d2      	uxtb	r2, r2
 8001e24:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	0a1a      	lsrs	r2, r3, #8
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3305      	adds	r3, #5
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	3304      	adds	r3, #4
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	0e1a      	lsrs	r2, r3, #24
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3303      	adds	r3, #3
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	0c1a      	lsrs	r2, r3, #16
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3302      	adds	r3, #2
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	0a1a      	lsrs	r2, r3, #8
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8001e68:	e031      	b.n	8001ece <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3307      	adds	r3, #7
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	0a1a      	lsrs	r2, r3, #8
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3306      	adds	r3, #6
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	0c1a      	lsrs	r2, r3, #16
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3305      	adds	r3, #5
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	0e1a      	lsrs	r2, r3, #24
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3304      	adds	r3, #4
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8001e98:	f7ff ff12 	bl	8001cc0 <LL_FLASH_GetDeviceID>
 8001e9c:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3303      	adds	r3, #3
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8001ea8:	f7ff ff16 	bl	8001cd8 <LL_FLASH_GetSTCompanyID>
 8001eac:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3302      	adds	r3, #2
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	0a1a      	lsrs	r2, r3, #8
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	0c1b      	lsrs	r3, r3, #16
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	701a      	strb	r2, [r3, #0]
}
 8001ece:	bf00      	nop
 8001ed0:	371c      	adds	r7, #28
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd90      	pop	{r4, r7, pc}

08001ed6 <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 8001ed6:	b590      	push	{r4, r7, lr}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 8001ede:	f7ff fee5 	bl	8001cac <LL_FLASH_GetUDN>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef0:	d10d      	bne.n	8001f0e <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001ef2:	f001 f8c5 	bl	8003080 <HAL_GetUIDw0>
 8001ef6:	4604      	mov	r4, r0
 8001ef8:	f001 f8cc 	bl	8003094 <HAL_GetUIDw1>
 8001efc:	4603      	mov	r3, r0
 8001efe:	405c      	eors	r4, r3
 8001f00:	f001 f8d2 	bl	80030a8 <HAL_GetUIDw2>
 8001f04:	4603      	mov	r3, r0
 8001f06:	ea84 0203 	eor.w	r2, r4, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd90      	pop	{r4, r7, pc}
	...

08001f18 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af02      	add	r7, sp, #8
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8001f22:	f107 0308 	add.w	r3, r7, #8
 8001f26:	4618      	mov	r0, r3
 8001f28:	f019 fc0c 	bl	801b744 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001f32:	9200      	str	r2, [sp, #0]
 8001f34:	4a07      	ldr	r2, [pc, #28]	@ (8001f54 <TimestampNow+0x3c>)
 8001f36:	2110      	movs	r1, #16
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f81d 	bl	8001f78 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7fe f91a 	bl	8000178 <strlen>
 8001f44:	4603      	mov	r3, r0
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8001f4c:	bf00      	nop
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	0801cc88 	.word	0x0801cc88

08001f58 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	2002      	movs	r0, #2
 8001f60:	f019 fa80 	bl	801b464 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8001f64:	bf00      	nop
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	2002      	movs	r0, #2
 8001f70:	f019 fa78 	bl	801b464 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8001f74:	bf00      	nop
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001f78:	b40c      	push	{r2, r3}
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b084      	sub	sp, #16
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
 8001f82:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001f84:	f107 031c 	add.w	r3, r7, #28
 8001f88:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001f8a:	6839      	ldr	r1, [r7, #0]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f019 fda9 	bl	801bae8 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001f96:	bf00      	nop
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001fa0:	b002      	add	sp, #8
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001fae:	4b06      	ldr	r3, [pc, #24]	@ (8001fc8 <HAL_GetTick+0x24>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d002      	beq.n	8001fbc <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8001fb6:	f000 fa25 	bl	8002404 <TIMER_IF_GetTimerValue>
 8001fba:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8001fbc:	687b      	ldr	r3, [r7, #4]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000224 	.word	0x20000224

08001fcc <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 fa9b 	bl	8002512 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <LL_AHB2_GRP1_EnableClock>:
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001fec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ff0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001ff2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ffc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002000:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4013      	ands	r3, r2
 8002006:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002008:	68fb      	ldr	r3, [r7, #12]
}
 800200a:	bf00      	nop
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr

08002014 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800201c:	4b06      	ldr	r3, [pc, #24]	@ (8002038 <LL_EXTI_EnableIT_32_63+0x24>)
 800201e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002022:	4905      	ldr	r1, [pc, #20]	@ (8002038 <LL_EXTI_EnableIT_32_63+0x24>)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4313      	orrs	r3, r2
 8002028:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	58000800 	.word	0x58000800

0800203c <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8002042:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002046:	f7ff ffe5 	bl	8002014 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 800204a:	f001 f837 	bl	80030bc <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 800204e:	f001 f83b 	bl	80030c8 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8002052:	f001 f83f 	bl	80030d4 <HAL_DBGMCU_EnableDBGStandbyMode>
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8002056:	1d3b      	adds	r3, r7, #4
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	60da      	str	r2, [r3, #12]
 8002062:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8002064:	2301      	movs	r3, #1
 8002066:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 800206c:	2303      	movs	r3, #3
 800206e:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8002070:	2002      	movs	r0, #2
 8002072:	f7ff ffb7 	bl	8001fe4 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8002076:	2002      	movs	r0, #2
 8002078:	f7ff ffb4 	bl	8001fe4 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 800207c:	2002      	movs	r0, #2
 800207e:	f7ff ffb1 	bl	8001fe4 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 8002082:	2001      	movs	r0, #1
 8002084:	f7ff ffae 	bl	8001fe4 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8002088:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800208c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 800208e:	1d3b      	adds	r3, r7, #4
 8002090:	4619      	mov	r1, r3
 8002092:	485c      	ldr	r0, [pc, #368]	@ (8002204 <DBG_Init+0x1c8>)
 8002094:	f002 ffd4 	bl	8005040 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8002098:	2380      	movs	r3, #128	@ 0x80
 800209a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 800209c:	1d3b      	adds	r3, r7, #4
 800209e:	4619      	mov	r1, r3
 80020a0:	4858      	ldr	r0, [pc, #352]	@ (8002204 <DBG_Init+0x1c8>)
 80020a2:	f002 ffcd 	bl	8005040 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 80020a6:	2320      	movs	r3, #32
 80020a8:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 80020aa:	1d3b      	adds	r3, r7, #4
 80020ac:	4619      	mov	r1, r3
 80020ae:	4855      	ldr	r0, [pc, #340]	@ (8002204 <DBG_Init+0x1c8>)
 80020b0:	f002 ffc6 	bl	8005040 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 80020b4:	2301      	movs	r3, #1
 80020b6:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 80020b8:	1d3b      	adds	r3, r7, #4
 80020ba:	4619      	mov	r1, r3
 80020bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020c0:	f002 ffbe 	bl	8005040 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 80020c4:	2200      	movs	r2, #0
 80020c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020ca:	484e      	ldr	r0, [pc, #312]	@ (8002204 <DBG_Init+0x1c8>)
 80020cc:	f003 f9e6 	bl	800549c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 80020d0:	2200      	movs	r2, #0
 80020d2:	2180      	movs	r1, #128	@ 0x80
 80020d4:	484b      	ldr	r0, [pc, #300]	@ (8002204 <DBG_Init+0x1c8>)
 80020d6:	f003 f9e1 	bl	800549c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 80020da:	2200      	movs	r2, #0
 80020dc:	2120      	movs	r1, #32
 80020de:	4849      	ldr	r0, [pc, #292]	@ (8002204 <DBG_Init+0x1c8>)
 80020e0:	f003 f9dc 	bl	800549c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 80020e4:	2200      	movs	r2, #0
 80020e6:	2101      	movs	r1, #1
 80020e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020ec:	f003 f9d6 	bl	800549c <HAL_GPIO_WritePin>

  /* HW alternate functions for monitoring RF */

#if (DEBUG_SUBGHZSPI_MONITORING_ENABLED == 1)
  /*spi dbg*/
  GPIO_InitStruct.Pin    = (GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7);
 80020f0:	23f0      	movs	r3, #240	@ 0xf0
 80020f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 80020f4:	2302      	movs	r3, #2
 80020f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 80020fc:	2303      	movs	r3, #3
 80020fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_SUBGHZSPI;
 8002100:	230d      	movs	r3, #13
 8002102:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002104:	2001      	movs	r0, #1
 8002106:	f7ff ff6d 	bl	8001fe4 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210a:	1d3b      	adds	r3, r7, #4
 800210c:	4619      	mov	r1, r3
 800210e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002112:	f002 ff95 	bl	8005040 <HAL_GPIO_Init>
#endif /* DEBUG_SUBGHZSPI_MONITORING_ENABLED */

#if (DEBUG_RF_NRESET_ENABLED == 1)
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002116:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800211a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211c:	2302      	movs	r3, #2
 800211e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002124:	2303      	movs	r3, #3
 8002126:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF13_DEBUG_RF;
 8002128:	230d      	movs	r3, #13
 800212a:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800212c:	2001      	movs	r0, #1
 800212e:	f7ff ff59 	bl	8001fe4 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002132:	1d3b      	adds	r3, r7, #4
 8002134:	4619      	mov	r1, r3
 8002136:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800213a:	f002 ff81 	bl	8005040 <HAL_GPIO_Init>
#endif /* DEBUG_RF_NRESET_ENABLED */

#if (DEBUG_RF_HSE32RDY_ENABLED == 1)
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800213e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002142:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002144:	2302      	movs	r3, #2
 8002146:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002148:	2300      	movs	r3, #0
 800214a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214c:	2303      	movs	r3, #3
 800214e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF13_DEBUG_RF;
 8002150:	230d      	movs	r3, #13
 8002152:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002154:	2001      	movs	r0, #1
 8002156:	f7ff ff45 	bl	8001fe4 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800215a:	1d3b      	adds	r3, r7, #4
 800215c:	4619      	mov	r1, r3
 800215e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002162:	f002 ff6d 	bl	8005040 <HAL_GPIO_Init>
#endif /* DEBUG_RF_HSE32RDY_ENABLED */

#if (DEBUG_RF_SMPSRDY_ENABLED == 1)
  GPIO_InitStruct.Pin    = (GPIO_PIN_2);
 8002166:	2304      	movs	r3, #4
 8002168:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 800216a:	2302      	movs	r3, #2
 800216c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 800216e:	2300      	movs	r3, #0
 8002170:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8002172:	2303      	movs	r3, #3
 8002174:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_RF;
 8002176:	230d      	movs	r3, #13
 8002178:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800217a:	2002      	movs	r0, #2
 800217c:	f7ff ff32 	bl	8001fe4 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002180:	1d3b      	adds	r3, r7, #4
 8002182:	4619      	mov	r1, r3
 8002184:	481f      	ldr	r0, [pc, #124]	@ (8002204 <DBG_Init+0x1c8>)
 8002186:	f002 ff5b 	bl	8005040 <HAL_GPIO_Init>
#endif /* DEBUG_RF_SMPSRDY_ENABLED */

#if (DEBUG_RF_LDORDY_ENABLED == 1)
  GPIO_InitStruct.Pin    = (GPIO_PIN_4);
 800218a:	2310      	movs	r3, #16
 800218c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 800218e:	2302      	movs	r3, #2
 8002190:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8002196:	2303      	movs	r3, #3
 8002198:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_RF;
 800219a:	230d      	movs	r3, #13
 800219c:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800219e:	2002      	movs	r0, #2
 80021a0:	f7ff ff20 	bl	8001fe4 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a4:	1d3b      	adds	r3, r7, #4
 80021a6:	4619      	mov	r1, r3
 80021a8:	4816      	ldr	r0, [pc, #88]	@ (8002204 <DBG_Init+0x1c8>)
 80021aa:	f002 ff49 	bl	8005040 <HAL_GPIO_Init>
#endif /* DEBUG_RF_LDORDY_ENABLED */

#if (DEBUG_RF_DTB1_ENABLED == 1)
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80021ae:	2308      	movs	r3, #8
 80021b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b2:	2302      	movs	r3, #2
 80021b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ba:	2303      	movs	r3, #3
 80021bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF13_DEBUG_RF;
 80021be:	230d      	movs	r3, #13
 80021c0:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c2:	2002      	movs	r0, #2
 80021c4:	f7ff ff0e 	bl	8001fe4 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c8:	1d3b      	adds	r3, r7, #4
 80021ca:	4619      	mov	r1, r3
 80021cc:	480d      	ldr	r0, [pc, #52]	@ (8002204 <DBG_Init+0x1c8>)
 80021ce:	f002 ff37 	bl	8005040 <HAL_GPIO_Init>
#endif /* DEBUG_RF_DTB1_ENABLED */

#if (DEBUG_RF_BUSY_ENABLED == 1)
  /* Busy */
  GPIO_InitStruct.Pin    = (GPIO_PIN_12);
 80021d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 80021d8:	2302      	movs	r3, #2
 80021da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e0:	2303      	movs	r3, #3
 80021e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate  = GPIO_AF6_RF_BUSY;
 80021e4:	2306      	movs	r3, #6
 80021e6:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 80021e8:	2001      	movs	r0, #1
 80021ea:	f7ff fefb 	bl	8001fe4 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ee:	1d3b      	adds	r3, r7, #4
 80021f0:	4619      	mov	r1, r3
 80021f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021f6:	f002 ff23 	bl	8005040 <HAL_GPIO_Init>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 80021fa:	bf00      	nop
 80021fc:	3718      	adds	r7, #24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	48000400 	.word	0x48000400

08002208 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8002210:	4b11      	ldr	r3, [pc, #68]	@ (8002258 <EnvSensors_Read+0x50>)
 8002212:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8002214:	4b11      	ldr	r3, [pc, #68]	@ (800225c <EnvSensors_Read+0x54>)
 8002216:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8002218:	4b11      	ldr	r3, [pc, #68]	@ (8002260 <EnvSensors_Read+0x58>)
 800221a:	60fb      	str	r3, [r7, #12]
#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &PRESSURE_Value);
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_TEMPERATURE, &TEMPERATURE_Value);
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#else
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 800221c:	f7fe ff20 	bl	8001060 <SYS_GetTemperatureLevel>
 8002220:	4603      	mov	r3, r0
 8002222:	121b      	asrs	r3, r3, #8
 8002224:	b21b      	sxth	r3, r3
 8002226:	4618      	mov	r0, r3
 8002228:	f7fe fad4 	bl	80007d4 <__aeabi_i2f>
 800222c:	4603      	mov	r3, r0
 800222e:	613b      	str	r3, [r7, #16]
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a07      	ldr	r2, [pc, #28]	@ (8002264 <EnvSensors_Read+0x5c>)
 8002246:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a07      	ldr	r2, [pc, #28]	@ (8002268 <EnvSensors_Read+0x60>)
 800224c:	611a      	str	r2, [r3, #16]

  return 0;
 800224e:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8002250:	4618      	mov	r0, r3
 8002252:	3718      	adds	r7, #24
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	42480000 	.word	0x42480000
 800225c:	41900000 	.word	0x41900000
 8002260:	447a0000 	.word	0x447a0000
 8002264:	003e090d 	.word	0x003e090d
 8002268:	000503ab 	.word	0x000503ab

0800226c <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 8002272:	2300      	movs	r3, #0
 8002274:	607b      	str	r3, [r7, #4]

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
 8002276:	687b      	ldr	r3, [r7, #4]
}
 8002278:	4618      	mov	r0, r3
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	bc80      	pop	{r7}
 8002280:	4770      	bx	lr

08002282 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002282:	b480      	push	{r7}
 8002284:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002286:	bf00      	nop
 8002288:	46bd      	mov	sp, r7
 800228a:	bc80      	pop	{r7}
 800228c:	4770      	bx	lr

0800228e <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
}
 800229a:	4618      	mov	r0, r3
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr

080022a4 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 80022ae:	4b14      	ldr	r3, [pc, #80]	@ (8002300 <TIMER_IF_Init+0x5c>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	f083 0301 	eor.w	r3, r3, #1
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d01b      	beq.n	80022f4 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80022bc:	4b11      	ldr	r3, [pc, #68]	@ (8002304 <TIMER_IF_Init+0x60>)
 80022be:	f04f 32ff 	mov.w	r2, #4294967295
 80022c2:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 80022c4:	f7ff fb60 	bl	8001988 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 80022c8:	f000 f856 	bl	8002378 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80022cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022d0:	480c      	ldr	r0, [pc, #48]	@ (8002304 <TIMER_IF_Init+0x60>)
 80022d2:	f004 fe2b 	bl	8006f2c <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80022d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002304 <TIMER_IF_Init+0x60>)
 80022d8:	f04f 32ff 	mov.w	r2, #4294967295
 80022dc:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 80022de:	4809      	ldr	r0, [pc, #36]	@ (8002304 <TIMER_IF_Init+0x60>)
 80022e0:	f004 ff62 	bl	80071a8 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 80022e4:	2000      	movs	r0, #0
 80022e6:	f000 f9d3 	bl	8002690 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 80022ea:	f000 f85f 	bl	80023ac <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 80022ee:	4b04      	ldr	r3, [pc, #16]	@ (8002300 <TIMER_IF_Init+0x5c>)
 80022f0:	2201      	movs	r2, #1
 80022f2:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 80022f4:	79fb      	ldrb	r3, [r7, #7]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20000225 	.word	0x20000225
 8002304:	200001e0 	.word	0x200001e0

08002308 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08e      	sub	sp, #56	@ 0x38
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002310:	2300      	movs	r3, #0
 8002312:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8002316:	f107 0308 	add.w	r3, r7, #8
 800231a:	222c      	movs	r2, #44	@ 0x2c
 800231c:	2100      	movs	r1, #0
 800231e:	4618      	mov	r0, r3
 8002320:	f01a fbf8 	bl	801cb14 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002324:	f000 f828 	bl	8002378 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002328:	4b11      	ldr	r3, [pc, #68]	@ (8002370 <TIMER_IF_StartTimer+0x68>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	4413      	add	r3, r2
 8002330:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002332:	2300      	movs	r3, #0
 8002334:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	43db      	mvns	r3, r3
 800233a:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800233c:	2300      	movs	r3, #0
 800233e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002340:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002344:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002346:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800234a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800234c:	f107 0308 	add.w	r3, r7, #8
 8002350:	2201      	movs	r2, #1
 8002352:	4619      	mov	r1, r3
 8002354:	4807      	ldr	r0, [pc, #28]	@ (8002374 <TIMER_IF_StartTimer+0x6c>)
 8002356:	f004 fcdd 	bl	8006d14 <HAL_RTC_SetAlarm_IT>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002360:	f7ff fae4 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002364:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8002368:	4618      	mov	r0, r3
 800236a:	3738      	adds	r7, #56	@ 0x38
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20000228 	.word	0x20000228
 8002374:	200001e0 	.word	0x200001e0

08002378 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800237e:	2300      	movs	r3, #0
 8002380:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002382:	4b08      	ldr	r3, [pc, #32]	@ (80023a4 <TIMER_IF_StopTimer+0x2c>)
 8002384:	2201      	movs	r2, #1
 8002386:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002388:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800238c:	4806      	ldr	r0, [pc, #24]	@ (80023a8 <TIMER_IF_StopTimer+0x30>)
 800238e:	f004 fdcd 	bl	8006f2c <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002392:	4b05      	ldr	r3, [pc, #20]	@ (80023a8 <TIMER_IF_StopTimer+0x30>)
 8002394:	f04f 32ff 	mov.w	r2, #4294967295
 8002398:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 800239a:	79fb      	ldrb	r3, [r7, #7]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40002800 	.word	0x40002800
 80023a8:	200001e0 	.word	0x200001e0

080023ac <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 80023b0:	f000 f98e 	bl	80026d0 <GetTimerTicks>
 80023b4:	4603      	mov	r3, r0
 80023b6:	4a03      	ldr	r2, [pc, #12]	@ (80023c4 <TIMER_IF_SetTimerContext+0x18>)
 80023b8:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 80023ba:	4b02      	ldr	r3, [pc, #8]	@ (80023c4 <TIMER_IF_SetTimerContext+0x18>)
 80023bc:	681b      	ldr	r3, [r3, #0]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	20000228 	.word	0x20000228

080023c8 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 80023cc:	4b02      	ldr	r3, [pc, #8]	@ (80023d8 <TIMER_IF_GetTimerContext+0x10>)
 80023ce:	681b      	ldr	r3, [r3, #0]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr
 80023d8:	20000228 	.word	0x20000228

080023dc <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 80023e6:	f000 f973 	bl	80026d0 <GetTimerTicks>
 80023ea:	4602      	mov	r2, r0
 80023ec:	4b04      	ldr	r3, [pc, #16]	@ (8002400 <TIMER_IF_GetTimerElapsedTime+0x24>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 80023f4:	687b      	ldr	r3, [r7, #4]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000228 	.word	0x20000228

08002404 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800240a:	2300      	movs	r3, #0
 800240c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 800240e:	4b06      	ldr	r3, [pc, #24]	@ (8002428 <TIMER_IF_GetTimerValue+0x24>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d002      	beq.n	800241c <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8002416:	f000 f95b 	bl	80026d0 <GetTimerTicks>
 800241a:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 800241c:	687b      	ldr	r3, [r7, #4]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20000225 	.word	0x20000225

0800242c <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002432:	2300      	movs	r3, #0
 8002434:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8002436:	2303      	movs	r3, #3
 8002438:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 800243a:	687b      	ldr	r3, [r7, #4]
}
 800243c:	4618      	mov	r0, r3
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr

08002446 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002446:	b5b0      	push	{r4, r5, r7, lr}
 8002448:	b084      	sub	sp, #16
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800244e:	2100      	movs	r1, #0
 8002450:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	2000      	movs	r0, #0
 8002456:	460a      	mov	r2, r1
 8002458:	4603      	mov	r3, r0
 800245a:	0d95      	lsrs	r5, r2, #22
 800245c:	0294      	lsls	r4, r2, #10
 800245e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002462:	f04f 0300 	mov.w	r3, #0
 8002466:	4620      	mov	r0, r4
 8002468:	4629      	mov	r1, r5
 800246a:	f7fe fb9d 	bl	8000ba8 <__aeabi_uldivmod>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4613      	mov	r3, r2
 8002474:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002476:	68fb      	ldr	r3, [r7, #12]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bdb0      	pop	{r4, r5, r7, pc}

08002480 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002480:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002484:	b085      	sub	sp, #20
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800248a:	2100      	movs	r1, #0
 800248c:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	2000      	movs	r0, #0
 8002492:	460c      	mov	r4, r1
 8002494:	4605      	mov	r5, r0
 8002496:	4620      	mov	r0, r4
 8002498:	4629      	mov	r1, r5
 800249a:	f04f 0a00 	mov.w	sl, #0
 800249e:	f04f 0b00 	mov.w	fp, #0
 80024a2:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 80024a6:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 80024aa:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 80024ae:	4650      	mov	r0, sl
 80024b0:	4659      	mov	r1, fp
 80024b2:	1b02      	subs	r2, r0, r4
 80024b4:	eb61 0305 	sbc.w	r3, r1, r5
 80024b8:	f04f 0000 	mov.w	r0, #0
 80024bc:	f04f 0100 	mov.w	r1, #0
 80024c0:	0099      	lsls	r1, r3, #2
 80024c2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80024c6:	0090      	lsls	r0, r2, #2
 80024c8:	4602      	mov	r2, r0
 80024ca:	460b      	mov	r3, r1
 80024cc:	eb12 0804 	adds.w	r8, r2, r4
 80024d0:	eb43 0905 	adc.w	r9, r3, r5
 80024d4:	f04f 0200 	mov.w	r2, #0
 80024d8:	f04f 0300 	mov.w	r3, #0
 80024dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024e8:	4690      	mov	r8, r2
 80024ea:	4699      	mov	r9, r3
 80024ec:	4640      	mov	r0, r8
 80024ee:	4649      	mov	r1, r9
 80024f0:	f04f 0200 	mov.w	r2, #0
 80024f4:	f04f 0300 	mov.w	r3, #0
 80024f8:	0a82      	lsrs	r2, r0, #10
 80024fa:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80024fe:	0a8b      	lsrs	r3, r1, #10
 8002500:	4613      	mov	r3, r2
 8002502:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002504:	68fb      	ldr	r3, [r7, #12]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002510:	4770      	bx	lr

08002512 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b084      	sub	sp, #16
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff ff93 	bl	8002446 <TIMER_IF_Convert_ms2Tick>
 8002520:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002522:	f000 f8d5 	bl	80026d0 <GetTimerTicks>
 8002526:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002528:	e000      	b.n	800252c <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 800252a:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 800252c:	f000 f8d0 	bl	80026d0 <GetTimerTicks>
 8002530:	4602      	mov	r2, r0
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	429a      	cmp	r2, r3
 800253a:	d8f6      	bhi.n	800252a <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 800253c:	bf00      	nop
 800253e:	bf00      	nop
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b082      	sub	sp, #8
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 800254e:	f019 fef9 	bl	801c344 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002552:	bf00      	nop
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b084      	sub	sp, #16
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002562:	f000 f8a5 	bl	80026b0 <TIMER_IF_BkUp_Read_MSBticks>
 8002566:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	3301      	adds	r3, #1
 800256c:	4618      	mov	r0, r3
 800256e:	f000 f88f 	bl	8002690 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002572:	bf00      	nop
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 800257a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800257e:	b08c      	sub	sp, #48	@ 0x30
 8002580:	af00      	add	r7, sp, #0
 8002582:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002588:	f000 f8a2 	bl	80026d0 <GetTimerTicks>
 800258c:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 800258e:	f000 f88f 	bl	80026b0 <TIMER_IF_BkUp_Read_MSBticks>
 8002592:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002596:	2200      	movs	r2, #0
 8002598:	60bb      	str	r3, [r7, #8]
 800259a:	60fa      	str	r2, [r7, #12]
 800259c:	f04f 0200 	mov.w	r2, #0
 80025a0:	f04f 0300 	mov.w	r3, #0
 80025a4:	68b9      	ldr	r1, [r7, #8]
 80025a6:	000b      	movs	r3, r1
 80025a8:	2200      	movs	r2, #0
 80025aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025ac:	2000      	movs	r0, #0
 80025ae:	460c      	mov	r4, r1
 80025b0:	4605      	mov	r5, r0
 80025b2:	eb12 0804 	adds.w	r8, r2, r4
 80025b6:	eb43 0905 	adc.w	r9, r3, r5
 80025ba:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 80025be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	f04f 0300 	mov.w	r3, #0
 80025ca:	0a82      	lsrs	r2, r0, #10
 80025cc:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80025d0:	0a8b      	lsrs	r3, r1, #10
 80025d2:	4613      	mov	r3, r2
 80025d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	2200      	movs	r2, #0
 80025da:	603b      	str	r3, [r7, #0]
 80025dc:	607a      	str	r2, [r7, #4]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80025e4:	f04f 0b00 	mov.w	fp, #0
 80025e8:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff ff46 	bl	8002480 <TIMER_IF_Convert_Tick2ms>
 80025f4:	4603      	mov	r3, r0
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 80025fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3730      	adds	r7, #48	@ 0x30
 8002602:	46bd      	mov	sp, r7
 8002604:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002608 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	2100      	movs	r1, #0
 8002614:	4803      	ldr	r0, [pc, #12]	@ (8002624 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8002616:	f004 fe59 	bl	80072cc <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	200001e0 	.word	0x200001e0

08002628 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	2101      	movs	r1, #1
 8002634:	4803      	ldr	r0, [pc, #12]	@ (8002644 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002636:	f004 fe49 	bl	80072cc <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 800263a:	bf00      	nop
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	200001e0 	.word	0x200001e0

08002648 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800264e:	2300      	movs	r3, #0
 8002650:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002652:	2100      	movs	r1, #0
 8002654:	4804      	ldr	r0, [pc, #16]	@ (8002668 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002656:	f004 fe51 	bl	80072fc <HAL_RTCEx_BKUPRead>
 800265a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 800265c:	687b      	ldr	r3, [r7, #4]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	200001e0 	.word	0x200001e0

0800266c <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002672:	2300      	movs	r3, #0
 8002674:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002676:	2101      	movs	r1, #1
 8002678:	4804      	ldr	r0, [pc, #16]	@ (800268c <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 800267a:	f004 fe3f 	bl	80072fc <HAL_RTCEx_BKUPRead>
 800267e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002680:	687b      	ldr	r3, [r7, #4]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	200001e0 	.word	0x200001e0

08002690 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	2102      	movs	r1, #2
 800269c:	4803      	ldr	r0, [pc, #12]	@ (80026ac <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 800269e:	f004 fe15 	bl	80072cc <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 80026a2:	bf00      	nop
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	200001e0 	.word	0x200001e0

080026b0 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80026b6:	2102      	movs	r1, #2
 80026b8:	4804      	ldr	r0, [pc, #16]	@ (80026cc <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 80026ba:	f004 fe1f 	bl	80072fc <HAL_RTCEx_BKUPRead>
 80026be:	6078      	str	r0, [r7, #4]
  return MSBticks;
 80026c0:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	200001e0 	.word	0x200001e0

080026d0 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80026d6:	480b      	ldr	r0, [pc, #44]	@ (8002704 <GetTimerTicks+0x34>)
 80026d8:	f7ff fdd9 	bl	800228e <LL_RTC_TIME_GetSubSecond>
 80026dc:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80026de:	e003      	b.n	80026e8 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80026e0:	4808      	ldr	r0, [pc, #32]	@ (8002704 <GetTimerTicks+0x34>)
 80026e2:	f7ff fdd4 	bl	800228e <LL_RTC_TIME_GetSubSecond>
 80026e6:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80026e8:	4806      	ldr	r0, [pc, #24]	@ (8002704 <GetTimerTicks+0x34>)
 80026ea:	f7ff fdd0 	bl	800228e <LL_RTC_TIME_GetSubSecond>
 80026ee:	4602      	mov	r2, r0
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d1f4      	bne.n	80026e0 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40002800 	.word	0x40002800

08002708 <LL_AHB2_GRP1_EnableClock>:
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002710:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002714:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002716:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4313      	orrs	r3, r2
 800271e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002720:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002724:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4013      	ands	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800272c:	68fb      	ldr	r3, [r7, #12]
}
 800272e:	bf00      	nop
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr

08002738 <LL_APB1_GRP1_EnableClock>:
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002740:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002744:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002746:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4313      	orrs	r3, r2
 800274e:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002750:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002754:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4013      	ands	r3, r2
 800275a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800275c:	68fb      	ldr	r3, [r7, #12]
}
 800275e:	bf00      	nop
 8002760:	3714      	adds	r7, #20
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr

08002768 <LL_APB1_GRP1_DisableClock>:
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002770:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002774:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	43db      	mvns	r3, r3
 800277a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800277e:	4013      	ands	r3, r2
 8002780:	658b      	str	r3, [r1, #88]	@ 0x58
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr

0800278c <LL_APB2_GRP1_EnableClock>:
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002794:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002798:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800279a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80027a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027a8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4013      	ands	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027b0:	68fb      	ldr	r3, [r7, #12]
}
 80027b2:	bf00      	nop
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr

080027bc <LL_APB2_GRP1_DisableClock>:
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80027c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027c8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	43db      	mvns	r3, r3
 80027ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027d2:	4013      	ands	r3, r2
 80027d4:	660b      	str	r3, [r1, #96]	@ 0x60
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr

080027e0 <MX_USART2_UART_Init>:

}
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027e4:	4b22      	ldr	r3, [pc, #136]	@ (8002870 <MX_USART2_UART_Init+0x90>)
 80027e6:	4a23      	ldr	r2, [pc, #140]	@ (8002874 <MX_USART2_UART_Init+0x94>)
 80027e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80027ea:	4b21      	ldr	r3, [pc, #132]	@ (8002870 <MX_USART2_UART_Init+0x90>)
 80027ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002870 <MX_USART2_UART_Init+0x90>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002870 <MX_USART2_UART_Init+0x90>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002870 <MX_USART2_UART_Init+0x90>)
 8002800:	2200      	movs	r2, #0
 8002802:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002804:	4b1a      	ldr	r3, [pc, #104]	@ (8002870 <MX_USART2_UART_Init+0x90>)
 8002806:	220c      	movs	r2, #12
 8002808:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800280a:	4b19      	ldr	r3, [pc, #100]	@ (8002870 <MX_USART2_UART_Init+0x90>)
 800280c:	2200      	movs	r2, #0
 800280e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002810:	4b17      	ldr	r3, [pc, #92]	@ (8002870 <MX_USART2_UART_Init+0x90>)
 8002812:	2200      	movs	r2, #0
 8002814:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002816:	4b16      	ldr	r3, [pc, #88]	@ (8002870 <MX_USART2_UART_Init+0x90>)
 8002818:	2200      	movs	r2, #0
 800281a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800281c:	4b14      	ldr	r3, [pc, #80]	@ (8002870 <MX_USART2_UART_Init+0x90>)
 800281e:	2200      	movs	r2, #0
 8002820:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002822:	4b13      	ldr	r3, [pc, #76]	@ (8002870 <MX_USART2_UART_Init+0x90>)
 8002824:	2200      	movs	r2, #0
 8002826:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002828:	4811      	ldr	r0, [pc, #68]	@ (8002870 <MX_USART2_UART_Init+0x90>)
 800282a:	f005 fa58 	bl	8007cde <HAL_UART_Init>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002834:	f7ff f87a 	bl	800192c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002838:	2100      	movs	r1, #0
 800283a:	480d      	ldr	r0, [pc, #52]	@ (8002870 <MX_USART2_UART_Init+0x90>)
 800283c:	f007 fb78 	bl	8009f30 <HAL_UARTEx_SetTxFifoThreshold>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002846:	f7ff f871 	bl	800192c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800284a:	2100      	movs	r1, #0
 800284c:	4808      	ldr	r0, [pc, #32]	@ (8002870 <MX_USART2_UART_Init+0x90>)
 800284e:	f007 fbad 	bl	8009fac <HAL_UARTEx_SetRxFifoThreshold>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002858:	f7ff f868 	bl	800192c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800285c:	4804      	ldr	r0, [pc, #16]	@ (8002870 <MX_USART2_UART_Init+0x90>)
 800285e:	f007 fb2f 	bl	8009ec0 <HAL_UARTEx_DisableFifoMode>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002868:	f7ff f860 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800286c:	bf00      	nop
 800286e:	bd80      	pop	{r7, pc}
 8002870:	200002c0 	.word	0x200002c0
 8002874:	40004400 	.word	0x40004400

08002878 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b096      	sub	sp, #88	@ 0x58
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002880:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	605a      	str	r2, [r3, #4]
 800288a:	609a      	str	r2, [r3, #8]
 800288c:	60da      	str	r2, [r3, #12]
 800288e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002890:	f107 030c 	add.w	r3, r7, #12
 8002894:	2238      	movs	r2, #56	@ 0x38
 8002896:	2100      	movs	r1, #0
 8002898:	4618      	mov	r0, r3
 800289a:	f01a f93b 	bl	801cb14 <memset>
  if(uartHandle->Instance==USART1)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a68      	ldr	r2, [pc, #416]	@ (8002a44 <HAL_UART_MspInit+0x1cc>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d16c      	bne.n	8002982 <HAL_UART_MspInit+0x10a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80028a8:	2301      	movs	r3, #1
 80028aa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80028ac:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80028b0:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028b2:	f107 030c 	add.w	r3, r7, #12
 80028b6:	4618      	mov	r0, r3
 80028b8:	f004 f890 	bl	80069dc <HAL_RCCEx_PeriphCLKConfig>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80028c2:	f7ff f833 	bl	800192c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028c6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80028ca:	f7ff ff5f 	bl	800278c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ce:	2002      	movs	r0, #2
 80028d0:	f7ff ff1a 	bl	8002708 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d4:	2001      	movs	r0, #1
 80028d6:	f7ff ff17 	bl	8002708 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = RS485_TX_Pin;
 80028da:	2340      	movs	r3, #64	@ 0x40
 80028dc:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028de:	2302      	movs	r3, #2
 80028e0:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e2:	2300      	movs	r3, #0
 80028e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e6:	2300      	movs	r3, #0
 80028e8:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028ea:	2307      	movs	r3, #7
 80028ec:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 80028ee:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80028f2:	4619      	mov	r1, r3
 80028f4:	4854      	ldr	r0, [pc, #336]	@ (8002a48 <HAL_UART_MspInit+0x1d0>)
 80028f6:	f002 fba3 	bl	8005040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RS485_RX_Pin;
 80028fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028fe:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002900:	2302      	movs	r3, #2
 8002902:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002904:	2300      	movs	r3, #0
 8002906:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002908:	2300      	movs	r3, #0
 800290a:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800290c:	2307      	movs	r3, #7
 800290e:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(RS485_RX_GPIO_Port, &GPIO_InitStruct);
 8002910:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002914:	4619      	mov	r1, r3
 8002916:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800291a:	f002 fb91 	bl	8005040 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800291e:	4b4b      	ldr	r3, [pc, #300]	@ (8002a4c <HAL_UART_MspInit+0x1d4>)
 8002920:	4a4b      	ldr	r2, [pc, #300]	@ (8002a50 <HAL_UART_MspInit+0x1d8>)
 8002922:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002924:	4b49      	ldr	r3, [pc, #292]	@ (8002a4c <HAL_UART_MspInit+0x1d4>)
 8002926:	2212      	movs	r2, #18
 8002928:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800292a:	4b48      	ldr	r3, [pc, #288]	@ (8002a4c <HAL_UART_MspInit+0x1d4>)
 800292c:	2210      	movs	r2, #16
 800292e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002930:	4b46      	ldr	r3, [pc, #280]	@ (8002a4c <HAL_UART_MspInit+0x1d4>)
 8002932:	2200      	movs	r2, #0
 8002934:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002936:	4b45      	ldr	r3, [pc, #276]	@ (8002a4c <HAL_UART_MspInit+0x1d4>)
 8002938:	2280      	movs	r2, #128	@ 0x80
 800293a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800293c:	4b43      	ldr	r3, [pc, #268]	@ (8002a4c <HAL_UART_MspInit+0x1d4>)
 800293e:	2200      	movs	r2, #0
 8002940:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002942:	4b42      	ldr	r3, [pc, #264]	@ (8002a4c <HAL_UART_MspInit+0x1d4>)
 8002944:	2200      	movs	r2, #0
 8002946:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002948:	4b40      	ldr	r3, [pc, #256]	@ (8002a4c <HAL_UART_MspInit+0x1d4>)
 800294a:	2200      	movs	r2, #0
 800294c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800294e:	4b3f      	ldr	r3, [pc, #252]	@ (8002a4c <HAL_UART_MspInit+0x1d4>)
 8002950:	2200      	movs	r2, #0
 8002952:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002954:	483d      	ldr	r0, [pc, #244]	@ (8002a4c <HAL_UART_MspInit+0x1d4>)
 8002956:	f001 fd6f 	bl	8004438 <HAL_DMA_Init>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_UART_MspInit+0xec>
    {
      Error_Handler();
 8002960:	f7fe ffe4 	bl	800192c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a39      	ldr	r2, [pc, #228]	@ (8002a4c <HAL_UART_MspInit+0x1d4>)
 8002968:	67da      	str	r2, [r3, #124]	@ 0x7c
 800296a:	4a38      	ldr	r2, [pc, #224]	@ (8002a4c <HAL_UART_MspInit+0x1d4>)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8002970:	2200      	movs	r2, #0
 8002972:	2101      	movs	r1, #1
 8002974:	2024      	movs	r0, #36	@ 0x24
 8002976:	f001 fd1c 	bl	80043b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800297a:	2024      	movs	r0, #36	@ 0x24
 800297c:	f001 fd33 	bl	80043e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002980:	e05c      	b.n	8002a3c <HAL_UART_MspInit+0x1c4>
  else if(uartHandle->Instance==USART2)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a33      	ldr	r2, [pc, #204]	@ (8002a54 <HAL_UART_MspInit+0x1dc>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d157      	bne.n	8002a3c <HAL_UART_MspInit+0x1c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800298c:	2302      	movs	r3, #2
 800298e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002990:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8002994:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002996:	f107 030c 	add.w	r3, r7, #12
 800299a:	4618      	mov	r0, r3
 800299c:	f004 f81e 	bl	80069dc <HAL_RCCEx_PeriphCLKConfig>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <HAL_UART_MspInit+0x132>
      Error_Handler();
 80029a6:	f7fe ffc1 	bl	800192c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80029aa:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80029ae:	f7ff fec3 	bl	8002738 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b2:	2001      	movs	r0, #1
 80029b4:	f7ff fea8 	bl	8002708 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = USARTx_TX_Pin|USARTx_RX_Pin;
 80029b8:	230c      	movs	r3, #12
 80029ba:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029bc:	2302      	movs	r3, #2
 80029be:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c4:	2303      	movs	r3, #3
 80029c6:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029c8:	2307      	movs	r3, #7
 80029ca:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029cc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80029d0:	4619      	mov	r1, r3
 80029d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029d6:	f002 fb33 	bl	8005040 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 80029da:	4b1f      	ldr	r3, [pc, #124]	@ (8002a58 <HAL_UART_MspInit+0x1e0>)
 80029dc:	4a1f      	ldr	r2, [pc, #124]	@ (8002a5c <HAL_UART_MspInit+0x1e4>)
 80029de:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80029e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002a58 <HAL_UART_MspInit+0x1e0>)
 80029e2:	2214      	movs	r2, #20
 80029e4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002a58 <HAL_UART_MspInit+0x1e0>)
 80029e8:	2210      	movs	r2, #16
 80029ea:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002a58 <HAL_UART_MspInit+0x1e0>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029f2:	4b19      	ldr	r3, [pc, #100]	@ (8002a58 <HAL_UART_MspInit+0x1e0>)
 80029f4:	2280      	movs	r2, #128	@ 0x80
 80029f6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029f8:	4b17      	ldr	r3, [pc, #92]	@ (8002a58 <HAL_UART_MspInit+0x1e0>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029fe:	4b16      	ldr	r3, [pc, #88]	@ (8002a58 <HAL_UART_MspInit+0x1e0>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002a04:	4b14      	ldr	r3, [pc, #80]	@ (8002a58 <HAL_UART_MspInit+0x1e0>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a0a:	4b13      	ldr	r3, [pc, #76]	@ (8002a58 <HAL_UART_MspInit+0x1e0>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002a10:	4811      	ldr	r0, [pc, #68]	@ (8002a58 <HAL_UART_MspInit+0x1e0>)
 8002a12:	f001 fd11 	bl	8004438 <HAL_DMA_Init>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8002a1c:	f7fe ff86 	bl	800192c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a0d      	ldr	r2, [pc, #52]	@ (8002a58 <HAL_UART_MspInit+0x1e0>)
 8002a24:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002a26:	4a0c      	ldr	r2, [pc, #48]	@ (8002a58 <HAL_UART_MspInit+0x1e0>)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	2102      	movs	r1, #2
 8002a30:	2025      	movs	r0, #37	@ 0x25
 8002a32:	f001 fcbe 	bl	80043b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a36:	2025      	movs	r0, #37	@ 0x25
 8002a38:	f001 fcd5 	bl	80043e6 <HAL_NVIC_EnableIRQ>
}
 8002a3c:	bf00      	nop
 8002a3e:	3758      	adds	r7, #88	@ 0x58
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40013800 	.word	0x40013800
 8002a48:	48000400 	.word	0x48000400
 8002a4c:	20000354 	.word	0x20000354
 8002a50:	40020044 	.word	0x40020044
 8002a54:	40004400 	.word	0x40004400
 8002a58:	200003b4 	.word	0x200003b4
 8002a5c:	40020058 	.word	0x40020058

08002a60 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a19      	ldr	r2, [pc, #100]	@ (8002ad4 <HAL_UART_MspDeInit+0x74>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d116      	bne.n	8002aa0 <HAL_UART_MspDeInit+0x40>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002a72:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002a76:	f7ff fea1 	bl	80027bc <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(RS485_TX_GPIO_Port, RS485_TX_Pin);
 8002a7a:	2140      	movs	r1, #64	@ 0x40
 8002a7c:	4816      	ldr	r0, [pc, #88]	@ (8002ad8 <HAL_UART_MspDeInit+0x78>)
 8002a7e:	f002 fc3f 	bl	8005300 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(RS485_RX_GPIO_Port, RS485_RX_Pin);
 8002a82:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002a86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a8a:	f002 fc39 	bl	8005300 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a92:	4618      	mov	r0, r3
 8002a94:	f001 fd78 	bl	8004588 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002a98:	2024      	movs	r0, #36	@ 0x24
 8002a9a:	f001 fcb2 	bl	8004402 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002a9e:	e015      	b.n	8002acc <HAL_UART_MspDeInit+0x6c>
  else if(uartHandle->Instance==USART2)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8002adc <HAL_UART_MspDeInit+0x7c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d110      	bne.n	8002acc <HAL_UART_MspDeInit+0x6c>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002aaa:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002aae:	f7ff fe5b 	bl	8002768 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, USARTx_TX_Pin|USARTx_RX_Pin);
 8002ab2:	210c      	movs	r1, #12
 8002ab4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ab8:	f002 fc22 	bl	8005300 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f001 fd61 	bl	8004588 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002ac6:	2025      	movs	r0, #37	@ 0x25
 8002ac8:	f001 fc9b 	bl	8004402 <HAL_NVIC_DisableIRQ>
}
 8002acc:	bf00      	nop
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40013800 	.word	0x40013800
 8002ad8:	48000400 	.word	0x48000400
 8002adc:	40004400 	.word	0x40004400

08002ae0 <LL_APB1_GRP1_ForceReset>:
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8002ae8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002aee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr

08002b02 <LL_APB1_GRP1_ReleaseReset>:
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8002b0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	43db      	mvns	r3, r3
 8002b14:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b18:	4013      	ands	r3, r2
 8002b1a:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr
	...

08002b28 <LL_EXTI_EnableIT_0_31>:
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002b30:	4b06      	ldr	r3, [pc, #24]	@ (8002b4c <LL_EXTI_EnableIT_0_31+0x24>)
 8002b32:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002b36:	4905      	ldr	r1, [pc, #20]	@ (8002b4c <LL_EXTI_EnableIT_0_31+0x24>)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	58000800 	.word	0x58000800

08002b50 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002b58:	4a07      	ldr	r2, [pc, #28]	@ (8002b78 <vcom_Init+0x28>)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8002b5e:	f7fe fb83 	bl	8001268 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002b62:	f7ff fe3d 	bl	80027e0 <MX_USART2_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
 8002b66:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8002b6a:	f7ff ffdd 	bl	8002b28 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8002b6e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	20000418 	.word	0x20000418

08002b7c <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8002b80:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002b84:	f7ff ffac 	bl	8002ae0 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_USART2_RELEASE_RESET();
 8002b88:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002b8c:	f7ff ffb9 	bl	8002b02 <LL_APB1_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8002b90:	4804      	ldr	r0, [pc, #16]	@ (8002ba4 <vcom_DeInit+0x28>)
 8002b92:	f7ff ff65 	bl	8002a60 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002b96:	200f      	movs	r0, #15
 8002b98:	f001 fc33 	bl	8004402 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002b9c:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	200002c0 	.word	0x200002c0

08002ba8 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8002bb4:	887b      	ldrh	r3, [r7, #2]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	4804      	ldr	r0, [pc, #16]	@ (8002bcc <vcom_Trace_DMA+0x24>)
 8002bbc:	f005 f92c 	bl	8007e18 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002bc0:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	200002c0 	.word	0x200002c0

08002bd0 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002bd8:	4a19      	ldr	r2, [pc, #100]	@ (8002c40 <vcom_ReceiveInit+0x70>)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002bde:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002be2:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8002be4:	f107 0308 	add.w	r3, r7, #8
 8002be8:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002bec:	4815      	ldr	r0, [pc, #84]	@ (8002c44 <vcom_ReceiveInit+0x74>)
 8002bee:	f007 f8da 	bl	8009da6 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 8002bf2:	bf00      	nop
 8002bf4:	4b13      	ldr	r3, [pc, #76]	@ (8002c44 <vcom_ReceiveInit+0x74>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c02:	d0f7      	beq.n	8002bf4 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8002c04:	bf00      	nop
 8002c06:	4b0f      	ldr	r3, [pc, #60]	@ (8002c44 <vcom_ReceiveInit+0x74>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c14:	d1f7      	bne.n	8002c06 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8002c16:	4b0b      	ldr	r3, [pc, #44]	@ (8002c44 <vcom_ReceiveInit+0x74>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	4b09      	ldr	r3, [pc, #36]	@ (8002c44 <vcom_ReceiveInit+0x74>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002c24:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8002c26:	4807      	ldr	r0, [pc, #28]	@ (8002c44 <vcom_ReceiveInit+0x74>)
 8002c28:	f007 f918 	bl	8009e5c <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	4906      	ldr	r1, [pc, #24]	@ (8002c48 <vcom_ReceiveInit+0x78>)
 8002c30:	4804      	ldr	r0, [pc, #16]	@ (8002c44 <vcom_ReceiveInit+0x74>)
 8002c32:	f005 f8a5 	bl	8007d80 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8002c36:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	2000041c 	.word	0x2000041c
 8002c44:	200002c0 	.word	0x200002c0
 8002c48:	20000414 	.word	0x20000414

08002c4c <vcom_Resume>:

void vcom_Resume(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c50:	4808      	ldr	r0, [pc, #32]	@ (8002c74 <vcom_Resume+0x28>)
 8002c52:	f005 f844 	bl	8007cde <HAL_UART_Init>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <vcom_Resume+0x14>
  {
    Error_Handler();
 8002c5c:	f7fe fe66 	bl	800192c <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002c60:	4805      	ldr	r0, [pc, #20]	@ (8002c78 <vcom_Resume+0x2c>)
 8002c62:	f001 fbe9 	bl	8004438 <HAL_DMA_Init>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <vcom_Resume+0x24>
  {
    Error_Handler();
 8002c6c:	f7fe fe5e 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002c70:	bf00      	nop
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	200002c0 	.word	0x200002c0
 8002c78:	200003b4 	.word	0x200003b4

08002c7c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a05      	ldr	r2, [pc, #20]	@ (8002ca0 <HAL_UART_TxCpltCallback+0x24>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d103      	bne.n	8002c96 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8002c8e:	4b05      	ldr	r3, [pc, #20]	@ (8002ca4 <HAL_UART_TxCpltCallback+0x28>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2000      	movs	r0, #0
 8002c94:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002c96:	bf00      	nop
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40004400 	.word	0x40004400
 8002ca4:	20000418 	.word	0x20000418

08002ca8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8002cec <HAL_UART_RxCpltCallback+0x44>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d113      	bne.n	8002ce2 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8002cba:	4b0d      	ldr	r3, [pc, #52]	@ (8002cf0 <HAL_UART_RxCpltCallback+0x48>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00a      	beq.n	8002cd8 <HAL_UART_RxCpltCallback+0x30>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d105      	bne.n	8002cd8 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8002ccc:	4b08      	ldr	r3, [pc, #32]	@ (8002cf0 <HAL_UART_RxCpltCallback+0x48>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	4807      	ldr	r0, [pc, #28]	@ (8002cf4 <HAL_UART_RxCpltCallback+0x4c>)
 8002cd6:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002cd8:	2201      	movs	r2, #1
 8002cda:	4906      	ldr	r1, [pc, #24]	@ (8002cf4 <HAL_UART_RxCpltCallback+0x4c>)
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f005 f84f 	bl	8007d80 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002ce2:	bf00      	nop
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40004400 	.word	0x40004400
 8002cf0:	2000041c 	.word	0x2000041c
 8002cf4:	20000414 	.word	0x20000414

08002cf8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002cf8:	480d      	ldr	r0, [pc, #52]	@ (8002d30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002cfa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002cfc:	f7ff fac1 	bl	8002282 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d00:	480c      	ldr	r0, [pc, #48]	@ (8002d34 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d02:	490d      	ldr	r1, [pc, #52]	@ (8002d38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d04:	4a0d      	ldr	r2, [pc, #52]	@ (8002d3c <LoopForever+0xe>)
  movs r3, #0
 8002d06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d08:	e002      	b.n	8002d10 <LoopCopyDataInit>

08002d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d0e:	3304      	adds	r3, #4

08002d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d14:	d3f9      	bcc.n	8002d0a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d16:	4a0a      	ldr	r2, [pc, #40]	@ (8002d40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d18:	4c0a      	ldr	r4, [pc, #40]	@ (8002d44 <LoopForever+0x16>)
  movs r3, #0
 8002d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d1c:	e001      	b.n	8002d22 <LoopFillZerobss>

08002d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d20:	3204      	adds	r2, #4

08002d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d24:	d3fb      	bcc.n	8002d1e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002d26:	f019 fefd 	bl	801cb24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d2a:	f7fe fd8a 	bl	8001842 <main>

08002d2e <LoopForever>:

LoopForever:
    b LoopForever
 8002d2e:	e7fe      	b.n	8002d2e <LoopForever>
  ldr   r0, =_estack
 8002d30:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002d34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d38:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8002d3c:	0801dcb8 	.word	0x0801dcb8
  ldr r2, =_sbss
 8002d40:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8002d44:	2000248c 	.word	0x2000248c

08002d48 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d48:	e7fe      	b.n	8002d48 <ADC_IRQHandler>

08002d4a <LL_AHB2_GRP1_EnableClock>:
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b085      	sub	sp, #20
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002d52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002d58:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002d62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
}
 8002d70:	bf00      	nop
 8002d72:	3714      	adds	r7, #20
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bc80      	pop	{r7}
 8002d78:	4770      	bx	lr

08002d7a <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b086      	sub	sp, #24
 8002d7e:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002d80:	1d3b      	adds	r3, r7, #4
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	605a      	str	r2, [r3, #4]
 8002d88:	609a      	str	r2, [r3, #8]
 8002d8a:	60da      	str	r2, [r3, #12]
 8002d8c:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8002d8e:	2004      	movs	r0, #4
 8002d90:	f7ff ffdb 	bl	8002d4a <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002d94:	2310      	movs	r3, #16
 8002d96:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da0:	2303      	movs	r3, #3
 8002da2:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002da4:	1d3b      	adds	r3, r7, #4
 8002da6:	4619      	mov	r1, r3
 8002da8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002dac:	f002 f948 	bl	8005040 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002db0:	2320      	movs	r3, #32
 8002db2:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002db4:	1d3b      	adds	r3, r7, #4
 8002db6:	4619      	mov	r1, r3
 8002db8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002dbc:	f002 f940 	bl	8005040 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8002dc0:	2340      	movs	r3, #64	@ 0x40
 8002dc2:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8002dc4:	1d3b      	adds	r3, r7, #4
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002dcc:	f002 f938 	bl	8005040 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	2120      	movs	r1, #32
 8002dd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002dd8:	f002 fb60 	bl	800549c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002ddc:	2200      	movs	r2, #0
 8002dde:	2110      	movs	r1, #16
 8002de0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002de4:	f002 fb5a 	bl	800549c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8002de8:	2200      	movs	r2, #0
 8002dea:	2140      	movs	r1, #64	@ 0x40
 8002dec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002df0:	f002 fb54 	bl	800549c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3718      	adds	r7, #24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	2b03      	cmp	r3, #3
 8002e0e:	d857      	bhi.n	8002ec0 <BSP_RADIO_ConfigRFSwitch+0xc0>
 8002e10:	a201      	add	r2, pc, #4	@ (adr r2, 8002e18 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8002e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e16:	bf00      	nop
 8002e18:	08002e29 	.word	0x08002e29
 8002e1c:	08002e4f 	.word	0x08002e4f
 8002e20:	08002e75 	.word	0x08002e75
 8002e24:	08002e9b 	.word	0x08002e9b
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2140      	movs	r1, #64	@ 0x40
 8002e2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e30:	f002 fb34 	bl	800549c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002e34:	2200      	movs	r2, #0
 8002e36:	2110      	movs	r1, #16
 8002e38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e3c:	f002 fb2e 	bl	800549c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002e40:	2200      	movs	r2, #0
 8002e42:	2120      	movs	r1, #32
 8002e44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e48:	f002 fb28 	bl	800549c <HAL_GPIO_WritePin>
      break;      
 8002e4c:	e039      	b.n	8002ec2 <BSP_RADIO_ConfigRFSwitch+0xc2>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002e4e:	2201      	movs	r2, #1
 8002e50:	2140      	movs	r1, #64	@ 0x40
 8002e52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e56:	f002 fb21 	bl	800549c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	2110      	movs	r1, #16
 8002e5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e62:	f002 fb1b 	bl	800549c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002e66:	2200      	movs	r2, #0
 8002e68:	2120      	movs	r1, #32
 8002e6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e6e:	f002 fb15 	bl	800549c <HAL_GPIO_WritePin>
      break;
 8002e72:	e026      	b.n	8002ec2 <BSP_RADIO_ConfigRFSwitch+0xc2>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002e74:	2201      	movs	r2, #1
 8002e76:	2140      	movs	r1, #64	@ 0x40
 8002e78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e7c:	f002 fb0e 	bl	800549c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002e80:	2201      	movs	r2, #1
 8002e82:	2110      	movs	r1, #16
 8002e84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e88:	f002 fb08 	bl	800549c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	2120      	movs	r1, #32
 8002e90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e94:	f002 fb02 	bl	800549c <HAL_GPIO_WritePin>
      break;
 8002e98:	e013      	b.n	8002ec2 <BSP_RADIO_ConfigRFSwitch+0xc2>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	2140      	movs	r1, #64	@ 0x40
 8002e9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ea2:	f002 fafb 	bl	800549c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	2110      	movs	r1, #16
 8002eaa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002eae:	f002 faf5 	bl	800549c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	2120      	movs	r1, #32
 8002eb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002eba:	f002 faef 	bl	800549c <HAL_GPIO_WritePin>
      break;
 8002ebe:	e000      	b.n	8002ec2 <BSP_RADIO_ConfigRFSwitch+0xc2>
    }
    default:
      break;    
 8002ec0:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr

08002eda <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8002eda:	b480      	push	{r7}
 8002edc:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8002ede:	2301      	movs	r3, #1
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr

08002ee8 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8002eec:	2301      	movs	r3, #1
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bc80      	pop	{r7}
 8002ef4:	4770      	bx	lr

08002ef6 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b085      	sub	sp, #20
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	4603      	mov	r3, r0
 8002efe:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8002f00:	79fb      	ldrb	r3, [r7, #7]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d102      	bne.n	8002f0c <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8002f06:	230f      	movs	r3, #15
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	e001      	b.n	8002f10 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8002f0c:	2316      	movs	r3, #22
 8002f0e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002f10:	68fb      	ldr	r3, [r7, #12]
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3714      	adds	r7, #20
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr

08002f1c <LL_DBGMCU_EnableDBGSleepMode>:
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002f20:	4b04      	ldr	r3, [pc, #16]	@ (8002f34 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	4a03      	ldr	r2, [pc, #12]	@ (8002f34 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8002f26:	f043 0301 	orr.w	r3, r3, #1
 8002f2a:	6053      	str	r3, [r2, #4]
}
 8002f2c:	bf00      	nop
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bc80      	pop	{r7}
 8002f32:	4770      	bx	lr
 8002f34:	e0042000 	.word	0xe0042000

08002f38 <LL_DBGMCU_EnableDBGStopMode>:
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002f3c:	4b04      	ldr	r3, [pc, #16]	@ (8002f50 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	4a03      	ldr	r2, [pc, #12]	@ (8002f50 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8002f42:	f043 0302 	orr.w	r3, r3, #2
 8002f46:	6053      	str	r3, [r2, #4]
}
 8002f48:	bf00      	nop
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr
 8002f50:	e0042000 	.word	0xe0042000

08002f54 <LL_DBGMCU_EnableDBGStandbyMode>:
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002f58:	4b04      	ldr	r3, [pc, #16]	@ (8002f6c <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	4a03      	ldr	r2, [pc, #12]	@ (8002f6c <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8002f5e:	f043 0304 	orr.w	r3, r3, #4
 8002f62:	6053      	str	r3, [r2, #4]
}
 8002f64:	bf00      	nop
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bc80      	pop	{r7}
 8002f6a:	4770      	bx	lr
 8002f6c:	e0042000 	.word	0xe0042000

08002f70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f76:	2300      	movs	r3, #0
 8002f78:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f7a:	2003      	movs	r0, #3
 8002f7c:	f001 fa0e 	bl	800439c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002f80:	f003 fb4e 	bl	8006620 <HAL_RCC_GetHCLKFreq>
 8002f84:	4603      	mov	r3, r0
 8002f86:	4a09      	ldr	r2, [pc, #36]	@ (8002fac <HAL_Init+0x3c>)
 8002f88:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f8a:	200f      	movs	r0, #15
 8002f8c:	f000 f810 	bl	8002fb0 <HAL_InitTick>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d002      	beq.n	8002f9c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	71fb      	strb	r3, [r7, #7]
 8002f9a:	e001      	b.n	8002fa0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f9c:	f7fe fdbd 	bl	8001b1a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002fa0:	79fb      	ldrb	r3, [r7, #7]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	20000000 	.word	0x20000000

08002fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002fbc:	4b17      	ldr	r3, [pc, #92]	@ (800301c <HAL_InitTick+0x6c>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d024      	beq.n	800300e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002fc4:	f003 fb2c 	bl	8006620 <HAL_RCC_GetHCLKFreq>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	4b14      	ldr	r3, [pc, #80]	@ (800301c <HAL_InitTick+0x6c>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	4619      	mov	r1, r3
 8002fd0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fd4:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f001 fa1e 	bl	800441e <HAL_SYSTICK_Config>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10f      	bne.n	8003008 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b0f      	cmp	r3, #15
 8002fec:	d809      	bhi.n	8003002 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fee:	2200      	movs	r2, #0
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff6:	f001 f9dc 	bl	80043b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ffa:	4a09      	ldr	r2, [pc, #36]	@ (8003020 <HAL_InitTick+0x70>)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6013      	str	r3, [r2, #0]
 8003000:	e007      	b.n	8003012 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	73fb      	strb	r3, [r7, #15]
 8003006:	e004      	b.n	8003012 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	73fb      	strb	r3, [r7, #15]
 800300c:	e001      	b.n	8003012 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003012:	7bfb      	ldrb	r3, [r7, #15]
}
 8003014:	4618      	mov	r0, r3
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	20000008 	.word	0x20000008
 8003020:	20000004 	.word	0x20000004

08003024 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003028:	4b05      	ldr	r3, [pc, #20]	@ (8003040 <HAL_IncTick+0x1c>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	461a      	mov	r2, r3
 800302e:	4b05      	ldr	r3, [pc, #20]	@ (8003044 <HAL_IncTick+0x20>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4413      	add	r3, r2
 8003034:	4a03      	ldr	r2, [pc, #12]	@ (8003044 <HAL_IncTick+0x20>)
 8003036:	6013      	str	r3, [r2, #0]
}
 8003038:	bf00      	nop
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr
 8003040:	20000008 	.word	0x20000008
 8003044:	20000420 	.word	0x20000420

08003048 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800304c:	4b04      	ldr	r3, [pc, #16]	@ (8003060 <HAL_SuspendTick+0x18>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a03      	ldr	r2, [pc, #12]	@ (8003060 <HAL_SuspendTick+0x18>)
 8003052:	f023 0302 	bic.w	r3, r3, #2
 8003056:	6013      	str	r3, [r2, #0]
}
 8003058:	bf00      	nop
 800305a:	46bd      	mov	sp, r7
 800305c:	bc80      	pop	{r7}
 800305e:	4770      	bx	lr
 8003060:	e000e010 	.word	0xe000e010

08003064 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003068:	4b04      	ldr	r3, [pc, #16]	@ (800307c <HAL_ResumeTick+0x18>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a03      	ldr	r2, [pc, #12]	@ (800307c <HAL_ResumeTick+0x18>)
 800306e:	f043 0302 	orr.w	r3, r3, #2
 8003072:	6013      	str	r3, [r2, #0]
}
 8003074:	bf00      	nop
 8003076:	46bd      	mov	sp, r7
 8003078:	bc80      	pop	{r7}
 800307a:	4770      	bx	lr
 800307c:	e000e010 	.word	0xe000e010

08003080 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8003084:	4b02      	ldr	r3, [pc, #8]	@ (8003090 <HAL_GetUIDw0+0x10>)
 8003086:	681b      	ldr	r3, [r3, #0]
}
 8003088:	4618      	mov	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	bc80      	pop	{r7}
 800308e:	4770      	bx	lr
 8003090:	1fff7590 	.word	0x1fff7590

08003094 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003098:	4b02      	ldr	r3, [pc, #8]	@ (80030a4 <HAL_GetUIDw1+0x10>)
 800309a:	681b      	ldr	r3, [r3, #0]
}
 800309c:	4618      	mov	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc80      	pop	{r7}
 80030a2:	4770      	bx	lr
 80030a4:	1fff7594 	.word	0x1fff7594

080030a8 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80030ac:	4b02      	ldr	r3, [pc, #8]	@ (80030b8 <HAL_GetUIDw2+0x10>)
 80030ae:	681b      	ldr	r3, [r3, #0]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bc80      	pop	{r7}
 80030b6:	4770      	bx	lr
 80030b8:	1fff7598 	.word	0x1fff7598

080030bc <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80030c0:	f7ff ff2c 	bl	8002f1c <LL_DBGMCU_EnableDBGSleepMode>
}
 80030c4:	bf00      	nop
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80030cc:	f7ff ff34 	bl	8002f38 <LL_DBGMCU_EnableDBGStopMode>
}
 80030d0:	bf00      	nop
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 80030d8:	f7ff ff3c 	bl	8002f54 <LL_DBGMCU_EnableDBGStandbyMode>
}
 80030dc:	bf00      	nop
 80030de:	bd80      	pop	{r7, pc}

080030e0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	431a      	orrs	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	601a      	str	r2, [r3, #0]
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr

08003104 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003114:	4618      	mov	r0, r3
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	bc80      	pop	{r7}
 800311c:	4770      	bx	lr

0800311e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800311e:	b480      	push	{r7}
 8003120:	b085      	sub	sp, #20
 8003122:	af00      	add	r7, sp, #0
 8003124:	60f8      	str	r0, [r7, #12]
 8003126:	60b9      	str	r1, [r7, #8]
 8003128:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	695a      	ldr	r2, [r3, #20]
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2107      	movs	r1, #7
 8003136:	fa01 f303 	lsl.w	r3, r1, r3
 800313a:	43db      	mvns	r3, r3
 800313c:	401a      	ands	r2, r3
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	fa01 f303 	lsl.w	r3, r1, r3
 800314a:	431a      	orrs	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003150:	bf00      	nop
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr

0800315a <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
 8003162:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	695a      	ldr	r2, [r3, #20]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	f003 0304 	and.w	r3, r3, #4
 800316e:	2107      	movs	r1, #7
 8003170:	fa01 f303 	lsl.w	r3, r1, r3
 8003174:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800317c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003180:	4618      	mov	r0, r3
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	bc80      	pop	{r7}
 8003188:	4770      	bx	lr

0800318a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800319e:	2301      	movs	r3, #1
 80031a0:	e000      	b.n	80031a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr

080031ae <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b085      	sub	sp, #20
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	60f8      	str	r0, [r7, #12]
 80031b6:	60b9      	str	r1, [r7, #8]
 80031b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	f003 031f 	and.w	r3, r3, #31
 80031c4:	210f      	movs	r1, #15
 80031c6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ca:	43db      	mvns	r3, r3
 80031cc:	401a      	ands	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	0e9b      	lsrs	r3, r3, #26
 80031d2:	f003 010f 	and.w	r1, r3, #15
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	f003 031f 	and.w	r3, r3, #31
 80031dc:	fa01 f303 	lsl.w	r3, r1, r3
 80031e0:	431a      	orrs	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80031e6:	bf00      	nop
 80031e8:	3714      	adds	r7, #20
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr

080031f0 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003204:	431a      	orrs	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800320a:	bf00      	nop
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr

08003214 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003228:	43db      	mvns	r3, r3
 800322a:	401a      	ands	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	bc80      	pop	{r7}
 8003238:	4770      	bx	lr

0800323a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800323a:	b480      	push	{r7}
 800323c:	b085      	sub	sp, #20
 800323e:	af00      	add	r7, sp, #0
 8003240:	60f8      	str	r0, [r7, #12]
 8003242:	60b9      	str	r1, [r7, #8]
 8003244:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	695a      	ldr	r2, [r3, #20]
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	021b      	lsls	r3, r3, #8
 800324e:	43db      	mvns	r3, r3
 8003250:	401a      	ands	r2, r3
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	0219      	lsls	r1, r3, #8
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	400b      	ands	r3, r1
 800325a:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 800325e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003262:	431a      	orrs	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003268:	bf00      	nop
 800326a:	3714      	adds	r7, #20
 800326c:	46bd      	mov	sp, r7
 800326e:	bc80      	pop	{r7}
 8003270:	4770      	bx	lr

08003272 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003282:	f023 0317 	bic.w	r3, r3, #23
 8003286:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr

08003298 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80032a8:	f023 0317 	bic.w	r3, r3, #23
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6093      	str	r3, [r2, #8]
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc80      	pop	{r7}
 80032b8:	4770      	bx	lr

080032ba <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80032ba:	b480      	push	{r7}
 80032bc:	b083      	sub	sp, #12
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032ce:	d101      	bne.n	80032d4 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80032d0:	2301      	movs	r3, #1
 80032d2:	e000      	b.n	80032d6 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc80      	pop	{r7}
 80032de:	4770      	bx	lr

080032e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80032f0:	f023 0317 	bic.w	r3, r3, #23
 80032f4:	f043 0201 	orr.w	r2, r3, #1
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	bc80      	pop	{r7}
 8003304:	4770      	bx	lr

08003306 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003316:	f023 0317 	bic.w	r3, r3, #23
 800331a:	f043 0202 	orr.w	r2, r3, #2
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr

0800332c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b01      	cmp	r3, #1
 800333e:	d101      	bne.n	8003344 <LL_ADC_IsEnabled+0x18>
 8003340:	2301      	movs	r3, #1
 8003342:	e000      	b.n	8003346 <LL_ADC_IsEnabled+0x1a>
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr

08003350 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b02      	cmp	r3, #2
 8003362:	d101      	bne.n	8003368 <LL_ADC_IsDisableOngoing+0x18>
 8003364:	2301      	movs	r3, #1
 8003366:	e000      	b.n	800336a <LL_ADC_IsDisableOngoing+0x1a>
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr

08003374 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003384:	f023 0317 	bic.w	r3, r3, #23
 8003388:	f043 0204 	orr.w	r2, r3, #4
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr

0800339a <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033aa:	f023 0317 	bic.w	r3, r3, #23
 80033ae:	f043 0210 	orr.w	r2, r3, #16
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bc80      	pop	{r7}
 80033be:	4770      	bx	lr

080033c0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d101      	bne.n	80033d8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80033d4:	2301      	movs	r3, #1
 80033d6:	e000      	b.n	80033da <LL_ADC_REG_IsConversionOngoing+0x1a>
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	bc80      	pop	{r7}
 80033e2:	4770      	bx	lr

080033e4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b088      	sub	sp, #32
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033ec:	2300      	movs	r3, #0
 80033ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 80033f0:	2300      	movs	r3, #0
 80033f2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80033f4:	2300      	movs	r3, #0
 80033f6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80033f8:	2300      	movs	r3, #0
 80033fa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e17e      	b.n	8003704 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003410:	2b00      	cmp	r3, #0
 8003412:	d109      	bne.n	8003428 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f7fd fdcf 	bl	8000fb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff ff44 	bl	80032ba <LL_ADC_IsInternalRegulatorEnabled>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d115      	bne.n	8003464 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff ff18 	bl	8003272 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003442:	4b9e      	ldr	r3, [pc, #632]	@ (80036bc <HAL_ADC_Init+0x2d8>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	099b      	lsrs	r3, r3, #6
 8003448:	4a9d      	ldr	r2, [pc, #628]	@ (80036c0 <HAL_ADC_Init+0x2dc>)
 800344a:	fba2 2303 	umull	r2, r3, r2, r3
 800344e:	099b      	lsrs	r3, r3, #6
 8003450:	3301      	adds	r3, #1
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003456:	e002      	b.n	800345e <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	3b01      	subs	r3, #1
 800345c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1f9      	bne.n	8003458 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4618      	mov	r0, r3
 800346a:	f7ff ff26 	bl	80032ba <LL_ADC_IsInternalRegulatorEnabled>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10d      	bne.n	8003490 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003478:	f043 0210 	orr.w	r2, r3, #16
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003484:	f043 0201 	orr.w	r2, r3, #1
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff ff93 	bl	80033c0 <LL_ADC_REG_IsConversionOngoing>
 800349a:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a0:	f003 0310 	and.w	r3, r3, #16
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f040 8124 	bne.w	80036f2 <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f040 8120 	bne.w	80036f2 <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80034ba:	f043 0202 	orr.w	r2, r3, #2
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff ff30 	bl	800332c <LL_ADC_IsEnabled>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f040 80a7 	bne.w	8003622 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	7e1b      	ldrb	r3, [r3, #24]
 80034dc:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80034de:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	7e5b      	ldrb	r3, [r3, #25]
 80034e4:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80034e6:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	7e9b      	ldrb	r3, [r3, #26]
 80034ec:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80034ee:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80034f4:	2a00      	cmp	r2, #0
 80034f6:	d002      	beq.n	80034fe <HAL_ADC_Init+0x11a>
 80034f8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80034fc:	e000      	b.n	8003500 <HAL_ADC_Init+0x11c>
 80034fe:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003500:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003506:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	2b00      	cmp	r3, #0
 800350e:	da04      	bge.n	800351a <HAL_ADC_Init+0x136>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003518:	e001      	b.n	800351e <HAL_ADC_Init+0x13a>
 800351a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 800351e:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003526:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003528:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	4313      	orrs	r3, r2
 800352e:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d114      	bne.n	8003564 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	7e9b      	ldrb	r3, [r3, #26]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d104      	bne.n	800354c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003548:	61bb      	str	r3, [r7, #24]
 800354a:	e00b      	b.n	8003564 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003550:	f043 0220 	orr.w	r2, r3, #32
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800355c:	f043 0201 	orr.w	r2, r3, #1
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003568:	2b00      	cmp	r3, #0
 800356a:	d009      	beq.n	8003580 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003570:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003578:	4313      	orrs	r3, r2
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	4313      	orrs	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f423 33fe 	bic.w	r3, r3, #130048	@ 0x1fc00
 800358a:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6812      	ldr	r2, [r2, #0]
 8003592:	69b9      	ldr	r1, [r7, #24]
 8003594:	430b      	orrs	r3, r1
 8003596:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80035a4:	4313      	orrs	r3, r2
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d111      	bne.n	80035da <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80035c2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 80035c8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80035ce:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	f043 0301 	orr.w	r3, r3, #1
 80035d8:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	691a      	ldr	r2, [r3, #16]
 80035e0:	4b38      	ldr	r3, [pc, #224]	@ (80036c4 <HAL_ADC_Init+0x2e0>)
 80035e2:	4013      	ands	r3, r2
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	6812      	ldr	r2, [r2, #0]
 80035e8:	6979      	ldr	r1, [r7, #20]
 80035ea:	430b      	orrs	r3, r1
 80035ec:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80035f6:	d014      	beq.n	8003622 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80035fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003600:	d00f      	beq.n	8003622 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003606:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800360a:	d00a      	beq.n	8003622 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 800360c:	4b2e      	ldr	r3, [pc, #184]	@ (80036c8 <HAL_ADC_Init+0x2e4>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800361c:	492a      	ldr	r1, [pc, #168]	@ (80036c8 <HAL_ADC_Init+0x2e4>)
 800361e:	4313      	orrs	r3, r2
 8003620:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6818      	ldr	r0, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800362a:	461a      	mov	r2, r3
 800362c:	2100      	movs	r1, #0
 800362e:	f7ff fd76 	bl	800311e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6818      	ldr	r0, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800363a:	461a      	mov	r2, r3
 800363c:	4923      	ldr	r1, [pc, #140]	@ (80036cc <HAL_ADC_Init+0x2e8>)
 800363e:	f7ff fd6e 	bl	800311e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d108      	bne.n	800365c <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f062 020f 	orn	r2, r2, #15
 8003658:	629a      	str	r2, [r3, #40]	@ 0x28
 800365a:	e017      	b.n	800368c <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003664:	d112      	bne.n	800368c <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	3b01      	subs	r3, #1
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	f003 031c 	and.w	r3, r3, #28
 8003678:	f06f 020f 	mvn.w	r2, #15
 800367c:	fa02 f103 	lsl.w	r1, r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	629a      	str	r2, [r3, #40]	@ 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2100      	movs	r1, #0
 8003692:	4618      	mov	r0, r3
 8003694:	f7ff fd61 	bl	800315a <LL_ADC_GetSamplingTimeCommonChannels>
 8003698:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800369e:	429a      	cmp	r2, r3
 80036a0:	d116      	bne.n	80036d0 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ac:	f023 0303 	bic.w	r3, r3, #3
 80036b0:	f043 0201 	orr.w	r2, r3, #1
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	659a      	str	r2, [r3, #88]	@ 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80036b8:	e023      	b.n	8003702 <HAL_ADC_Init+0x31e>
 80036ba:	bf00      	nop
 80036bc:	20000000 	.word	0x20000000
 80036c0:	053e2d63 	.word	0x053e2d63
 80036c4:	1ffffc02 	.word	0x1ffffc02
 80036c8:	40012708 	.word	0x40012708
 80036cc:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036d4:	f023 0312 	bic.w	r3, r3, #18
 80036d8:	f043 0210 	orr.w	r2, r3, #16
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e4:	f043 0201 	orr.w	r2, r3, #1
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80036f0:	e007      	b.n	8003702 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036f6:	f043 0210 	orr.w	r2, r3, #16
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8003702:	7ffb      	ldrb	r3, [r7, #31]
}
 8003704:	4618      	mov	r0, r3
 8003706:	3720      	adds	r7, #32
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e07a      	b.n	8003814 <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003722:	f043 0202 	orr.w	r2, r3, #2
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 face 	bl	8003ccc <ADC_ConversionStop>
 8003730:	4603      	mov	r3, r0
 8003732:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003734:	7bfb      	ldrb	r3, [r7, #15]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10f      	bne.n	800375a <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 fb92 	bl	8003e64 <ADC_Disable>
 8003740:	4603      	mov	r3, r0
 8003742:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003744:	7bfb      	ldrb	r3, [r7, #15]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d102      	bne.n	8003750 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff fd9f 	bl	8003298 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6812      	ldr	r2, [r2, #0]
 8003764:	f423 7367 	bic.w	r3, r3, #924	@ 0x39c
 8003768:	f023 0303 	bic.w	r3, r3, #3
 800376c:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f240 329f 	movw	r2, #927	@ 0x39f
 8003776:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68d9      	ldr	r1, [r3, #12]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	4b26      	ldr	r3, [pc, #152]	@ (800381c <HAL_ADC_DeInit+0x110>)
 8003784:	400b      	ands	r3, r1
 8003786:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	691a      	ldr	r2, [r3, #16]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8003796:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	695a      	ldr	r2, [r3, #20]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 0207 	bic.w	r2, r2, #7
 80037a6:	615a      	str	r2, [r3, #20]

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6a1a      	ldr	r2, [r3, #32]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 80037b6:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 80037c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 80037d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2200      	movs	r2, #0
 80037e4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 80037e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003820 <HAL_ADC_DeInit+0x114>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a0d      	ldr	r2, [pc, #52]	@ (8003820 <HAL_ADC_DeInit+0x114>)
 80037ec:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 80037f0:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7fd fc0c 	bl	8001010 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	659a      	str	r2, [r3, #88]	@ 0x58

  __HAL_UNLOCK(hadc);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003812:	7bfb      	ldrb	r3, [r7, #15]
}
 8003814:	4618      	mov	r0, r3
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	833e0200 	.word	0x833e0200
 8003820:	40012708 	.word	0x40012708

08003824 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff fdc5 	bl	80033c0 <LL_ADC_REG_IsConversionOngoing>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d132      	bne.n	80038a2 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003842:	2b01      	cmp	r3, #1
 8003844:	d101      	bne.n	800384a <HAL_ADC_Start+0x26>
 8003846:	2302      	movs	r3, #2
 8003848:	e02e      	b.n	80038a8 <HAL_ADC_Start+0x84>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 fa80 	bl	8003d58 <ADC_Enable>
 8003858:	4603      	mov	r3, r0
 800385a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800385c:	7bfb      	ldrb	r3, [r7, #15]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d11a      	bne.n	8003898 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003866:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800386a:	f023 0301 	bic.w	r3, r3, #1
 800386e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	221c      	movs	r2, #28
 8003882:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff fd6f 	bl	8003374 <LL_ADC_REG_StartConversion>
 8003896:	e006      	b.n	80038a6 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80038a0:	e001      	b.n	80038a6 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80038a2:	2302      	movs	r3, #2
 80038a4:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 80038a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d101      	bne.n	80038c6 <HAL_ADC_Stop+0x16>
 80038c2:	2302      	movs	r3, #2
 80038c4:	e022      	b.n	800390c <HAL_ADC_Stop+0x5c>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f9fc 	bl	8003ccc <ADC_ConversionStop>
 80038d4:	4603      	mov	r3, r0
 80038d6:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80038d8:	7bfb      	ldrb	r3, [r7, #15]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d111      	bne.n	8003902 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 fac0 	bl	8003e64 <ADC_Disable>
 80038e4:	4603      	mov	r3, r0
 80038e6:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d109      	bne.n	8003902 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038f6:	f023 0301 	bic.w	r3, r3, #1
 80038fa:	f043 0201 	orr.w	r2, r3, #1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 800390a:	7bfb      	ldrb	r3, [r7, #15]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	2b08      	cmp	r3, #8
 8003924:	d102      	bne.n	800392c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8003926:	2308      	movs	r3, #8
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	e010      	b.n	800394e <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d007      	beq.n	800394a <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800393e:	f043 0220 	orr.w	r2, r3, #32
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e077      	b.n	8003a3a <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800394a:	2304      	movs	r3, #4
 800394c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800394e:	f7fe fb29 	bl	8001fa4 <HAL_GetTick>
 8003952:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003954:	e021      	b.n	800399a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395c:	d01d      	beq.n	800399a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800395e:	f7fe fb21 	bl	8001fa4 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	429a      	cmp	r2, r3
 800396c:	d302      	bcc.n	8003974 <HAL_ADC_PollForConversion+0x60>
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d112      	bne.n	800399a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	4013      	ands	r3, r2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10b      	bne.n	800399a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003986:	f043 0204 	orr.w	r2, r3, #4
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e04f      	b.n	8003a3a <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4013      	ands	r3, r2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d0d6      	beq.n	8003956 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7ff fbe6 	bl	800318a <LL_ADC_REG_IsTriggerSourceSWStart>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d031      	beq.n	8003a28 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	7e9b      	ldrb	r3, [r3, #26]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d12d      	bne.n	8003a28 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	d126      	bne.n	8003a28 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f7ff fcee 	bl	80033c0 <LL_ADC_REG_IsConversionOngoing>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d112      	bne.n	8003a10 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 020c 	bic.w	r2, r2, #12
 80039f8:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039fe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a02:	f023 0301 	bic.w	r3, r3, #1
 8003a06:	f043 0201 	orr.w	r2, r3, #1
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	659a      	str	r2, [r3, #88]	@ 0x58
 8003a0e:	e00b      	b.n	8003a28 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a14:	f043 0220 	orr.w	r2, r3, #32
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a20:	f043 0201 	orr.w	r2, r3, #1
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	7e1b      	ldrb	r3, [r3, #24]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d103      	bne.n	8003a38 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	220c      	movs	r2, #12
 8003a36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bc80      	pop	{r7}
 8003a58:	4770      	bx	lr
	...

08003a5c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b088      	sub	sp, #32
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d101      	bne.n	8003a84 <HAL_ADC_ConfigChannel+0x28>
 8003a80:	2302      	movs	r3, #2
 8003a82:	e110      	b.n	8003ca6 <HAL_ADC_ConfigChannel+0x24a>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7ff fc95 	bl	80033c0 <LL_ADC_REG_IsConversionOngoing>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f040 80f7 	bne.w	8003c8c <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	f000 80b1 	beq.w	8003c0a <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ab0:	d004      	beq.n	8003abc <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003ab6:	4a7e      	ldr	r2, [pc, #504]	@ (8003cb0 <HAL_ADC_ConfigChannel+0x254>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d108      	bne.n	8003ace <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4610      	mov	r0, r2
 8003ac8:	f7ff fb92 	bl	80031f0 <LL_ADC_REG_SetSequencerChAdd>
 8003acc:	e041      	b.n	8003b52 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f003 031f 	and.w	r3, r3, #31
 8003ada:	210f      	movs	r1, #15
 8003adc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	401a      	ands	r2, r3
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d105      	bne.n	8003afc <HAL_ADC_ConfigChannel+0xa0>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	0e9b      	lsrs	r3, r3, #26
 8003af6:	f003 031f 	and.w	r3, r3, #31
 8003afa:	e011      	b.n	8003b20 <HAL_ADC_ConfigChannel+0xc4>
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	fa93 f3a3 	rbit	r3, r3
 8003b08:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003b14:	2320      	movs	r3, #32
 8003b16:	e003      	b.n	8003b20 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	fab3 f383 	clz	r3, r3
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	6839      	ldr	r1, [r7, #0]
 8003b22:	6849      	ldr	r1, [r1, #4]
 8003b24:	f001 011f 	and.w	r1, r1, #31
 8003b28:	408b      	lsls	r3, r1
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	089b      	lsrs	r3, r3, #2
 8003b36:	1c5a      	adds	r2, r3, #1
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	69db      	ldr	r3, [r3, #28]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d808      	bhi.n	8003b52 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6818      	ldr	r0, [r3, #0]
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	6859      	ldr	r1, [r3, #4]
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	f7ff fb2e 	bl	80031ae <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6818      	ldr	r0, [r3, #0]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	6819      	ldr	r1, [r3, #0]
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	f7ff fb6b 	bl	800323a <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f280 8097 	bge.w	8003c9c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b6e:	4851      	ldr	r0, [pc, #324]	@ (8003cb4 <HAL_ADC_ConfigChannel+0x258>)
 8003b70:	f7ff fac8 	bl	8003104 <LL_ADC_GetCommonPathInternalCh>
 8003b74:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a4f      	ldr	r2, [pc, #316]	@ (8003cb8 <HAL_ADC_ConfigChannel+0x25c>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d120      	bne.n	8003bc2 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d11b      	bne.n	8003bc2 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003b90:	4619      	mov	r1, r3
 8003b92:	4848      	ldr	r0, [pc, #288]	@ (8003cb4 <HAL_ADC_ConfigChannel+0x258>)
 8003b94:	f7ff faa4 	bl	80030e0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b98:	4b48      	ldr	r3, [pc, #288]	@ (8003cbc <HAL_ADC_ConfigChannel+0x260>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	099b      	lsrs	r3, r3, #6
 8003b9e:	4a48      	ldr	r2, [pc, #288]	@ (8003cc0 <HAL_ADC_ConfigChannel+0x264>)
 8003ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba4:	099b      	lsrs	r3, r3, #6
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	4613      	mov	r3, r2
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	4413      	add	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003bb2:	e002      	b.n	8003bba <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1f9      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003bc0:	e06c      	b.n	8003c9c <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a3f      	ldr	r2, [pc, #252]	@ (8003cc4 <HAL_ADC_ConfigChannel+0x268>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d10c      	bne.n	8003be6 <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d107      	bne.n	8003be6 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bdc:	4619      	mov	r1, r3
 8003bde:	4835      	ldr	r0, [pc, #212]	@ (8003cb4 <HAL_ADC_ConfigChannel+0x258>)
 8003be0:	f7ff fa7e 	bl	80030e0 <LL_ADC_SetCommonPathInternalCh>
 8003be4:	e05a      	b.n	8003c9c <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a37      	ldr	r2, [pc, #220]	@ (8003cc8 <HAL_ADC_ConfigChannel+0x26c>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d155      	bne.n	8003c9c <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d150      	bne.n	8003c9c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003c00:	4619      	mov	r1, r3
 8003c02:	482c      	ldr	r0, [pc, #176]	@ (8003cb4 <HAL_ADC_ConfigChannel+0x258>)
 8003c04:	f7ff fa6c 	bl	80030e0 <LL_ADC_SetCommonPathInternalCh>
 8003c08:	e048      	b.n	8003c9c <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c12:	d004      	beq.n	8003c1e <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003c18:	4a25      	ldr	r2, [pc, #148]	@ (8003cb0 <HAL_ADC_ConfigChannel+0x254>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d107      	bne.n	8003c2e <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4619      	mov	r1, r3
 8003c28:	4610      	mov	r0, r2
 8003c2a:	f7ff faf3 	bl	8003214 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	da32      	bge.n	8003c9c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c36:	481f      	ldr	r0, [pc, #124]	@ (8003cb4 <HAL_ADC_ConfigChannel+0x258>)
 8003c38:	f7ff fa64 	bl	8003104 <LL_ADC_GetCommonPathInternalCh>
 8003c3c:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a1d      	ldr	r2, [pc, #116]	@ (8003cb8 <HAL_ADC_ConfigChannel+0x25c>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d107      	bne.n	8003c58 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4818      	ldr	r0, [pc, #96]	@ (8003cb4 <HAL_ADC_ConfigChannel+0x258>)
 8003c52:	f7ff fa45 	bl	80030e0 <LL_ADC_SetCommonPathInternalCh>
 8003c56:	e021      	b.n	8003c9c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a19      	ldr	r2, [pc, #100]	@ (8003cc4 <HAL_ADC_ConfigChannel+0x268>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d107      	bne.n	8003c72 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c68:	4619      	mov	r1, r3
 8003c6a:	4812      	ldr	r0, [pc, #72]	@ (8003cb4 <HAL_ADC_ConfigChannel+0x258>)
 8003c6c:	f7ff fa38 	bl	80030e0 <LL_ADC_SetCommonPathInternalCh>
 8003c70:	e014      	b.n	8003c9c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a14      	ldr	r2, [pc, #80]	@ (8003cc8 <HAL_ADC_ConfigChannel+0x26c>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d10f      	bne.n	8003c9c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003c82:	4619      	mov	r1, r3
 8003c84:	480b      	ldr	r0, [pc, #44]	@ (8003cb4 <HAL_ADC_ConfigChannel+0x258>)
 8003c86:	f7ff fa2b 	bl	80030e0 <LL_ADC_SetCommonPathInternalCh>
 8003c8a:	e007      	b.n	8003c9c <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c90:	f043 0220 	orr.w	r2, r3, #32
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003ca4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3720      	adds	r7, #32
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	80000004 	.word	0x80000004
 8003cb4:	40012708 	.word	0x40012708
 8003cb8:	b0001000 	.word	0xb0001000
 8003cbc:	20000000 	.word	0x20000000
 8003cc0:	053e2d63 	.word	0x053e2d63
 8003cc4:	b8004000 	.word	0xb8004000
 8003cc8:	b4002000 	.word	0xb4002000

08003ccc <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7ff fb71 	bl	80033c0 <LL_ADC_REG_IsConversionOngoing>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d033      	beq.n	8003d4c <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff fb31 	bl	8003350 <LL_ADC_IsDisableOngoing>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d104      	bne.n	8003cfe <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff fb4e 	bl	800339a <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003cfe:	f7fe f951 	bl	8001fa4 <HAL_GetTick>
 8003d02:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003d04:	e01b      	b.n	8003d3e <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003d06:	f7fe f94d 	bl	8001fa4 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d914      	bls.n	8003d3e <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 0304 	and.w	r3, r3, #4
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00d      	beq.n	8003d3e <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d26:	f043 0210 	orr.w	r2, r3, #16
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d32:	f043 0201 	orr.w	r2, r3, #1
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e007      	b.n	8003d4e <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1dc      	bne.n	8003d06 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003d60:	2300      	movs	r3, #0
 8003d62:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff fadf 	bl	800332c <LL_ADC_IsEnabled>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d169      	bne.n	8003e48 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	4b36      	ldr	r3, [pc, #216]	@ (8003e54 <ADC_Enable+0xfc>)
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00d      	beq.n	8003d9e <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d86:	f043 0210 	orr.w	r2, r3, #16
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d92:	f043 0201 	orr.w	r2, r3, #1
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e055      	b.n	8003e4a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7ff fa9c 	bl	80032e0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8003da8:	482b      	ldr	r0, [pc, #172]	@ (8003e58 <ADC_Enable+0x100>)
 8003daa:	f7ff f9ab 	bl	8003104 <LL_ADC_GetCommonPathInternalCh>
 8003dae:	4603      	mov	r3, r0
 8003db0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00f      	beq.n	8003dd8 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003db8:	4b28      	ldr	r3, [pc, #160]	@ (8003e5c <ADC_Enable+0x104>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	099b      	lsrs	r3, r3, #6
 8003dbe:	4a28      	ldr	r2, [pc, #160]	@ (8003e60 <ADC_Enable+0x108>)
 8003dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc4:	099b      	lsrs	r3, r3, #6
 8003dc6:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8003dc8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003dca:	e002      	b.n	8003dd2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1f9      	bne.n	8003dcc <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	7e5b      	ldrb	r3, [r3, #25]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d033      	beq.n	8003e48 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003de0:	f7fe f8e0 	bl	8001fa4 <HAL_GetTick>
 8003de4:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003de6:	e028      	b.n	8003e3a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7ff fa9d 	bl	800332c <LL_ADC_IsEnabled>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d104      	bne.n	8003e02 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff fa6f 	bl	80032e0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003e02:	f7fe f8cf 	bl	8001fa4 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d914      	bls.n	8003e3a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d00d      	beq.n	8003e3a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e22:	f043 0210 	orr.w	r2, r3, #16
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e2e:	f043 0201 	orr.w	r2, r3, #1
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e007      	b.n	8003e4a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d1cf      	bne.n	8003de8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	80000017 	.word	0x80000017
 8003e58:	40012708 	.word	0x40012708
 8003e5c:	20000000 	.word	0x20000000
 8003e60:	053e2d63 	.word	0x053e2d63

08003e64 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff fa6d 	bl	8003350 <LL_ADC_IsDisableOngoing>
 8003e76:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7ff fa55 	bl	800332c <LL_ADC_IsEnabled>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d047      	beq.n	8003f18 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d144      	bne.n	8003f18 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f003 0305 	and.w	r3, r3, #5
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d10c      	bne.n	8003eb6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7ff fa30 	bl	8003306 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2203      	movs	r2, #3
 8003eac:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003eae:	f7fe f879 	bl	8001fa4 <HAL_GetTick>
 8003eb2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003eb4:	e029      	b.n	8003f0a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eba:	f043 0210 	orr.w	r2, r3, #16
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ec6:	f043 0201 	orr.w	r2, r3, #1
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e023      	b.n	8003f1a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ed2:	f7fe f867 	bl	8001fa4 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d914      	bls.n	8003f0a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00d      	beq.n	8003f0a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ef2:	f043 0210 	orr.w	r2, r3, #16
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003efe:	f043 0201 	orr.w	r2, r3, #1
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e007      	b.n	8003f1a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1dc      	bne.n	8003ed2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <LL_ADC_SetCalibrationFactor>:
{
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
 8003f2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003f32:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bc80      	pop	{r7}
 8003f48:	4770      	bx	lr

08003f4a <LL_ADC_GetCalibrationFactor>:
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b083      	sub	sp, #12
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003f58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bc80      	pop	{r7}
 8003f64:	4770      	bx	lr

08003f66 <LL_ADC_Enable>:
{
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003f76:	f023 0317 	bic.w	r3, r3, #23
 8003f7a:	f043 0201 	orr.w	r2, r3, #1
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	609a      	str	r2, [r3, #8]
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bc80      	pop	{r7}
 8003f8a:	4770      	bx	lr

08003f8c <LL_ADC_Disable>:
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003f9c:	f023 0317 	bic.w	r3, r3, #23
 8003fa0:	f043 0202 	orr.w	r2, r3, #2
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	609a      	str	r2, [r3, #8]
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bc80      	pop	{r7}
 8003fb0:	4770      	bx	lr

08003fb2 <LL_ADC_IsEnabled>:
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b083      	sub	sp, #12
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d101      	bne.n	8003fca <LL_ADC_IsEnabled+0x18>
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e000      	b.n	8003fcc <LL_ADC_IsEnabled+0x1a>
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bc80      	pop	{r7}
 8003fd4:	4770      	bx	lr

08003fd6 <LL_ADC_StartCalibration>:
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003fe6:	f023 0317 	bic.w	r3, r3, #23
 8003fea:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	609a      	str	r2, [r3, #8]
}
 8003ff2:	bf00      	nop
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bc80      	pop	{r7}
 8003ffa:	4770      	bx	lr

08003ffc <LL_ADC_IsCalibrationOnGoing>:
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800400c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004010:	d101      	bne.n	8004016 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004012:	2301      	movs	r3, #1
 8004014:	e000      	b.n	8004018 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	bc80      	pop	{r7}
 8004020:	4770      	bx	lr

08004022 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b088      	sub	sp, #32
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800402a:	2300      	movs	r3, #0
 800402c:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 800402e:	2300      	movs	r3, #0
 8004030:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004038:	2b01      	cmp	r3, #1
 800403a:	d101      	bne.n	8004040 <HAL_ADCEx_Calibration_Start+0x1e>
 800403c:	2302      	movs	r3, #2
 800403e:	e0b9      	b.n	80041b4 <HAL_ADCEx_Calibration_Start+0x192>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f7ff ff0b 	bl	8003e64 <ADC_Disable>
 800404e:	4603      	mov	r3, r0
 8004050:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff ffab 	bl	8003fb2 <LL_ADC_IsEnabled>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	f040 809d 	bne.w	800419e <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004068:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800406c:	f043 0202 	orr.w	r2, r3, #2
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68da      	ldr	r2, [r3, #12]
 800407a:	f248 0303 	movw	r3, #32771	@ 0x8003
 800407e:	4013      	ands	r3, r2
 8004080:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6812      	ldr	r2, [r2, #0]
 800408c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004090:	f023 0303 	bic.w	r3, r3, #3
 8004094:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004096:	2300      	movs	r3, #0
 8004098:	61fb      	str	r3, [r7, #28]
 800409a:	e02e      	b.n	80040fa <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7ff ff98 	bl	8003fd6 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80040a6:	e014      	b.n	80040d2 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	3301      	adds	r3, #1
 80040ac:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 80040b4:	d30d      	bcc.n	80040d2 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ba:	f023 0312 	bic.w	r3, r3, #18
 80040be:	f043 0210 	orr.w	r2, r3, #16
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e070      	b.n	80041b4 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff ff90 	bl	8003ffc <LL_ADC_IsCalibrationOnGoing>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1e2      	bne.n	80040a8 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7ff ff2f 	bl	8003f4a <LL_ADC_GetCalibrationFactor>
 80040ec:	4602      	mov	r2, r0
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	4413      	add	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	3301      	adds	r3, #1
 80040f8:	61fb      	str	r3, [r7, #28]
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	2b07      	cmp	r3, #7
 80040fe:	d9cd      	bls.n	800409c <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	fbb2 f3f3 	udiv	r3, r2, r3
 8004108:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4618      	mov	r0, r3
 8004110:	f7ff ff29 	bl	8003f66 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	69b9      	ldr	r1, [r7, #24]
 800411a:	4618      	mov	r0, r3
 800411c:	f7ff ff01 	bl	8003f22 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4618      	mov	r0, r3
 8004126:	f7ff ff31 	bl	8003f8c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800412a:	f7fd ff3b 	bl	8001fa4 <HAL_GetTick>
 800412e:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004130:	e01c      	b.n	800416c <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004132:	f7fd ff37 	bl	8001fa4 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d915      	bls.n	800416c <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4618      	mov	r0, r3
 8004146:	f7ff ff34 	bl	8003fb2 <LL_ADC_IsEnabled>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00d      	beq.n	800416c <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004154:	f043 0210 	orr.w	r2, r3, #16
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004160:	f043 0201 	orr.w	r2, r3, #1
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e023      	b.n	80041b4 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4618      	mov	r0, r3
 8004172:	f7ff ff1e 	bl	8003fb2 <LL_ADC_IsEnabled>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1da      	bne.n	8004132 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68d9      	ldr	r1, [r3, #12]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	430a      	orrs	r2, r1
 800418a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004190:	f023 0303 	bic.w	r3, r3, #3
 8004194:	f043 0201 	orr.w	r2, r3, #1
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	659a      	str	r2, [r3, #88]	@ 0x58
 800419c:	e005      	b.n	80041aa <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a2:	f043 0210 	orr.w	r2, r3, #16
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 80041b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3720      	adds	r7, #32
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f003 0307 	and.w	r3, r3, #7
 80041ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004200 <__NVIC_SetPriorityGrouping+0x44>)
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80041d8:	4013      	ands	r3, r2
 80041da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80041e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041ee:	4a04      	ldr	r2, [pc, #16]	@ (8004200 <__NVIC_SetPriorityGrouping+0x44>)
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	60d3      	str	r3, [r2, #12]
}
 80041f4:	bf00      	nop
 80041f6:	3714      	adds	r7, #20
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bc80      	pop	{r7}
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	e000ed00 	.word	0xe000ed00

08004204 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004208:	4b04      	ldr	r3, [pc, #16]	@ (800421c <__NVIC_GetPriorityGrouping+0x18>)
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	0a1b      	lsrs	r3, r3, #8
 800420e:	f003 0307 	and.w	r3, r3, #7
}
 8004212:	4618      	mov	r0, r3
 8004214:	46bd      	mov	sp, r7
 8004216:	bc80      	pop	{r7}
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	e000ed00 	.word	0xe000ed00

08004220 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	4603      	mov	r3, r0
 8004228:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800422a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800422e:	2b00      	cmp	r3, #0
 8004230:	db0b      	blt.n	800424a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004232:	79fb      	ldrb	r3, [r7, #7]
 8004234:	f003 021f 	and.w	r2, r3, #31
 8004238:	4906      	ldr	r1, [pc, #24]	@ (8004254 <__NVIC_EnableIRQ+0x34>)
 800423a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800423e:	095b      	lsrs	r3, r3, #5
 8004240:	2001      	movs	r0, #1
 8004242:	fa00 f202 	lsl.w	r2, r0, r2
 8004246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800424a:	bf00      	nop
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr
 8004254:	e000e100 	.word	0xe000e100

08004258 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	4603      	mov	r3, r0
 8004260:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004266:	2b00      	cmp	r3, #0
 8004268:	db12      	blt.n	8004290 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800426a:	79fb      	ldrb	r3, [r7, #7]
 800426c:	f003 021f 	and.w	r2, r3, #31
 8004270:	490a      	ldr	r1, [pc, #40]	@ (800429c <__NVIC_DisableIRQ+0x44>)
 8004272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004276:	095b      	lsrs	r3, r3, #5
 8004278:	2001      	movs	r0, #1
 800427a:	fa00 f202 	lsl.w	r2, r0, r2
 800427e:	3320      	adds	r3, #32
 8004280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004284:	f3bf 8f4f 	dsb	sy
}
 8004288:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800428a:	f3bf 8f6f 	isb	sy
}
 800428e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	bc80      	pop	{r7}
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	e000e100 	.word	0xe000e100

080042a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	4603      	mov	r3, r0
 80042a8:	6039      	str	r1, [r7, #0]
 80042aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	db0a      	blt.n	80042ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	490c      	ldr	r1, [pc, #48]	@ (80042ec <__NVIC_SetPriority+0x4c>)
 80042ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042be:	0112      	lsls	r2, r2, #4
 80042c0:	b2d2      	uxtb	r2, r2
 80042c2:	440b      	add	r3, r1
 80042c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042c8:	e00a      	b.n	80042e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	4908      	ldr	r1, [pc, #32]	@ (80042f0 <__NVIC_SetPriority+0x50>)
 80042d0:	79fb      	ldrb	r3, [r7, #7]
 80042d2:	f003 030f 	and.w	r3, r3, #15
 80042d6:	3b04      	subs	r3, #4
 80042d8:	0112      	lsls	r2, r2, #4
 80042da:	b2d2      	uxtb	r2, r2
 80042dc:	440b      	add	r3, r1
 80042de:	761a      	strb	r2, [r3, #24]
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bc80      	pop	{r7}
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	e000e100 	.word	0xe000e100
 80042f0:	e000ed00 	.word	0xe000ed00

080042f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b089      	sub	sp, #36	@ 0x24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f003 0307 	and.w	r3, r3, #7
 8004306:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	f1c3 0307 	rsb	r3, r3, #7
 800430e:	2b04      	cmp	r3, #4
 8004310:	bf28      	it	cs
 8004312:	2304      	movcs	r3, #4
 8004314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	3304      	adds	r3, #4
 800431a:	2b06      	cmp	r3, #6
 800431c:	d902      	bls.n	8004324 <NVIC_EncodePriority+0x30>
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	3b03      	subs	r3, #3
 8004322:	e000      	b.n	8004326 <NVIC_EncodePriority+0x32>
 8004324:	2300      	movs	r3, #0
 8004326:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004328:	f04f 32ff 	mov.w	r2, #4294967295
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	fa02 f303 	lsl.w	r3, r2, r3
 8004332:	43da      	mvns	r2, r3
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	401a      	ands	r2, r3
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800433c:	f04f 31ff 	mov.w	r1, #4294967295
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	fa01 f303 	lsl.w	r3, r1, r3
 8004346:	43d9      	mvns	r1, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800434c:	4313      	orrs	r3, r2
         );
}
 800434e:	4618      	mov	r0, r3
 8004350:	3724      	adds	r7, #36	@ 0x24
 8004352:	46bd      	mov	sp, r7
 8004354:	bc80      	pop	{r7}
 8004356:	4770      	bx	lr

08004358 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	3b01      	subs	r3, #1
 8004364:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004368:	d301      	bcc.n	800436e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800436a:	2301      	movs	r3, #1
 800436c:	e00f      	b.n	800438e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800436e:	4a0a      	ldr	r2, [pc, #40]	@ (8004398 <SysTick_Config+0x40>)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	3b01      	subs	r3, #1
 8004374:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004376:	210f      	movs	r1, #15
 8004378:	f04f 30ff 	mov.w	r0, #4294967295
 800437c:	f7ff ff90 	bl	80042a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004380:	4b05      	ldr	r3, [pc, #20]	@ (8004398 <SysTick_Config+0x40>)
 8004382:	2200      	movs	r2, #0
 8004384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004386:	4b04      	ldr	r3, [pc, #16]	@ (8004398 <SysTick_Config+0x40>)
 8004388:	2207      	movs	r2, #7
 800438a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	e000e010 	.word	0xe000e010

0800439c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f7ff ff09 	bl	80041bc <__NVIC_SetPriorityGrouping>
}
 80043aa:	bf00      	nop
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b086      	sub	sp, #24
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	4603      	mov	r3, r0
 80043ba:	60b9      	str	r1, [r7, #8]
 80043bc:	607a      	str	r2, [r7, #4]
 80043be:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80043c0:	f7ff ff20 	bl	8004204 <__NVIC_GetPriorityGrouping>
 80043c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	68b9      	ldr	r1, [r7, #8]
 80043ca:	6978      	ldr	r0, [r7, #20]
 80043cc:	f7ff ff92 	bl	80042f4 <NVIC_EncodePriority>
 80043d0:	4602      	mov	r2, r0
 80043d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043d6:	4611      	mov	r1, r2
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff ff61 	bl	80042a0 <__NVIC_SetPriority>
}
 80043de:	bf00      	nop
 80043e0:	3718      	adds	r7, #24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b082      	sub	sp, #8
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	4603      	mov	r3, r0
 80043ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7ff ff13 	bl	8004220 <__NVIC_EnableIRQ>
}
 80043fa:	bf00      	nop
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b082      	sub	sp, #8
 8004406:	af00      	add	r7, sp, #0
 8004408:	4603      	mov	r3, r0
 800440a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800440c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff ff21 	bl	8004258 <__NVIC_DisableIRQ>
}
 8004416:	bf00      	nop
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b082      	sub	sp, #8
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7ff ff96 	bl	8004358 <SysTick_Config>
 800442c:	4603      	mov	r3, r0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
	...

08004438 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e08e      	b.n	8004568 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	461a      	mov	r2, r3
 8004450:	4b47      	ldr	r3, [pc, #284]	@ (8004570 <HAL_DMA_Init+0x138>)
 8004452:	429a      	cmp	r2, r3
 8004454:	d80f      	bhi.n	8004476 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	461a      	mov	r2, r3
 800445c:	4b45      	ldr	r3, [pc, #276]	@ (8004574 <HAL_DMA_Init+0x13c>)
 800445e:	4413      	add	r3, r2
 8004460:	4a45      	ldr	r2, [pc, #276]	@ (8004578 <HAL_DMA_Init+0x140>)
 8004462:	fba2 2303 	umull	r2, r3, r2, r3
 8004466:	091b      	lsrs	r3, r3, #4
 8004468:	009a      	lsls	r2, r3, #2
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a42      	ldr	r2, [pc, #264]	@ (800457c <HAL_DMA_Init+0x144>)
 8004472:	641a      	str	r2, [r3, #64]	@ 0x40
 8004474:	e00e      	b.n	8004494 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	461a      	mov	r2, r3
 800447c:	4b40      	ldr	r3, [pc, #256]	@ (8004580 <HAL_DMA_Init+0x148>)
 800447e:	4413      	add	r3, r2
 8004480:	4a3d      	ldr	r2, [pc, #244]	@ (8004578 <HAL_DMA_Init+0x140>)
 8004482:	fba2 2303 	umull	r2, r3, r2, r3
 8004486:	091b      	lsrs	r3, r3, #4
 8004488:	009a      	lsls	r2, r3, #2
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a3c      	ldr	r2, [pc, #240]	@ (8004584 <HAL_DMA_Init+0x14c>)
 8004492:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2202      	movs	r2, #2
 8004498:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	6812      	ldr	r2, [r2, #0]
 80044a6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80044aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ae:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6819      	ldr	r1, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689a      	ldr	r2, [r3, #8]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	431a      	orrs	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	431a      	orrs	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	431a      	orrs	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	431a      	orrs	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	431a      	orrs	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 fb24 	bl	8004b34 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044f4:	d102      	bne.n	80044fc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004504:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004508:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004512:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d010      	beq.n	800453e <HAL_DMA_Init+0x106>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	2b04      	cmp	r3, #4
 8004522:	d80c      	bhi.n	800453e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 fb4d 	bl	8004bc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800452e:	2200      	movs	r2, #0
 8004530:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800453a:	605a      	str	r2, [r3, #4]
 800453c:	e008      	b.n	8004550 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3708      	adds	r7, #8
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	40020407 	.word	0x40020407
 8004574:	bffdfff8 	.word	0xbffdfff8
 8004578:	cccccccd 	.word	0xcccccccd
 800457c:	40020000 	.word	0x40020000
 8004580:	bffdfbf8 	.word	0xbffdfbf8
 8004584:	40020400 	.word	0x40020400

08004588 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e07b      	b.n	8004692 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 0201 	bic.w	r2, r2, #1
 80045a8:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	461a      	mov	r2, r3
 80045b0:	4b3a      	ldr	r3, [pc, #232]	@ (800469c <HAL_DMA_DeInit+0x114>)
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d80f      	bhi.n	80045d6 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	461a      	mov	r2, r3
 80045bc:	4b38      	ldr	r3, [pc, #224]	@ (80046a0 <HAL_DMA_DeInit+0x118>)
 80045be:	4413      	add	r3, r2
 80045c0:	4a38      	ldr	r2, [pc, #224]	@ (80046a4 <HAL_DMA_DeInit+0x11c>)
 80045c2:	fba2 2303 	umull	r2, r3, r2, r3
 80045c6:	091b      	lsrs	r3, r3, #4
 80045c8:	009a      	lsls	r2, r3, #2
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a35      	ldr	r2, [pc, #212]	@ (80046a8 <HAL_DMA_DeInit+0x120>)
 80045d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80045d4:	e00e      	b.n	80045f4 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	461a      	mov	r2, r3
 80045dc:	4b33      	ldr	r3, [pc, #204]	@ (80046ac <HAL_DMA_DeInit+0x124>)
 80045de:	4413      	add	r3, r2
 80045e0:	4a30      	ldr	r2, [pc, #192]	@ (80046a4 <HAL_DMA_DeInit+0x11c>)
 80045e2:	fba2 2303 	umull	r2, r3, r2, r3
 80045e6:	091b      	lsrs	r3, r3, #4
 80045e8:	009a      	lsls	r2, r3, #2
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a2f      	ldr	r2, [pc, #188]	@ (80046b0 <HAL_DMA_DeInit+0x128>)
 80045f2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2200      	movs	r2, #0
 80045fa:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004600:	f003 021c 	and.w	r2, r3, #28
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004608:	2101      	movs	r1, #1
 800460a:	fa01 f202 	lsl.w	r2, r1, r2
 800460e:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 fa8f 	bl	8004b34 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800461a:	2200      	movs	r2, #0
 800461c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004626:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00f      	beq.n	8004650 <HAL_DMA_DeInit+0xc8>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	2b04      	cmp	r3, #4
 8004636:	d80b      	bhi.n	8004650 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 fac3 	bl	8004bc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004642:	2200      	movs	r2, #0
 8004644:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800464e:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	40020407 	.word	0x40020407
 80046a0:	bffdfff8 	.word	0xbffdfff8
 80046a4:	cccccccd 	.word	0xcccccccd
 80046a8:	40020000 	.word	0x40020000
 80046ac:	bffdfbf8 	.word	0xbffdfbf8
 80046b0:	40020400 	.word	0x40020400

080046b4 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b086      	sub	sp, #24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
 80046c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046c2:	2300      	movs	r3, #0
 80046c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d101      	bne.n	80046d4 <HAL_DMA_Start_IT+0x20>
 80046d0:	2302      	movs	r3, #2
 80046d2:	e069      	b.n	80047a8 <HAL_DMA_Start_IT+0xf4>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d155      	bne.n	8004794 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2202      	movs	r2, #2
 80046ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 0201 	bic.w	r2, r2, #1
 8004704:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	68b9      	ldr	r1, [r7, #8]
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f000 f9d3 	bl	8004ab8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004716:	2b00      	cmp	r3, #0
 8004718:	d008      	beq.n	800472c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f042 020e 	orr.w	r2, r2, #14
 8004728:	601a      	str	r2, [r3, #0]
 800472a:	e00f      	b.n	800474c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 0204 	bic.w	r2, r2, #4
 800473a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 020a 	orr.w	r2, r2, #10
 800474a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d007      	beq.n	800476a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004764:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004768:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800476e:	2b00      	cmp	r3, #0
 8004770:	d007      	beq.n	8004782 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800477c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004780:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f042 0201 	orr.w	r2, r2, #1
 8004790:	601a      	str	r2, [r3, #0]
 8004792:	e008      	b.n	80047a6 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2280      	movs	r2, #128	@ 0x80
 8004798:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80047a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3718      	adds	r7, #24
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e04f      	b.n	8004862 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d008      	beq.n	80047e0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2204      	movs	r2, #4
 80047d2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e040      	b.n	8004862 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 020e 	bic.w	r2, r2, #14
 80047ee:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0201 	bic.w	r2, r2, #1
 800480e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004814:	f003 021c 	and.w	r2, r3, #28
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800481c:	2101      	movs	r1, #1
 800481e:	fa01 f202 	lsl.w	r2, r1, r2
 8004822:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800482c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00c      	beq.n	8004850 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004840:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004844:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800484e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	bc80      	pop	{r7}
 800486a:	4770      	bx	lr

0800486c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004874:	2300      	movs	r3, #0
 8004876:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d005      	beq.n	8004890 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2204      	movs	r2, #4
 8004888:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	73fb      	strb	r3, [r7, #15]
 800488e:	e047      	b.n	8004920 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f022 020e 	bic.w	r2, r2, #14
 800489e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f022 0201 	bic.w	r2, r2, #1
 80048ae:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048c4:	f003 021c 	and.w	r2, r3, #28
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048cc:	2101      	movs	r1, #1
 80048ce:	fa01 f202 	lsl.w	r2, r1, r2
 80048d2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80048dc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00c      	beq.n	8004900 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048f4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80048fe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004914:	2b00      	cmp	r3, #0
 8004916:	d003      	beq.n	8004920 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	4798      	blx	r3
    }
  }
  return status;
 8004920:	7bfb      	ldrb	r3, [r7, #15]
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
	...

0800492c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004948:	f003 031c 	and.w	r3, r3, #28
 800494c:	2204      	movs	r2, #4
 800494e:	409a      	lsls	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4013      	ands	r3, r2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d027      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x7c>
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	f003 0304 	and.w	r3, r3, #4
 800495e:	2b00      	cmp	r3, #0
 8004960:	d022      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0320 	and.w	r3, r3, #32
 800496c:	2b00      	cmp	r3, #0
 800496e:	d107      	bne.n	8004980 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 0204 	bic.w	r2, r2, #4
 800497e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004984:	f003 021c 	and.w	r2, r3, #28
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800498c:	2104      	movs	r1, #4
 800498e:	fa01 f202 	lsl.w	r2, r1, r2
 8004992:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004998:	2b00      	cmp	r3, #0
 800499a:	f000 8081 	beq.w	8004aa0 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80049a6:	e07b      	b.n	8004aa0 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ac:	f003 031c 	and.w	r3, r3, #28
 80049b0:	2202      	movs	r2, #2
 80049b2:	409a      	lsls	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4013      	ands	r3, r2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d03d      	beq.n	8004a38 <HAL_DMA_IRQHandler+0x10c>
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d038      	beq.n	8004a38 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0320 	and.w	r3, r3, #32
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10b      	bne.n	80049ec <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 020a 	bic.w	r2, r2, #10
 80049e2:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	461a      	mov	r2, r3
 80049f2:	4b2e      	ldr	r3, [pc, #184]	@ (8004aac <HAL_DMA_IRQHandler+0x180>)
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d909      	bls.n	8004a0c <HAL_DMA_IRQHandler+0xe0>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049fc:	f003 031c 	and.w	r3, r3, #28
 8004a00:	4a2b      	ldr	r2, [pc, #172]	@ (8004ab0 <HAL_DMA_IRQHandler+0x184>)
 8004a02:	2102      	movs	r1, #2
 8004a04:	fa01 f303 	lsl.w	r3, r1, r3
 8004a08:	6053      	str	r3, [r2, #4]
 8004a0a:	e008      	b.n	8004a1e <HAL_DMA_IRQHandler+0xf2>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a10:	f003 031c 	and.w	r3, r3, #28
 8004a14:	4a27      	ldr	r2, [pc, #156]	@ (8004ab4 <HAL_DMA_IRQHandler+0x188>)
 8004a16:	2102      	movs	r1, #2
 8004a18:	fa01 f303 	lsl.w	r3, r1, r3
 8004a1c:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d038      	beq.n	8004aa0 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004a36:	e033      	b.n	8004aa0 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a3c:	f003 031c 	and.w	r3, r3, #28
 8004a40:	2208      	movs	r2, #8
 8004a42:	409a      	lsls	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4013      	ands	r3, r2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d02a      	beq.n	8004aa2 <HAL_DMA_IRQHandler+0x176>
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	f003 0308 	and.w	r3, r3, #8
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d025      	beq.n	8004aa2 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 020e 	bic.w	r2, r2, #14
 8004a64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a6a:	f003 021c 	and.w	r2, r3, #28
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a72:	2101      	movs	r1, #1
 8004a74:	fa01 f202 	lsl.w	r2, r1, r2
 8004a78:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d004      	beq.n	8004aa2 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004aa0:	bf00      	nop
 8004aa2:	bf00      	nop
}
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	40020080 	.word	0x40020080
 8004ab0:	40020400 	.word	0x40020400
 8004ab4:	40020000 	.word	0x40020000

08004ab8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
 8004ac4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004ace:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d004      	beq.n	8004ae2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004ae0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ae6:	f003 021c 	and.w	r2, r3, #28
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aee:	2101      	movs	r1, #1
 8004af0:	fa01 f202 	lsl.w	r2, r1, r2
 8004af4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	683a      	ldr	r2, [r7, #0]
 8004afc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	2b10      	cmp	r3, #16
 8004b04:	d108      	bne.n	8004b18 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004b16:	e007      	b.n	8004b28 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	60da      	str	r2, [r3, #12]
}
 8004b28:	bf00      	nop
 8004b2a:	3714      	adds	r7, #20
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bc80      	pop	{r7}
 8004b30:	4770      	bx	lr
	...

08004b34 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	461a      	mov	r2, r3
 8004b42:	4b1c      	ldr	r3, [pc, #112]	@ (8004bb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d813      	bhi.n	8004b70 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b4c:	089b      	lsrs	r3, r3, #2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004b54:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	3b08      	subs	r3, #8
 8004b64:	4a14      	ldr	r2, [pc, #80]	@ (8004bb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004b66:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6a:	091b      	lsrs	r3, r3, #4
 8004b6c:	60fb      	str	r3, [r7, #12]
 8004b6e:	e011      	b.n	8004b94 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b74:	089b      	lsrs	r3, r3, #2
 8004b76:	009a      	lsls	r2, r3, #2
 8004b78:	4b10      	ldr	r3, [pc, #64]	@ (8004bbc <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004b7a:	4413      	add	r3, r2
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	3b08      	subs	r3, #8
 8004b88:	4a0b      	ldr	r2, [pc, #44]	@ (8004bb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8e:	091b      	lsrs	r3, r3, #4
 8004b90:	3307      	adds	r3, #7
 8004b92:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a0a      	ldr	r2, [pc, #40]	@ (8004bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004b98:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f003 031f 	and.w	r3, r3, #31
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	409a      	lsls	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004ba8:	bf00      	nop
 8004baa:	3714      	adds	r7, #20
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bc80      	pop	{r7}
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	40020407 	.word	0x40020407
 8004bb8:	cccccccd 	.word	0xcccccccd
 8004bbc:	4002081c 	.word	0x4002081c
 8004bc0:	40020880 	.word	0x40020880

08004bc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bd4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8004c04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004bda:	4413      	add	r3, r2
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	461a      	mov	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a08      	ldr	r2, [pc, #32]	@ (8004c08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004be8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	3b01      	subs	r3, #1
 8004bee:	f003 0303 	and.w	r3, r3, #3
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	409a      	lsls	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004bfa:	bf00      	nop
 8004bfc:	3714      	adds	r7, #20
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bc80      	pop	{r7}
 8004c02:	4770      	bx	lr
 8004c04:	1000823f 	.word	0x1000823f
 8004c08:	40020940 	.word	0x40020940

08004c0c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b086      	sub	sp, #24
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8004c8c <HAL_FLASH_Program+0x80>)
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d101      	bne.n	8004c26 <HAL_FLASH_Program+0x1a>
 8004c22:	2302      	movs	r3, #2
 8004c24:	e02d      	b.n	8004c82 <HAL_FLASH_Program+0x76>
 8004c26:	4b19      	ldr	r3, [pc, #100]	@ (8004c8c <HAL_FLASH_Program+0x80>)
 8004c28:	2201      	movs	r2, #1
 8004c2a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004c2c:	4b17      	ldr	r3, [pc, #92]	@ (8004c8c <HAL_FLASH_Program+0x80>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004c32:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004c36:	f000 f869 	bl	8004d0c <FLASH_WaitForLastOperation>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8004c3e:	7dfb      	ldrb	r3, [r7, #23]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d11a      	bne.n	8004c7a <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d105      	bne.n	8004c56 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8004c4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c4e:	68b8      	ldr	r0, [r7, #8]
 8004c50:	f000 f8be 	bl	8004dd0 <FLASH_Program_DoubleWord>
 8004c54:	e004      	b.n	8004c60 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	4619      	mov	r1, r3
 8004c5a:	68b8      	ldr	r0, [r7, #8]
 8004c5c:	f000 f8de 	bl	8004e1c <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004c60:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004c64:	f000 f852 	bl	8004d0c <FLASH_WaitForLastOperation>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8004c6c:	4b08      	ldr	r3, [pc, #32]	@ (8004c90 <HAL_FLASH_Program+0x84>)
 8004c6e:	695a      	ldr	r2, [r3, #20]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	43db      	mvns	r3, r3
 8004c74:	4906      	ldr	r1, [pc, #24]	@ (8004c90 <HAL_FLASH_Program+0x84>)
 8004c76:	4013      	ands	r3, r2
 8004c78:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004c7a:	4b04      	ldr	r3, [pc, #16]	@ (8004c8c <HAL_FLASH_Program+0x80>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8004c80:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3718      	adds	r7, #24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	20000424 	.word	0x20000424
 8004c90:	58004000 	.word	0x58004000

08004c94 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8004ccc <HAL_FLASH_Unlock+0x38>)
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	da0b      	bge.n	8004cbe <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004ca6:	4b09      	ldr	r3, [pc, #36]	@ (8004ccc <HAL_FLASH_Unlock+0x38>)
 8004ca8:	4a09      	ldr	r2, [pc, #36]	@ (8004cd0 <HAL_FLASH_Unlock+0x3c>)
 8004caa:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004cac:	4b07      	ldr	r3, [pc, #28]	@ (8004ccc <HAL_FLASH_Unlock+0x38>)
 8004cae:	4a09      	ldr	r2, [pc, #36]	@ (8004cd4 <HAL_FLASH_Unlock+0x40>)
 8004cb0:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004cb2:	4b06      	ldr	r3, [pc, #24]	@ (8004ccc <HAL_FLASH_Unlock+0x38>)
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	da01      	bge.n	8004cbe <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004cbe:	79fb      	ldrb	r3, [r7, #7]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bc80      	pop	{r7}
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	58004000 	.word	0x58004000
 8004cd0:	45670123 	.word	0x45670123
 8004cd4:	cdef89ab 	.word	0xcdef89ab

08004cd8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004ce2:	4b09      	ldr	r3, [pc, #36]	@ (8004d08 <HAL_FLASH_Lock+0x30>)
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	4a08      	ldr	r2, [pc, #32]	@ (8004d08 <HAL_FLASH_Lock+0x30>)
 8004ce8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004cec:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8004cee:	4b06      	ldr	r3, [pc, #24]	@ (8004d08 <HAL_FLASH_Lock+0x30>)
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	db01      	blt.n	8004cfa <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8004cfa:	79fb      	ldrb	r3, [r7, #7]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bc80      	pop	{r7}
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	58004000 	.word	0x58004000

08004d0c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8004d14:	f7fd f946 	bl	8001fa4 <HAL_GetTick>
 8004d18:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004d1a:	e009      	b.n	8004d30 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004d1c:	f7fd f942 	bl	8001fa4 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d801      	bhi.n	8004d30 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e046      	b.n	8004dbe <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004d30:	4b25      	ldr	r3, [pc, #148]	@ (8004dc8 <FLASH_WaitForLastOperation+0xbc>)
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d3c:	d0ee      	beq.n	8004d1c <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8004d3e:	4b22      	ldr	r3, [pc, #136]	@ (8004dc8 <FLASH_WaitForLastOperation+0xbc>)
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d002      	beq.n	8004d54 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8004dc8 <FLASH_WaitForLastOperation+0xbc>)
 8004d50:	2201      	movs	r2, #1
 8004d52:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d64:	d307      	bcc.n	8004d76 <FLASH_WaitForLastOperation+0x6a>
 8004d66:	4b18      	ldr	r3, [pc, #96]	@ (8004dc8 <FLASH_WaitForLastOperation+0xbc>)
 8004d68:	699a      	ldr	r2, [r3, #24]
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004d70:	4915      	ldr	r1, [pc, #84]	@ (8004dc8 <FLASH_WaitForLastOperation+0xbc>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	618b      	str	r3, [r1, #24]
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d004      	beq.n	8004d8a <FLASH_WaitForLastOperation+0x7e>
 8004d80:	4a11      	ldr	r2, [pc, #68]	@ (8004dc8 <FLASH_WaitForLastOperation+0xbc>)
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004d88:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00e      	beq.n	8004dae <FLASH_WaitForLastOperation+0xa2>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8004d90:	4a0e      	ldr	r2, [pc, #56]	@ (8004dcc <FLASH_WaitForLastOperation+0xc0>)
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e011      	b.n	8004dbe <FLASH_WaitForLastOperation+0xb2>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004d9a:	f7fd f903 	bl	8001fa4 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d801      	bhi.n	8004dae <FLASH_WaitForLastOperation+0xa2>
    {
      return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e007      	b.n	8004dbe <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8004dae:	4b06      	ldr	r3, [pc, #24]	@ (8004dc8 <FLASH_WaitForLastOperation+0xbc>)
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004db6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004dba:	d0ee      	beq.n	8004d9a <FLASH_WaitForLastOperation+0x8e>
    }
  }

  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	58004000 	.word	0x58004000
 8004dcc:	20000424 	.word	0x20000424

08004dd0 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004ddc:	4b0e      	ldr	r3, [pc, #56]	@ (8004e18 <FLASH_Program_DoubleWord+0x48>)
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	4a0d      	ldr	r2, [pc, #52]	@ (8004e18 <FLASH_Program_DoubleWord+0x48>)
 8004de2:	f043 0301 	orr.w	r3, r3, #1
 8004de6:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004dee:	f3bf 8f6f 	isb	sy
}
 8004df2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004df4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004df8:	f04f 0200 	mov.w	r2, #0
 8004dfc:	f04f 0300 	mov.w	r3, #0
 8004e00:	000a      	movs	r2, r1
 8004e02:	2300      	movs	r3, #0
 8004e04:	68f9      	ldr	r1, [r7, #12]
 8004e06:	3104      	adds	r1, #4
 8004e08:	4613      	mov	r3, r2
 8004e0a:	600b      	str	r3, [r1, #0]
}
 8004e0c:	bf00      	nop
 8004e0e:	3714      	adds	r7, #20
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bc80      	pop	{r7}
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	58004000 	.word	0x58004000

08004e1c <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b089      	sub	sp, #36	@ 0x24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004e26:	2340      	movs	r3, #64	@ 0x40
 8004e28:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004e32:	4b18      	ldr	r3, [pc, #96]	@ (8004e94 <FLASH_Program_Fast+0x78>)
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	4a17      	ldr	r2, [pc, #92]	@ (8004e94 <FLASH_Program_Fast+0x78>)
 8004e38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e3c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8004e42:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e44:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8004e46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004e48:	b672      	cpsid	i
}
 8004e4a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	3304      	adds	r3, #4
 8004e58:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	3304      	adds	r3, #4
 8004e5e:	617b      	str	r3, [r7, #20]
    row_index--;
 8004e60:	7ffb      	ldrb	r3, [r7, #31]
 8004e62:	3b01      	subs	r3, #1
 8004e64:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8004e66:	7ffb      	ldrb	r3, [r7, #31]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1ef      	bne.n	8004e4c <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8004e6c:	bf00      	nop
 8004e6e:	4b09      	ldr	r3, [pc, #36]	@ (8004e94 <FLASH_Program_Fast+0x78>)
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e7a:	d0f8      	beq.n	8004e6e <FLASH_Program_Fast+0x52>
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	f383 8810 	msr	PRIMASK, r3
}
 8004e86:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004e88:	bf00      	nop
 8004e8a:	3724      	adds	r7, #36	@ 0x24
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bc80      	pop	{r7}
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	58004000 	.word	0x58004000

08004e98 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004ea2:	4b28      	ldr	r3, [pc, #160]	@ (8004f44 <HAL_FLASHEx_Erase+0xac>)
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d101      	bne.n	8004eae <HAL_FLASHEx_Erase+0x16>
 8004eaa:	2302      	movs	r3, #2
 8004eac:	e046      	b.n	8004f3c <HAL_FLASHEx_Erase+0xa4>
 8004eae:	4b25      	ldr	r3, [pc, #148]	@ (8004f44 <HAL_FLASHEx_Erase+0xac>)
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004eb4:	4b23      	ldr	r3, [pc, #140]	@ (8004f44 <HAL_FLASHEx_Erase+0xac>)
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004eba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004ebe:	f7ff ff25 	bl	8004d0c <FLASH_WaitForLastOperation>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004ec6:	7bfb      	ldrb	r3, [r7, #15]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d133      	bne.n	8004f34 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2b04      	cmp	r3, #4
 8004ed2:	d108      	bne.n	8004ee6 <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8004ed4:	f000 f838 	bl	8004f48 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004ed8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004edc:	f7ff ff16 	bl	8004d0c <FLASH_WaitForLastOperation>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	73fb      	strb	r3, [r7, #15]
 8004ee4:	e024      	b.n	8004f30 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8004eec:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	60bb      	str	r3, [r7, #8]
 8004ef4:	e012      	b.n	8004f1c <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8004ef6:	68b8      	ldr	r0, [r7, #8]
 8004ef8:	f000 f836 	bl	8004f68 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004efc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004f00:	f7ff ff04 	bl	8004d0c <FLASH_WaitForLastOperation>
 8004f04:	4603      	mov	r3, r0
 8004f06:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8004f08:	7bfb      	ldrb	r3, [r7, #15]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d003      	beq.n	8004f16 <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	601a      	str	r2, [r3, #0]
          break;
 8004f14:	e00a      	b.n	8004f2c <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	3301      	adds	r3, #1
 8004f1a:	60bb      	str	r3, [r7, #8]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685a      	ldr	r2, [r3, #4]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	4413      	add	r3, r2
 8004f26:	68ba      	ldr	r2, [r7, #8]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d3e4      	bcc.n	8004ef6 <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8004f2c:	f000 f878 	bl	8005020 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004f30:	f000 f832 	bl	8004f98 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004f34:	4b03      	ldr	r3, [pc, #12]	@ (8004f44 <HAL_FLASHEx_Erase+0xac>)
 8004f36:	2200      	movs	r2, #0
 8004f38:	701a      	strb	r2, [r3, #0]

  return status;
 8004f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	20000424 	.word	0x20000424

08004f48 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8004f4c:	4b05      	ldr	r3, [pc, #20]	@ (8004f64 <FLASH_MassErase+0x1c>)
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	4a04      	ldr	r2, [pc, #16]	@ (8004f64 <FLASH_MassErase+0x1c>)
 8004f52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f56:	f043 0304 	orr.w	r3, r3, #4
 8004f5a:	6153      	str	r3, [r2, #20]
#endif
}
 8004f5c:	bf00      	nop
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bc80      	pop	{r7}
 8004f62:	4770      	bx	lr
 8004f64:	58004000 	.word	0x58004000

08004f68 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004f70:	4b08      	ldr	r3, [pc, #32]	@ (8004f94 <FLASH_PageErase+0x2c>)
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	f423 727e 	bic.w	r2, r3, #1016	@ 0x3f8
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	00db      	lsls	r3, r3, #3
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	4a05      	ldr	r2, [pc, #20]	@ (8004f94 <FLASH_PageErase+0x2c>)
 8004f80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f84:	f043 0302 	orr.w	r3, r3, #2
 8004f88:	6153      	str	r3, [r2, #20]
#endif
}
 8004f8a:	bf00      	nop
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bc80      	pop	{r7}
 8004f92:	4770      	bx	lr
 8004f94:	58004000 	.word	0x58004000

08004f98 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8004f9c:	4b1f      	ldr	r3, [pc, #124]	@ (800501c <FLASH_FlushCaches+0x84>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d117      	bne.n	8004fd8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004fa8:	4b1c      	ldr	r3, [pc, #112]	@ (800501c <FLASH_FlushCaches+0x84>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a1b      	ldr	r2, [pc, #108]	@ (800501c <FLASH_FlushCaches+0x84>)
 8004fae:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fb2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004fb4:	4b19      	ldr	r3, [pc, #100]	@ (800501c <FLASH_FlushCaches+0x84>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a18      	ldr	r2, [pc, #96]	@ (800501c <FLASH_FlushCaches+0x84>)
 8004fba:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004fbe:	6013      	str	r3, [r2, #0]
 8004fc0:	4b16      	ldr	r3, [pc, #88]	@ (800501c <FLASH_FlushCaches+0x84>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a15      	ldr	r2, [pc, #84]	@ (800501c <FLASH_FlushCaches+0x84>)
 8004fc6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004fca:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004fcc:	4b13      	ldr	r3, [pc, #76]	@ (800501c <FLASH_FlushCaches+0x84>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a12      	ldr	r2, [pc, #72]	@ (800501c <FLASH_FlushCaches+0x84>)
 8004fd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004fd6:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8004fd8:	4b10      	ldr	r3, [pc, #64]	@ (800501c <FLASH_FlushCaches+0x84>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d117      	bne.n	8005014 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004fe4:	4b0d      	ldr	r3, [pc, #52]	@ (800501c <FLASH_FlushCaches+0x84>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a0c      	ldr	r2, [pc, #48]	@ (800501c <FLASH_FlushCaches+0x84>)
 8004fea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004fee:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800501c <FLASH_FlushCaches+0x84>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a09      	ldr	r2, [pc, #36]	@ (800501c <FLASH_FlushCaches+0x84>)
 8004ff6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004ffa:	6013      	str	r3, [r2, #0]
 8004ffc:	4b07      	ldr	r3, [pc, #28]	@ (800501c <FLASH_FlushCaches+0x84>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a06      	ldr	r2, [pc, #24]	@ (800501c <FLASH_FlushCaches+0x84>)
 8005002:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005006:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005008:	4b04      	ldr	r3, [pc, #16]	@ (800501c <FLASH_FlushCaches+0x84>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a03      	ldr	r2, [pc, #12]	@ (800501c <FLASH_FlushCaches+0x84>)
 800500e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005012:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8005014:	bf00      	nop
 8005016:	46bd      	mov	sp, r7
 8005018:	bc80      	pop	{r7}
 800501a:	4770      	bx	lr
 800501c:	58004000 	.word	0x58004000

08005020 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8005020:	b480      	push	{r7}
 8005022:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005024:	4b05      	ldr	r3, [pc, #20]	@ (800503c <FLASH_AcknowledgePageErase+0x1c>)
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	4a04      	ldr	r2, [pc, #16]	@ (800503c <FLASH_AcknowledgePageErase+0x1c>)
 800502a:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 800502e:	f023 0302 	bic.w	r3, r3, #2
 8005032:	6153      	str	r3, [r2, #20]
#endif
}
 8005034:	bf00      	nop
 8005036:	46bd      	mov	sp, r7
 8005038:	bc80      	pop	{r7}
 800503a:	4770      	bx	lr
 800503c:	58004000 	.word	0x58004000

08005040 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005040:	b480      	push	{r7}
 8005042:	b087      	sub	sp, #28
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800504a:	2300      	movs	r3, #0
 800504c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800504e:	e140      	b.n	80052d2 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	2101      	movs	r1, #1
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	fa01 f303 	lsl.w	r3, r1, r3
 800505c:	4013      	ands	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2b00      	cmp	r3, #0
 8005064:	f000 8132 	beq.w	80052cc <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f003 0303 	and.w	r3, r3, #3
 8005070:	2b01      	cmp	r3, #1
 8005072:	d005      	beq.n	8005080 <HAL_GPIO_Init+0x40>
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f003 0303 	and.w	r3, r3, #3
 800507c:	2b02      	cmp	r3, #2
 800507e:	d130      	bne.n	80050e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	2203      	movs	r2, #3
 800508c:	fa02 f303 	lsl.w	r3, r2, r3
 8005090:	43db      	mvns	r3, r3
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	4013      	ands	r3, r2
 8005096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	68da      	ldr	r2, [r3, #12]
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	005b      	lsls	r3, r3, #1
 80050a0:	fa02 f303 	lsl.w	r3, r2, r3
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80050b6:	2201      	movs	r2, #1
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	fa02 f303 	lsl.w	r3, r2, r3
 80050be:	43db      	mvns	r3, r3
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	4013      	ands	r3, r2
 80050c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	091b      	lsrs	r3, r3, #4
 80050cc:	f003 0201 	and.w	r2, r3, #1
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	fa02 f303 	lsl.w	r3, r2, r3
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	4313      	orrs	r3, r2
 80050da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f003 0303 	and.w	r3, r3, #3
 80050ea:	2b03      	cmp	r3, #3
 80050ec:	d017      	beq.n	800511e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	005b      	lsls	r3, r3, #1
 80050f8:	2203      	movs	r2, #3
 80050fa:	fa02 f303 	lsl.w	r3, r2, r3
 80050fe:	43db      	mvns	r3, r3
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	4013      	ands	r3, r2
 8005104:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	689a      	ldr	r2, [r3, #8]
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	fa02 f303 	lsl.w	r3, r2, r3
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	4313      	orrs	r3, r2
 8005116:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f003 0303 	and.w	r3, r3, #3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d123      	bne.n	8005172 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	08da      	lsrs	r2, r3, #3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	3208      	adds	r2, #8
 8005132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005136:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	f003 0307 	and.w	r3, r3, #7
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	220f      	movs	r2, #15
 8005142:	fa02 f303 	lsl.w	r3, r2, r3
 8005146:	43db      	mvns	r3, r3
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	4013      	ands	r3, r2
 800514c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	691a      	ldr	r2, [r3, #16]
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	f003 0307 	and.w	r3, r3, #7
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	fa02 f303 	lsl.w	r3, r2, r3
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	4313      	orrs	r3, r2
 8005162:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	08da      	lsrs	r2, r3, #3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	3208      	adds	r2, #8
 800516c:	6939      	ldr	r1, [r7, #16]
 800516e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	005b      	lsls	r3, r3, #1
 800517c:	2203      	movs	r2, #3
 800517e:	fa02 f303 	lsl.w	r3, r2, r3
 8005182:	43db      	mvns	r3, r3
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	4013      	ands	r3, r2
 8005188:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f003 0203 	and.w	r2, r3, #3
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	fa02 f303 	lsl.w	r3, r2, r3
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	4313      	orrs	r3, r2
 800519e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f000 808c 	beq.w	80052cc <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80051b4:	4a4e      	ldr	r2, [pc, #312]	@ (80052f0 <HAL_GPIO_Init+0x2b0>)
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	089b      	lsrs	r3, r3, #2
 80051ba:	3302      	adds	r3, #2
 80051bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f003 0303 	and.w	r3, r3, #3
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	2207      	movs	r2, #7
 80051cc:	fa02 f303 	lsl.w	r3, r2, r3
 80051d0:	43db      	mvns	r3, r3
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	4013      	ands	r3, r2
 80051d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80051de:	d00d      	beq.n	80051fc <HAL_GPIO_Init+0x1bc>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a44      	ldr	r2, [pc, #272]	@ (80052f4 <HAL_GPIO_Init+0x2b4>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d007      	beq.n	80051f8 <HAL_GPIO_Init+0x1b8>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a43      	ldr	r2, [pc, #268]	@ (80052f8 <HAL_GPIO_Init+0x2b8>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d101      	bne.n	80051f4 <HAL_GPIO_Init+0x1b4>
 80051f0:	2302      	movs	r3, #2
 80051f2:	e004      	b.n	80051fe <HAL_GPIO_Init+0x1be>
 80051f4:	2307      	movs	r3, #7
 80051f6:	e002      	b.n	80051fe <HAL_GPIO_Init+0x1be>
 80051f8:	2301      	movs	r3, #1
 80051fa:	e000      	b.n	80051fe <HAL_GPIO_Init+0x1be>
 80051fc:	2300      	movs	r3, #0
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	f002 0203 	and.w	r2, r2, #3
 8005204:	0092      	lsls	r2, r2, #2
 8005206:	4093      	lsls	r3, r2
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	4313      	orrs	r3, r2
 800520c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800520e:	4938      	ldr	r1, [pc, #224]	@ (80052f0 <HAL_GPIO_Init+0x2b0>)
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	089b      	lsrs	r3, r3, #2
 8005214:	3302      	adds	r3, #2
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800521c:	4b37      	ldr	r3, [pc, #220]	@ (80052fc <HAL_GPIO_Init+0x2bc>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	43db      	mvns	r3, r3
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	4013      	ands	r3, r2
 800522a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d003      	beq.n	8005240 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	4313      	orrs	r3, r2
 800523e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005240:	4a2e      	ldr	r2, [pc, #184]	@ (80052fc <HAL_GPIO_Init+0x2bc>)
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005246:	4b2d      	ldr	r3, [pc, #180]	@ (80052fc <HAL_GPIO_Init+0x2bc>)
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	43db      	mvns	r3, r3
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	4013      	ands	r3, r2
 8005254:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	4313      	orrs	r3, r2
 8005268:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800526a:	4a24      	ldr	r2, [pc, #144]	@ (80052fc <HAL_GPIO_Init+0x2bc>)
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005270:	4b22      	ldr	r3, [pc, #136]	@ (80052fc <HAL_GPIO_Init+0x2bc>)
 8005272:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005276:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	43db      	mvns	r3, r3
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	4013      	ands	r3, r2
 8005280:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	4313      	orrs	r3, r2
 8005294:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8005296:	4a19      	ldr	r2, [pc, #100]	@ (80052fc <HAL_GPIO_Init+0x2bc>)
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800529e:	4b17      	ldr	r3, [pc, #92]	@ (80052fc <HAL_GPIO_Init+0x2bc>)
 80052a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052a4:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	43db      	mvns	r3, r3
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	4013      	ands	r3, r2
 80052ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d003      	beq.n	80052c4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80052c4:	4a0d      	ldr	r2, [pc, #52]	@ (80052fc <HAL_GPIO_Init+0x2bc>)
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	3301      	adds	r3, #1
 80052d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	fa22 f303 	lsr.w	r3, r2, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f47f aeb7 	bne.w	8005050 <HAL_GPIO_Init+0x10>
  }
}
 80052e2:	bf00      	nop
 80052e4:	bf00      	nop
 80052e6:	371c      	adds	r7, #28
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bc80      	pop	{r7}
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	40010000 	.word	0x40010000
 80052f4:	48000400 	.word	0x48000400
 80052f8:	48000800 	.word	0x48000800
 80052fc:	58000800 	.word	0x58000800

08005300 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005300:	b480      	push	{r7}
 8005302:	b087      	sub	sp, #28
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800530a:	2300      	movs	r3, #0
 800530c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800530e:	e0af      	b.n	8005470 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005310:	2201      	movs	r2, #1
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	fa02 f303 	lsl.w	r3, r2, r3
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	4013      	ands	r3, r2
 800531c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	2b00      	cmp	r3, #0
 8005322:	f000 80a2 	beq.w	800546a <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005326:	4a59      	ldr	r2, [pc, #356]	@ (800548c <HAL_GPIO_DeInit+0x18c>)
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	089b      	lsrs	r3, r3, #2
 800532c:	3302      	adds	r3, #2
 800532e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005332:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	f003 0303 	and.w	r3, r3, #3
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	2207      	movs	r2, #7
 800533e:	fa02 f303 	lsl.w	r3, r2, r3
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	4013      	ands	r3, r2
 8005346:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800534e:	d00d      	beq.n	800536c <HAL_GPIO_DeInit+0x6c>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a4f      	ldr	r2, [pc, #316]	@ (8005490 <HAL_GPIO_DeInit+0x190>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d007      	beq.n	8005368 <HAL_GPIO_DeInit+0x68>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a4e      	ldr	r2, [pc, #312]	@ (8005494 <HAL_GPIO_DeInit+0x194>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d101      	bne.n	8005364 <HAL_GPIO_DeInit+0x64>
 8005360:	2302      	movs	r3, #2
 8005362:	e004      	b.n	800536e <HAL_GPIO_DeInit+0x6e>
 8005364:	2307      	movs	r3, #7
 8005366:	e002      	b.n	800536e <HAL_GPIO_DeInit+0x6e>
 8005368:	2301      	movs	r3, #1
 800536a:	e000      	b.n	800536e <HAL_GPIO_DeInit+0x6e>
 800536c:	2300      	movs	r3, #0
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	f002 0203 	and.w	r2, r2, #3
 8005374:	0092      	lsls	r2, r2, #2
 8005376:	4093      	lsls	r3, r2
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	429a      	cmp	r2, r3
 800537c:	d136      	bne.n	80053ec <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 800537e:	4b46      	ldr	r3, [pc, #280]	@ (8005498 <HAL_GPIO_DeInit+0x198>)
 8005380:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	43db      	mvns	r3, r3
 8005388:	4943      	ldr	r1, [pc, #268]	@ (8005498 <HAL_GPIO_DeInit+0x198>)
 800538a:	4013      	ands	r3, r2
 800538c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005390:	4b41      	ldr	r3, [pc, #260]	@ (8005498 <HAL_GPIO_DeInit+0x198>)
 8005392:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	43db      	mvns	r3, r3
 800539a:	493f      	ldr	r1, [pc, #252]	@ (8005498 <HAL_GPIO_DeInit+0x198>)
 800539c:	4013      	ands	r3, r2
 800539e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80053a2:	4b3d      	ldr	r3, [pc, #244]	@ (8005498 <HAL_GPIO_DeInit+0x198>)
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	43db      	mvns	r3, r3
 80053aa:	493b      	ldr	r1, [pc, #236]	@ (8005498 <HAL_GPIO_DeInit+0x198>)
 80053ac:	4013      	ands	r3, r2
 80053ae:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80053b0:	4b39      	ldr	r3, [pc, #228]	@ (8005498 <HAL_GPIO_DeInit+0x198>)
 80053b2:	685a      	ldr	r2, [r3, #4]
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	43db      	mvns	r3, r3
 80053b8:	4937      	ldr	r1, [pc, #220]	@ (8005498 <HAL_GPIO_DeInit+0x198>)
 80053ba:	4013      	ands	r3, r2
 80053bc:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f003 0303 	and.w	r3, r3, #3
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	2207      	movs	r2, #7
 80053c8:	fa02 f303 	lsl.w	r3, r2, r3
 80053cc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80053ce:	4a2f      	ldr	r2, [pc, #188]	@ (800548c <HAL_GPIO_DeInit+0x18c>)
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	089b      	lsrs	r3, r3, #2
 80053d4:	3302      	adds	r3, #2
 80053d6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	43da      	mvns	r2, r3
 80053de:	482b      	ldr	r0, [pc, #172]	@ (800548c <HAL_GPIO_DeInit+0x18c>)
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	089b      	lsrs	r3, r3, #2
 80053e4:	400a      	ands	r2, r1
 80053e6:	3302      	adds	r3, #2
 80053e8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	005b      	lsls	r3, r3, #1
 80053f4:	2103      	movs	r1, #3
 80053f6:	fa01 f303 	lsl.w	r3, r1, r3
 80053fa:	431a      	orrs	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	08da      	lsrs	r2, r3, #3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	3208      	adds	r2, #8
 8005408:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	f003 0307 	and.w	r3, r3, #7
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	220f      	movs	r2, #15
 8005416:	fa02 f303 	lsl.w	r3, r2, r3
 800541a:	43db      	mvns	r3, r3
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	08d2      	lsrs	r2, r2, #3
 8005420:	4019      	ands	r1, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	3208      	adds	r2, #8
 8005426:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	689a      	ldr	r2, [r3, #8]
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	005b      	lsls	r3, r3, #1
 8005432:	2103      	movs	r1, #3
 8005434:	fa01 f303 	lsl.w	r3, r1, r3
 8005438:	43db      	mvns	r3, r3
 800543a:	401a      	ands	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	2101      	movs	r1, #1
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	fa01 f303 	lsl.w	r3, r1, r3
 800544c:	43db      	mvns	r3, r3
 800544e:	401a      	ands	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	68da      	ldr	r2, [r3, #12]
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	005b      	lsls	r3, r3, #1
 800545c:	2103      	movs	r1, #3
 800545e:	fa01 f303 	lsl.w	r3, r1, r3
 8005462:	43db      	mvns	r3, r3
 8005464:	401a      	ands	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	60da      	str	r2, [r3, #12]
    }

    position++;
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	3301      	adds	r3, #1
 800546e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005470:	683a      	ldr	r2, [r7, #0]
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	fa22 f303 	lsr.w	r3, r2, r3
 8005478:	2b00      	cmp	r3, #0
 800547a:	f47f af49 	bne.w	8005310 <HAL_GPIO_DeInit+0x10>
  }
}
 800547e:	bf00      	nop
 8005480:	bf00      	nop
 8005482:	371c      	adds	r7, #28
 8005484:	46bd      	mov	sp, r7
 8005486:	bc80      	pop	{r7}
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	40010000 	.word	0x40010000
 8005490:	48000400 	.word	0x48000400
 8005494:	48000800 	.word	0x48000800
 8005498:	58000800 	.word	0x58000800

0800549c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	460b      	mov	r3, r1
 80054a6:	807b      	strh	r3, [r7, #2]
 80054a8:	4613      	mov	r3, r2
 80054aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80054ac:	787b      	ldrb	r3, [r7, #1]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d003      	beq.n	80054ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80054b2:	887a      	ldrh	r2, [r7, #2]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80054b8:	e002      	b.n	80054c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80054ba:	887a      	ldrh	r2, [r7, #2]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bc80      	pop	{r7}
 80054c8:	4770      	bx	lr

080054ca <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80054ca:	b480      	push	{r7}
 80054cc:	b085      	sub	sp, #20
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
 80054d2:	460b      	mov	r3, r1
 80054d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80054dc:	887a      	ldrh	r2, [r7, #2]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	4013      	ands	r3, r2
 80054e2:	041a      	lsls	r2, r3, #16
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	43d9      	mvns	r1, r3
 80054e8:	887b      	ldrh	r3, [r7, #2]
 80054ea:	400b      	ands	r3, r1
 80054ec:	431a      	orrs	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	619a      	str	r2, [r3, #24]
}
 80054f2:	bf00      	nop
 80054f4:	3714      	adds	r7, #20
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bc80      	pop	{r7}
 80054fa:	4770      	bx	lr

080054fc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80054fc:	b480      	push	{r7}
 80054fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005500:	4b04      	ldr	r3, [pc, #16]	@ (8005514 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a03      	ldr	r2, [pc, #12]	@ (8005514 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005506:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800550a:	6013      	str	r3, [r2, #0]
}
 800550c:	bf00      	nop
 800550e:	46bd      	mov	sp, r7
 8005510:	bc80      	pop	{r7}
 8005512:	4770      	bx	lr
 8005514:	58000400 	.word	0x58000400

08005518 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	460b      	mov	r3, r1
 8005522:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10c      	bne.n	8005544 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800552a:	4b13      	ldr	r3, [pc, #76]	@ (8005578 <HAL_PWR_EnterSLEEPMode+0x60>)
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005532:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005536:	d10d      	bne.n	8005554 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8005538:	f000 f83c 	bl	80055b4 <HAL_PWREx_DisableLowPowerRunMode>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d008      	beq.n	8005554 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8005542:	e015      	b.n	8005570 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8005544:	4b0c      	ldr	r3, [pc, #48]	@ (8005578 <HAL_PWR_EnterSLEEPMode+0x60>)
 8005546:	695b      	ldr	r3, [r3, #20]
 8005548:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800554c:	2b00      	cmp	r3, #0
 800554e:	d101      	bne.n	8005554 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8005550:	f000 f822 	bl	8005598 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005554:	4b09      	ldr	r3, [pc, #36]	@ (800557c <HAL_PWR_EnterSLEEPMode+0x64>)
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	4a08      	ldr	r2, [pc, #32]	@ (800557c <HAL_PWR_EnterSLEEPMode+0x64>)
 800555a:	f023 0304 	bic.w	r3, r3, #4
 800555e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005560:	78fb      	ldrb	r3, [r7, #3]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d101      	bne.n	800556a <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005566:	bf30      	wfi
 8005568:	e002      	b.n	8005570 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800556a:	bf40      	sev
    __WFE();
 800556c:	bf20      	wfe
    __WFE();
 800556e:	bf20      	wfe
  }
}
 8005570:	3708      	adds	r7, #8
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	58000400 	.word	0x58000400
 800557c:	e000ed00 	.word	0xe000ed00

08005580 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005580:	b480      	push	{r7}
 8005582:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005584:	4b03      	ldr	r3, [pc, #12]	@ (8005594 <HAL_PWREx_GetVoltageRange+0x14>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800558c:	4618      	mov	r0, r3
 800558e:	46bd      	mov	sp, r7
 8005590:	bc80      	pop	{r7}
 8005592:	4770      	bx	lr
 8005594:	58000400 	.word	0x58000400

08005598 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8005598:	b480      	push	{r7}
 800559a:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800559c:	4b04      	ldr	r3, [pc, #16]	@ (80055b0 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a03      	ldr	r2, [pc, #12]	@ (80055b0 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80055a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80055a6:	6013      	str	r3, [r2, #0]
}
 80055a8:	bf00      	nop
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bc80      	pop	{r7}
 80055ae:	4770      	bx	lr
 80055b0:	58000400 	.word	0x58000400

080055b4 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80055ba:	4b16      	ldr	r3, [pc, #88]	@ (8005614 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a15      	ldr	r2, [pc, #84]	@ (8005614 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80055c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80055c4:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80055c6:	4b14      	ldr	r3, [pc, #80]	@ (8005618 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2232      	movs	r2, #50	@ 0x32
 80055cc:	fb02 f303 	mul.w	r3, r2, r3
 80055d0:	4a12      	ldr	r2, [pc, #72]	@ (800561c <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80055d2:	fba2 2303 	umull	r2, r3, r2, r3
 80055d6:	0c9b      	lsrs	r3, r3, #18
 80055d8:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80055da:	e002      	b.n	80055e2 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	3b01      	subs	r3, #1
 80055e0:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80055e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005614 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055ee:	d102      	bne.n	80055f6 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1f2      	bne.n	80055dc <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80055f6:	4b07      	ldr	r3, [pc, #28]	@ (8005614 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005602:	d101      	bne.n	8005608 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e000      	b.n	800560a <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	bc80      	pop	{r7}
 8005612:	4770      	bx	lr
 8005614:	58000400 	.word	0x58000400
 8005618:	20000000 	.word	0x20000000
 800561c:	431bde83 	.word	0x431bde83

08005620 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	4603      	mov	r3, r0
 8005628:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 800562a:	4b10      	ldr	r3, [pc, #64]	@ (800566c <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f023 0307 	bic.w	r3, r3, #7
 8005632:	4a0e      	ldr	r2, [pc, #56]	@ (800566c <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8005634:	f043 0302 	orr.w	r3, r3, #2
 8005638:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800563a:	4b0d      	ldr	r3, [pc, #52]	@ (8005670 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	4a0c      	ldr	r2, [pc, #48]	@ (8005670 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005640:	f043 0304 	orr.w	r3, r3, #4
 8005644:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8005646:	79fb      	ldrb	r3, [r7, #7]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d101      	bne.n	8005650 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800564c:	bf30      	wfi
 800564e:	e002      	b.n	8005656 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005650:	bf40      	sev
    __WFE();
 8005652:	bf20      	wfe
    __WFE();
 8005654:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005656:	4b06      	ldr	r3, [pc, #24]	@ (8005670 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	4a05      	ldr	r2, [pc, #20]	@ (8005670 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800565c:	f023 0304 	bic.w	r3, r3, #4
 8005660:	6113      	str	r3, [r2, #16]
}
 8005662:	bf00      	nop
 8005664:	370c      	adds	r7, #12
 8005666:	46bd      	mov	sp, r7
 8005668:	bc80      	pop	{r7}
 800566a:	4770      	bx	lr
 800566c:	58000400 	.word	0x58000400
 8005670:	e000ed00 	.word	0xe000ed00

08005674 <LL_PWR_IsEnabledBkUpAccess>:
{
 8005674:	b480      	push	{r7}
 8005676:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8005678:	4b06      	ldr	r3, [pc, #24]	@ (8005694 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005680:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005684:	d101      	bne.n	800568a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8005686:	2301      	movs	r3, #1
 8005688:	e000      	b.n	800568c <LL_PWR_IsEnabledBkUpAccess+0x18>
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	46bd      	mov	sp, r7
 8005690:	bc80      	pop	{r7}
 8005692:	4770      	bx	lr
 8005694:	58000400 	.word	0x58000400

08005698 <LL_RCC_HSE_EnableTcxo>:
{
 8005698:	b480      	push	{r7}
 800569a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800569c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80056a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80056aa:	6013      	str	r3, [r2, #0]
}
 80056ac:	bf00      	nop
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bc80      	pop	{r7}
 80056b2:	4770      	bx	lr

080056b4 <LL_RCC_HSE_DisableTcxo>:
{
 80056b4:	b480      	push	{r7}
 80056b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80056b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80056c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80056c6:	6013      	str	r3, [r2, #0]
}
 80056c8:	bf00      	nop
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bc80      	pop	{r7}
 80056ce:	4770      	bx	lr

080056d0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80056d0:	b480      	push	{r7}
 80056d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80056d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056e2:	d101      	bne.n	80056e8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80056e4:	2301      	movs	r3, #1
 80056e6:	e000      	b.n	80056ea <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bc80      	pop	{r7}
 80056f0:	4770      	bx	lr

080056f2 <LL_RCC_HSE_Enable>:
{
 80056f2:	b480      	push	{r7}
 80056f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80056f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005700:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005704:	6013      	str	r3, [r2, #0]
}
 8005706:	bf00      	nop
 8005708:	46bd      	mov	sp, r7
 800570a:	bc80      	pop	{r7}
 800570c:	4770      	bx	lr

0800570e <LL_RCC_HSE_Disable>:
{
 800570e:	b480      	push	{r7}
 8005710:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005712:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800571c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005720:	6013      	str	r3, [r2, #0]
}
 8005722:	bf00      	nop
 8005724:	46bd      	mov	sp, r7
 8005726:	bc80      	pop	{r7}
 8005728:	4770      	bx	lr

0800572a <LL_RCC_HSE_IsReady>:
{
 800572a:	b480      	push	{r7}
 800572c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800572e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005738:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800573c:	d101      	bne.n	8005742 <LL_RCC_HSE_IsReady+0x18>
 800573e:	2301      	movs	r3, #1
 8005740:	e000      	b.n	8005744 <LL_RCC_HSE_IsReady+0x1a>
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	46bd      	mov	sp, r7
 8005748:	bc80      	pop	{r7}
 800574a:	4770      	bx	lr

0800574c <LL_RCC_HSI_Enable>:
{
 800574c:	b480      	push	{r7}
 800574e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005750:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800575a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800575e:	6013      	str	r3, [r2, #0]
}
 8005760:	bf00      	nop
 8005762:	46bd      	mov	sp, r7
 8005764:	bc80      	pop	{r7}
 8005766:	4770      	bx	lr

08005768 <LL_RCC_HSI_Disable>:
{
 8005768:	b480      	push	{r7}
 800576a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800576c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005776:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800577a:	6013      	str	r3, [r2, #0]
}
 800577c:	bf00      	nop
 800577e:	46bd      	mov	sp, r7
 8005780:	bc80      	pop	{r7}
 8005782:	4770      	bx	lr

08005784 <LL_RCC_HSI_IsReady>:
{
 8005784:	b480      	push	{r7}
 8005786:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005788:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005792:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005796:	d101      	bne.n	800579c <LL_RCC_HSI_IsReady+0x18>
 8005798:	2301      	movs	r3, #1
 800579a:	e000      	b.n	800579e <LL_RCC_HSI_IsReady+0x1a>
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bc80      	pop	{r7}
 80057a4:	4770      	bx	lr

080057a6 <LL_RCC_HSI_SetCalibTrimming>:
{
 80057a6:	b480      	push	{r7}
 80057a8:	b083      	sub	sp, #12
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80057ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	061b      	lsls	r3, r3, #24
 80057bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80057c0:	4313      	orrs	r3, r2
 80057c2:	604b      	str	r3, [r1, #4]
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bc80      	pop	{r7}
 80057cc:	4770      	bx	lr

080057ce <LL_RCC_LSE_IsReady>:
{
 80057ce:	b480      	push	{r7}
 80057d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80057d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d101      	bne.n	80057e6 <LL_RCC_LSE_IsReady+0x18>
 80057e2:	2301      	movs	r3, #1
 80057e4:	e000      	b.n	80057e8 <LL_RCC_LSE_IsReady+0x1a>
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bc80      	pop	{r7}
 80057ee:	4770      	bx	lr

080057f0 <LL_RCC_LSI_Enable>:
{
 80057f0:	b480      	push	{r7}
 80057f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80057f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005800:	f043 0301 	orr.w	r3, r3, #1
 8005804:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005808:	bf00      	nop
 800580a:	46bd      	mov	sp, r7
 800580c:	bc80      	pop	{r7}
 800580e:	4770      	bx	lr

08005810 <LL_RCC_LSI_Disable>:
{
 8005810:	b480      	push	{r7}
 8005812:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005814:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005818:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800581c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005820:	f023 0301 	bic.w	r3, r3, #1
 8005824:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005828:	bf00      	nop
 800582a:	46bd      	mov	sp, r7
 800582c:	bc80      	pop	{r7}
 800582e:	4770      	bx	lr

08005830 <LL_RCC_LSI_IsReady>:
{
 8005830:	b480      	push	{r7}
 8005832:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005834:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005838:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800583c:	f003 0302 	and.w	r3, r3, #2
 8005840:	2b02      	cmp	r3, #2
 8005842:	d101      	bne.n	8005848 <LL_RCC_LSI_IsReady+0x18>
 8005844:	2301      	movs	r3, #1
 8005846:	e000      	b.n	800584a <LL_RCC_LSI_IsReady+0x1a>
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	46bd      	mov	sp, r7
 800584e:	bc80      	pop	{r7}
 8005850:	4770      	bx	lr

08005852 <LL_RCC_MSI_Enable>:
{
 8005852:	b480      	push	{r7}
 8005854:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005856:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005860:	f043 0301 	orr.w	r3, r3, #1
 8005864:	6013      	str	r3, [r2, #0]
}
 8005866:	bf00      	nop
 8005868:	46bd      	mov	sp, r7
 800586a:	bc80      	pop	{r7}
 800586c:	4770      	bx	lr

0800586e <LL_RCC_MSI_Disable>:
{
 800586e:	b480      	push	{r7}
 8005870:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005872:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800587c:	f023 0301 	bic.w	r3, r3, #1
 8005880:	6013      	str	r3, [r2, #0]
}
 8005882:	bf00      	nop
 8005884:	46bd      	mov	sp, r7
 8005886:	bc80      	pop	{r7}
 8005888:	4770      	bx	lr

0800588a <LL_RCC_MSI_IsReady>:
{
 800588a:	b480      	push	{r7}
 800588c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800588e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0302 	and.w	r3, r3, #2
 8005898:	2b02      	cmp	r3, #2
 800589a:	d101      	bne.n	80058a0 <LL_RCC_MSI_IsReady+0x16>
 800589c:	2301      	movs	r3, #1
 800589e:	e000      	b.n	80058a2 <LL_RCC_MSI_IsReady+0x18>
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bc80      	pop	{r7}
 80058a8:	4770      	bx	lr

080058aa <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80058aa:	b480      	push	{r7}
 80058ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80058ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0308 	and.w	r3, r3, #8
 80058b8:	2b08      	cmp	r3, #8
 80058ba:	d101      	bne.n	80058c0 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80058bc:	2301      	movs	r3, #1
 80058be:	e000      	b.n	80058c2 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bc80      	pop	{r7}
 80058c8:	4770      	bx	lr

080058ca <LL_RCC_MSI_GetRange>:
{
 80058ca:	b480      	push	{r7}
 80058cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80058ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	46bd      	mov	sp, r7
 80058dc:	bc80      	pop	{r7}
 80058de:	4770      	bx	lr

080058e0 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80058e0:	b480      	push	{r7}
 80058e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80058e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058ec:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bc80      	pop	{r7}
 80058f6:	4770      	bx	lr

080058f8 <LL_RCC_MSI_SetCalibTrimming>:
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005900:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	021b      	lsls	r3, r3, #8
 800590e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005912:	4313      	orrs	r3, r2
 8005914:	604b      	str	r3, [r1, #4]
}
 8005916:	bf00      	nop
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	bc80      	pop	{r7}
 800591e:	4770      	bx	lr

08005920 <LL_RCC_SetSysClkSource>:
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005928:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f023 0203 	bic.w	r2, r3, #3
 8005932:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4313      	orrs	r3, r2
 800593a:	608b      	str	r3, [r1, #8]
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	bc80      	pop	{r7}
 8005944:	4770      	bx	lr

08005946 <LL_RCC_GetSysClkSource>:
{
 8005946:	b480      	push	{r7}
 8005948:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800594a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f003 030c 	and.w	r3, r3, #12
}
 8005954:	4618      	mov	r0, r3
 8005956:	46bd      	mov	sp, r7
 8005958:	bc80      	pop	{r7}
 800595a:	4770      	bx	lr

0800595c <LL_RCC_SetAHBPrescaler>:
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005964:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800596e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4313      	orrs	r3, r2
 8005976:	608b      	str	r3, [r1, #8]
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	bc80      	pop	{r7}
 8005980:	4770      	bx	lr

08005982 <LL_RCC_SetAHB3Prescaler>:
{
 8005982:	b480      	push	{r7}
 8005984:	b083      	sub	sp, #12
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800598a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800598e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005992:	f023 020f 	bic.w	r2, r3, #15
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	091b      	lsrs	r3, r3, #4
 800599a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800599e:	4313      	orrs	r3, r2
 80059a0:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bc80      	pop	{r7}
 80059ac:	4770      	bx	lr

080059ae <LL_RCC_SetAPB1Prescaler>:
{
 80059ae:	b480      	push	{r7}
 80059b0:	b083      	sub	sp, #12
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80059b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80059c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	608b      	str	r3, [r1, #8]
}
 80059ca:	bf00      	nop
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bc80      	pop	{r7}
 80059d2:	4770      	bx	lr

080059d4 <LL_RCC_SetAPB2Prescaler>:
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80059dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80059e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	608b      	str	r3, [r1, #8]
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bc80      	pop	{r7}
 80059f8:	4770      	bx	lr

080059fa <LL_RCC_GetAHBPrescaler>:
{
 80059fa:	b480      	push	{r7}
 80059fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80059fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bc80      	pop	{r7}
 8005a0e:	4770      	bx	lr

08005a10 <LL_RCC_GetAHB3Prescaler>:
{
 8005a10:	b480      	push	{r7}
 8005a12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005a14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a18:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005a1c:	011b      	lsls	r3, r3, #4
 8005a1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bc80      	pop	{r7}
 8005a28:	4770      	bx	lr

08005a2a <LL_RCC_GetAPB1Prescaler>:
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005a2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bc80      	pop	{r7}
 8005a3e:	4770      	bx	lr

08005a40 <LL_RCC_GetAPB2Prescaler>:
{
 8005a40:	b480      	push	{r7}
 8005a42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005a44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bc80      	pop	{r7}
 8005a54:	4770      	bx	lr

08005a56 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005a56:	b480      	push	{r7}
 8005a58:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005a5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a64:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a68:	6013      	str	r3, [r2, #0]
}
 8005a6a:	bf00      	nop
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bc80      	pop	{r7}
 8005a70:	4770      	bx	lr

08005a72 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005a72:	b480      	push	{r7}
 8005a74:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005a76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a84:	6013      	str	r3, [r2, #0]
}
 8005a86:	bf00      	nop
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bc80      	pop	{r7}
 8005a8c:	4770      	bx	lr

08005a8e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005a92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005aa0:	d101      	bne.n	8005aa6 <LL_RCC_PLL_IsReady+0x18>
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e000      	b.n	8005aa8 <LL_RCC_PLL_IsReady+0x1a>
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bc80      	pop	{r7}
 8005aae:	4770      	bx	lr

08005ab0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005ab4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	0a1b      	lsrs	r3, r3, #8
 8005abc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bc80      	pop	{r7}
 8005ac6:	4770      	bx	lr

08005ac8 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005acc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bc80      	pop	{r7}
 8005adc:	4770      	bx	lr

08005ade <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005ade:	b480      	push	{r7}
 8005ae0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005ae2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bc80      	pop	{r7}
 8005af2:	4770      	bx	lr

08005af4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005af4:	b480      	push	{r7}
 8005af6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005af8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	f003 0303 	and.w	r3, r3, #3
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bc80      	pop	{r7}
 8005b08:	4770      	bx	lr

08005b0a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005b0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b1c:	d101      	bne.n	8005b22 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e000      	b.n	8005b24 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bc80      	pop	{r7}
 8005b2a:	4770      	bx	lr

08005b2c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005b30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b34:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005b38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b40:	d101      	bne.n	8005b46 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005b42:	2301      	movs	r3, #1
 8005b44:	e000      	b.n	8005b48 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bc80      	pop	{r7}
 8005b4e:	4770      	bx	lr

08005b50 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005b50:	b480      	push	{r7}
 8005b52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005b54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b62:	d101      	bne.n	8005b68 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005b64:	2301      	movs	r3, #1
 8005b66:	e000      	b.n	8005b6a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bc80      	pop	{r7}
 8005b70:	4770      	bx	lr

08005b72 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005b72:	b480      	push	{r7}
 8005b74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005b76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b80:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b84:	d101      	bne.n	8005b8a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005b86:	2301      	movs	r3, #1
 8005b88:	e000      	b.n	8005b8c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bc80      	pop	{r7}
 8005b92:	4770      	bx	lr

08005b94 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b088      	sub	sp, #32
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d101      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e36f      	b.n	8006286 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ba6:	f7ff fece 	bl	8005946 <LL_RCC_GetSysClkSource>
 8005baa:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005bac:	f7ff ffa2 	bl	8005af4 <LL_RCC_PLL_GetMainSource>
 8005bb0:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0320 	and.w	r3, r3, #32
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f000 80c4 	beq.w	8005d48 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d005      	beq.n	8005bd2 <HAL_RCC_OscConfig+0x3e>
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	2b0c      	cmp	r3, #12
 8005bca:	d176      	bne.n	8005cba <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d173      	bne.n	8005cba <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e353      	b.n	8006286 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005be2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0308 	and.w	r3, r3, #8
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d005      	beq.n	8005bfc <HAL_RCC_OscConfig+0x68>
 8005bf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005bfa:	e006      	b.n	8005c0a <HAL_RCC_OscConfig+0x76>
 8005bfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c04:	091b      	lsrs	r3, r3, #4
 8005c06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d222      	bcs.n	8005c54 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c12:	4618      	mov	r0, r3
 8005c14:	f000 fd3c 	bl	8006690 <RCC_SetFlashLatencyFromMSIRange>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d001      	beq.n	8005c22 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e331      	b.n	8006286 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c2c:	f043 0308 	orr.w	r3, r3, #8
 8005c30:	6013      	str	r3, [r2, #0]
 8005c32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c40:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c44:	4313      	orrs	r3, r2
 8005c46:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7ff fe53 	bl	80058f8 <LL_RCC_MSI_SetCalibTrimming>
 8005c52:	e021      	b.n	8005c98 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c5e:	f043 0308 	orr.w	r3, r3, #8
 8005c62:	6013      	str	r3, [r2, #0]
 8005c64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c72:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c76:	4313      	orrs	r3, r2
 8005c78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7ff fe3a 	bl	80058f8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f000 fd01 	bl	8006690 <RCC_SetFlashLatencyFromMSIRange>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d001      	beq.n	8005c98 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e2f6      	b.n	8006286 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005c98:	f000 fcc2 	bl	8006620 <HAL_RCC_GetHCLKFreq>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	4aa7      	ldr	r2, [pc, #668]	@ (8005f3c <HAL_RCC_OscConfig+0x3a8>)
 8005ca0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8005ca2:	4ba7      	ldr	r3, [pc, #668]	@ (8005f40 <HAL_RCC_OscConfig+0x3ac>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7fd f982 	bl	8002fb0 <HAL_InitTick>
 8005cac:	4603      	mov	r3, r0
 8005cae:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8005cb0:	7cfb      	ldrb	r3, [r7, #19]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d047      	beq.n	8005d46 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8005cb6:	7cfb      	ldrb	r3, [r7, #19]
 8005cb8:	e2e5      	b.n	8006286 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d02c      	beq.n	8005d1c <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005cc2:	f7ff fdc6 	bl	8005852 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005cc6:	f7fc f96d 	bl	8001fa4 <HAL_GetTick>
 8005cca:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005ccc:	e008      	b.n	8005ce0 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005cce:	f7fc f969 	bl	8001fa4 <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d901      	bls.n	8005ce0 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e2d2      	b.n	8006286 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005ce0:	f7ff fdd3 	bl	800588a <LL_RCC_MSI_IsReady>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0f1      	beq.n	8005cce <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005cea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005cf4:	f043 0308 	orr.w	r3, r3, #8
 8005cf8:	6013      	str	r3, [r2, #0]
 8005cfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d08:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7ff fdef 	bl	80058f8 <LL_RCC_MSI_SetCalibTrimming>
 8005d1a:	e015      	b.n	8005d48 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005d1c:	f7ff fda7 	bl	800586e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005d20:	f7fc f940 	bl	8001fa4 <HAL_GetTick>
 8005d24:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005d26:	e008      	b.n	8005d3a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d28:	f7fc f93c 	bl	8001fa4 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d901      	bls.n	8005d3a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e2a5      	b.n	8006286 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005d3a:	f7ff fda6 	bl	800588a <LL_RCC_MSI_IsReady>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1f1      	bne.n	8005d28 <HAL_RCC_OscConfig+0x194>
 8005d44:	e000      	b.n	8005d48 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005d46:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0301 	and.w	r3, r3, #1
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d058      	beq.n	8005e06 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	2b08      	cmp	r3, #8
 8005d58:	d005      	beq.n	8005d66 <HAL_RCC_OscConfig+0x1d2>
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	2b0c      	cmp	r3, #12
 8005d5e:	d108      	bne.n	8005d72 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	2b03      	cmp	r3, #3
 8005d64:	d105      	bne.n	8005d72 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d14b      	bne.n	8005e06 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e289      	b.n	8006286 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005d72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005d84:	4313      	orrs	r3, r2
 8005d86:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d90:	d102      	bne.n	8005d98 <HAL_RCC_OscConfig+0x204>
 8005d92:	f7ff fcae 	bl	80056f2 <LL_RCC_HSE_Enable>
 8005d96:	e00d      	b.n	8005db4 <HAL_RCC_OscConfig+0x220>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8005da0:	d104      	bne.n	8005dac <HAL_RCC_OscConfig+0x218>
 8005da2:	f7ff fc79 	bl	8005698 <LL_RCC_HSE_EnableTcxo>
 8005da6:	f7ff fca4 	bl	80056f2 <LL_RCC_HSE_Enable>
 8005daa:	e003      	b.n	8005db4 <HAL_RCC_OscConfig+0x220>
 8005dac:	f7ff fcaf 	bl	800570e <LL_RCC_HSE_Disable>
 8005db0:	f7ff fc80 	bl	80056b4 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d012      	beq.n	8005de2 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dbc:	f7fc f8f2 	bl	8001fa4 <HAL_GetTick>
 8005dc0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005dc2:	e008      	b.n	8005dd6 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dc4:	f7fc f8ee 	bl	8001fa4 <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	2b64      	cmp	r3, #100	@ 0x64
 8005dd0:	d901      	bls.n	8005dd6 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e257      	b.n	8006286 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005dd6:	f7ff fca8 	bl	800572a <LL_RCC_HSE_IsReady>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d0f1      	beq.n	8005dc4 <HAL_RCC_OscConfig+0x230>
 8005de0:	e011      	b.n	8005e06 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005de2:	f7fc f8df 	bl	8001fa4 <HAL_GetTick>
 8005de6:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005de8:	e008      	b.n	8005dfc <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dea:	f7fc f8db 	bl	8001fa4 <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	2b64      	cmp	r3, #100	@ 0x64
 8005df6:	d901      	bls.n	8005dfc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e244      	b.n	8006286 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005dfc:	f7ff fc95 	bl	800572a <LL_RCC_HSE_IsReady>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1f1      	bne.n	8005dea <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d046      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	2b04      	cmp	r3, #4
 8005e16:	d005      	beq.n	8005e24 <HAL_RCC_OscConfig+0x290>
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	2b0c      	cmp	r3, #12
 8005e1c:	d10e      	bne.n	8005e3c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d10b      	bne.n	8005e3c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d101      	bne.n	8005e30 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e22a      	b.n	8006286 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7ff fcb6 	bl	80057a6 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005e3a:	e031      	b.n	8005ea0 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d019      	beq.n	8005e78 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e44:	f7ff fc82 	bl	800574c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e48:	f7fc f8ac 	bl	8001fa4 <HAL_GetTick>
 8005e4c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005e4e:	e008      	b.n	8005e62 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e50:	f7fc f8a8 	bl	8001fa4 <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d901      	bls.n	8005e62 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e211      	b.n	8006286 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005e62:	f7ff fc8f 	bl	8005784 <LL_RCC_HSI_IsReady>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d0f1      	beq.n	8005e50 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	695b      	ldr	r3, [r3, #20]
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7ff fc98 	bl	80057a6 <LL_RCC_HSI_SetCalibTrimming>
 8005e76:	e013      	b.n	8005ea0 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e78:	f7ff fc76 	bl	8005768 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e7c:	f7fc f892 	bl	8001fa4 <HAL_GetTick>
 8005e80:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005e82:	e008      	b.n	8005e96 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e84:	f7fc f88e 	bl	8001fa4 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d901      	bls.n	8005e96 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e1f7      	b.n	8006286 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005e96:	f7ff fc75 	bl	8005784 <LL_RCC_HSI_IsReady>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d1f1      	bne.n	8005e84 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0308 	and.w	r3, r3, #8
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d06e      	beq.n	8005f8a <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d056      	beq.n	8005f62 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8005eb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005eb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ebc:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	69da      	ldr	r2, [r3, #28]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f003 0310 	and.w	r3, r3, #16
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d031      	beq.n	8005f30 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f003 0302 	and.w	r3, r3, #2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d006      	beq.n	8005ee4 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d101      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e1d0      	b.n	8006286 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d013      	beq.n	8005f16 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8005eee:	f7ff fc8f 	bl	8005810 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ef2:	f7fc f857 	bl	8001fa4 <HAL_GetTick>
 8005ef6:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8005ef8:	e008      	b.n	8005f0c <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005efa:	f7fc f853 	bl	8001fa4 <HAL_GetTick>
 8005efe:	4602      	mov	r2, r0
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	2b11      	cmp	r3, #17
 8005f06:	d901      	bls.n	8005f0c <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e1bc      	b.n	8006286 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8005f0c:	f7ff fc90 	bl	8005830 <LL_RCC_LSI_IsReady>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1f1      	bne.n	8005efa <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8005f16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f1e:	f023 0210 	bic.w	r2, r3, #16
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	69db      	ldr	r3, [r3, #28]
 8005f26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f30:	f7ff fc5e 	bl	80057f0 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f34:	f7fc f836 	bl	8001fa4 <HAL_GetTick>
 8005f38:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8005f3a:	e00c      	b.n	8005f56 <HAL_RCC_OscConfig+0x3c2>
 8005f3c:	20000000 	.word	0x20000000
 8005f40:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f44:	f7fc f82e 	bl	8001fa4 <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	2b11      	cmp	r3, #17
 8005f50:	d901      	bls.n	8005f56 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e197      	b.n	8006286 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8005f56:	f7ff fc6b 	bl	8005830 <LL_RCC_LSI_IsReady>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d0f1      	beq.n	8005f44 <HAL_RCC_OscConfig+0x3b0>
 8005f60:	e013      	b.n	8005f8a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f62:	f7ff fc55 	bl	8005810 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f66:	f7fc f81d 	bl	8001fa4 <HAL_GetTick>
 8005f6a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8005f6c:	e008      	b.n	8005f80 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f6e:	f7fc f819 	bl	8001fa4 <HAL_GetTick>
 8005f72:	4602      	mov	r2, r0
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	2b11      	cmp	r3, #17
 8005f7a:	d901      	bls.n	8005f80 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e182      	b.n	8006286 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8005f80:	f7ff fc56 	bl	8005830 <LL_RCC_LSI_IsReady>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1f1      	bne.n	8005f6e <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0304 	and.w	r3, r3, #4
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f000 80d8 	beq.w	8006148 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005f98:	f7ff fb6c 	bl	8005674 <LL_PWR_IsEnabledBkUpAccess>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d113      	bne.n	8005fca <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005fa2:	f7ff faab 	bl	80054fc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fa6:	f7fb fffd 	bl	8001fa4 <HAL_GetTick>
 8005faa:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005fac:	e008      	b.n	8005fc0 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fae:	f7fb fff9 	bl	8001fa4 <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d901      	bls.n	8005fc0 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e162      	b.n	8006286 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005fc0:	f7ff fb58 	bl	8005674 <LL_PWR_IsEnabledBkUpAccess>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d0f1      	beq.n	8005fae <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d07b      	beq.n	80060ca <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	2b85      	cmp	r3, #133	@ 0x85
 8005fd8:	d003      	beq.n	8005fe2 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	2b05      	cmp	r3, #5
 8005fe0:	d109      	bne.n	8005ff6 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005fe2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005fee:	f043 0304 	orr.w	r3, r3, #4
 8005ff2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ff6:	f7fb ffd5 	bl	8001fa4 <HAL_GetTick>
 8005ffa:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005ffc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006000:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006004:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006008:	f043 0301 	orr.w	r3, r3, #1
 800600c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006010:	e00a      	b.n	8006028 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006012:	f7fb ffc7 	bl	8001fa4 <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006020:	4293      	cmp	r3, r2
 8006022:	d901      	bls.n	8006028 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e12e      	b.n	8006286 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006028:	f7ff fbd1 	bl	80057ce <LL_RCC_LSE_IsReady>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d0ef      	beq.n	8006012 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	2b81      	cmp	r3, #129	@ 0x81
 8006038:	d003      	beq.n	8006042 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	2b85      	cmp	r3, #133	@ 0x85
 8006040:	d121      	bne.n	8006086 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006042:	f7fb ffaf 	bl	8001fa4 <HAL_GetTick>
 8006046:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006048:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800604c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006050:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006054:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006058:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800605c:	e00a      	b.n	8006074 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800605e:	f7fb ffa1 	bl	8001fa4 <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	f241 3288 	movw	r2, #5000	@ 0x1388
 800606c:	4293      	cmp	r3, r2
 800606e:	d901      	bls.n	8006074 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e108      	b.n	8006286 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006074:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006078:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800607c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006080:	2b00      	cmp	r3, #0
 8006082:	d0ec      	beq.n	800605e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8006084:	e060      	b.n	8006148 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006086:	f7fb ff8d 	bl	8001fa4 <HAL_GetTick>
 800608a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800608c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006094:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006098:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800609c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80060a0:	e00a      	b.n	80060b8 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060a2:	f7fb ff7f 	bl	8001fa4 <HAL_GetTick>
 80060a6:	4602      	mov	r2, r0
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d901      	bls.n	80060b8 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e0e6      	b.n	8006286 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80060b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1ec      	bne.n	80060a2 <HAL_RCC_OscConfig+0x50e>
 80060c8:	e03e      	b.n	8006148 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060ca:	f7fb ff6b 	bl	8001fa4 <HAL_GetTick>
 80060ce:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80060d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80060dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80060e4:	e00a      	b.n	80060fc <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060e6:	f7fb ff5d 	bl	8001fa4 <HAL_GetTick>
 80060ea:	4602      	mov	r2, r0
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d901      	bls.n	80060fc <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80060f8:	2303      	movs	r3, #3
 80060fa:	e0c4      	b.n	8006286 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80060fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006100:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006104:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1ec      	bne.n	80060e6 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800610c:	f7fb ff4a 	bl	8001fa4 <HAL_GetTick>
 8006110:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006112:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800611a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800611e:	f023 0301 	bic.w	r3, r3, #1
 8006122:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006126:	e00a      	b.n	800613e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006128:	f7fb ff3c 	bl	8001fa4 <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006136:	4293      	cmp	r3, r2
 8006138:	d901      	bls.n	800613e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e0a3      	b.n	8006286 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800613e:	f7ff fb46 	bl	80057ce <LL_RCC_LSE_IsReady>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1ef      	bne.n	8006128 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800614c:	2b00      	cmp	r3, #0
 800614e:	f000 8099 	beq.w	8006284 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	2b0c      	cmp	r3, #12
 8006156:	d06c      	beq.n	8006232 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800615c:	2b02      	cmp	r3, #2
 800615e:	d14b      	bne.n	80061f8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006160:	f7ff fc87 	bl	8005a72 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006164:	f7fb ff1e 	bl	8001fa4 <HAL_GetTick>
 8006168:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800616a:	e008      	b.n	800617e <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800616c:	f7fb ff1a 	bl	8001fa4 <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	2b0a      	cmp	r3, #10
 8006178:	d901      	bls.n	800617e <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e083      	b.n	8006286 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800617e:	f7ff fc86 	bl	8005a8e <LL_RCC_PLL_IsReady>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d1f1      	bne.n	800616c <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006188:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800618c:	68da      	ldr	r2, [r3, #12]
 800618e:	4b40      	ldr	r3, [pc, #256]	@ (8006290 <HAL_RCC_OscConfig+0x6fc>)
 8006190:	4013      	ands	r3, r2
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800619a:	4311      	orrs	r1, r2
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80061a0:	0212      	lsls	r2, r2, #8
 80061a2:	4311      	orrs	r1, r2
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80061a8:	4311      	orrs	r1, r2
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80061ae:	4311      	orrs	r1, r2
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80061b4:	430a      	orrs	r2, r1
 80061b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80061ba:	4313      	orrs	r3, r2
 80061bc:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061be:	f7ff fc4a 	bl	8005a56 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80061c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80061cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061d0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061d2:	f7fb fee7 	bl	8001fa4 <HAL_GetTick>
 80061d6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80061d8:	e008      	b.n	80061ec <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061da:	f7fb fee3 	bl	8001fa4 <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	2b0a      	cmp	r3, #10
 80061e6:	d901      	bls.n	80061ec <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e04c      	b.n	8006286 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80061ec:	f7ff fc4f 	bl	8005a8e <LL_RCC_PLL_IsReady>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d0f1      	beq.n	80061da <HAL_RCC_OscConfig+0x646>
 80061f6:	e045      	b.n	8006284 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061f8:	f7ff fc3b 	bl	8005a72 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061fc:	f7fb fed2 	bl	8001fa4 <HAL_GetTick>
 8006200:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8006202:	e008      	b.n	8006216 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006204:	f7fb fece 	bl	8001fa4 <HAL_GetTick>
 8006208:	4602      	mov	r2, r0
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	2b0a      	cmp	r3, #10
 8006210:	d901      	bls.n	8006216 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e037      	b.n	8006286 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8006216:	f7ff fc3a 	bl	8005a8e <LL_RCC_PLL_IsReady>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d1f1      	bne.n	8006204 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8006220:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006224:	68da      	ldr	r2, [r3, #12]
 8006226:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800622a:	4b1a      	ldr	r3, [pc, #104]	@ (8006294 <HAL_RCC_OscConfig+0x700>)
 800622c:	4013      	ands	r3, r2
 800622e:	60cb      	str	r3, [r1, #12]
 8006230:	e028      	b.n	8006284 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006236:	2b01      	cmp	r3, #1
 8006238:	d101      	bne.n	800623e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e023      	b.n	8006286 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800623e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	f003 0203 	and.w	r2, r3, #3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006250:	429a      	cmp	r2, r3
 8006252:	d115      	bne.n	8006280 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800625e:	429a      	cmp	r2, r3
 8006260:	d10e      	bne.n	8006280 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800626c:	021b      	lsls	r3, r3, #8
 800626e:	429a      	cmp	r2, r3
 8006270:	d106      	bne.n	8006280 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800627c:	429a      	cmp	r2, r3
 800627e:	d001      	beq.n	8006284 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e000      	b.n	8006286 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3720      	adds	r7, #32
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	11c1808c 	.word	0x11c1808c
 8006294:	eefefffc 	.word	0xeefefffc

08006298 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d101      	bne.n	80062ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e10f      	b.n	80064cc <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062ac:	4b89      	ldr	r3, [pc, #548]	@ (80064d4 <HAL_RCC_ClockConfig+0x23c>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0307 	and.w	r3, r3, #7
 80062b4:	683a      	ldr	r2, [r7, #0]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d91b      	bls.n	80062f2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062ba:	4b86      	ldr	r3, [pc, #536]	@ (80064d4 <HAL_RCC_ClockConfig+0x23c>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f023 0207 	bic.w	r2, r3, #7
 80062c2:	4984      	ldr	r1, [pc, #528]	@ (80064d4 <HAL_RCC_ClockConfig+0x23c>)
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062ca:	f7fb fe6b 	bl	8001fa4 <HAL_GetTick>
 80062ce:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062d0:	e008      	b.n	80062e4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80062d2:	f7fb fe67 	bl	8001fa4 <HAL_GetTick>
 80062d6:	4602      	mov	r2, r0
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d901      	bls.n	80062e4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e0f3      	b.n	80064cc <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062e4:	4b7b      	ldr	r3, [pc, #492]	@ (80064d4 <HAL_RCC_ClockConfig+0x23c>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0307 	and.w	r3, r3, #7
 80062ec:	683a      	ldr	r2, [r7, #0]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d1ef      	bne.n	80062d2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 0302 	and.w	r3, r3, #2
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d016      	beq.n	800632c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	4618      	mov	r0, r3
 8006304:	f7ff fb2a 	bl	800595c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006308:	f7fb fe4c 	bl	8001fa4 <HAL_GetTick>
 800630c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800630e:	e008      	b.n	8006322 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006310:	f7fb fe48 	bl	8001fa4 <HAL_GetTick>
 8006314:	4602      	mov	r2, r0
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	2b02      	cmp	r3, #2
 800631c:	d901      	bls.n	8006322 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e0d4      	b.n	80064cc <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006322:	f7ff fbf2 	bl	8005b0a <LL_RCC_IsActiveFlag_HPRE>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d0f1      	beq.n	8006310 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006334:	2b00      	cmp	r3, #0
 8006336:	d016      	beq.n	8006366 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	695b      	ldr	r3, [r3, #20]
 800633c:	4618      	mov	r0, r3
 800633e:	f7ff fb20 	bl	8005982 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006342:	f7fb fe2f 	bl	8001fa4 <HAL_GetTick>
 8006346:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006348:	e008      	b.n	800635c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800634a:	f7fb fe2b 	bl	8001fa4 <HAL_GetTick>
 800634e:	4602      	mov	r2, r0
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	2b02      	cmp	r3, #2
 8006356:	d901      	bls.n	800635c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006358:	2303      	movs	r3, #3
 800635a:	e0b7      	b.n	80064cc <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800635c:	f7ff fbe6 	bl	8005b2c <LL_RCC_IsActiveFlag_SHDHPRE>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d0f1      	beq.n	800634a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 0304 	and.w	r3, r3, #4
 800636e:	2b00      	cmp	r3, #0
 8006370:	d016      	beq.n	80063a0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	4618      	mov	r0, r3
 8006378:	f7ff fb19 	bl	80059ae <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800637c:	f7fb fe12 	bl	8001fa4 <HAL_GetTick>
 8006380:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006382:	e008      	b.n	8006396 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006384:	f7fb fe0e 	bl	8001fa4 <HAL_GetTick>
 8006388:	4602      	mov	r2, r0
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	2b02      	cmp	r3, #2
 8006390:	d901      	bls.n	8006396 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e09a      	b.n	80064cc <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006396:	f7ff fbdb 	bl	8005b50 <LL_RCC_IsActiveFlag_PPRE1>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d0f1      	beq.n	8006384 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 0308 	and.w	r3, r3, #8
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d017      	beq.n	80063dc <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	00db      	lsls	r3, r3, #3
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7ff fb0e 	bl	80059d4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80063b8:	f7fb fdf4 	bl	8001fa4 <HAL_GetTick>
 80063bc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80063be:	e008      	b.n	80063d2 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80063c0:	f7fb fdf0 	bl	8001fa4 <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d901      	bls.n	80063d2 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e07c      	b.n	80064cc <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80063d2:	f7ff fbce 	bl	8005b72 <LL_RCC_IsActiveFlag_PPRE2>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d0f1      	beq.n	80063c0 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d043      	beq.n	8006470 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d106      	bne.n	80063fe <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80063f0:	f7ff f99b 	bl	800572a <LL_RCC_HSE_IsReady>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d11e      	bne.n	8006438 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e066      	b.n	80064cc <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	2b03      	cmp	r3, #3
 8006404:	d106      	bne.n	8006414 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006406:	f7ff fb42 	bl	8005a8e <LL_RCC_PLL_IsReady>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d113      	bne.n	8006438 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e05b      	b.n	80064cc <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d106      	bne.n	800642a <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800641c:	f7ff fa35 	bl	800588a <LL_RCC_MSI_IsReady>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d108      	bne.n	8006438 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e050      	b.n	80064cc <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800642a:	f7ff f9ab 	bl	8005784 <LL_RCC_HSI_IsReady>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d101      	bne.n	8006438 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e049      	b.n	80064cc <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	4618      	mov	r0, r3
 800643e:	f7ff fa6f 	bl	8005920 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006442:	f7fb fdaf 	bl	8001fa4 <HAL_GetTick>
 8006446:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006448:	e00a      	b.n	8006460 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800644a:	f7fb fdab 	bl	8001fa4 <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006458:	4293      	cmp	r3, r2
 800645a:	d901      	bls.n	8006460 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 800645c:	2303      	movs	r3, #3
 800645e:	e035      	b.n	80064cc <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006460:	f7ff fa71 	bl	8005946 <LL_RCC_GetSysClkSource>
 8006464:	4602      	mov	r2, r0
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	429a      	cmp	r2, r3
 800646e:	d1ec      	bne.n	800644a <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006470:	4b18      	ldr	r3, [pc, #96]	@ (80064d4 <HAL_RCC_ClockConfig+0x23c>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0307 	and.w	r3, r3, #7
 8006478:	683a      	ldr	r2, [r7, #0]
 800647a:	429a      	cmp	r2, r3
 800647c:	d21b      	bcs.n	80064b6 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800647e:	4b15      	ldr	r3, [pc, #84]	@ (80064d4 <HAL_RCC_ClockConfig+0x23c>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f023 0207 	bic.w	r2, r3, #7
 8006486:	4913      	ldr	r1, [pc, #76]	@ (80064d4 <HAL_RCC_ClockConfig+0x23c>)
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	4313      	orrs	r3, r2
 800648c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800648e:	f7fb fd89 	bl	8001fa4 <HAL_GetTick>
 8006492:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006494:	e008      	b.n	80064a8 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006496:	f7fb fd85 	bl	8001fa4 <HAL_GetTick>
 800649a:	4602      	mov	r2, r0
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d901      	bls.n	80064a8 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e011      	b.n	80064cc <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064a8:	4b0a      	ldr	r3, [pc, #40]	@ (80064d4 <HAL_RCC_ClockConfig+0x23c>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0307 	and.w	r3, r3, #7
 80064b0:	683a      	ldr	r2, [r7, #0]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d1ef      	bne.n	8006496 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80064b6:	f000 f8b3 	bl	8006620 <HAL_RCC_GetHCLKFreq>
 80064ba:	4603      	mov	r3, r0
 80064bc:	4a06      	ldr	r2, [pc, #24]	@ (80064d8 <HAL_RCC_ClockConfig+0x240>)
 80064be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80064c0:	4b06      	ldr	r3, [pc, #24]	@ (80064dc <HAL_RCC_ClockConfig+0x244>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4618      	mov	r0, r3
 80064c6:	f7fc fd73 	bl	8002fb0 <HAL_InitTick>
 80064ca:	4603      	mov	r3, r0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3710      	adds	r7, #16
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	58004000 	.word	0x58004000
 80064d8:	20000000 	.word	0x20000000
 80064dc:	20000004 	.word	0x20000004

080064e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064e0:	b590      	push	{r4, r7, lr}
 80064e2:	b087      	sub	sp, #28
 80064e4:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80064e6:	2300      	movs	r3, #0
 80064e8:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80064ea:	2300      	movs	r3, #0
 80064ec:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064ee:	f7ff fa2a 	bl	8005946 <LL_RCC_GetSysClkSource>
 80064f2:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064f4:	f7ff fafe 	bl	8005af4 <LL_RCC_PLL_GetMainSource>
 80064f8:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d005      	beq.n	800650c <HAL_RCC_GetSysClockFreq+0x2c>
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	2b0c      	cmp	r3, #12
 8006504:	d139      	bne.n	800657a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d136      	bne.n	800657a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800650c:	f7ff f9cd 	bl	80058aa <LL_RCC_MSI_IsEnabledRangeSelect>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d115      	bne.n	8006542 <HAL_RCC_GetSysClockFreq+0x62>
 8006516:	f7ff f9c8 	bl	80058aa <LL_RCC_MSI_IsEnabledRangeSelect>
 800651a:	4603      	mov	r3, r0
 800651c:	2b01      	cmp	r3, #1
 800651e:	d106      	bne.n	800652e <HAL_RCC_GetSysClockFreq+0x4e>
 8006520:	f7ff f9d3 	bl	80058ca <LL_RCC_MSI_GetRange>
 8006524:	4603      	mov	r3, r0
 8006526:	0a1b      	lsrs	r3, r3, #8
 8006528:	f003 030f 	and.w	r3, r3, #15
 800652c:	e005      	b.n	800653a <HAL_RCC_GetSysClockFreq+0x5a>
 800652e:	f7ff f9d7 	bl	80058e0 <LL_RCC_MSI_GetRangeAfterStandby>
 8006532:	4603      	mov	r3, r0
 8006534:	0a1b      	lsrs	r3, r3, #8
 8006536:	f003 030f 	and.w	r3, r3, #15
 800653a:	4a36      	ldr	r2, [pc, #216]	@ (8006614 <HAL_RCC_GetSysClockFreq+0x134>)
 800653c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006540:	e014      	b.n	800656c <HAL_RCC_GetSysClockFreq+0x8c>
 8006542:	f7ff f9b2 	bl	80058aa <LL_RCC_MSI_IsEnabledRangeSelect>
 8006546:	4603      	mov	r3, r0
 8006548:	2b01      	cmp	r3, #1
 800654a:	d106      	bne.n	800655a <HAL_RCC_GetSysClockFreq+0x7a>
 800654c:	f7ff f9bd 	bl	80058ca <LL_RCC_MSI_GetRange>
 8006550:	4603      	mov	r3, r0
 8006552:	091b      	lsrs	r3, r3, #4
 8006554:	f003 030f 	and.w	r3, r3, #15
 8006558:	e005      	b.n	8006566 <HAL_RCC_GetSysClockFreq+0x86>
 800655a:	f7ff f9c1 	bl	80058e0 <LL_RCC_MSI_GetRangeAfterStandby>
 800655e:	4603      	mov	r3, r0
 8006560:	091b      	lsrs	r3, r3, #4
 8006562:	f003 030f 	and.w	r3, r3, #15
 8006566:	4a2b      	ldr	r2, [pc, #172]	@ (8006614 <HAL_RCC_GetSysClockFreq+0x134>)
 8006568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800656c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d115      	bne.n	80065a0 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006578:	e012      	b.n	80065a0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	2b04      	cmp	r3, #4
 800657e:	d102      	bne.n	8006586 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006580:	4b25      	ldr	r3, [pc, #148]	@ (8006618 <HAL_RCC_GetSysClockFreq+0x138>)
 8006582:	617b      	str	r3, [r7, #20]
 8006584:	e00c      	b.n	80065a0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	2b08      	cmp	r3, #8
 800658a:	d109      	bne.n	80065a0 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800658c:	f7ff f8a0 	bl	80056d0 <LL_RCC_HSE_IsEnabledDiv2>
 8006590:	4603      	mov	r3, r0
 8006592:	2b01      	cmp	r3, #1
 8006594:	d102      	bne.n	800659c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006596:	4b20      	ldr	r3, [pc, #128]	@ (8006618 <HAL_RCC_GetSysClockFreq+0x138>)
 8006598:	617b      	str	r3, [r7, #20]
 800659a:	e001      	b.n	80065a0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800659c:	4b1f      	ldr	r3, [pc, #124]	@ (800661c <HAL_RCC_GetSysClockFreq+0x13c>)
 800659e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065a0:	f7ff f9d1 	bl	8005946 <LL_RCC_GetSysClkSource>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b0c      	cmp	r3, #12
 80065a8:	d12f      	bne.n	800660a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80065aa:	f7ff faa3 	bl	8005af4 <LL_RCC_PLL_GetMainSource>
 80065ae:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d003      	beq.n	80065be <HAL_RCC_GetSysClockFreq+0xde>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2b03      	cmp	r3, #3
 80065ba:	d003      	beq.n	80065c4 <HAL_RCC_GetSysClockFreq+0xe4>
 80065bc:	e00d      	b.n	80065da <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80065be:	4b16      	ldr	r3, [pc, #88]	@ (8006618 <HAL_RCC_GetSysClockFreq+0x138>)
 80065c0:	60fb      	str	r3, [r7, #12]
        break;
 80065c2:	e00d      	b.n	80065e0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80065c4:	f7ff f884 	bl	80056d0 <LL_RCC_HSE_IsEnabledDiv2>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d102      	bne.n	80065d4 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80065ce:	4b12      	ldr	r3, [pc, #72]	@ (8006618 <HAL_RCC_GetSysClockFreq+0x138>)
 80065d0:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80065d2:	e005      	b.n	80065e0 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80065d4:	4b11      	ldr	r3, [pc, #68]	@ (800661c <HAL_RCC_GetSysClockFreq+0x13c>)
 80065d6:	60fb      	str	r3, [r7, #12]
        break;
 80065d8:	e002      	b.n	80065e0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	60fb      	str	r3, [r7, #12]
        break;
 80065de:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80065e0:	f7ff fa66 	bl	8005ab0 <LL_RCC_PLL_GetN>
 80065e4:	4602      	mov	r2, r0
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	fb03 f402 	mul.w	r4, r3, r2
 80065ec:	f7ff fa77 	bl	8005ade <LL_RCC_PLL_GetDivider>
 80065f0:	4603      	mov	r3, r0
 80065f2:	091b      	lsrs	r3, r3, #4
 80065f4:	3301      	adds	r3, #1
 80065f6:	fbb4 f4f3 	udiv	r4, r4, r3
 80065fa:	f7ff fa65 	bl	8005ac8 <LL_RCC_PLL_GetR>
 80065fe:	4603      	mov	r3, r0
 8006600:	0f5b      	lsrs	r3, r3, #29
 8006602:	3301      	adds	r3, #1
 8006604:	fbb4 f3f3 	udiv	r3, r4, r3
 8006608:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800660a:	697b      	ldr	r3, [r7, #20]
}
 800660c:	4618      	mov	r0, r3
 800660e:	371c      	adds	r7, #28
 8006610:	46bd      	mov	sp, r7
 8006612:	bd90      	pop	{r4, r7, pc}
 8006614:	0801d578 	.word	0x0801d578
 8006618:	00f42400 	.word	0x00f42400
 800661c:	01e84800 	.word	0x01e84800

08006620 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006620:	b598      	push	{r3, r4, r7, lr}
 8006622:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006624:	f7ff ff5c 	bl	80064e0 <HAL_RCC_GetSysClockFreq>
 8006628:	4604      	mov	r4, r0
 800662a:	f7ff f9e6 	bl	80059fa <LL_RCC_GetAHBPrescaler>
 800662e:	4603      	mov	r3, r0
 8006630:	091b      	lsrs	r3, r3, #4
 8006632:	f003 030f 	and.w	r3, r3, #15
 8006636:	4a03      	ldr	r2, [pc, #12]	@ (8006644 <HAL_RCC_GetHCLKFreq+0x24>)
 8006638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800663c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006640:	4618      	mov	r0, r3
 8006642:	bd98      	pop	{r3, r4, r7, pc}
 8006644:	0801d518 	.word	0x0801d518

08006648 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006648:	b598      	push	{r3, r4, r7, lr}
 800664a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800664c:	f7ff ffe8 	bl	8006620 <HAL_RCC_GetHCLKFreq>
 8006650:	4604      	mov	r4, r0
 8006652:	f7ff f9ea 	bl	8005a2a <LL_RCC_GetAPB1Prescaler>
 8006656:	4603      	mov	r3, r0
 8006658:	0a1b      	lsrs	r3, r3, #8
 800665a:	4a03      	ldr	r2, [pc, #12]	@ (8006668 <HAL_RCC_GetPCLK1Freq+0x20>)
 800665c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006660:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006664:	4618      	mov	r0, r3
 8006666:	bd98      	pop	{r3, r4, r7, pc}
 8006668:	0801d558 	.word	0x0801d558

0800666c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800666c:	b598      	push	{r3, r4, r7, lr}
 800666e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006670:	f7ff ffd6 	bl	8006620 <HAL_RCC_GetHCLKFreq>
 8006674:	4604      	mov	r4, r0
 8006676:	f7ff f9e3 	bl	8005a40 <LL_RCC_GetAPB2Prescaler>
 800667a:	4603      	mov	r3, r0
 800667c:	0adb      	lsrs	r3, r3, #11
 800667e:	4a03      	ldr	r2, [pc, #12]	@ (800668c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006684:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006688:	4618      	mov	r0, r3
 800668a:	bd98      	pop	{r3, r4, r7, pc}
 800668c:	0801d558 	.word	0x0801d558

08006690 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006690:	b590      	push	{r4, r7, lr}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	091b      	lsrs	r3, r3, #4
 800669c:	f003 030f 	and.w	r3, r3, #15
 80066a0:	4a10      	ldr	r2, [pc, #64]	@ (80066e4 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80066a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066a6:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80066a8:	f7ff f9b2 	bl	8005a10 <LL_RCC_GetAHB3Prescaler>
 80066ac:	4603      	mov	r3, r0
 80066ae:	091b      	lsrs	r3, r3, #4
 80066b0:	f003 030f 	and.w	r3, r3, #15
 80066b4:	4a0c      	ldr	r2, [pc, #48]	@ (80066e8 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80066b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80066c0:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	4a09      	ldr	r2, [pc, #36]	@ (80066ec <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80066c6:	fba2 2303 	umull	r2, r3, r2, r3
 80066ca:	0c9c      	lsrs	r4, r3, #18
 80066cc:	f7fe ff58 	bl	8005580 <HAL_PWREx_GetVoltageRange>
 80066d0:	4603      	mov	r3, r0
 80066d2:	4619      	mov	r1, r3
 80066d4:	4620      	mov	r0, r4
 80066d6:	f000 f80b 	bl	80066f0 <RCC_SetFlashLatency>
 80066da:	4603      	mov	r3, r0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3714      	adds	r7, #20
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd90      	pop	{r4, r7, pc}
 80066e4:	0801d578 	.word	0x0801d578
 80066e8:	0801d518 	.word	0x0801d518
 80066ec:	431bde83 	.word	0x431bde83

080066f0 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b08e      	sub	sp, #56	@ 0x38
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80066fa:	4a3a      	ldr	r2, [pc, #232]	@ (80067e4 <RCC_SetFlashLatency+0xf4>)
 80066fc:	f107 0320 	add.w	r3, r7, #32
 8006700:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006704:	6018      	str	r0, [r3, #0]
 8006706:	3304      	adds	r3, #4
 8006708:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800670a:	4a37      	ldr	r2, [pc, #220]	@ (80067e8 <RCC_SetFlashLatency+0xf8>)
 800670c:	f107 0318 	add.w	r3, r7, #24
 8006710:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006714:	6018      	str	r0, [r3, #0]
 8006716:	3304      	adds	r3, #4
 8006718:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800671a:	4a34      	ldr	r2, [pc, #208]	@ (80067ec <RCC_SetFlashLatency+0xfc>)
 800671c:	f107 030c 	add.w	r3, r7, #12
 8006720:	ca07      	ldmia	r2, {r0, r1, r2}
 8006722:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006726:	2300      	movs	r3, #0
 8006728:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006730:	d11b      	bne.n	800676a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006732:	2300      	movs	r3, #0
 8006734:	633b      	str	r3, [r7, #48]	@ 0x30
 8006736:	e014      	b.n	8006762 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800673a:	005b      	lsls	r3, r3, #1
 800673c:	3338      	adds	r3, #56	@ 0x38
 800673e:	443b      	add	r3, r7
 8006740:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006744:	461a      	mov	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4293      	cmp	r3, r2
 800674a:	d807      	bhi.n	800675c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800674c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	3338      	adds	r3, #56	@ 0x38
 8006752:	443b      	add	r3, r7
 8006754:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006758:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800675a:	e021      	b.n	80067a0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800675c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800675e:	3301      	adds	r3, #1
 8006760:	633b      	str	r3, [r7, #48]	@ 0x30
 8006762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006764:	2b02      	cmp	r3, #2
 8006766:	d9e7      	bls.n	8006738 <RCC_SetFlashLatency+0x48>
 8006768:	e01a      	b.n	80067a0 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800676a:	2300      	movs	r3, #0
 800676c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800676e:	e014      	b.n	800679a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006772:	005b      	lsls	r3, r3, #1
 8006774:	3338      	adds	r3, #56	@ 0x38
 8006776:	443b      	add	r3, r7
 8006778:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800677c:	461a      	mov	r2, r3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4293      	cmp	r3, r2
 8006782:	d807      	bhi.n	8006794 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	3338      	adds	r3, #56	@ 0x38
 800678a:	443b      	add	r3, r7
 800678c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006790:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006792:	e005      	b.n	80067a0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006796:	3301      	adds	r3, #1
 8006798:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800679a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800679c:	2b02      	cmp	r3, #2
 800679e:	d9e7      	bls.n	8006770 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80067a0:	4b13      	ldr	r3, [pc, #76]	@ (80067f0 <RCC_SetFlashLatency+0x100>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f023 0207 	bic.w	r2, r3, #7
 80067a8:	4911      	ldr	r1, [pc, #68]	@ (80067f0 <RCC_SetFlashLatency+0x100>)
 80067aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067ac:	4313      	orrs	r3, r2
 80067ae:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80067b0:	f7fb fbf8 	bl	8001fa4 <HAL_GetTick>
 80067b4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80067b6:	e008      	b.n	80067ca <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80067b8:	f7fb fbf4 	bl	8001fa4 <HAL_GetTick>
 80067bc:	4602      	mov	r2, r0
 80067be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d901      	bls.n	80067ca <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80067c6:	2303      	movs	r3, #3
 80067c8:	e007      	b.n	80067da <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80067ca:	4b09      	ldr	r3, [pc, #36]	@ (80067f0 <RCC_SetFlashLatency+0x100>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0307 	and.w	r3, r3, #7
 80067d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d1ef      	bne.n	80067b8 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3738      	adds	r7, #56	@ 0x38
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	0801cc94 	.word	0x0801cc94
 80067e8:	0801cc9c 	.word	0x0801cc9c
 80067ec:	0801cca4 	.word	0x0801cca4
 80067f0:	58004000 	.word	0x58004000

080067f4 <LL_RCC_LSE_IsReady>:
{
 80067f4:	b480      	push	{r7}
 80067f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80067f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006800:	f003 0302 	and.w	r3, r3, #2
 8006804:	2b02      	cmp	r3, #2
 8006806:	d101      	bne.n	800680c <LL_RCC_LSE_IsReady+0x18>
 8006808:	2301      	movs	r3, #1
 800680a:	e000      	b.n	800680e <LL_RCC_LSE_IsReady+0x1a>
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	46bd      	mov	sp, r7
 8006812:	bc80      	pop	{r7}
 8006814:	4770      	bx	lr

08006816 <LL_RCC_SetUSARTClockSource>:
{
 8006816:	b480      	push	{r7}
 8006818:	b083      	sub	sp, #12
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800681e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006822:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	0c1b      	lsrs	r3, r3, #16
 800682a:	43db      	mvns	r3, r3
 800682c:	401a      	ands	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	b29b      	uxth	r3, r3
 8006832:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006836:	4313      	orrs	r3, r2
 8006838:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	bc80      	pop	{r7}
 8006844:	4770      	bx	lr

08006846 <LL_RCC_SetI2SClockSource>:
{
 8006846:	b480      	push	{r7}
 8006848:	b083      	sub	sp, #12
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800684e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006856:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800685a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4313      	orrs	r3, r2
 8006862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006866:	bf00      	nop
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	bc80      	pop	{r7}
 800686e:	4770      	bx	lr

08006870 <LL_RCC_SetLPUARTClockSource>:
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006878:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800687c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006880:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006884:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4313      	orrs	r3, r2
 800688c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	bc80      	pop	{r7}
 8006898:	4770      	bx	lr

0800689a <LL_RCC_SetI2CClockSource>:
{
 800689a:	b480      	push	{r7}
 800689c:	b083      	sub	sp, #12
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80068a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	091b      	lsrs	r3, r3, #4
 80068ae:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80068b2:	43db      	mvns	r3, r3
 80068b4:	401a      	ands	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	011b      	lsls	r3, r3, #4
 80068ba:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80068be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80068c2:	4313      	orrs	r3, r2
 80068c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bc80      	pop	{r7}
 80068d0:	4770      	bx	lr

080068d2 <LL_RCC_SetLPTIMClockSource>:
{
 80068d2:	b480      	push	{r7}
 80068d4:	b083      	sub	sp, #12
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80068da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068de:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	0c1b      	lsrs	r3, r3, #16
 80068e6:	041b      	lsls	r3, r3, #16
 80068e8:	43db      	mvns	r3, r3
 80068ea:	401a      	ands	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	041b      	lsls	r3, r3, #16
 80068f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80068f4:	4313      	orrs	r3, r2
 80068f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80068fa:	bf00      	nop
 80068fc:	370c      	adds	r7, #12
 80068fe:	46bd      	mov	sp, r7
 8006900:	bc80      	pop	{r7}
 8006902:	4770      	bx	lr

08006904 <LL_RCC_SetRNGClockSource>:
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800690c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006910:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006914:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006918:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4313      	orrs	r3, r2
 8006920:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006924:	bf00      	nop
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	bc80      	pop	{r7}
 800692c:	4770      	bx	lr

0800692e <LL_RCC_SetADCClockSource>:
{
 800692e:	b480      	push	{r7}
 8006930:	b083      	sub	sp, #12
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006936:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800693a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800693e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006942:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4313      	orrs	r3, r2
 800694a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800694e:	bf00      	nop
 8006950:	370c      	adds	r7, #12
 8006952:	46bd      	mov	sp, r7
 8006954:	bc80      	pop	{r7}
 8006956:	4770      	bx	lr

08006958 <LL_RCC_SetRTCClockSource>:
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006960:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006964:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006968:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800696c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4313      	orrs	r3, r2
 8006974:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	bc80      	pop	{r7}
 8006980:	4770      	bx	lr

08006982 <LL_RCC_GetRTCClockSource>:
{
 8006982:	b480      	push	{r7}
 8006984:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006986:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800698a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800698e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8006992:	4618      	mov	r0, r3
 8006994:	46bd      	mov	sp, r7
 8006996:	bc80      	pop	{r7}
 8006998:	4770      	bx	lr

0800699a <LL_RCC_ForceBackupDomainReset>:
{
 800699a:	b480      	push	{r7}
 800699c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800699e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80069aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80069b2:	bf00      	nop
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bc80      	pop	{r7}
 80069b8:	4770      	bx	lr

080069ba <LL_RCC_ReleaseBackupDomainReset>:
{
 80069ba:	b480      	push	{r7}
 80069bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80069be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80069ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80069d2:	bf00      	nop
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bc80      	pop	{r7}
 80069d8:	4770      	bx	lr
	...

080069dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b086      	sub	sp, #24
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80069e4:	2300      	movs	r3, #0
 80069e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80069e8:	2300      	movs	r3, #0
 80069ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80069ec:	2300      	movs	r3, #0
 80069ee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d058      	beq.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80069fc:	f7fe fd7e 	bl	80054fc <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a00:	f7fb fad0 	bl	8001fa4 <HAL_GetTick>
 8006a04:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006a06:	e009      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a08:	f7fb facc 	bl	8001fa4 <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d902      	bls.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	74fb      	strb	r3, [r7, #19]
        break;
 8006a1a:	e006      	b.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006a1c:	4b7b      	ldr	r3, [pc, #492]	@ (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a28:	d1ee      	bne.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8006a2a:	7cfb      	ldrb	r3, [r7, #19]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d13c      	bne.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006a30:	f7ff ffa7 	bl	8006982 <LL_RCC_GetRTCClockSource>
 8006a34:	4602      	mov	r2, r0
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d00f      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006a3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a4a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a4c:	f7ff ffa5 	bl	800699a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006a50:	f7ff ffb3 	bl	80069ba <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006a54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	f003 0302 	and.w	r3, r3, #2
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d014      	beq.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a68:	f7fb fa9c 	bl	8001fa4 <HAL_GetTick>
 8006a6c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8006a6e:	e00b      	b.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a70:	f7fb fa98 	bl	8001fa4 <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d902      	bls.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8006a82:	2303      	movs	r3, #3
 8006a84:	74fb      	strb	r3, [r7, #19]
            break;
 8006a86:	e004      	b.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8006a88:	f7ff feb4 	bl	80067f4 <LL_RCC_LSE_IsReady>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d1ee      	bne.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8006a92:	7cfb      	ldrb	r3, [r7, #19]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d105      	bne.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f7ff ff5b 	bl	8006958 <LL_RCC_SetRTCClockSource>
 8006aa2:	e004      	b.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006aa4:	7cfb      	ldrb	r3, [r7, #19]
 8006aa6:	74bb      	strb	r3, [r7, #18]
 8006aa8:	e001      	b.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aaa:	7cfb      	ldrb	r3, [r7, #19]
 8006aac:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0301 	and.w	r3, r3, #1
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d004      	beq.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7ff fea9 	bl	8006816 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0302 	and.w	r3, r3, #2
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d004      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f7ff fe9e 	bl	8006816 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 0320 	and.w	r3, r3, #32
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d004      	beq.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7ff fec0 	bl	8006870 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d004      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a1b      	ldr	r3, [r3, #32]
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7ff fee6 	bl	80068d2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d004      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7ff fedb 	bl	80068d2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d004      	beq.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f7ff fed0 	bl	80068d2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d004      	beq.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	695b      	ldr	r3, [r3, #20]
 8006b42:	4618      	mov	r0, r3
 8006b44:	f7ff fea9 	bl	800689a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d004      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	699b      	ldr	r3, [r3, #24]
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f7ff fe9e 	bl	800689a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d004      	beq.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	69db      	ldr	r3, [r3, #28]
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7ff fe93 	bl	800689a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0310 	and.w	r3, r3, #16
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d011      	beq.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	4618      	mov	r0, r3
 8006b86:	f7ff fe5e 	bl	8006846 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b92:	d107      	bne.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006b94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006ba2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d010      	beq.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7ff fea5 	bl	8006904 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d107      	bne.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006bc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006bcc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006bd0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d011      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7ff fea3 	bl	800692e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bf0:	d107      	bne.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006bf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006bfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c00:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006c02:	7cbb      	ldrb	r3, [r7, #18]
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3718      	adds	r7, #24
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	58000400 	.word	0x58000400

08006c10 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d071      	beq.n	8006d06 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d106      	bne.n	8006c3c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f7fa fef8 	bl	8001a2c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2202      	movs	r2, #2
 8006c40:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006c44:	4b32      	ldr	r3, [pc, #200]	@ (8006d10 <HAL_RTC_Init+0x100>)
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	f003 0310 	and.w	r3, r3, #16
 8006c4c:	2b10      	cmp	r3, #16
 8006c4e:	d051      	beq.n	8006cf4 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c50:	4b2f      	ldr	r3, [pc, #188]	@ (8006d10 <HAL_RTC_Init+0x100>)
 8006c52:	22ca      	movs	r2, #202	@ 0xca
 8006c54:	625a      	str	r2, [r3, #36]	@ 0x24
 8006c56:	4b2e      	ldr	r3, [pc, #184]	@ (8006d10 <HAL_RTC_Init+0x100>)
 8006c58:	2253      	movs	r2, #83	@ 0x53
 8006c5a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 fa11 	bl	8007084 <RTC_EnterInitMode>
 8006c62:	4603      	mov	r3, r0
 8006c64:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006c66:	7bfb      	ldrb	r3, [r7, #15]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d13f      	bne.n	8006cec <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006c6c:	4b28      	ldr	r3, [pc, #160]	@ (8006d10 <HAL_RTC_Init+0x100>)
 8006c6e:	699b      	ldr	r3, [r3, #24]
 8006c70:	4a27      	ldr	r2, [pc, #156]	@ (8006d10 <HAL_RTC_Init+0x100>)
 8006c72:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8006c76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c7a:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006c7c:	4b24      	ldr	r3, [pc, #144]	@ (8006d10 <HAL_RTC_Init+0x100>)
 8006c7e:	699a      	ldr	r2, [r3, #24]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6859      	ldr	r1, [r3, #4]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	4319      	orrs	r1, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	430b      	orrs	r3, r1
 8006c90:	491f      	ldr	r1, [pc, #124]	@ (8006d10 <HAL_RTC_Init+0x100>)
 8006c92:	4313      	orrs	r3, r2
 8006c94:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	68da      	ldr	r2, [r3, #12]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	041b      	lsls	r3, r3, #16
 8006ca0:	491b      	ldr	r1, [pc, #108]	@ (8006d10 <HAL_RTC_Init+0x100>)
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8006d10 <HAL_RTC_Init+0x100>)
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cb6:	430b      	orrs	r3, r1
 8006cb8:	4915      	ldr	r1, [pc, #84]	@ (8006d10 <HAL_RTC_Init+0x100>)
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 fa14 	bl	80070ec <RTC_ExitInitMode>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d10e      	bne.n	8006cec <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8006cce:	4b10      	ldr	r3, [pc, #64]	@ (8006d10 <HAL_RTC_Init+0x100>)
 8006cd0:	699b      	ldr	r3, [r3, #24]
 8006cd2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a19      	ldr	r1, [r3, #32]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	69db      	ldr	r3, [r3, #28]
 8006cde:	4319      	orrs	r1, r3
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	430b      	orrs	r3, r1
 8006ce6:	490a      	ldr	r1, [pc, #40]	@ (8006d10 <HAL_RTC_Init+0x100>)
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cec:	4b08      	ldr	r3, [pc, #32]	@ (8006d10 <HAL_RTC_Init+0x100>)
 8006cee:	22ff      	movs	r2, #255	@ 0xff
 8006cf0:	625a      	str	r2, [r3, #36]	@ 0x24
 8006cf2:	e001      	b.n	8006cf8 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006cf8:	7bfb      	ldrb	r3, [r7, #15]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d103      	bne.n	8006d06 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2201      	movs	r2, #1
 8006d02:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8006d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3710      	adds	r7, #16
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	40002800 	.word	0x40002800

08006d14 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006d14:	b590      	push	{r4, r7, lr}
 8006d16:	b087      	sub	sp, #28
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006d20:	2300      	movs	r3, #0
 8006d22:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d101      	bne.n	8006d32 <HAL_RTC_SetAlarm_IT+0x1e>
 8006d2e:	2302      	movs	r3, #2
 8006d30:	e0f3      	b.n	8006f1a <HAL_RTC_SetAlarm_IT+0x206>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2201      	movs	r2, #1
 8006d36:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2202      	movs	r2, #2
 8006d3e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006d42:	4b78      	ldr	r3, [pc, #480]	@ (8006f24 <HAL_RTC_SetAlarm_IT+0x210>)
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d4a:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d52:	d06a      	beq.n	8006e2a <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d13a      	bne.n	8006dd0 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006d5a:	4b72      	ldr	r3, [pc, #456]	@ (8006f24 <HAL_RTC_SetAlarm_IT+0x210>)
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d102      	bne.n	8006d6c <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	695b      	ldr	r3, [r3, #20]
 8006d70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f000 f9f5 	bl	8007168 <RTC_ByteToBcd2>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	785b      	ldrb	r3, [r3, #1]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 f9ee 	bl	8007168 <RTC_ByteToBcd2>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006d90:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	789b      	ldrb	r3, [r3, #2]
 8006d96:	4618      	mov	r0, r3
 8006d98:	f000 f9e6 	bl	8007168 <RTC_ByteToBcd2>
 8006d9c:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006d9e:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	78db      	ldrb	r3, [r3, #3]
 8006da6:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006da8:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006db2:	4618      	mov	r0, r3
 8006db4:	f000 f9d8 	bl	8007168 <RTC_ByteToBcd2>
 8006db8:	4603      	mov	r3, r0
 8006dba:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006dbc:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006dc4:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	617b      	str	r3, [r7, #20]
 8006dce:	e02c      	b.n	8006e2a <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	695b      	ldr	r3, [r3, #20]
 8006dd4:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 8006dd8:	d00d      	beq.n	8006df6 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	695b      	ldr	r3, [r3, #20]
 8006dde:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006de2:	d008      	beq.n	8006df6 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006de4:	4b4f      	ldr	r3, [pc, #316]	@ (8006f24 <HAL_RTC_SetAlarm_IT+0x210>)
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d102      	bne.n	8006df6 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	2200      	movs	r2, #0
 8006df4:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	785b      	ldrb	r3, [r3, #1]
 8006e00:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006e02:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006e04:	68ba      	ldr	r2, [r7, #8]
 8006e06:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006e08:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	78db      	ldrb	r3, [r3, #3]
 8006e0e:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006e10:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006e18:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006e1a:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006e20:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006e26:	4313      	orrs	r3, r2
 8006e28:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e2a:	4b3e      	ldr	r3, [pc, #248]	@ (8006f24 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e2c:	22ca      	movs	r2, #202	@ 0xca
 8006e2e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006e30:	4b3c      	ldr	r3, [pc, #240]	@ (8006f24 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e32:	2253      	movs	r2, #83	@ 0x53
 8006e34:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e3e:	d12c      	bne.n	8006e9a <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006e40:	4b38      	ldr	r3, [pc, #224]	@ (8006f24 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e42:	699b      	ldr	r3, [r3, #24]
 8006e44:	4a37      	ldr	r2, [pc, #220]	@ (8006f24 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e46:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006e4a:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006e4c:	4b35      	ldr	r3, [pc, #212]	@ (8006f24 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e4e:	2201      	movs	r2, #1
 8006e50:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e58:	d107      	bne.n	8006e6a <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	699a      	ldr	r2, [r3, #24]
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	69db      	ldr	r3, [r3, #28]
 8006e62:	4930      	ldr	r1, [pc, #192]	@ (8006f24 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e64:	4313      	orrs	r3, r2
 8006e66:	644b      	str	r3, [r1, #68]	@ 0x44
 8006e68:	e006      	b.n	8006e78 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8006e6a:	4a2e      	ldr	r2, [pc, #184]	@ (8006f24 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8006e70:	4a2c      	ldr	r2, [pc, #176]	@ (8006f24 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006e78:	4a2a      	ldr	r2, [pc, #168]	@ (8006f24 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e84:	f043 0201 	orr.w	r2, r3, #1
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006e8c:	4b25      	ldr	r3, [pc, #148]	@ (8006f24 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	4a24      	ldr	r2, [pc, #144]	@ (8006f24 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e92:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 8006e96:	6193      	str	r3, [r2, #24]
 8006e98:	e02b      	b.n	8006ef2 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006e9a:	4b22      	ldr	r3, [pc, #136]	@ (8006f24 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e9c:	699b      	ldr	r3, [r3, #24]
 8006e9e:	4a21      	ldr	r2, [pc, #132]	@ (8006f24 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ea0:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8006ea4:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006ea6:	4b1f      	ldr	r3, [pc, #124]	@ (8006f24 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ea8:	2202      	movs	r2, #2
 8006eaa:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006eb2:	d107      	bne.n	8006ec4 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	699a      	ldr	r2, [r3, #24]
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	69db      	ldr	r3, [r3, #28]
 8006ebc:	4919      	ldr	r1, [pc, #100]	@ (8006f24 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8006ec2:	e006      	b.n	8006ed2 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006ec4:	4a17      	ldr	r2, [pc, #92]	@ (8006f24 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8006eca:	4a16      	ldr	r2, [pc, #88]	@ (8006f24 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	699b      	ldr	r3, [r3, #24]
 8006ed0:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8006ed2:	4a14      	ldr	r2, [pc, #80]	@ (8006f24 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ede:	f043 0202 	orr.w	r2, r3, #2
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8006f24 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ee8:	699b      	ldr	r3, [r3, #24]
 8006eea:	4a0e      	ldr	r2, [pc, #56]	@ (8006f24 <HAL_RTC_SetAlarm_IT+0x210>)
 8006eec:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 8006ef0:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8006f28 <HAL_RTC_SetAlarm_IT+0x214>)
 8006ef4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ef8:	4a0b      	ldr	r2, [pc, #44]	@ (8006f28 <HAL_RTC_SetAlarm_IT+0x214>)
 8006efa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006efe:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f02:	4b08      	ldr	r3, [pc, #32]	@ (8006f24 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f04:	22ff      	movs	r2, #255	@ 0xff
 8006f06:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	371c      	adds	r7, #28
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd90      	pop	{r4, r7, pc}
 8006f22:	bf00      	nop
 8006f24:	40002800 	.word	0x40002800
 8006f28:	58000800 	.word	0x58000800

08006f2c <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d101      	bne.n	8006f44 <HAL_RTC_DeactivateAlarm+0x18>
 8006f40:	2302      	movs	r3, #2
 8006f42:	e048      	b.n	8006fd6 <HAL_RTC_DeactivateAlarm+0xaa>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2202      	movs	r2, #2
 8006f50:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f54:	4b22      	ldr	r3, [pc, #136]	@ (8006fe0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006f56:	22ca      	movs	r2, #202	@ 0xca
 8006f58:	625a      	str	r2, [r3, #36]	@ 0x24
 8006f5a:	4b21      	ldr	r3, [pc, #132]	@ (8006fe0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006f5c:	2253      	movs	r2, #83	@ 0x53
 8006f5e:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f66:	d115      	bne.n	8006f94 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006f68:	4b1d      	ldr	r3, [pc, #116]	@ (8006fe0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006f6a:	699b      	ldr	r3, [r3, #24]
 8006f6c:	4a1c      	ldr	r2, [pc, #112]	@ (8006fe0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006f6e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006f72:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8006f74:	4b1a      	ldr	r3, [pc, #104]	@ (8006fe0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f78:	4a19      	ldr	r2, [pc, #100]	@ (8006fe0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006f7a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006f7e:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f84:	f023 0201 	bic.w	r2, r3, #1
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006f8c:	4b14      	ldr	r3, [pc, #80]	@ (8006fe0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006f8e:	2201      	movs	r2, #1
 8006f90:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006f92:	e014      	b.n	8006fbe <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006f94:	4b12      	ldr	r3, [pc, #72]	@ (8006fe0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006f96:	699b      	ldr	r3, [r3, #24]
 8006f98:	4a11      	ldr	r2, [pc, #68]	@ (8006fe0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006f9a:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8006f9e:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8006fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8006fe0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006fa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fa4:	4a0e      	ldr	r2, [pc, #56]	@ (8006fe0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006fa6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006faa:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fb0:	f023 0202 	bic.w	r2, r3, #2
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006fb8:	4b09      	ldr	r3, [pc, #36]	@ (8006fe0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006fba:	2202      	movs	r2, #2
 8006fbc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006fbe:	4b08      	ldr	r3, [pc, #32]	@ (8006fe0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006fc0:	22ff      	movs	r2, #255	@ 0xff
 8006fc2:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bc80      	pop	{r7}
 8006fde:	4770      	bx	lr
 8006fe0:	40002800 	.word	0x40002800

08006fe4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8006fec:	4b11      	ldr	r3, [pc, #68]	@ (8007034 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006fee:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f003 0301 	and.w	r3, r3, #1
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d005      	beq.n	800700e <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007002:	4b0c      	ldr	r3, [pc, #48]	@ (8007034 <HAL_RTC_AlarmIRQHandler+0x50>)
 8007004:	2201      	movs	r2, #1
 8007006:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f7fb fa9c 	bl	8002546 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f003 0302 	and.w	r3, r3, #2
 8007014:	2b00      	cmp	r3, #0
 8007016:	d005      	beq.n	8007024 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007018:	4b06      	ldr	r3, [pc, #24]	@ (8007034 <HAL_RTC_AlarmIRQHandler+0x50>)
 800701a:	2202      	movs	r2, #2
 800701c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 f94a 	bl	80072b8 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 800702c:	bf00      	nop
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	40002800 	.word	0x40002800

08007038 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8007040:	4b0f      	ldr	r3, [pc, #60]	@ (8007080 <HAL_RTC_WaitForSynchro+0x48>)
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	4a0e      	ldr	r2, [pc, #56]	@ (8007080 <HAL_RTC_WaitForSynchro+0x48>)
 8007046:	f023 0320 	bic.w	r3, r3, #32
 800704a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800704c:	f7fa ffaa 	bl	8001fa4 <HAL_GetTick>
 8007050:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007052:	e009      	b.n	8007068 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007054:	f7fa ffa6 	bl	8001fa4 <HAL_GetTick>
 8007058:	4602      	mov	r2, r0
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007062:	d901      	bls.n	8007068 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8007064:	2303      	movs	r3, #3
 8007066:	e006      	b.n	8007076 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007068:	4b05      	ldr	r3, [pc, #20]	@ (8007080 <HAL_RTC_WaitForSynchro+0x48>)
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	f003 0320 	and.w	r3, r3, #32
 8007070:	2b00      	cmp	r3, #0
 8007072:	d0ef      	beq.n	8007054 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	40002800 	.word	0x40002800

08007084 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800708c:	2300      	movs	r3, #0
 800708e:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8007090:	4b15      	ldr	r3, [pc, #84]	@ (80070e8 <RTC_EnterInitMode+0x64>)
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007098:	2b00      	cmp	r3, #0
 800709a:	d120      	bne.n	80070de <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800709c:	4b12      	ldr	r3, [pc, #72]	@ (80070e8 <RTC_EnterInitMode+0x64>)
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	4a11      	ldr	r2, [pc, #68]	@ (80070e8 <RTC_EnterInitMode+0x64>)
 80070a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070a6:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80070a8:	f7fa ff7c 	bl	8001fa4 <HAL_GetTick>
 80070ac:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80070ae:	e00d      	b.n	80070cc <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80070b0:	f7fa ff78 	bl	8001fa4 <HAL_GetTick>
 80070b4:	4602      	mov	r2, r0
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	1ad3      	subs	r3, r2, r3
 80070ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80070be:	d905      	bls.n	80070cc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80070c0:	2303      	movs	r3, #3
 80070c2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2203      	movs	r2, #3
 80070c8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80070cc:	4b06      	ldr	r3, [pc, #24]	@ (80070e8 <RTC_EnterInitMode+0x64>)
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d102      	bne.n	80070de <RTC_EnterInitMode+0x5a>
 80070d8:	7bfb      	ldrb	r3, [r7, #15]
 80070da:	2b03      	cmp	r3, #3
 80070dc:	d1e8      	bne.n	80070b0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80070de:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3710      	adds	r7, #16
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	40002800 	.word	0x40002800

080070ec <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070f4:	2300      	movs	r3, #0
 80070f6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80070f8:	4b1a      	ldr	r3, [pc, #104]	@ (8007164 <RTC_ExitInitMode+0x78>)
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	4a19      	ldr	r2, [pc, #100]	@ (8007164 <RTC_ExitInitMode+0x78>)
 80070fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007102:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007104:	4b17      	ldr	r3, [pc, #92]	@ (8007164 <RTC_ExitInitMode+0x78>)
 8007106:	699b      	ldr	r3, [r3, #24]
 8007108:	f003 0320 	and.w	r3, r3, #32
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10c      	bne.n	800712a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f7ff ff91 	bl	8007038 <HAL_RTC_WaitForSynchro>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d01e      	beq.n	800715a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2203      	movs	r2, #3
 8007120:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8007124:	2303      	movs	r3, #3
 8007126:	73fb      	strb	r3, [r7, #15]
 8007128:	e017      	b.n	800715a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800712a:	4b0e      	ldr	r3, [pc, #56]	@ (8007164 <RTC_ExitInitMode+0x78>)
 800712c:	699b      	ldr	r3, [r3, #24]
 800712e:	4a0d      	ldr	r2, [pc, #52]	@ (8007164 <RTC_ExitInitMode+0x78>)
 8007130:	f023 0320 	bic.w	r3, r3, #32
 8007134:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f7ff ff7e 	bl	8007038 <HAL_RTC_WaitForSynchro>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d005      	beq.n	800714e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2203      	movs	r2, #3
 8007146:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800714e:	4b05      	ldr	r3, [pc, #20]	@ (8007164 <RTC_ExitInitMode+0x78>)
 8007150:	699b      	ldr	r3, [r3, #24]
 8007152:	4a04      	ldr	r2, [pc, #16]	@ (8007164 <RTC_ExitInitMode+0x78>)
 8007154:	f043 0320 	orr.w	r3, r3, #32
 8007158:	6193      	str	r3, [r2, #24]
  }

  return status;
 800715a:	7bfb      	ldrb	r3, [r7, #15]
}
 800715c:	4618      	mov	r0, r3
 800715e:	3710      	adds	r7, #16
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	40002800 	.word	0x40002800

08007168 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	4603      	mov	r3, r0
 8007170:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007172:	2300      	movs	r3, #0
 8007174:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8007176:	79fb      	ldrb	r3, [r7, #7]
 8007178:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800717a:	e005      	b.n	8007188 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	3301      	adds	r3, #1
 8007180:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8007182:	7afb      	ldrb	r3, [r7, #11]
 8007184:	3b0a      	subs	r3, #10
 8007186:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8007188:	7afb      	ldrb	r3, [r7, #11]
 800718a:	2b09      	cmp	r3, #9
 800718c:	d8f6      	bhi.n	800717c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	b2db      	uxtb	r3, r3
 8007192:	011b      	lsls	r3, r3, #4
 8007194:	b2da      	uxtb	r2, r3
 8007196:	7afb      	ldrb	r3, [r7, #11]
 8007198:	4313      	orrs	r3, r2
 800719a:	b2db      	uxtb	r3, r3
}
 800719c:	4618      	mov	r0, r3
 800719e:	3714      	adds	r7, #20
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bc80      	pop	{r7}
 80071a4:	4770      	bx	lr
	...

080071a8 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d101      	bne.n	80071be <HAL_RTCEx_EnableBypassShadow+0x16>
 80071ba:	2302      	movs	r3, #2
 80071bc:	e01f      	b.n	80071fe <HAL_RTCEx_EnableBypassShadow+0x56>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2202      	movs	r2, #2
 80071ca:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80071ce:	4b0e      	ldr	r3, [pc, #56]	@ (8007208 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80071d0:	22ca      	movs	r2, #202	@ 0xca
 80071d2:	625a      	str	r2, [r3, #36]	@ 0x24
 80071d4:	4b0c      	ldr	r3, [pc, #48]	@ (8007208 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80071d6:	2253      	movs	r2, #83	@ 0x53
 80071d8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80071da:	4b0b      	ldr	r3, [pc, #44]	@ (8007208 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	4a0a      	ldr	r2, [pc, #40]	@ (8007208 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80071e0:	f043 0320 	orr.w	r3, r3, #32
 80071e4:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071e6:	4b08      	ldr	r3, [pc, #32]	@ (8007208 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80071e8:	22ff      	movs	r2, #255	@ 0xff
 80071ea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	370c      	adds	r7, #12
 8007202:	46bd      	mov	sp, r7
 8007204:	bc80      	pop	{r7}
 8007206:	4770      	bx	lr
 8007208:	40002800 	.word	0x40002800

0800720c <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800721a:	2b01      	cmp	r3, #1
 800721c:	d101      	bne.n	8007222 <HAL_RTCEx_SetSSRU_IT+0x16>
 800721e:	2302      	movs	r3, #2
 8007220:	e027      	b.n	8007272 <HAL_RTCEx_SetSSRU_IT+0x66>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2201      	movs	r2, #1
 8007226:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2202      	movs	r2, #2
 800722e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007232:	4b12      	ldr	r3, [pc, #72]	@ (800727c <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007234:	22ca      	movs	r2, #202	@ 0xca
 8007236:	625a      	str	r2, [r3, #36]	@ 0x24
 8007238:	4b10      	ldr	r3, [pc, #64]	@ (800727c <HAL_RTCEx_SetSSRU_IT+0x70>)
 800723a:	2253      	movs	r2, #83	@ 0x53
 800723c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 800723e:	4b0f      	ldr	r3, [pc, #60]	@ (800727c <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007240:	699b      	ldr	r3, [r3, #24]
 8007242:	4a0e      	ldr	r2, [pc, #56]	@ (800727c <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007244:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007248:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 800724a:	4b0d      	ldr	r3, [pc, #52]	@ (8007280 <HAL_RTCEx_SetSSRU_IT+0x74>)
 800724c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007250:	4a0b      	ldr	r2, [pc, #44]	@ (8007280 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8007252:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007256:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800725a:	4b08      	ldr	r3, [pc, #32]	@ (800727c <HAL_RTCEx_SetSSRU_IT+0x70>)
 800725c:	22ff      	movs	r2, #255	@ 0xff
 800725e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	370c      	adds	r7, #12
 8007276:	46bd      	mov	sp, r7
 8007278:	bc80      	pop	{r7}
 800727a:	4770      	bx	lr
 800727c:	40002800 	.word	0x40002800
 8007280:	58000800 	.word	0x58000800

08007284 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 800728c:	4b09      	ldr	r3, [pc, #36]	@ (80072b4 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800728e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007294:	2b00      	cmp	r3, #0
 8007296:	d005      	beq.n	80072a4 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8007298:	4b06      	ldr	r3, [pc, #24]	@ (80072b4 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800729a:	2240      	movs	r2, #64	@ 0x40
 800729c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f7fb f95b 	bl	800255a <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 80072ac:	bf00      	nop
 80072ae:	3708      	adds	r7, #8
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	40002800 	.word	0x40002800

080072b8 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80072c0:	bf00      	nop
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bc80      	pop	{r7}
 80072c8:	4770      	bx	lr
	...

080072cc <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b087      	sub	sp, #28
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80072d8:	4b07      	ldr	r3, [pc, #28]	@ (80072f8 <HAL_RTCEx_BKUPWrite+0x2c>)
 80072da:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	697a      	ldr	r2, [r7, #20]
 80072e2:	4413      	add	r3, r2
 80072e4:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	601a      	str	r2, [r3, #0]
}
 80072ec:	bf00      	nop
 80072ee:	371c      	adds	r7, #28
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bc80      	pop	{r7}
 80072f4:	4770      	bx	lr
 80072f6:	bf00      	nop
 80072f8:	4000b100 	.word	0x4000b100

080072fc <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8007306:	4b07      	ldr	r3, [pc, #28]	@ (8007324 <HAL_RTCEx_BKUPRead+0x28>)
 8007308:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	68fa      	ldr	r2, [r7, #12]
 8007310:	4413      	add	r3, r2
 8007312:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
}
 8007318:	4618      	mov	r0, r3
 800731a:	3714      	adds	r7, #20
 800731c:	46bd      	mov	sp, r7
 800731e:	bc80      	pop	{r7}
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	4000b100 	.word	0x4000b100

08007328 <LL_PWR_SetRadioBusyTrigger>:
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8007330:	4b06      	ldr	r3, [pc, #24]	@ (800734c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007338:	4904      	ldr	r1, [pc, #16]	@ (800734c <LL_PWR_SetRadioBusyTrigger+0x24>)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4313      	orrs	r3, r2
 800733e:	608b      	str	r3, [r1, #8]
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	bc80      	pop	{r7}
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	58000400 	.word	0x58000400

08007350 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8007350:	b480      	push	{r7}
 8007352:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007354:	4b05      	ldr	r3, [pc, #20]	@ (800736c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800735a:	4a04      	ldr	r2, [pc, #16]	@ (800736c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800735c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007360:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007364:	bf00      	nop
 8007366:	46bd      	mov	sp, r7
 8007368:	bc80      	pop	{r7}
 800736a:	4770      	bx	lr
 800736c:	58000400 	.word	0x58000400

08007370 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8007370:	b480      	push	{r7}
 8007372:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007374:	4b05      	ldr	r3, [pc, #20]	@ (800738c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800737a:	4a04      	ldr	r2, [pc, #16]	@ (800738c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800737c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007380:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007384:	bf00      	nop
 8007386:	46bd      	mov	sp, r7
 8007388:	bc80      	pop	{r7}
 800738a:	4770      	bx	lr
 800738c:	58000400 	.word	0x58000400

08007390 <LL_PWR_ClearFlag_RFBUSY>:
{
 8007390:	b480      	push	{r7}
 8007392:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8007394:	4b03      	ldr	r3, [pc, #12]	@ (80073a4 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8007396:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800739a:	619a      	str	r2, [r3, #24]
}
 800739c:	bf00      	nop
 800739e:	46bd      	mov	sp, r7
 80073a0:	bc80      	pop	{r7}
 80073a2:	4770      	bx	lr
 80073a4:	58000400 	.word	0x58000400

080073a8 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 80073a8:	b480      	push	{r7}
 80073aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80073ac:	4b06      	ldr	r3, [pc, #24]	@ (80073c8 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80073ae:	695b      	ldr	r3, [r3, #20]
 80073b0:	f003 0302 	and.w	r3, r3, #2
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	d101      	bne.n	80073bc <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80073b8:	2301      	movs	r3, #1
 80073ba:	e000      	b.n	80073be <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bc80      	pop	{r7}
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	58000400 	.word	0x58000400

080073cc <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 80073cc:	b480      	push	{r7}
 80073ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80073d0:	4b06      	ldr	r3, [pc, #24]	@ (80073ec <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80073d2:	695b      	ldr	r3, [r3, #20]
 80073d4:	f003 0304 	and.w	r3, r3, #4
 80073d8:	2b04      	cmp	r3, #4
 80073da:	d101      	bne.n	80073e0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80073dc:	2301      	movs	r3, #1
 80073de:	e000      	b.n	80073e2 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bc80      	pop	{r7}
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop
 80073ec:	58000400 	.word	0x58000400

080073f0 <LL_RCC_RF_DisableReset>:
{
 80073f0:	b480      	push	{r7}
 80073f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80073f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007400:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007404:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8007408:	bf00      	nop
 800740a:	46bd      	mov	sp, r7
 800740c:	bc80      	pop	{r7}
 800740e:	4770      	bx	lr

08007410 <LL_RCC_IsRFUnderReset>:
{
 8007410:	b480      	push	{r7}
 8007412:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8007414:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007418:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800741c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007420:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007424:	d101      	bne.n	800742a <LL_RCC_IsRFUnderReset+0x1a>
 8007426:	2301      	movs	r3, #1
 8007428:	e000      	b.n	800742c <LL_RCC_IsRFUnderReset+0x1c>
 800742a:	2300      	movs	r3, #0
}
 800742c:	4618      	mov	r0, r3
 800742e:	46bd      	mov	sp, r7
 8007430:	bc80      	pop	{r7}
 8007432:	4770      	bx	lr

08007434 <LL_EXTI_EnableIT_32_63>:
{
 8007434:	b480      	push	{r7}
 8007436:	b083      	sub	sp, #12
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800743c:	4b06      	ldr	r3, [pc, #24]	@ (8007458 <LL_EXTI_EnableIT_32_63+0x24>)
 800743e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8007442:	4905      	ldr	r1, [pc, #20]	@ (8007458 <LL_EXTI_EnableIT_32_63+0x24>)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4313      	orrs	r3, r2
 8007448:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	bc80      	pop	{r7}
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	58000800 	.word	0x58000800

0800745c <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d103      	bne.n	8007472 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	73fb      	strb	r3, [r7, #15]
    return status;
 800746e:	7bfb      	ldrb	r3, [r7, #15]
 8007470:	e052      	b.n	8007518 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8007472:	2300      	movs	r3, #0
 8007474:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	799b      	ldrb	r3, [r3, #6]
 800747a:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 800747c:	7bbb      	ldrb	r3, [r7, #14]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d002      	beq.n	8007488 <HAL_SUBGHZ_Init+0x2c>
 8007482:	7bbb      	ldrb	r3, [r7, #14]
 8007484:	2b03      	cmp	r3, #3
 8007486:	d109      	bne.n	800749c <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7fa fbe6 	bl	8001c60 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8007494:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8007498:	f7ff ffcc 	bl	8007434 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 800749c:	7bbb      	ldrb	r3, [r7, #14]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d126      	bne.n	80074f0 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2202      	movs	r2, #2
 80074a6:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 80074a8:	f7ff ffa2 	bl	80073f0 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80074ac:	4b1c      	ldr	r3, [pc, #112]	@ (8007520 <HAL_SUBGHZ_Init+0xc4>)
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	4613      	mov	r3, r2
 80074b2:	00db      	lsls	r3, r3, #3
 80074b4:	1a9b      	subs	r3, r3, r2
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	0cdb      	lsrs	r3, r3, #19
 80074ba:	2264      	movs	r2, #100	@ 0x64
 80074bc:	fb02 f303 	mul.w	r3, r2, r3
 80074c0:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d105      	bne.n	80074d4 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	609a      	str	r2, [r3, #8]
        break;
 80074d2:	e007      	b.n	80074e4 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	3b01      	subs	r3, #1
 80074d8:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 80074da:	f7ff ff99 	bl	8007410 <LL_RCC_IsRFUnderReset>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1ee      	bne.n	80074c2 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80074e4:	f7ff ff34 	bl	8007350 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80074e8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80074ec:	f7ff ff1c 	bl	8007328 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80074f0:	f7ff ff4e 	bl	8007390 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80074f4:	7bfb      	ldrb	r3, [r7, #15]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d10a      	bne.n	8007510 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4618      	mov	r0, r3
 8007500:	f000 faac 	bl	8007a5c <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	719a      	strb	r2, [r3, #6]

  return status;
 8007516:	7bfb      	ldrb	r3, [r7, #15]
}
 8007518:	4618      	mov	r0, r3
 800751a:	3710      	adds	r7, #16
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	20000000 	.word	0x20000000

08007524 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b086      	sub	sp, #24
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	607a      	str	r2, [r7, #4]
 800752e:	461a      	mov	r2, r3
 8007530:	460b      	mov	r3, r1
 8007532:	817b      	strh	r3, [r7, #10]
 8007534:	4613      	mov	r3, r2
 8007536:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	799b      	ldrb	r3, [r3, #6]
 800753c:	b2db      	uxtb	r3, r3
 800753e:	2b01      	cmp	r3, #1
 8007540:	d14a      	bne.n	80075d8 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	795b      	ldrb	r3, [r3, #5]
 8007546:	2b01      	cmp	r3, #1
 8007548:	d101      	bne.n	800754e <HAL_SUBGHZ_WriteRegisters+0x2a>
 800754a:	2302      	movs	r3, #2
 800754c:	e045      	b.n	80075da <HAL_SUBGHZ_WriteRegisters+0xb6>
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2201      	movs	r2, #1
 8007552:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2202      	movs	r2, #2
 8007558:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800755a:	68f8      	ldr	r0, [r7, #12]
 800755c:	f000 fb4c 	bl	8007bf8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007560:	f7ff ff06 	bl	8007370 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8007564:	210d      	movs	r1, #13
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f000 fa98 	bl	8007a9c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800756c:	897b      	ldrh	r3, [r7, #10]
 800756e:	0a1b      	lsrs	r3, r3, #8
 8007570:	b29b      	uxth	r3, r3
 8007572:	b2db      	uxtb	r3, r3
 8007574:	4619      	mov	r1, r3
 8007576:	68f8      	ldr	r0, [r7, #12]
 8007578:	f000 fa90 	bl	8007a9c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800757c:	897b      	ldrh	r3, [r7, #10]
 800757e:	b2db      	uxtb	r3, r3
 8007580:	4619      	mov	r1, r3
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	f000 fa8a 	bl	8007a9c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007588:	2300      	movs	r3, #0
 800758a:	82bb      	strh	r3, [r7, #20]
 800758c:	e00a      	b.n	80075a4 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800758e:	8abb      	ldrh	r3, [r7, #20]
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	4413      	add	r3, r2
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	4619      	mov	r1, r3
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	f000 fa7f 	bl	8007a9c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800759e:	8abb      	ldrh	r3, [r7, #20]
 80075a0:	3301      	adds	r3, #1
 80075a2:	82bb      	strh	r3, [r7, #20]
 80075a4:	8aba      	ldrh	r2, [r7, #20]
 80075a6:	893b      	ldrh	r3, [r7, #8]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d3f0      	bcc.n	800758e <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80075ac:	f7ff fed0 	bl	8007350 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80075b0:	68f8      	ldr	r0, [r7, #12]
 80075b2:	f000 fb45 	bl	8007c40 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d002      	beq.n	80075c4 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	75fb      	strb	r3, [r7, #23]
 80075c2:	e001      	b.n	80075c8 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80075c4:	2300      	movs	r3, #0
 80075c6:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2201      	movs	r2, #1
 80075cc:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2200      	movs	r2, #0
 80075d2:	715a      	strb	r2, [r3, #5]

    return status;
 80075d4:	7dfb      	ldrb	r3, [r7, #23]
 80075d6:	e000      	b.n	80075da <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80075d8:	2302      	movs	r3, #2
  }
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3718      	adds	r7, #24
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b088      	sub	sp, #32
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	60f8      	str	r0, [r7, #12]
 80075ea:	607a      	str	r2, [r7, #4]
 80075ec:	461a      	mov	r2, r3
 80075ee:	460b      	mov	r3, r1
 80075f0:	817b      	strh	r3, [r7, #10]
 80075f2:	4613      	mov	r3, r2
 80075f4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	799b      	ldrb	r3, [r3, #6]
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	2b01      	cmp	r3, #1
 8007602:	d14a      	bne.n	800769a <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	795b      	ldrb	r3, [r3, #5]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d101      	bne.n	8007610 <HAL_SUBGHZ_ReadRegisters+0x2e>
 800760c:	2302      	movs	r3, #2
 800760e:	e045      	b.n	800769c <HAL_SUBGHZ_ReadRegisters+0xba>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2201      	movs	r2, #1
 8007614:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	f000 faee 	bl	8007bf8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800761c:	f7ff fea8 	bl	8007370 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8007620:	211d      	movs	r1, #29
 8007622:	68f8      	ldr	r0, [r7, #12]
 8007624:	f000 fa3a 	bl	8007a9c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007628:	897b      	ldrh	r3, [r7, #10]
 800762a:	0a1b      	lsrs	r3, r3, #8
 800762c:	b29b      	uxth	r3, r3
 800762e:	b2db      	uxtb	r3, r3
 8007630:	4619      	mov	r1, r3
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	f000 fa32 	bl	8007a9c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007638:	897b      	ldrh	r3, [r7, #10]
 800763a:	b2db      	uxtb	r3, r3
 800763c:	4619      	mov	r1, r3
 800763e:	68f8      	ldr	r0, [r7, #12]
 8007640:	f000 fa2c 	bl	8007a9c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8007644:	2100      	movs	r1, #0
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f000 fa28 	bl	8007a9c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800764c:	2300      	movs	r3, #0
 800764e:	82fb      	strh	r3, [r7, #22]
 8007650:	e009      	b.n	8007666 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007652:	69b9      	ldr	r1, [r7, #24]
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	f000 fa77 	bl	8007b48 <SUBGHZSPI_Receive>
      pData++;
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	3301      	adds	r3, #1
 800765e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007660:	8afb      	ldrh	r3, [r7, #22]
 8007662:	3301      	adds	r3, #1
 8007664:	82fb      	strh	r3, [r7, #22]
 8007666:	8afa      	ldrh	r2, [r7, #22]
 8007668:	893b      	ldrh	r3, [r7, #8]
 800766a:	429a      	cmp	r2, r3
 800766c:	d3f1      	bcc.n	8007652 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800766e:	f7ff fe6f 	bl	8007350 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	f000 fae4 	bl	8007c40 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d002      	beq.n	8007686 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	77fb      	strb	r3, [r7, #31]
 8007684:	e001      	b.n	800768a <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8007686:	2300      	movs	r3, #0
 8007688:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2201      	movs	r2, #1
 800768e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2200      	movs	r2, #0
 8007694:	715a      	strb	r2, [r3, #5]

    return status;
 8007696:	7ffb      	ldrb	r3, [r7, #31]
 8007698:	e000      	b.n	800769c <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800769a:	2302      	movs	r3, #2
  }
}
 800769c:	4618      	mov	r0, r3
 800769e:	3720      	adds	r7, #32
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b086      	sub	sp, #24
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	607a      	str	r2, [r7, #4]
 80076ae:	461a      	mov	r2, r3
 80076b0:	460b      	mov	r3, r1
 80076b2:	72fb      	strb	r3, [r7, #11]
 80076b4:	4613      	mov	r3, r2
 80076b6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	799b      	ldrb	r3, [r3, #6]
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d14a      	bne.n	8007758 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	795b      	ldrb	r3, [r3, #5]
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d101      	bne.n	80076ce <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80076ca:	2302      	movs	r3, #2
 80076cc:	e045      	b.n	800775a <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2201      	movs	r2, #1
 80076d2:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f000 fa8f 	bl	8007bf8 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80076da:	7afb      	ldrb	r3, [r7, #11]
 80076dc:	2b84      	cmp	r3, #132	@ 0x84
 80076de:	d002      	beq.n	80076e6 <HAL_SUBGHZ_ExecSetCmd+0x42>
 80076e0:	7afb      	ldrb	r3, [r7, #11]
 80076e2:	2b94      	cmp	r3, #148	@ 0x94
 80076e4:	d103      	bne.n	80076ee <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2201      	movs	r2, #1
 80076ea:	711a      	strb	r2, [r3, #4]
 80076ec:	e002      	b.n	80076f4 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2200      	movs	r2, #0
 80076f2:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80076f4:	f7ff fe3c 	bl	8007370 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80076f8:	7afb      	ldrb	r3, [r7, #11]
 80076fa:	4619      	mov	r1, r3
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f000 f9cd 	bl	8007a9c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007702:	2300      	movs	r3, #0
 8007704:	82bb      	strh	r3, [r7, #20]
 8007706:	e00a      	b.n	800771e <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007708:	8abb      	ldrh	r3, [r7, #20]
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	4413      	add	r3, r2
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	4619      	mov	r1, r3
 8007712:	68f8      	ldr	r0, [r7, #12]
 8007714:	f000 f9c2 	bl	8007a9c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007718:	8abb      	ldrh	r3, [r7, #20]
 800771a:	3301      	adds	r3, #1
 800771c:	82bb      	strh	r3, [r7, #20]
 800771e:	8aba      	ldrh	r2, [r7, #20]
 8007720:	893b      	ldrh	r3, [r7, #8]
 8007722:	429a      	cmp	r2, r3
 8007724:	d3f0      	bcc.n	8007708 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007726:	f7ff fe13 	bl	8007350 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800772a:	7afb      	ldrb	r3, [r7, #11]
 800772c:	2b84      	cmp	r3, #132	@ 0x84
 800772e:	d002      	beq.n	8007736 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	f000 fa85 	bl	8007c40 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d002      	beq.n	8007744 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	75fb      	strb	r3, [r7, #23]
 8007742:	e001      	b.n	8007748 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007744:	2300      	movs	r3, #0
 8007746:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2201      	movs	r2, #1
 800774c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2200      	movs	r2, #0
 8007752:	715a      	strb	r2, [r3, #5]

    return status;
 8007754:	7dfb      	ldrb	r3, [r7, #23]
 8007756:	e000      	b.n	800775a <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007758:	2302      	movs	r3, #2
  }
}
 800775a:	4618      	mov	r0, r3
 800775c:	3718      	adds	r7, #24
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007762:	b580      	push	{r7, lr}
 8007764:	b088      	sub	sp, #32
 8007766:	af00      	add	r7, sp, #0
 8007768:	60f8      	str	r0, [r7, #12]
 800776a:	607a      	str	r2, [r7, #4]
 800776c:	461a      	mov	r2, r3
 800776e:	460b      	mov	r3, r1
 8007770:	72fb      	strb	r3, [r7, #11]
 8007772:	4613      	mov	r3, r2
 8007774:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	799b      	ldrb	r3, [r3, #6]
 800777e:	b2db      	uxtb	r3, r3
 8007780:	2b01      	cmp	r3, #1
 8007782:	d13d      	bne.n	8007800 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	795b      	ldrb	r3, [r3, #5]
 8007788:	2b01      	cmp	r3, #1
 800778a:	d101      	bne.n	8007790 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 800778c:	2302      	movs	r3, #2
 800778e:	e038      	b.n	8007802 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2201      	movs	r2, #1
 8007794:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	f000 fa2e 	bl	8007bf8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800779c:	f7ff fde8 	bl	8007370 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80077a0:	7afb      	ldrb	r3, [r7, #11]
 80077a2:	4619      	mov	r1, r3
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f000 f979 	bl	8007a9c <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80077aa:	2100      	movs	r1, #0
 80077ac:	68f8      	ldr	r0, [r7, #12]
 80077ae:	f000 f975 	bl	8007a9c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80077b2:	2300      	movs	r3, #0
 80077b4:	82fb      	strh	r3, [r7, #22]
 80077b6:	e009      	b.n	80077cc <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80077b8:	69b9      	ldr	r1, [r7, #24]
 80077ba:	68f8      	ldr	r0, [r7, #12]
 80077bc:	f000 f9c4 	bl	8007b48 <SUBGHZSPI_Receive>
      pData++;
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	3301      	adds	r3, #1
 80077c4:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80077c6:	8afb      	ldrh	r3, [r7, #22]
 80077c8:	3301      	adds	r3, #1
 80077ca:	82fb      	strh	r3, [r7, #22]
 80077cc:	8afa      	ldrh	r2, [r7, #22]
 80077ce:	893b      	ldrh	r3, [r7, #8]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d3f1      	bcc.n	80077b8 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80077d4:	f7ff fdbc 	bl	8007350 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f000 fa31 	bl	8007c40 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d002      	beq.n	80077ec <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	77fb      	strb	r3, [r7, #31]
 80077ea:	e001      	b.n	80077f0 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 80077ec:	2300      	movs	r3, #0
 80077ee:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2201      	movs	r2, #1
 80077f4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2200      	movs	r2, #0
 80077fa:	715a      	strb	r2, [r3, #5]

    return status;
 80077fc:	7ffb      	ldrb	r3, [r7, #31]
 80077fe:	e000      	b.n	8007802 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007800:	2302      	movs	r3, #2
  }
}
 8007802:	4618      	mov	r0, r3
 8007804:	3720      	adds	r7, #32
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b086      	sub	sp, #24
 800780e:	af00      	add	r7, sp, #0
 8007810:	60f8      	str	r0, [r7, #12]
 8007812:	607a      	str	r2, [r7, #4]
 8007814:	461a      	mov	r2, r3
 8007816:	460b      	mov	r3, r1
 8007818:	72fb      	strb	r3, [r7, #11]
 800781a:	4613      	mov	r3, r2
 800781c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	799b      	ldrb	r3, [r3, #6]
 8007822:	b2db      	uxtb	r3, r3
 8007824:	2b01      	cmp	r3, #1
 8007826:	d13e      	bne.n	80078a6 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	795b      	ldrb	r3, [r3, #5]
 800782c:	2b01      	cmp	r3, #1
 800782e:	d101      	bne.n	8007834 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8007830:	2302      	movs	r3, #2
 8007832:	e039      	b.n	80078a8 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2201      	movs	r2, #1
 8007838:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	f000 f9dc 	bl	8007bf8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007840:	f7ff fd96 	bl	8007370 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8007844:	210e      	movs	r1, #14
 8007846:	68f8      	ldr	r0, [r7, #12]
 8007848:	f000 f928 	bl	8007a9c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800784c:	7afb      	ldrb	r3, [r7, #11]
 800784e:	4619      	mov	r1, r3
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f000 f923 	bl	8007a9c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007856:	2300      	movs	r3, #0
 8007858:	82bb      	strh	r3, [r7, #20]
 800785a:	e00a      	b.n	8007872 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800785c:	8abb      	ldrh	r3, [r7, #20]
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	4413      	add	r3, r2
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	4619      	mov	r1, r3
 8007866:	68f8      	ldr	r0, [r7, #12]
 8007868:	f000 f918 	bl	8007a9c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800786c:	8abb      	ldrh	r3, [r7, #20]
 800786e:	3301      	adds	r3, #1
 8007870:	82bb      	strh	r3, [r7, #20]
 8007872:	8aba      	ldrh	r2, [r7, #20]
 8007874:	893b      	ldrh	r3, [r7, #8]
 8007876:	429a      	cmp	r2, r3
 8007878:	d3f0      	bcc.n	800785c <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800787a:	f7ff fd69 	bl	8007350 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	f000 f9de 	bl	8007c40 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d002      	beq.n	8007892 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	75fb      	strb	r3, [r7, #23]
 8007890:	e001      	b.n	8007896 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8007892:	2300      	movs	r3, #0
 8007894:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2201      	movs	r2, #1
 800789a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	715a      	strb	r2, [r3, #5]

    return status;
 80078a2:	7dfb      	ldrb	r3, [r7, #23]
 80078a4:	e000      	b.n	80078a8 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80078a6:	2302      	movs	r3, #2
  }
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3718      	adds	r7, #24
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b088      	sub	sp, #32
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	607a      	str	r2, [r7, #4]
 80078ba:	461a      	mov	r2, r3
 80078bc:	460b      	mov	r3, r1
 80078be:	72fb      	strb	r3, [r7, #11]
 80078c0:	4613      	mov	r3, r2
 80078c2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	799b      	ldrb	r3, [r3, #6]
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d141      	bne.n	8007956 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	795b      	ldrb	r3, [r3, #5]
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d101      	bne.n	80078de <HAL_SUBGHZ_ReadBuffer+0x2e>
 80078da:	2302      	movs	r3, #2
 80078dc:	e03c      	b.n	8007958 <HAL_SUBGHZ_ReadBuffer+0xa8>
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2201      	movs	r2, #1
 80078e2:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80078e4:	68f8      	ldr	r0, [r7, #12]
 80078e6:	f000 f987 	bl	8007bf8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80078ea:	f7ff fd41 	bl	8007370 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80078ee:	211e      	movs	r1, #30
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	f000 f8d3 	bl	8007a9c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80078f6:	7afb      	ldrb	r3, [r7, #11]
 80078f8:	4619      	mov	r1, r3
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	f000 f8ce 	bl	8007a9c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007900:	2100      	movs	r1, #0
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f000 f8ca 	bl	8007a9c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007908:	2300      	movs	r3, #0
 800790a:	82fb      	strh	r3, [r7, #22]
 800790c:	e009      	b.n	8007922 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800790e:	69b9      	ldr	r1, [r7, #24]
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f000 f919 	bl	8007b48 <SUBGHZSPI_Receive>
      pData++;
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	3301      	adds	r3, #1
 800791a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800791c:	8afb      	ldrh	r3, [r7, #22]
 800791e:	3301      	adds	r3, #1
 8007920:	82fb      	strh	r3, [r7, #22]
 8007922:	8afa      	ldrh	r2, [r7, #22]
 8007924:	893b      	ldrh	r3, [r7, #8]
 8007926:	429a      	cmp	r2, r3
 8007928:	d3f1      	bcc.n	800790e <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800792a:	f7ff fd11 	bl	8007350 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800792e:	68f8      	ldr	r0, [r7, #12]
 8007930:	f000 f986 	bl	8007c40 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d002      	beq.n	8007942 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	77fb      	strb	r3, [r7, #31]
 8007940:	e001      	b.n	8007946 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8007942:	2300      	movs	r3, #0
 8007944:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2201      	movs	r2, #1
 800794a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2200      	movs	r2, #0
 8007950:	715a      	strb	r2, [r3, #5]

    return status;
 8007952:	7ffb      	ldrb	r3, [r7, #31]
 8007954:	e000      	b.n	8007958 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007956:	2302      	movs	r3, #2
  }
}
 8007958:	4618      	mov	r0, r3
 800795a:	3720      	adds	r7, #32
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8007968:	2300      	movs	r3, #0
 800796a:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 800796c:	f107 020c 	add.w	r2, r7, #12
 8007970:	2302      	movs	r3, #2
 8007972:	2112      	movs	r1, #18
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f7ff fef4 	bl	8007762 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800797a:	7b3b      	ldrb	r3, [r7, #12]
 800797c:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800797e:	89fb      	ldrh	r3, [r7, #14]
 8007980:	021b      	lsls	r3, r3, #8
 8007982:	b21a      	sxth	r2, r3
 8007984:	7b7b      	ldrb	r3, [r7, #13]
 8007986:	b21b      	sxth	r3, r3
 8007988:	4313      	orrs	r3, r2
 800798a:	b21b      	sxth	r3, r3
 800798c:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 800798e:	f107 020c 	add.w	r2, r7, #12
 8007992:	2302      	movs	r3, #2
 8007994:	2102      	movs	r1, #2
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f7ff fe84 	bl	80076a4 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800799c:	89fb      	ldrh	r3, [r7, #14]
 800799e:	f003 0301 	and.w	r3, r3, #1
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d002      	beq.n	80079ac <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f013 fb7e 	bl	801b0a8 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 80079ac:	89fb      	ldrh	r3, [r7, #14]
 80079ae:	f003 0302 	and.w	r3, r3, #2
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d002      	beq.n	80079bc <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f013 fb84 	bl	801b0c4 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80079bc:	89fb      	ldrh	r3, [r7, #14]
 80079be:	f003 0304 	and.w	r3, r3, #4
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d002      	beq.n	80079cc <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f013 fbd4 	bl	801b174 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 80079cc:	89fb      	ldrh	r3, [r7, #14]
 80079ce:	f003 0308 	and.w	r3, r3, #8
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d002      	beq.n	80079dc <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f013 fbda 	bl	801b190 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 80079dc:	89fb      	ldrh	r3, [r7, #14]
 80079de:	f003 0310 	and.w	r3, r3, #16
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d002      	beq.n	80079ec <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f013 fbe0 	bl	801b1ac <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 80079ec:	89fb      	ldrh	r3, [r7, #14]
 80079ee:	f003 0320 	and.w	r3, r3, #32
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d002      	beq.n	80079fc <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f013 fbae 	bl	801b158 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80079fc:	89fb      	ldrh	r3, [r7, #14]
 80079fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d002      	beq.n	8007a0c <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f013 fb6a 	bl	801b0e0 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8007a0c:	89fb      	ldrh	r3, [r7, #14]
 8007a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00d      	beq.n	8007a32 <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8007a16:	89fb      	ldrh	r3, [r7, #14]
 8007a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d004      	beq.n	8007a2a <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007a20:	2101      	movs	r1, #1
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f013 fb6a 	bl	801b0fc <HAL_SUBGHZ_CADStatusCallback>
 8007a28:	e003      	b.n	8007a32 <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007a2a:	2100      	movs	r1, #0
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f013 fb65 	bl	801b0fc <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007a32:	89fb      	ldrh	r3, [r7, #14]
 8007a34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d002      	beq.n	8007a42 <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f013 fb7b 	bl	801b138 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8007a42:	89fb      	ldrh	r3, [r7, #14]
 8007a44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d002      	beq.n	8007a52 <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f013 fbbb 	bl	801b1c8 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8007a52:	bf00      	nop
 8007a54:	3710      	adds	r7, #16
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
	...

08007a5c <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007a64:	4b0c      	ldr	r3, [pc, #48]	@ (8007a98 <SUBGHZSPI_Init+0x3c>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a0b      	ldr	r2, [pc, #44]	@ (8007a98 <SUBGHZSPI_Init+0x3c>)
 8007a6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a6e:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007a70:	4a09      	ldr	r2, [pc, #36]	@ (8007a98 <SUBGHZSPI_Init+0x3c>)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8007a78:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8007a7a:	4b07      	ldr	r3, [pc, #28]	@ (8007a98 <SUBGHZSPI_Init+0x3c>)
 8007a7c:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8007a80:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007a82:	4b05      	ldr	r3, [pc, #20]	@ (8007a98 <SUBGHZSPI_Init+0x3c>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a04      	ldr	r2, [pc, #16]	@ (8007a98 <SUBGHZSPI_Init+0x3c>)
 8007a88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a8c:	6013      	str	r3, [r2, #0]
}
 8007a8e:	bf00      	nop
 8007a90:	370c      	adds	r7, #12
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bc80      	pop	{r7}
 8007a96:	4770      	bx	lr
 8007a98:	58010000 	.word	0x58010000

08007a9c <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b087      	sub	sp, #28
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007aac:	4b23      	ldr	r3, [pc, #140]	@ (8007b3c <SUBGHZSPI_Transmit+0xa0>)
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	00db      	lsls	r3, r3, #3
 8007ab4:	1a9b      	subs	r3, r3, r2
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	0cdb      	lsrs	r3, r3, #19
 8007aba:	2264      	movs	r2, #100	@ 0x64
 8007abc:	fb02 f303 	mul.w	r3, r2, r3
 8007ac0:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d105      	bne.n	8007ad4 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	609a      	str	r2, [r3, #8]
      break;
 8007ad2:	e008      	b.n	8007ae6 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007ada:	4b19      	ldr	r3, [pc, #100]	@ (8007b40 <SUBGHZSPI_Transmit+0xa4>)
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	f003 0302 	and.w	r3, r3, #2
 8007ae2:	2b02      	cmp	r3, #2
 8007ae4:	d1ed      	bne.n	8007ac2 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007ae6:	4b17      	ldr	r3, [pc, #92]	@ (8007b44 <SUBGHZSPI_Transmit+0xa8>)
 8007ae8:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	78fa      	ldrb	r2, [r7, #3]
 8007aee:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007af0:	4b12      	ldr	r3, [pc, #72]	@ (8007b3c <SUBGHZSPI_Transmit+0xa0>)
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	4613      	mov	r3, r2
 8007af6:	00db      	lsls	r3, r3, #3
 8007af8:	1a9b      	subs	r3, r3, r2
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	0cdb      	lsrs	r3, r3, #19
 8007afe:	2264      	movs	r2, #100	@ 0x64
 8007b00:	fb02 f303 	mul.w	r3, r2, r3
 8007b04:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d105      	bne.n	8007b18 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	609a      	str	r2, [r3, #8]
      break;
 8007b16:	e008      	b.n	8007b2a <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007b1e:	4b08      	ldr	r3, [pc, #32]	@ (8007b40 <SUBGHZSPI_Transmit+0xa4>)
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	f003 0301 	and.w	r3, r3, #1
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d1ed      	bne.n	8007b06 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8007b2a:	4b05      	ldr	r3, [pc, #20]	@ (8007b40 <SUBGHZSPI_Transmit+0xa4>)
 8007b2c:	68db      	ldr	r3, [r3, #12]

  return status;
 8007b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	371c      	adds	r7, #28
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bc80      	pop	{r7}
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	20000000 	.word	0x20000000
 8007b40:	58010000 	.word	0x58010000
 8007b44:	5801000c 	.word	0x5801000c

08007b48 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b087      	sub	sp, #28
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b52:	2300      	movs	r3, #0
 8007b54:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007b56:	4b25      	ldr	r3, [pc, #148]	@ (8007bec <SUBGHZSPI_Receive+0xa4>)
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	00db      	lsls	r3, r3, #3
 8007b5e:	1a9b      	subs	r3, r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	0cdb      	lsrs	r3, r3, #19
 8007b64:	2264      	movs	r2, #100	@ 0x64
 8007b66:	fb02 f303 	mul.w	r3, r2, r3
 8007b6a:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d105      	bne.n	8007b7e <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	609a      	str	r2, [r3, #8]
      break;
 8007b7c:	e008      	b.n	8007b90 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	3b01      	subs	r3, #1
 8007b82:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007b84:	4b1a      	ldr	r3, [pc, #104]	@ (8007bf0 <SUBGHZSPI_Receive+0xa8>)
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	f003 0302 	and.w	r3, r3, #2
 8007b8c:	2b02      	cmp	r3, #2
 8007b8e:	d1ed      	bne.n	8007b6c <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007b90:	4b18      	ldr	r3, [pc, #96]	@ (8007bf4 <SUBGHZSPI_Receive+0xac>)
 8007b92:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	22ff      	movs	r2, #255	@ 0xff
 8007b98:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007b9a:	4b14      	ldr	r3, [pc, #80]	@ (8007bec <SUBGHZSPI_Receive+0xa4>)
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	4613      	mov	r3, r2
 8007ba0:	00db      	lsls	r3, r3, #3
 8007ba2:	1a9b      	subs	r3, r3, r2
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	0cdb      	lsrs	r3, r3, #19
 8007ba8:	2264      	movs	r2, #100	@ 0x64
 8007baa:	fb02 f303 	mul.w	r3, r2, r3
 8007bae:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d105      	bne.n	8007bc2 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	609a      	str	r2, [r3, #8]
      break;
 8007bc0:	e008      	b.n	8007bd4 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	3b01      	subs	r3, #1
 8007bc6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007bc8:	4b09      	ldr	r3, [pc, #36]	@ (8007bf0 <SUBGHZSPI_Receive+0xa8>)
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	f003 0301 	and.w	r3, r3, #1
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d1ed      	bne.n	8007bb0 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007bd4:	4b06      	ldr	r3, [pc, #24]	@ (8007bf0 <SUBGHZSPI_Receive+0xa8>)
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	b2da      	uxtb	r2, r3
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	701a      	strb	r2, [r3, #0]

  return status;
 8007bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	371c      	adds	r7, #28
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bc80      	pop	{r7}
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	20000000 	.word	0x20000000
 8007bf0:	58010000 	.word	0x58010000
 8007bf4:	5801000c 	.word	0x5801000c

08007bf8 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	791b      	ldrb	r3, [r3, #4]
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d111      	bne.n	8007c2c <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007c08:	4b0c      	ldr	r3, [pc, #48]	@ (8007c3c <SUBGHZ_CheckDeviceReady+0x44>)
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	005b      	lsls	r3, r3, #1
 8007c10:	4413      	add	r3, r2
 8007c12:	00db      	lsls	r3, r3, #3
 8007c14:	0c1b      	lsrs	r3, r3, #16
 8007c16:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007c18:	f7ff fbaa 	bl	8007370 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d1f9      	bne.n	8007c1c <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007c28:	f7ff fb92 	bl	8007350 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 f807 	bl	8007c40 <SUBGHZ_WaitOnBusy>
 8007c32:	4603      	mov	r3, r0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3710      	adds	r7, #16
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	20000000 	.word	0x20000000

08007c40 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b086      	sub	sp, #24
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007c4c:	4b12      	ldr	r3, [pc, #72]	@ (8007c98 <SUBGHZ_WaitOnBusy+0x58>)
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	4613      	mov	r3, r2
 8007c52:	005b      	lsls	r3, r3, #1
 8007c54:	4413      	add	r3, r2
 8007c56:	00db      	lsls	r3, r3, #3
 8007c58:	0d1b      	lsrs	r3, r3, #20
 8007c5a:	2264      	movs	r2, #100	@ 0x64
 8007c5c:	fb02 f303 	mul.w	r3, r2, r3
 8007c60:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8007c62:	f7ff fbb3 	bl	80073cc <LL_PWR_IsActiveFlag_RFBUSYMS>
 8007c66:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d105      	bne.n	8007c7a <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2202      	movs	r2, #2
 8007c76:	609a      	str	r2, [r3, #8]
      break;
 8007c78:	e009      	b.n	8007c8e <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007c80:	f7ff fb92 	bl	80073a8 <LL_PWR_IsActiveFlag_RFBUSYS>
 8007c84:	4602      	mov	r2, r0
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	4013      	ands	r3, r2
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d0e9      	beq.n	8007c62 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8007c8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3718      	adds	r7, #24
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	20000000 	.word	0x20000000

08007c9c <LL_RCC_GetUSARTClockSource>:
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007ca4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ca8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	401a      	ands	r2, r3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	041b      	lsls	r3, r3, #16
 8007cb4:	4313      	orrs	r3, r2
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	370c      	adds	r7, #12
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bc80      	pop	{r7}
 8007cbe:	4770      	bx	lr

08007cc0 <LL_RCC_GetLPUARTClockSource>:
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007cc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ccc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4013      	ands	r3, r2
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bc80      	pop	{r7}
 8007cdc:	4770      	bx	lr

08007cde <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b082      	sub	sp, #8
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d101      	bne.n	8007cf0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	e042      	b.n	8007d76 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d106      	bne.n	8007d08 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f7fa fdb8 	bl	8002878 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2224      	movs	r2, #36	@ 0x24
 8007d0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f022 0201 	bic.w	r2, r2, #1
 8007d1e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 fc3b 	bl	800859c <UART_SetConfig>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d101      	bne.n	8007d30 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e022      	b.n	8007d76 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d002      	beq.n	8007d3e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 fea3 	bl	8008a84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	685a      	ldr	r2, [r3, #4]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007d4c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	689a      	ldr	r2, [r3, #8]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007d5c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f042 0201 	orr.w	r2, r2, #1
 8007d6c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 ff29 	bl	8008bc6 <UART_CheckIdleState>
 8007d74:	4603      	mov	r3, r0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3708      	adds	r7, #8
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
	...

08007d80 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b08a      	sub	sp, #40	@ 0x28
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	60b9      	str	r1, [r7, #8]
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d94:	2b20      	cmp	r3, #32
 8007d96:	d137      	bne.n	8007e08 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d002      	beq.n	8007da4 <HAL_UART_Receive_IT+0x24>
 8007d9e:	88fb      	ldrh	r3, [r7, #6]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d101      	bne.n	8007da8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	e030      	b.n	8007e0a <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2200      	movs	r2, #0
 8007dac:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a18      	ldr	r2, [pc, #96]	@ (8007e14 <HAL_UART_Receive_IT+0x94>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d01f      	beq.n	8007df8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d018      	beq.n	8007df8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	e853 3f00 	ldrex	r3, [r3]
 8007dd2:	613b      	str	r3, [r7, #16]
   return(result);
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007dda:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	461a      	mov	r2, r3
 8007de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de4:	623b      	str	r3, [r7, #32]
 8007de6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de8:	69f9      	ldr	r1, [r7, #28]
 8007dea:	6a3a      	ldr	r2, [r7, #32]
 8007dec:	e841 2300 	strex	r3, r2, [r1]
 8007df0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d1e6      	bne.n	8007dc6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007df8:	88fb      	ldrh	r3, [r7, #6]
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	68b9      	ldr	r1, [r7, #8]
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	f000 fff8 	bl	8008df4 <UART_Start_Receive_IT>
 8007e04:	4603      	mov	r3, r0
 8007e06:	e000      	b.n	8007e0a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007e08:	2302      	movs	r3, #2
  }
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3728      	adds	r7, #40	@ 0x28
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	40008000 	.word	0x40008000

08007e18 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b08a      	sub	sp, #40	@ 0x28
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	4613      	mov	r3, r2
 8007e24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e2c:	2b20      	cmp	r3, #32
 8007e2e:	d167      	bne.n	8007f00 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d002      	beq.n	8007e3c <HAL_UART_Transmit_DMA+0x24>
 8007e36:	88fb      	ldrh	r3, [r7, #6]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d101      	bne.n	8007e40 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	e060      	b.n	8007f02 <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	68ba      	ldr	r2, [r7, #8]
 8007e44:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	88fa      	ldrh	r2, [r7, #6]
 8007e4a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	88fa      	ldrh	r2, [r7, #6]
 8007e52:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2221      	movs	r2, #33	@ 0x21
 8007e62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d028      	beq.n	8007ec0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e72:	4a26      	ldr	r2, [pc, #152]	@ (8007f0c <HAL_UART_Transmit_DMA+0xf4>)
 8007e74:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e7a:	4a25      	ldr	r2, [pc, #148]	@ (8007f10 <HAL_UART_Transmit_DMA+0xf8>)
 8007e7c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e82:	4a24      	ldr	r2, [pc, #144]	@ (8007f14 <HAL_UART_Transmit_DMA+0xfc>)
 8007e84:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e96:	4619      	mov	r1, r3
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	3328      	adds	r3, #40	@ 0x28
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	88fb      	ldrh	r3, [r7, #6]
 8007ea2:	f7fc fc07 	bl	80046b4 <HAL_DMA_Start_IT>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d009      	beq.n	8007ec0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2210      	movs	r2, #16
 8007eb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2220      	movs	r2, #32
 8007eb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e020      	b.n	8007f02 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2240      	movs	r2, #64	@ 0x40
 8007ec6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	3308      	adds	r3, #8
 8007ece:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	e853 3f00 	ldrex	r3, [r3]
 8007ed6:	613b      	str	r3, [r7, #16]
   return(result);
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ede:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	3308      	adds	r3, #8
 8007ee6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ee8:	623a      	str	r2, [r7, #32]
 8007eea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eec:	69f9      	ldr	r1, [r7, #28]
 8007eee:	6a3a      	ldr	r2, [r7, #32]
 8007ef0:	e841 2300 	strex	r3, r2, [r1]
 8007ef4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d1e5      	bne.n	8007ec8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007efc:	2300      	movs	r3, #0
 8007efe:	e000      	b.n	8007f02 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007f00:	2302      	movs	r3, #2
  }
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3728      	adds	r7, #40	@ 0x28
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	0800917f 	.word	0x0800917f
 8007f10:	08009219 	.word	0x08009219
 8007f14:	08009235 	.word	0x08009235

08007f18 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b0ba      	sub	sp, #232	@ 0xe8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	69db      	ldr	r3, [r3, #28]
 8007f26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007f3e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007f42:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007f46:	4013      	ands	r3, r2
 8007f48:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007f4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d11b      	bne.n	8007f8c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f58:	f003 0320 	and.w	r3, r3, #32
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d015      	beq.n	8007f8c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f64:	f003 0320 	and.w	r3, r3, #32
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d105      	bne.n	8007f78 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007f6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d009      	beq.n	8007f8c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	f000 82e3 	beq.w	8008548 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	4798      	blx	r3
      }
      return;
 8007f8a:	e2dd      	b.n	8008548 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007f8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f000 8123 	beq.w	80081dc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007f96:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007f9a:	4b8d      	ldr	r3, [pc, #564]	@ (80081d0 <HAL_UART_IRQHandler+0x2b8>)
 8007f9c:	4013      	ands	r3, r2
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d106      	bne.n	8007fb0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007fa2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007fa6:	4b8b      	ldr	r3, [pc, #556]	@ (80081d4 <HAL_UART_IRQHandler+0x2bc>)
 8007fa8:	4013      	ands	r3, r2
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f000 8116 	beq.w	80081dc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fb4:	f003 0301 	and.w	r3, r3, #1
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d011      	beq.n	8007fe0 <HAL_UART_IRQHandler+0xc8>
 8007fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d00b      	beq.n	8007fe0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fd6:	f043 0201 	orr.w	r2, r3, #1
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fe4:	f003 0302 	and.w	r3, r3, #2
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d011      	beq.n	8008010 <HAL_UART_IRQHandler+0xf8>
 8007fec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ff0:	f003 0301 	and.w	r3, r3, #1
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d00b      	beq.n	8008010 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2202      	movs	r2, #2
 8007ffe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008006:	f043 0204 	orr.w	r2, r3, #4
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008014:	f003 0304 	and.w	r3, r3, #4
 8008018:	2b00      	cmp	r3, #0
 800801a:	d011      	beq.n	8008040 <HAL_UART_IRQHandler+0x128>
 800801c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008020:	f003 0301 	and.w	r3, r3, #1
 8008024:	2b00      	cmp	r3, #0
 8008026:	d00b      	beq.n	8008040 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2204      	movs	r2, #4
 800802e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008036:	f043 0202 	orr.w	r2, r3, #2
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008044:	f003 0308 	and.w	r3, r3, #8
 8008048:	2b00      	cmp	r3, #0
 800804a:	d017      	beq.n	800807c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800804c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008050:	f003 0320 	and.w	r3, r3, #32
 8008054:	2b00      	cmp	r3, #0
 8008056:	d105      	bne.n	8008064 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008058:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800805c:	4b5c      	ldr	r3, [pc, #368]	@ (80081d0 <HAL_UART_IRQHandler+0x2b8>)
 800805e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008060:	2b00      	cmp	r3, #0
 8008062:	d00b      	beq.n	800807c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2208      	movs	r2, #8
 800806a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008072:	f043 0208 	orr.w	r2, r3, #8
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800807c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008080:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008084:	2b00      	cmp	r3, #0
 8008086:	d012      	beq.n	80080ae <HAL_UART_IRQHandler+0x196>
 8008088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800808c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008090:	2b00      	cmp	r3, #0
 8008092:	d00c      	beq.n	80080ae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800809c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080a4:	f043 0220 	orr.w	r2, r3, #32
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	f000 8249 	beq.w	800854c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80080ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080be:	f003 0320 	and.w	r3, r3, #32
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d013      	beq.n	80080ee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80080c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080ca:	f003 0320 	and.w	r3, r3, #32
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d105      	bne.n	80080de <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80080d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d007      	beq.n	80080ee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d003      	beq.n	80080ee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008102:	2b40      	cmp	r3, #64	@ 0x40
 8008104:	d005      	beq.n	8008112 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008106:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800810a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800810e:	2b00      	cmp	r3, #0
 8008110:	d054      	beq.n	80081bc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 ffce 	bl	80090b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008122:	2b40      	cmp	r3, #64	@ 0x40
 8008124:	d146      	bne.n	80081b4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	3308      	adds	r3, #8
 800812c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008130:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008134:	e853 3f00 	ldrex	r3, [r3]
 8008138:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800813c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008140:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008144:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	3308      	adds	r3, #8
 800814e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008152:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008156:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800815e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008162:	e841 2300 	strex	r3, r2, [r1]
 8008166:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800816a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1d9      	bne.n	8008126 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008178:	2b00      	cmp	r3, #0
 800817a:	d017      	beq.n	80081ac <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008182:	4a15      	ldr	r2, [pc, #84]	@ (80081d8 <HAL_UART_IRQHandler+0x2c0>)
 8008184:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800818c:	4618      	mov	r0, r3
 800818e:	f7fc fb6d 	bl	800486c <HAL_DMA_Abort_IT>
 8008192:	4603      	mov	r3, r0
 8008194:	2b00      	cmp	r3, #0
 8008196:	d019      	beq.n	80081cc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800819e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80081a6:	4610      	mov	r0, r2
 80081a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081aa:	e00f      	b.n	80081cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 f9e0 	bl	8008572 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081b2:	e00b      	b.n	80081cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 f9dc 	bl	8008572 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081ba:	e007      	b.n	80081cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 f9d8 	bl	8008572 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80081ca:	e1bf      	b.n	800854c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081cc:	bf00      	nop
    return;
 80081ce:	e1bd      	b.n	800854c <HAL_UART_IRQHandler+0x634>
 80081d0:	10000001 	.word	0x10000001
 80081d4:	04000120 	.word	0x04000120
 80081d8:	080092b5 	.word	0x080092b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	f040 8153 	bne.w	800848c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80081e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081ea:	f003 0310 	and.w	r3, r3, #16
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	f000 814c 	beq.w	800848c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80081f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081f8:	f003 0310 	and.w	r3, r3, #16
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	f000 8145 	beq.w	800848c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	2210      	movs	r2, #16
 8008208:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008214:	2b40      	cmp	r3, #64	@ 0x40
 8008216:	f040 80bb 	bne.w	8008390 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008228:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800822c:	2b00      	cmp	r3, #0
 800822e:	f000 818f 	beq.w	8008550 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008238:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800823c:	429a      	cmp	r2, r3
 800823e:	f080 8187 	bcs.w	8008550 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008248:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f003 0320 	and.w	r3, r3, #32
 800825a:	2b00      	cmp	r3, #0
 800825c:	f040 8087 	bne.w	800836e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008268:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800826c:	e853 3f00 	ldrex	r3, [r3]
 8008270:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008274:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008278:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800827c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	461a      	mov	r2, r3
 8008286:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800828a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800828e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008292:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008296:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800829a:	e841 2300 	strex	r3, r2, [r1]
 800829e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80082a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1da      	bne.n	8008260 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	3308      	adds	r3, #8
 80082b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80082b4:	e853 3f00 	ldrex	r3, [r3]
 80082b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80082ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80082bc:	f023 0301 	bic.w	r3, r3, #1
 80082c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	3308      	adds	r3, #8
 80082ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80082ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80082d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80082d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80082da:	e841 2300 	strex	r3, r2, [r1]
 80082de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80082e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d1e1      	bne.n	80082aa <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	3308      	adds	r3, #8
 80082ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80082f0:	e853 3f00 	ldrex	r3, [r3]
 80082f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80082f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80082f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	3308      	adds	r3, #8
 8008306:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800830a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800830c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800830e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008310:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008312:	e841 2300 	strex	r3, r2, [r1]
 8008316:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008318:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1e3      	bne.n	80082e6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2220      	movs	r2, #32
 8008322:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008332:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008334:	e853 3f00 	ldrex	r3, [r3]
 8008338:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800833a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800833c:	f023 0310 	bic.w	r3, r3, #16
 8008340:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	461a      	mov	r2, r3
 800834a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800834e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008350:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008352:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008354:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008356:	e841 2300 	strex	r3, r2, [r1]
 800835a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800835c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800835e:	2b00      	cmp	r3, #0
 8008360:	d1e4      	bne.n	800832c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008368:	4618      	mov	r0, r3
 800836a:	f7fc fa21 	bl	80047b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2202      	movs	r2, #2
 8008372:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008380:	b29b      	uxth	r3, r3
 8008382:	1ad3      	subs	r3, r2, r3
 8008384:	b29b      	uxth	r3, r3
 8008386:	4619      	mov	r1, r3
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 f8fb 	bl	8008584 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800838e:	e0df      	b.n	8008550 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800839c:	b29b      	uxth	r3, r3
 800839e:	1ad3      	subs	r3, r2, r3
 80083a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	f000 80d1 	beq.w	8008554 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80083b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	f000 80cc 	beq.w	8008554 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083c4:	e853 3f00 	ldrex	r3, [r3]
 80083c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80083ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80083d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	461a      	mov	r2, r3
 80083da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80083de:	647b      	str	r3, [r7, #68]	@ 0x44
 80083e0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80083e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80083e6:	e841 2300 	strex	r3, r2, [r1]
 80083ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80083ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d1e4      	bne.n	80083bc <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	3308      	adds	r3, #8
 80083f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083fc:	e853 3f00 	ldrex	r3, [r3]
 8008400:	623b      	str	r3, [r7, #32]
   return(result);
 8008402:	6a3b      	ldr	r3, [r7, #32]
 8008404:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008408:	f023 0301 	bic.w	r3, r3, #1
 800840c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	3308      	adds	r3, #8
 8008416:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800841a:	633a      	str	r2, [r7, #48]	@ 0x30
 800841c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008420:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008422:	e841 2300 	strex	r3, r2, [r1]
 8008426:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1e1      	bne.n	80083f2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2220      	movs	r2, #32
 8008432:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2200      	movs	r2, #0
 800843a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	e853 3f00 	ldrex	r3, [r3]
 800844e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f023 0310 	bic.w	r3, r3, #16
 8008456:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	461a      	mov	r2, r3
 8008460:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008464:	61fb      	str	r3, [r7, #28]
 8008466:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008468:	69b9      	ldr	r1, [r7, #24]
 800846a:	69fa      	ldr	r2, [r7, #28]
 800846c:	e841 2300 	strex	r3, r2, [r1]
 8008470:	617b      	str	r3, [r7, #20]
   return(result);
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d1e4      	bne.n	8008442 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2202      	movs	r2, #2
 800847c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800847e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008482:	4619      	mov	r1, r3
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 f87d 	bl	8008584 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800848a:	e063      	b.n	8008554 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800848c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008490:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008494:	2b00      	cmp	r3, #0
 8008496:	d00e      	beq.n	80084b6 <HAL_UART_IRQHandler+0x59e>
 8008498:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800849c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d008      	beq.n	80084b6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80084ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f001 fc5e 	bl	8009d70 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80084b4:	e051      	b.n	800855a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80084b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d014      	beq.n	80084ec <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80084c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d105      	bne.n	80084da <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80084ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d008      	beq.n	80084ec <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d03a      	beq.n	8008558 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	4798      	blx	r3
    }
    return;
 80084ea:	e035      	b.n	8008558 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80084ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d009      	beq.n	800850c <HAL_UART_IRQHandler+0x5f4>
 80084f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008500:	2b00      	cmp	r3, #0
 8008502:	d003      	beq.n	800850c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 feeb 	bl	80092e0 <UART_EndTransmit_IT>
    return;
 800850a:	e026      	b.n	800855a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800850c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008510:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008514:	2b00      	cmp	r3, #0
 8008516:	d009      	beq.n	800852c <HAL_UART_IRQHandler+0x614>
 8008518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800851c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008520:	2b00      	cmp	r3, #0
 8008522:	d003      	beq.n	800852c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f001 fc35 	bl	8009d94 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800852a:	e016      	b.n	800855a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800852c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008530:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008534:	2b00      	cmp	r3, #0
 8008536:	d010      	beq.n	800855a <HAL_UART_IRQHandler+0x642>
 8008538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800853c:	2b00      	cmp	r3, #0
 800853e:	da0c      	bge.n	800855a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f001 fc1e 	bl	8009d82 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008546:	e008      	b.n	800855a <HAL_UART_IRQHandler+0x642>
      return;
 8008548:	bf00      	nop
 800854a:	e006      	b.n	800855a <HAL_UART_IRQHandler+0x642>
    return;
 800854c:	bf00      	nop
 800854e:	e004      	b.n	800855a <HAL_UART_IRQHandler+0x642>
      return;
 8008550:	bf00      	nop
 8008552:	e002      	b.n	800855a <HAL_UART_IRQHandler+0x642>
      return;
 8008554:	bf00      	nop
 8008556:	e000      	b.n	800855a <HAL_UART_IRQHandler+0x642>
    return;
 8008558:	bf00      	nop
  }
}
 800855a:	37e8      	adds	r7, #232	@ 0xe8
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008568:	bf00      	nop
 800856a:	370c      	adds	r7, #12
 800856c:	46bd      	mov	sp, r7
 800856e:	bc80      	pop	{r7}
 8008570:	4770      	bx	lr

08008572 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008572:	b480      	push	{r7}
 8008574:	b083      	sub	sp, #12
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800857a:	bf00      	nop
 800857c:	370c      	adds	r7, #12
 800857e:	46bd      	mov	sp, r7
 8008580:	bc80      	pop	{r7}
 8008582:	4770      	bx	lr

08008584 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	460b      	mov	r3, r1
 800858e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008590:	bf00      	nop
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	bc80      	pop	{r7}
 8008598:	4770      	bx	lr
	...

0800859c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800859c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085a0:	b08c      	sub	sp, #48	@ 0x30
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80085a6:	2300      	movs	r3, #0
 80085a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	689a      	ldr	r2, [r3, #8]
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	691b      	ldr	r3, [r3, #16]
 80085b4:	431a      	orrs	r2, r3
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	695b      	ldr	r3, [r3, #20]
 80085ba:	431a      	orrs	r2, r3
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	69db      	ldr	r3, [r3, #28]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	4b94      	ldr	r3, [pc, #592]	@ (800881c <UART_SetConfig+0x280>)
 80085cc:	4013      	ands	r3, r2
 80085ce:	697a      	ldr	r2, [r7, #20]
 80085d0:	6812      	ldr	r2, [r2, #0]
 80085d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80085d4:	430b      	orrs	r3, r1
 80085d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	68da      	ldr	r2, [r3, #12]
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	430a      	orrs	r2, r1
 80085ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	699b      	ldr	r3, [r3, #24]
 80085f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a89      	ldr	r2, [pc, #548]	@ (8008820 <UART_SetConfig+0x284>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d004      	beq.n	8008608 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	6a1b      	ldr	r3, [r3, #32]
 8008602:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008604:	4313      	orrs	r3, r2
 8008606:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008612:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008616:	697a      	ldr	r2, [r7, #20]
 8008618:	6812      	ldr	r2, [r2, #0]
 800861a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800861c:	430b      	orrs	r3, r1
 800861e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008626:	f023 010f 	bic.w	r1, r3, #15
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	430a      	orrs	r2, r1
 8008634:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a7a      	ldr	r2, [pc, #488]	@ (8008824 <UART_SetConfig+0x288>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d127      	bne.n	8008690 <UART_SetConfig+0xf4>
 8008640:	2003      	movs	r0, #3
 8008642:	f7ff fb2b 	bl	8007c9c <LL_RCC_GetUSARTClockSource>
 8008646:	4603      	mov	r3, r0
 8008648:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 800864c:	2b03      	cmp	r3, #3
 800864e:	d81b      	bhi.n	8008688 <UART_SetConfig+0xec>
 8008650:	a201      	add	r2, pc, #4	@ (adr r2, 8008658 <UART_SetConfig+0xbc>)
 8008652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008656:	bf00      	nop
 8008658:	08008669 	.word	0x08008669
 800865c:	08008679 	.word	0x08008679
 8008660:	08008671 	.word	0x08008671
 8008664:	08008681 	.word	0x08008681
 8008668:	2301      	movs	r3, #1
 800866a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800866e:	e080      	b.n	8008772 <UART_SetConfig+0x1d6>
 8008670:	2302      	movs	r3, #2
 8008672:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008676:	e07c      	b.n	8008772 <UART_SetConfig+0x1d6>
 8008678:	2304      	movs	r3, #4
 800867a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800867e:	e078      	b.n	8008772 <UART_SetConfig+0x1d6>
 8008680:	2308      	movs	r3, #8
 8008682:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008686:	e074      	b.n	8008772 <UART_SetConfig+0x1d6>
 8008688:	2310      	movs	r3, #16
 800868a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800868e:	e070      	b.n	8008772 <UART_SetConfig+0x1d6>
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a64      	ldr	r2, [pc, #400]	@ (8008828 <UART_SetConfig+0x28c>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d138      	bne.n	800870c <UART_SetConfig+0x170>
 800869a:	200c      	movs	r0, #12
 800869c:	f7ff fafe 	bl	8007c9c <LL_RCC_GetUSARTClockSource>
 80086a0:	4603      	mov	r3, r0
 80086a2:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 80086a6:	2b0c      	cmp	r3, #12
 80086a8:	d82c      	bhi.n	8008704 <UART_SetConfig+0x168>
 80086aa:	a201      	add	r2, pc, #4	@ (adr r2, 80086b0 <UART_SetConfig+0x114>)
 80086ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b0:	080086e5 	.word	0x080086e5
 80086b4:	08008705 	.word	0x08008705
 80086b8:	08008705 	.word	0x08008705
 80086bc:	08008705 	.word	0x08008705
 80086c0:	080086f5 	.word	0x080086f5
 80086c4:	08008705 	.word	0x08008705
 80086c8:	08008705 	.word	0x08008705
 80086cc:	08008705 	.word	0x08008705
 80086d0:	080086ed 	.word	0x080086ed
 80086d4:	08008705 	.word	0x08008705
 80086d8:	08008705 	.word	0x08008705
 80086dc:	08008705 	.word	0x08008705
 80086e0:	080086fd 	.word	0x080086fd
 80086e4:	2300      	movs	r3, #0
 80086e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086ea:	e042      	b.n	8008772 <UART_SetConfig+0x1d6>
 80086ec:	2302      	movs	r3, #2
 80086ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086f2:	e03e      	b.n	8008772 <UART_SetConfig+0x1d6>
 80086f4:	2304      	movs	r3, #4
 80086f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086fa:	e03a      	b.n	8008772 <UART_SetConfig+0x1d6>
 80086fc:	2308      	movs	r3, #8
 80086fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008702:	e036      	b.n	8008772 <UART_SetConfig+0x1d6>
 8008704:	2310      	movs	r3, #16
 8008706:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800870a:	e032      	b.n	8008772 <UART_SetConfig+0x1d6>
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a43      	ldr	r2, [pc, #268]	@ (8008820 <UART_SetConfig+0x284>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d12a      	bne.n	800876c <UART_SetConfig+0x1d0>
 8008716:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800871a:	f7ff fad1 	bl	8007cc0 <LL_RCC_GetLPUARTClockSource>
 800871e:	4603      	mov	r3, r0
 8008720:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008724:	d01a      	beq.n	800875c <UART_SetConfig+0x1c0>
 8008726:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800872a:	d81b      	bhi.n	8008764 <UART_SetConfig+0x1c8>
 800872c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008730:	d00c      	beq.n	800874c <UART_SetConfig+0x1b0>
 8008732:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008736:	d815      	bhi.n	8008764 <UART_SetConfig+0x1c8>
 8008738:	2b00      	cmp	r3, #0
 800873a:	d003      	beq.n	8008744 <UART_SetConfig+0x1a8>
 800873c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008740:	d008      	beq.n	8008754 <UART_SetConfig+0x1b8>
 8008742:	e00f      	b.n	8008764 <UART_SetConfig+0x1c8>
 8008744:	2300      	movs	r3, #0
 8008746:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800874a:	e012      	b.n	8008772 <UART_SetConfig+0x1d6>
 800874c:	2302      	movs	r3, #2
 800874e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008752:	e00e      	b.n	8008772 <UART_SetConfig+0x1d6>
 8008754:	2304      	movs	r3, #4
 8008756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800875a:	e00a      	b.n	8008772 <UART_SetConfig+0x1d6>
 800875c:	2308      	movs	r3, #8
 800875e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008762:	e006      	b.n	8008772 <UART_SetConfig+0x1d6>
 8008764:	2310      	movs	r3, #16
 8008766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800876a:	e002      	b.n	8008772 <UART_SetConfig+0x1d6>
 800876c:	2310      	movs	r3, #16
 800876e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a2a      	ldr	r2, [pc, #168]	@ (8008820 <UART_SetConfig+0x284>)
 8008778:	4293      	cmp	r3, r2
 800877a:	f040 80a4 	bne.w	80088c6 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800877e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008782:	2b08      	cmp	r3, #8
 8008784:	d823      	bhi.n	80087ce <UART_SetConfig+0x232>
 8008786:	a201      	add	r2, pc, #4	@ (adr r2, 800878c <UART_SetConfig+0x1f0>)
 8008788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800878c:	080087b1 	.word	0x080087b1
 8008790:	080087cf 	.word	0x080087cf
 8008794:	080087b9 	.word	0x080087b9
 8008798:	080087cf 	.word	0x080087cf
 800879c:	080087bf 	.word	0x080087bf
 80087a0:	080087cf 	.word	0x080087cf
 80087a4:	080087cf 	.word	0x080087cf
 80087a8:	080087cf 	.word	0x080087cf
 80087ac:	080087c7 	.word	0x080087c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087b0:	f7fd ff4a 	bl	8006648 <HAL_RCC_GetPCLK1Freq>
 80087b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80087b6:	e010      	b.n	80087da <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80087b8:	4b1c      	ldr	r3, [pc, #112]	@ (800882c <UART_SetConfig+0x290>)
 80087ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80087bc:	e00d      	b.n	80087da <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087be:	f7fd fe8f 	bl	80064e0 <HAL_RCC_GetSysClockFreq>
 80087c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80087c4:	e009      	b.n	80087da <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80087ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80087cc:	e005      	b.n	80087da <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80087ce:	2300      	movs	r3, #0
 80087d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80087d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80087da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f000 8137 	beq.w	8008a50 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087e6:	4a12      	ldr	r2, [pc, #72]	@ (8008830 <UART_SetConfig+0x294>)
 80087e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087ec:	461a      	mov	r2, r3
 80087ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80087f4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	685a      	ldr	r2, [r3, #4]
 80087fa:	4613      	mov	r3, r2
 80087fc:	005b      	lsls	r3, r3, #1
 80087fe:	4413      	add	r3, r2
 8008800:	69ba      	ldr	r2, [r7, #24]
 8008802:	429a      	cmp	r2, r3
 8008804:	d305      	bcc.n	8008812 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800880c:	69ba      	ldr	r2, [r7, #24]
 800880e:	429a      	cmp	r2, r3
 8008810:	d910      	bls.n	8008834 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008818:	e11a      	b.n	8008a50 <UART_SetConfig+0x4b4>
 800881a:	bf00      	nop
 800881c:	cfff69f3 	.word	0xcfff69f3
 8008820:	40008000 	.word	0x40008000
 8008824:	40013800 	.word	0x40013800
 8008828:	40004400 	.word	0x40004400
 800882c:	00f42400 	.word	0x00f42400
 8008830:	0801d608 	.word	0x0801d608
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008836:	2200      	movs	r2, #0
 8008838:	60bb      	str	r3, [r7, #8]
 800883a:	60fa      	str	r2, [r7, #12]
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008840:	4a8e      	ldr	r2, [pc, #568]	@ (8008a7c <UART_SetConfig+0x4e0>)
 8008842:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008846:	b29b      	uxth	r3, r3
 8008848:	2200      	movs	r2, #0
 800884a:	603b      	str	r3, [r7, #0]
 800884c:	607a      	str	r2, [r7, #4]
 800884e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008852:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008856:	f7f8 f9a7 	bl	8000ba8 <__aeabi_uldivmod>
 800885a:	4602      	mov	r2, r0
 800885c:	460b      	mov	r3, r1
 800885e:	4610      	mov	r0, r2
 8008860:	4619      	mov	r1, r3
 8008862:	f04f 0200 	mov.w	r2, #0
 8008866:	f04f 0300 	mov.w	r3, #0
 800886a:	020b      	lsls	r3, r1, #8
 800886c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008870:	0202      	lsls	r2, r0, #8
 8008872:	6979      	ldr	r1, [r7, #20]
 8008874:	6849      	ldr	r1, [r1, #4]
 8008876:	0849      	lsrs	r1, r1, #1
 8008878:	2000      	movs	r0, #0
 800887a:	460c      	mov	r4, r1
 800887c:	4605      	mov	r5, r0
 800887e:	eb12 0804 	adds.w	r8, r2, r4
 8008882:	eb43 0905 	adc.w	r9, r3, r5
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	469a      	mov	sl, r3
 800888e:	4693      	mov	fp, r2
 8008890:	4652      	mov	r2, sl
 8008892:	465b      	mov	r3, fp
 8008894:	4640      	mov	r0, r8
 8008896:	4649      	mov	r1, r9
 8008898:	f7f8 f986 	bl	8000ba8 <__aeabi_uldivmod>
 800889c:	4602      	mov	r2, r0
 800889e:	460b      	mov	r3, r1
 80088a0:	4613      	mov	r3, r2
 80088a2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80088a4:	6a3b      	ldr	r3, [r7, #32]
 80088a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80088aa:	d308      	bcc.n	80088be <UART_SetConfig+0x322>
 80088ac:	6a3b      	ldr	r3, [r7, #32]
 80088ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80088b2:	d204      	bcs.n	80088be <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	6a3a      	ldr	r2, [r7, #32]
 80088ba:	60da      	str	r2, [r3, #12]
 80088bc:	e0c8      	b.n	8008a50 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80088c4:	e0c4      	b.n	8008a50 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	69db      	ldr	r3, [r3, #28]
 80088ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088ce:	d167      	bne.n	80089a0 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80088d0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80088d4:	2b08      	cmp	r3, #8
 80088d6:	d828      	bhi.n	800892a <UART_SetConfig+0x38e>
 80088d8:	a201      	add	r2, pc, #4	@ (adr r2, 80088e0 <UART_SetConfig+0x344>)
 80088da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088de:	bf00      	nop
 80088e0:	08008905 	.word	0x08008905
 80088e4:	0800890d 	.word	0x0800890d
 80088e8:	08008915 	.word	0x08008915
 80088ec:	0800892b 	.word	0x0800892b
 80088f0:	0800891b 	.word	0x0800891b
 80088f4:	0800892b 	.word	0x0800892b
 80088f8:	0800892b 	.word	0x0800892b
 80088fc:	0800892b 	.word	0x0800892b
 8008900:	08008923 	.word	0x08008923
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008904:	f7fd fea0 	bl	8006648 <HAL_RCC_GetPCLK1Freq>
 8008908:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800890a:	e014      	b.n	8008936 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800890c:	f7fd feae 	bl	800666c <HAL_RCC_GetPCLK2Freq>
 8008910:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008912:	e010      	b.n	8008936 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008914:	4b5a      	ldr	r3, [pc, #360]	@ (8008a80 <UART_SetConfig+0x4e4>)
 8008916:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008918:	e00d      	b.n	8008936 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800891a:	f7fd fde1 	bl	80064e0 <HAL_RCC_GetSysClockFreq>
 800891e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008920:	e009      	b.n	8008936 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008922:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008926:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008928:	e005      	b.n	8008936 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800892a:	2300      	movs	r3, #0
 800892c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008934:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008938:	2b00      	cmp	r3, #0
 800893a:	f000 8089 	beq.w	8008a50 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008942:	4a4e      	ldr	r2, [pc, #312]	@ (8008a7c <UART_SetConfig+0x4e0>)
 8008944:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008948:	461a      	mov	r2, r3
 800894a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800894c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008950:	005a      	lsls	r2, r3, #1
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	085b      	lsrs	r3, r3, #1
 8008958:	441a      	add	r2, r3
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008962:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008964:	6a3b      	ldr	r3, [r7, #32]
 8008966:	2b0f      	cmp	r3, #15
 8008968:	d916      	bls.n	8008998 <UART_SetConfig+0x3fc>
 800896a:	6a3b      	ldr	r3, [r7, #32]
 800896c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008970:	d212      	bcs.n	8008998 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008972:	6a3b      	ldr	r3, [r7, #32]
 8008974:	b29b      	uxth	r3, r3
 8008976:	f023 030f 	bic.w	r3, r3, #15
 800897a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800897c:	6a3b      	ldr	r3, [r7, #32]
 800897e:	085b      	lsrs	r3, r3, #1
 8008980:	b29b      	uxth	r3, r3
 8008982:	f003 0307 	and.w	r3, r3, #7
 8008986:	b29a      	uxth	r2, r3
 8008988:	8bfb      	ldrh	r3, [r7, #30]
 800898a:	4313      	orrs	r3, r2
 800898c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	8bfa      	ldrh	r2, [r7, #30]
 8008994:	60da      	str	r2, [r3, #12]
 8008996:	e05b      	b.n	8008a50 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800899e:	e057      	b.n	8008a50 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80089a0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80089a4:	2b08      	cmp	r3, #8
 80089a6:	d828      	bhi.n	80089fa <UART_SetConfig+0x45e>
 80089a8:	a201      	add	r2, pc, #4	@ (adr r2, 80089b0 <UART_SetConfig+0x414>)
 80089aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ae:	bf00      	nop
 80089b0:	080089d5 	.word	0x080089d5
 80089b4:	080089dd 	.word	0x080089dd
 80089b8:	080089e5 	.word	0x080089e5
 80089bc:	080089fb 	.word	0x080089fb
 80089c0:	080089eb 	.word	0x080089eb
 80089c4:	080089fb 	.word	0x080089fb
 80089c8:	080089fb 	.word	0x080089fb
 80089cc:	080089fb 	.word	0x080089fb
 80089d0:	080089f3 	.word	0x080089f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089d4:	f7fd fe38 	bl	8006648 <HAL_RCC_GetPCLK1Freq>
 80089d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80089da:	e014      	b.n	8008a06 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089dc:	f7fd fe46 	bl	800666c <HAL_RCC_GetPCLK2Freq>
 80089e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80089e2:	e010      	b.n	8008a06 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089e4:	4b26      	ldr	r3, [pc, #152]	@ (8008a80 <UART_SetConfig+0x4e4>)
 80089e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80089e8:	e00d      	b.n	8008a06 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089ea:	f7fd fd79 	bl	80064e0 <HAL_RCC_GetSysClockFreq>
 80089ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80089f0:	e009      	b.n	8008a06 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80089f8:	e005      	b.n	8008a06 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80089fa:	2300      	movs	r3, #0
 80089fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008a04:	bf00      	nop
    }

    if (pclk != 0U)
 8008a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d021      	beq.n	8008a50 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a10:	4a1a      	ldr	r2, [pc, #104]	@ (8008a7c <UART_SetConfig+0x4e0>)
 8008a12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a16:	461a      	mov	r2, r3
 8008a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	085b      	lsrs	r3, r3, #1
 8008a24:	441a      	add	r2, r3
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a2e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a30:	6a3b      	ldr	r3, [r7, #32]
 8008a32:	2b0f      	cmp	r3, #15
 8008a34:	d909      	bls.n	8008a4a <UART_SetConfig+0x4ae>
 8008a36:	6a3b      	ldr	r3, [r7, #32]
 8008a38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a3c:	d205      	bcs.n	8008a4a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008a3e:	6a3b      	ldr	r3, [r7, #32]
 8008a40:	b29a      	uxth	r2, r3
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	60da      	str	r2, [r3, #12]
 8008a48:	e002      	b.n	8008a50 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	2201      	movs	r2, #1
 8008a54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	2200      	movs	r2, #0
 8008a64:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008a6c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3730      	adds	r7, #48	@ 0x30
 8008a74:	46bd      	mov	sp, r7
 8008a76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a7a:	bf00      	nop
 8008a7c:	0801d608 	.word	0x0801d608
 8008a80:	00f42400 	.word	0x00f42400

08008a84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a90:	f003 0301 	and.w	r3, r3, #1
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d00a      	beq.n	8008aae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	430a      	orrs	r2, r1
 8008aac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ab2:	f003 0302 	and.w	r3, r3, #2
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d00a      	beq.n	8008ad0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	430a      	orrs	r2, r1
 8008ace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ad4:	f003 0304 	and.w	r3, r3, #4
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d00a      	beq.n	8008af2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	430a      	orrs	r2, r1
 8008af0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008af6:	f003 0308 	and.w	r3, r3, #8
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d00a      	beq.n	8008b14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	430a      	orrs	r2, r1
 8008b12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b18:	f003 0310 	and.w	r3, r3, #16
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d00a      	beq.n	8008b36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	430a      	orrs	r2, r1
 8008b34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b3a:	f003 0320 	and.w	r3, r3, #32
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d00a      	beq.n	8008b58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	430a      	orrs	r2, r1
 8008b56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d01a      	beq.n	8008b9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	430a      	orrs	r2, r1
 8008b78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b82:	d10a      	bne.n	8008b9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	430a      	orrs	r2, r1
 8008b98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d00a      	beq.n	8008bbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	430a      	orrs	r2, r1
 8008bba:	605a      	str	r2, [r3, #4]
  }
}
 8008bbc:	bf00      	nop
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bc80      	pop	{r7}
 8008bc4:	4770      	bx	lr

08008bc6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b086      	sub	sp, #24
 8008bca:	af02      	add	r7, sp, #8
 8008bcc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008bd6:	f7f9 f9e5 	bl	8001fa4 <HAL_GetTick>
 8008bda:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f003 0308 	and.w	r3, r3, #8
 8008be6:	2b08      	cmp	r3, #8
 8008be8:	d10e      	bne.n	8008c08 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008bea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008bee:	9300      	str	r3, [sp, #0]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 f832 	bl	8008c62 <UART_WaitOnFlagUntilTimeout>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d001      	beq.n	8008c08 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c04:	2303      	movs	r3, #3
 8008c06:	e028      	b.n	8008c5a <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f003 0304 	and.w	r3, r3, #4
 8008c12:	2b04      	cmp	r3, #4
 8008c14:	d10e      	bne.n	8008c34 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c16:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008c1a:	9300      	str	r3, [sp, #0]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 f81c 	bl	8008c62 <UART_WaitOnFlagUntilTimeout>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d001      	beq.n	8008c34 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c30:	2303      	movs	r3, #3
 8008c32:	e012      	b.n	8008c5a <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2220      	movs	r2, #32
 8008c38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2220      	movs	r2, #32
 8008c40:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008c58:	2300      	movs	r3, #0
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b09c      	sub	sp, #112	@ 0x70
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	60f8      	str	r0, [r7, #12]
 8008c6a:	60b9      	str	r1, [r7, #8]
 8008c6c:	603b      	str	r3, [r7, #0]
 8008c6e:	4613      	mov	r3, r2
 8008c70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c72:	e0a9      	b.n	8008dc8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c7a:	f000 80a5 	beq.w	8008dc8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c7e:	f7f9 f991 	bl	8001fa4 <HAL_GetTick>
 8008c82:	4602      	mov	r2, r0
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	1ad3      	subs	r3, r2, r3
 8008c88:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d302      	bcc.n	8008c94 <UART_WaitOnFlagUntilTimeout+0x32>
 8008c8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d140      	bne.n	8008d16 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c9c:	e853 3f00 	ldrex	r3, [r3]
 8008ca0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008ca2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ca4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008ca8:	667b      	str	r3, [r7, #100]	@ 0x64
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	461a      	mov	r2, r3
 8008cb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008cb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008cb4:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008cb8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008cba:	e841 2300 	strex	r3, r2, [r1]
 8008cbe:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008cc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d1e6      	bne.n	8008c94 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	3308      	adds	r3, #8
 8008ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cd0:	e853 3f00 	ldrex	r3, [r3]
 8008cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd8:	f023 0301 	bic.w	r3, r3, #1
 8008cdc:	663b      	str	r3, [r7, #96]	@ 0x60
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	3308      	adds	r3, #8
 8008ce4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008ce6:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008ce8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008cec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008cee:	e841 2300 	strex	r3, r2, [r1]
 8008cf2:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008cf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d1e5      	bne.n	8008cc6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2220      	movs	r2, #32
 8008cfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2220      	movs	r2, #32
 8008d06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8008d12:	2303      	movs	r3, #3
 8008d14:	e069      	b.n	8008dea <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f003 0304 	and.w	r3, r3, #4
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d051      	beq.n	8008dc8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	69db      	ldr	r3, [r3, #28]
 8008d2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008d2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d32:	d149      	bne.n	8008dc8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008d3c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d46:	e853 3f00 	ldrex	r3, [r3]
 8008d4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d4e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008d52:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	461a      	mov	r2, r3
 8008d5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d5e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d60:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008d62:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008d64:	e841 2300 	strex	r3, r2, [r1]
 8008d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d1e6      	bne.n	8008d3e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	3308      	adds	r3, #8
 8008d76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	e853 3f00 	ldrex	r3, [r3]
 8008d7e:	613b      	str	r3, [r7, #16]
   return(result);
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	f023 0301 	bic.w	r3, r3, #1
 8008d86:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	3308      	adds	r3, #8
 8008d8e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008d90:	623a      	str	r2, [r7, #32]
 8008d92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d94:	69f9      	ldr	r1, [r7, #28]
 8008d96:	6a3a      	ldr	r2, [r7, #32]
 8008d98:	e841 2300 	strex	r3, r2, [r1]
 8008d9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d9e:	69bb      	ldr	r3, [r7, #24]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d1e5      	bne.n	8008d70 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2220      	movs	r2, #32
 8008da8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2220      	movs	r2, #32
 8008db0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2220      	movs	r2, #32
 8008db8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008dc4:	2303      	movs	r3, #3
 8008dc6:	e010      	b.n	8008dea <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	69da      	ldr	r2, [r3, #28]
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	4013      	ands	r3, r2
 8008dd2:	68ba      	ldr	r2, [r7, #8]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	bf0c      	ite	eq
 8008dd8:	2301      	moveq	r3, #1
 8008dda:	2300      	movne	r3, #0
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	461a      	mov	r2, r3
 8008de0:	79fb      	ldrb	r3, [r7, #7]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	f43f af46 	beq.w	8008c74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008de8:	2300      	movs	r3, #0
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3770      	adds	r7, #112	@ 0x70
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
	...

08008df4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b0a3      	sub	sp, #140	@ 0x8c
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	4613      	mov	r3, r2
 8008e00:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	68ba      	ldr	r2, [r7, #8]
 8008e06:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	88fa      	ldrh	r2, [r7, #6]
 8008e0c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	88fa      	ldrh	r2, [r7, #6]
 8008e14:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	689b      	ldr	r3, [r3, #8]
 8008e22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e26:	d10e      	bne.n	8008e46 <UART_Start_Receive_IT+0x52>
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	691b      	ldr	r3, [r3, #16]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d105      	bne.n	8008e3c <UART_Start_Receive_IT+0x48>
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008e36:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008e3a:	e02d      	b.n	8008e98 <UART_Start_Receive_IT+0xa4>
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	22ff      	movs	r2, #255	@ 0xff
 8008e40:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008e44:	e028      	b.n	8008e98 <UART_Start_Receive_IT+0xa4>
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	689b      	ldr	r3, [r3, #8]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d10d      	bne.n	8008e6a <UART_Start_Receive_IT+0x76>
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	691b      	ldr	r3, [r3, #16]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d104      	bne.n	8008e60 <UART_Start_Receive_IT+0x6c>
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	22ff      	movs	r2, #255	@ 0xff
 8008e5a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008e5e:	e01b      	b.n	8008e98 <UART_Start_Receive_IT+0xa4>
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	227f      	movs	r2, #127	@ 0x7f
 8008e64:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008e68:	e016      	b.n	8008e98 <UART_Start_Receive_IT+0xa4>
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e72:	d10d      	bne.n	8008e90 <UART_Start_Receive_IT+0x9c>
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	691b      	ldr	r3, [r3, #16]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d104      	bne.n	8008e86 <UART_Start_Receive_IT+0x92>
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	227f      	movs	r2, #127	@ 0x7f
 8008e80:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008e84:	e008      	b.n	8008e98 <UART_Start_Receive_IT+0xa4>
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	223f      	movs	r2, #63	@ 0x3f
 8008e8a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008e8e:	e003      	b.n	8008e98 <UART_Start_Receive_IT+0xa4>
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2200      	movs	r2, #0
 8008e94:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2222      	movs	r2, #34	@ 0x22
 8008ea4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	3308      	adds	r3, #8
 8008eae:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008eb2:	e853 3f00 	ldrex	r3, [r3]
 8008eb6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008eb8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008eba:	f043 0301 	orr.w	r3, r3, #1
 8008ebe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	3308      	adds	r3, #8
 8008ec8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008ecc:	673a      	str	r2, [r7, #112]	@ 0x70
 8008ece:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8008ed2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008ed4:	e841 2300 	strex	r3, r2, [r1]
 8008ed8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008eda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d1e3      	bne.n	8008ea8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ee4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ee8:	d14f      	bne.n	8008f8a <UART_Start_Receive_IT+0x196>
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008ef0:	88fa      	ldrh	r2, [r7, #6]
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d349      	bcc.n	8008f8a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008efe:	d107      	bne.n	8008f10 <UART_Start_Receive_IT+0x11c>
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	691b      	ldr	r3, [r3, #16]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d103      	bne.n	8008f10 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	4a46      	ldr	r2, [pc, #280]	@ (8009024 <UART_Start_Receive_IT+0x230>)
 8008f0c:	675a      	str	r2, [r3, #116]	@ 0x74
 8008f0e:	e002      	b.n	8008f16 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	4a45      	ldr	r2, [pc, #276]	@ (8009028 <UART_Start_Receive_IT+0x234>)
 8008f14:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	691b      	ldr	r3, [r3, #16]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d01a      	beq.n	8008f54 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f26:	e853 3f00 	ldrex	r3, [r3]
 8008f2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008f2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f32:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008f40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f42:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f44:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008f46:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008f48:	e841 2300 	strex	r3, r2, [r1]
 8008f4c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008f4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d1e4      	bne.n	8008f1e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	3308      	adds	r3, #8
 8008f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f5e:	e853 3f00 	ldrex	r3, [r3]
 8008f62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	3308      	adds	r3, #8
 8008f72:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008f74:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008f76:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f78:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008f7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f7c:	e841 2300 	strex	r3, r2, [r1]
 8008f80:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008f82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d1e5      	bne.n	8008f54 <UART_Start_Receive_IT+0x160>
 8008f88:	e046      	b.n	8009018 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f92:	d107      	bne.n	8008fa4 <UART_Start_Receive_IT+0x1b0>
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	691b      	ldr	r3, [r3, #16]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d103      	bne.n	8008fa4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	4a23      	ldr	r2, [pc, #140]	@ (800902c <UART_Start_Receive_IT+0x238>)
 8008fa0:	675a      	str	r2, [r3, #116]	@ 0x74
 8008fa2:	e002      	b.n	8008faa <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	4a22      	ldr	r2, [pc, #136]	@ (8009030 <UART_Start_Receive_IT+0x23c>)
 8008fa8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	691b      	ldr	r3, [r3, #16]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d019      	beq.n	8008fe6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fba:	e853 3f00 	ldrex	r3, [r3]
 8008fbe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fc2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008fc6:	677b      	str	r3, [r7, #116]	@ 0x74
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	461a      	mov	r2, r3
 8008fce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008fd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fd2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008fd6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008fd8:	e841 2300 	strex	r3, r2, [r1]
 8008fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d1e6      	bne.n	8008fb2 <UART_Start_Receive_IT+0x1be>
 8008fe4:	e018      	b.n	8009018 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	e853 3f00 	ldrex	r3, [r3]
 8008ff2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	f043 0320 	orr.w	r3, r3, #32
 8008ffa:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	461a      	mov	r2, r3
 8009002:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009004:	623b      	str	r3, [r7, #32]
 8009006:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009008:	69f9      	ldr	r1, [r7, #28]
 800900a:	6a3a      	ldr	r2, [r7, #32]
 800900c:	e841 2300 	strex	r3, r2, [r1]
 8009010:	61bb      	str	r3, [r7, #24]
   return(result);
 8009012:	69bb      	ldr	r3, [r7, #24]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d1e6      	bne.n	8008fe6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009018:	2300      	movs	r3, #0
}
 800901a:	4618      	mov	r0, r3
 800901c:	378c      	adds	r7, #140	@ 0x8c
 800901e:	46bd      	mov	sp, r7
 8009020:	bc80      	pop	{r7}
 8009022:	4770      	bx	lr
 8009024:	08009a09 	.word	0x08009a09
 8009028:	080096a9 	.word	0x080096a9
 800902c:	080094f1 	.word	0x080094f1
 8009030:	08009339 	.word	0x08009339

08009034 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009034:	b480      	push	{r7}
 8009036:	b08f      	sub	sp, #60	@ 0x3c
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009042:	6a3b      	ldr	r3, [r7, #32]
 8009044:	e853 3f00 	ldrex	r3, [r3]
 8009048:	61fb      	str	r3, [r7, #28]
   return(result);
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009050:	637b      	str	r3, [r7, #52]	@ 0x34
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	461a      	mov	r2, r3
 8009058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800905a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800905c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800905e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009060:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009062:	e841 2300 	strex	r3, r2, [r1]
 8009066:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800906a:	2b00      	cmp	r3, #0
 800906c:	d1e6      	bne.n	800903c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	3308      	adds	r3, #8
 8009074:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	e853 3f00 	ldrex	r3, [r3]
 800907c:	60bb      	str	r3, [r7, #8]
   return(result);
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009084:	633b      	str	r3, [r7, #48]	@ 0x30
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	3308      	adds	r3, #8
 800908c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800908e:	61ba      	str	r2, [r7, #24]
 8009090:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009092:	6979      	ldr	r1, [r7, #20]
 8009094:	69ba      	ldr	r2, [r7, #24]
 8009096:	e841 2300 	strex	r3, r2, [r1]
 800909a:	613b      	str	r3, [r7, #16]
   return(result);
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d1e5      	bne.n	800906e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2220      	movs	r2, #32
 80090a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80090aa:	bf00      	nop
 80090ac:	373c      	adds	r7, #60	@ 0x3c
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bc80      	pop	{r7}
 80090b2:	4770      	bx	lr

080090b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b095      	sub	sp, #84	@ 0x54
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090c4:	e853 3f00 	ldrex	r3, [r3]
 80090c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80090ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80090d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	461a      	mov	r2, r3
 80090d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090da:	643b      	str	r3, [r7, #64]	@ 0x40
 80090dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80090e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80090e2:	e841 2300 	strex	r3, r2, [r1]
 80090e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80090e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d1e6      	bne.n	80090bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	3308      	adds	r3, #8
 80090f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f6:	6a3b      	ldr	r3, [r7, #32]
 80090f8:	e853 3f00 	ldrex	r3, [r3]
 80090fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80090fe:	69fb      	ldr	r3, [r7, #28]
 8009100:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009104:	f023 0301 	bic.w	r3, r3, #1
 8009108:	64bb      	str	r3, [r7, #72]	@ 0x48
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	3308      	adds	r3, #8
 8009110:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009112:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009114:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009116:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009118:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800911a:	e841 2300 	strex	r3, r2, [r1]
 800911e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009122:	2b00      	cmp	r3, #0
 8009124:	d1e3      	bne.n	80090ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800912a:	2b01      	cmp	r3, #1
 800912c:	d118      	bne.n	8009160 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	e853 3f00 	ldrex	r3, [r3]
 800913a:	60bb      	str	r3, [r7, #8]
   return(result);
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	f023 0310 	bic.w	r3, r3, #16
 8009142:	647b      	str	r3, [r7, #68]	@ 0x44
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	461a      	mov	r2, r3
 800914a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800914c:	61bb      	str	r3, [r7, #24]
 800914e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009150:	6979      	ldr	r1, [r7, #20]
 8009152:	69ba      	ldr	r2, [r7, #24]
 8009154:	e841 2300 	strex	r3, r2, [r1]
 8009158:	613b      	str	r3, [r7, #16]
   return(result);
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d1e6      	bne.n	800912e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2220      	movs	r2, #32
 8009164:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2200      	movs	r2, #0
 8009172:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009174:	bf00      	nop
 8009176:	3754      	adds	r7, #84	@ 0x54
 8009178:	46bd      	mov	sp, r7
 800917a:	bc80      	pop	{r7}
 800917c:	4770      	bx	lr

0800917e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800917e:	b580      	push	{r7, lr}
 8009180:	b090      	sub	sp, #64	@ 0x40
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800918a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f003 0320 	and.w	r3, r3, #32
 8009196:	2b00      	cmp	r3, #0
 8009198:	d137      	bne.n	800920a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800919a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800919c:	2200      	movs	r2, #0
 800919e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80091a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	3308      	adds	r3, #8
 80091a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ac:	e853 3f00 	ldrex	r3, [r3]
 80091b0:	623b      	str	r3, [r7, #32]
   return(result);
 80091b2:	6a3b      	ldr	r3, [r7, #32]
 80091b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80091b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80091ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	3308      	adds	r3, #8
 80091c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80091c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80091c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091ca:	e841 2300 	strex	r3, r2, [r1]
 80091ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d1e5      	bne.n	80091a2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80091d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	e853 3f00 	ldrex	r3, [r3]
 80091e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80091ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	461a      	mov	r2, r3
 80091f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091f4:	61fb      	str	r3, [r7, #28]
 80091f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f8:	69b9      	ldr	r1, [r7, #24]
 80091fa:	69fa      	ldr	r2, [r7, #28]
 80091fc:	e841 2300 	strex	r3, r2, [r1]
 8009200:	617b      	str	r3, [r7, #20]
   return(result);
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d1e6      	bne.n	80091d6 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009208:	e002      	b.n	8009210 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800920a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800920c:	f7f9 fd36 	bl	8002c7c <HAL_UART_TxCpltCallback>
}
 8009210:	bf00      	nop
 8009212:	3740      	adds	r7, #64	@ 0x40
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009224:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	f7ff f99a 	bl	8008560 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800922c:	bf00      	nop
 800922e:	3710      	adds	r7, #16
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b086      	sub	sp, #24
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009240:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009248:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009250:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800925c:	2b80      	cmp	r3, #128	@ 0x80
 800925e:	d109      	bne.n	8009274 <UART_DMAError+0x40>
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	2b21      	cmp	r3, #33	@ 0x21
 8009264:	d106      	bne.n	8009274 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	2200      	movs	r2, #0
 800926a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800926e:	6978      	ldr	r0, [r7, #20]
 8009270:	f7ff fee0 	bl	8009034 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800927e:	2b40      	cmp	r3, #64	@ 0x40
 8009280:	d109      	bne.n	8009296 <UART_DMAError+0x62>
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2b22      	cmp	r3, #34	@ 0x22
 8009286:	d106      	bne.n	8009296 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	2200      	movs	r2, #0
 800928c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009290:	6978      	ldr	r0, [r7, #20]
 8009292:	f7ff ff0f 	bl	80090b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800929c:	f043 0210 	orr.w	r2, r3, #16
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80092a6:	6978      	ldr	r0, [r7, #20]
 80092a8:	f7ff f963 	bl	8008572 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092ac:	bf00      	nop
 80092ae:	3718      	adds	r7, #24
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2200      	movs	r2, #0
 80092c6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2200      	movs	r2, #0
 80092ce:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80092d2:	68f8      	ldr	r0, [r7, #12]
 80092d4:	f7ff f94d 	bl	8008572 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092d8:	bf00      	nop
 80092da:	3710      	adds	r7, #16
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b088      	sub	sp, #32
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	e853 3f00 	ldrex	r3, [r3]
 80092f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092fc:	61fb      	str	r3, [r7, #28]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	461a      	mov	r2, r3
 8009304:	69fb      	ldr	r3, [r7, #28]
 8009306:	61bb      	str	r3, [r7, #24]
 8009308:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930a:	6979      	ldr	r1, [r7, #20]
 800930c:	69ba      	ldr	r2, [r7, #24]
 800930e:	e841 2300 	strex	r3, r2, [r1]
 8009312:	613b      	str	r3, [r7, #16]
   return(result);
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d1e6      	bne.n	80092e8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2220      	movs	r2, #32
 800931e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f7f9 fca7 	bl	8002c7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800932e:	bf00      	nop
 8009330:	3720      	adds	r7, #32
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
	...

08009338 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b09c      	sub	sp, #112	@ 0x70
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009346:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009350:	2b22      	cmp	r3, #34	@ 0x22
 8009352:	f040 80be 	bne.w	80094d2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800935c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009360:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009364:	b2d9      	uxtb	r1, r3
 8009366:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800936a:	b2da      	uxtb	r2, r3
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009370:	400a      	ands	r2, r1
 8009372:	b2d2      	uxtb	r2, r2
 8009374:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800937a:	1c5a      	adds	r2, r3, #1
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009386:	b29b      	uxth	r3, r3
 8009388:	3b01      	subs	r3, #1
 800938a:	b29a      	uxth	r2, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009398:	b29b      	uxth	r3, r3
 800939a:	2b00      	cmp	r3, #0
 800939c:	f040 80a1 	bne.w	80094e2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093a8:	e853 3f00 	ldrex	r3, [r3]
 80093ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80093ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80093b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80093b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	461a      	mov	r2, r3
 80093bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80093be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80093c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80093c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80093c6:	e841 2300 	strex	r3, r2, [r1]
 80093ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80093cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d1e6      	bne.n	80093a0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	3308      	adds	r3, #8
 80093d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093dc:	e853 3f00 	ldrex	r3, [r3]
 80093e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80093e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093e4:	f023 0301 	bic.w	r3, r3, #1
 80093e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	3308      	adds	r3, #8
 80093f0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80093f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80093f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80093f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093fa:	e841 2300 	strex	r3, r2, [r1]
 80093fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009400:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009402:	2b00      	cmp	r3, #0
 8009404:	d1e5      	bne.n	80093d2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2220      	movs	r2, #32
 800940a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2200      	movs	r2, #0
 8009412:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a33      	ldr	r2, [pc, #204]	@ (80094ec <UART_RxISR_8BIT+0x1b4>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d01f      	beq.n	8009464 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800942e:	2b00      	cmp	r3, #0
 8009430:	d018      	beq.n	8009464 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800943a:	e853 3f00 	ldrex	r3, [r3]
 800943e:	623b      	str	r3, [r7, #32]
   return(result);
 8009440:	6a3b      	ldr	r3, [r7, #32]
 8009442:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009446:	663b      	str	r3, [r7, #96]	@ 0x60
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	461a      	mov	r2, r3
 800944e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009450:	633b      	str	r3, [r7, #48]	@ 0x30
 8009452:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009454:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009456:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009458:	e841 2300 	strex	r3, r2, [r1]
 800945c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800945e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009460:	2b00      	cmp	r3, #0
 8009462:	d1e6      	bne.n	8009432 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009468:	2b01      	cmp	r3, #1
 800946a:	d12e      	bne.n	80094ca <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2200      	movs	r2, #0
 8009470:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	e853 3f00 	ldrex	r3, [r3]
 800947e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f023 0310 	bic.w	r3, r3, #16
 8009486:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	461a      	mov	r2, r3
 800948e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009490:	61fb      	str	r3, [r7, #28]
 8009492:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009494:	69b9      	ldr	r1, [r7, #24]
 8009496:	69fa      	ldr	r2, [r7, #28]
 8009498:	e841 2300 	strex	r3, r2, [r1]
 800949c:	617b      	str	r3, [r7, #20]
   return(result);
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d1e6      	bne.n	8009472 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	69db      	ldr	r3, [r3, #28]
 80094aa:	f003 0310 	and.w	r3, r3, #16
 80094ae:	2b10      	cmp	r3, #16
 80094b0:	d103      	bne.n	80094ba <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	2210      	movs	r2, #16
 80094b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80094c0:	4619      	mov	r1, r3
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f7ff f85e 	bl	8008584 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80094c8:	e00b      	b.n	80094e2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f7f9 fbec 	bl	8002ca8 <HAL_UART_RxCpltCallback>
}
 80094d0:	e007      	b.n	80094e2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	699a      	ldr	r2, [r3, #24]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f042 0208 	orr.w	r2, r2, #8
 80094e0:	619a      	str	r2, [r3, #24]
}
 80094e2:	bf00      	nop
 80094e4:	3770      	adds	r7, #112	@ 0x70
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
 80094ea:	bf00      	nop
 80094ec:	40008000 	.word	0x40008000

080094f0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b09c      	sub	sp, #112	@ 0x70
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80094fe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009508:	2b22      	cmp	r3, #34	@ 0x22
 800950a:	f040 80be 	bne.w	800968a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009514:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800951c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800951e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009522:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009526:	4013      	ands	r3, r2
 8009528:	b29a      	uxth	r2, r3
 800952a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800952c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009532:	1c9a      	adds	r2, r3, #2
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800953e:	b29b      	uxth	r3, r3
 8009540:	3b01      	subs	r3, #1
 8009542:	b29a      	uxth	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009550:	b29b      	uxth	r3, r3
 8009552:	2b00      	cmp	r3, #0
 8009554:	f040 80a1 	bne.w	800969a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800955e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009560:	e853 3f00 	ldrex	r3, [r3]
 8009564:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009566:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009568:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800956c:	667b      	str	r3, [r7, #100]	@ 0x64
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	461a      	mov	r2, r3
 8009574:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009576:	657b      	str	r3, [r7, #84]	@ 0x54
 8009578:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800957a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800957c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800957e:	e841 2300 	strex	r3, r2, [r1]
 8009582:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009584:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009586:	2b00      	cmp	r3, #0
 8009588:	d1e6      	bne.n	8009558 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	3308      	adds	r3, #8
 8009590:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009594:	e853 3f00 	ldrex	r3, [r3]
 8009598:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800959a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800959c:	f023 0301 	bic.w	r3, r3, #1
 80095a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	3308      	adds	r3, #8
 80095a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80095aa:	643a      	str	r2, [r7, #64]	@ 0x40
 80095ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80095b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80095b2:	e841 2300 	strex	r3, r2, [r1]
 80095b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80095b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d1e5      	bne.n	800958a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2220      	movs	r2, #32
 80095c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4a33      	ldr	r2, [pc, #204]	@ (80096a4 <UART_RxISR_16BIT+0x1b4>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d01f      	beq.n	800961c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d018      	beq.n	800961c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f0:	6a3b      	ldr	r3, [r7, #32]
 80095f2:	e853 3f00 	ldrex	r3, [r3]
 80095f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80095f8:	69fb      	ldr	r3, [r7, #28]
 80095fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80095fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	461a      	mov	r2, r3
 8009606:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009608:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800960a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800960c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800960e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009610:	e841 2300 	strex	r3, r2, [r1]
 8009614:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009618:	2b00      	cmp	r3, #0
 800961a:	d1e6      	bne.n	80095ea <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009620:	2b01      	cmp	r3, #1
 8009622:	d12e      	bne.n	8009682 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2200      	movs	r2, #0
 8009628:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	e853 3f00 	ldrex	r3, [r3]
 8009636:	60bb      	str	r3, [r7, #8]
   return(result);
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	f023 0310 	bic.w	r3, r3, #16
 800963e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	461a      	mov	r2, r3
 8009646:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009648:	61bb      	str	r3, [r7, #24]
 800964a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800964c:	6979      	ldr	r1, [r7, #20]
 800964e:	69ba      	ldr	r2, [r7, #24]
 8009650:	e841 2300 	strex	r3, r2, [r1]
 8009654:	613b      	str	r3, [r7, #16]
   return(result);
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d1e6      	bne.n	800962a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	69db      	ldr	r3, [r3, #28]
 8009662:	f003 0310 	and.w	r3, r3, #16
 8009666:	2b10      	cmp	r3, #16
 8009668:	d103      	bne.n	8009672 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	2210      	movs	r2, #16
 8009670:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009678:	4619      	mov	r1, r3
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f7fe ff82 	bl	8008584 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009680:	e00b      	b.n	800969a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f7f9 fb10 	bl	8002ca8 <HAL_UART_RxCpltCallback>
}
 8009688:	e007      	b.n	800969a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	699a      	ldr	r2, [r3, #24]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f042 0208 	orr.w	r2, r2, #8
 8009698:	619a      	str	r2, [r3, #24]
}
 800969a:	bf00      	nop
 800969c:	3770      	adds	r7, #112	@ 0x70
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	40008000 	.word	0x40008000

080096a8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b0ac      	sub	sp, #176	@ 0xb0
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80096b6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	69db      	ldr	r3, [r3, #28]
 80096c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	689b      	ldr	r3, [r3, #8]
 80096d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80096de:	2b22      	cmp	r3, #34	@ 0x22
 80096e0:	f040 8182 	bne.w	80099e8 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80096ea:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80096ee:	e125      	b.n	800993c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096f6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80096fa:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80096fe:	b2d9      	uxtb	r1, r3
 8009700:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8009704:	b2da      	uxtb	r2, r3
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800970a:	400a      	ands	r2, r1
 800970c:	b2d2      	uxtb	r2, r2
 800970e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009714:	1c5a      	adds	r2, r3, #1
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009720:	b29b      	uxth	r3, r3
 8009722:	3b01      	subs	r3, #1
 8009724:	b29a      	uxth	r2, r3
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	69db      	ldr	r3, [r3, #28]
 8009732:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009736:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800973a:	f003 0307 	and.w	r3, r3, #7
 800973e:	2b00      	cmp	r3, #0
 8009740:	d053      	beq.n	80097ea <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009742:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009746:	f003 0301 	and.w	r3, r3, #1
 800974a:	2b00      	cmp	r3, #0
 800974c:	d011      	beq.n	8009772 <UART_RxISR_8BIT_FIFOEN+0xca>
 800974e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009756:	2b00      	cmp	r3, #0
 8009758:	d00b      	beq.n	8009772 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	2201      	movs	r2, #1
 8009760:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009768:	f043 0201 	orr.w	r2, r3, #1
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009772:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009776:	f003 0302 	and.w	r3, r3, #2
 800977a:	2b00      	cmp	r3, #0
 800977c:	d011      	beq.n	80097a2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800977e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009782:	f003 0301 	and.w	r3, r3, #1
 8009786:	2b00      	cmp	r3, #0
 8009788:	d00b      	beq.n	80097a2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	2202      	movs	r2, #2
 8009790:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009798:	f043 0204 	orr.w	r2, r3, #4
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80097a6:	f003 0304 	and.w	r3, r3, #4
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d011      	beq.n	80097d2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80097ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80097b2:	f003 0301 	and.w	r3, r3, #1
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d00b      	beq.n	80097d2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2204      	movs	r2, #4
 80097c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097c8:	f043 0202 	orr.w	r2, r3, #2
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d006      	beq.n	80097ea <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f7fe fec8 	bl	8008572 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2200      	movs	r2, #0
 80097e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80097f0:	b29b      	uxth	r3, r3
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	f040 80a2 	bne.w	800993c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009800:	e853 3f00 	ldrex	r3, [r3]
 8009804:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8009806:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009808:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800980c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	461a      	mov	r2, r3
 8009816:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800981a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800981c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800981e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009820:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009822:	e841 2300 	strex	r3, r2, [r1]
 8009826:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009828:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800982a:	2b00      	cmp	r3, #0
 800982c:	d1e4      	bne.n	80097f8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	3308      	adds	r3, #8
 8009834:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009836:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009838:	e853 3f00 	ldrex	r3, [r3]
 800983c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800983e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009840:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009844:	f023 0301 	bic.w	r3, r3, #1
 8009848:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	3308      	adds	r3, #8
 8009852:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009856:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009858:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800985a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800985c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800985e:	e841 2300 	strex	r3, r2, [r1]
 8009862:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009864:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009866:	2b00      	cmp	r3, #0
 8009868:	d1e1      	bne.n	800982e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2220      	movs	r2, #32
 800986e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2200      	movs	r2, #0
 8009876:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2200      	movs	r2, #0
 800987c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a5f      	ldr	r2, [pc, #380]	@ (8009a00 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d021      	beq.n	80098cc <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009892:	2b00      	cmp	r3, #0
 8009894:	d01a      	beq.n	80098cc <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800989c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800989e:	e853 3f00 	ldrex	r3, [r3]
 80098a2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80098a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80098aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	461a      	mov	r2, r3
 80098b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80098b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80098ba:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098bc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80098be:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80098c0:	e841 2300 	strex	r3, r2, [r1]
 80098c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80098c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d1e4      	bne.n	8009896 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d130      	bne.n	8009936 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2200      	movs	r2, #0
 80098d8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098e2:	e853 3f00 	ldrex	r3, [r3]
 80098e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80098e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ea:	f023 0310 	bic.w	r3, r3, #16
 80098ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	461a      	mov	r2, r3
 80098f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80098fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80098fe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009900:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009902:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009904:	e841 2300 	strex	r3, r2, [r1]
 8009908:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800990a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800990c:	2b00      	cmp	r3, #0
 800990e:	d1e4      	bne.n	80098da <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	69db      	ldr	r3, [r3, #28]
 8009916:	f003 0310 	and.w	r3, r3, #16
 800991a:	2b10      	cmp	r3, #16
 800991c:	d103      	bne.n	8009926 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	2210      	movs	r2, #16
 8009924:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800992c:	4619      	mov	r1, r3
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f7fe fe28 	bl	8008584 <HAL_UARTEx_RxEventCallback>
 8009934:	e002      	b.n	800993c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f7f9 f9b6 	bl	8002ca8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800993c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009940:	2b00      	cmp	r3, #0
 8009942:	d006      	beq.n	8009952 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8009944:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009948:	f003 0320 	and.w	r3, r3, #32
 800994c:	2b00      	cmp	r3, #0
 800994e:	f47f aecf 	bne.w	80096f0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009958:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800995c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009960:	2b00      	cmp	r3, #0
 8009962:	d049      	beq.n	80099f8 <UART_RxISR_8BIT_FIFOEN+0x350>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800996a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800996e:	429a      	cmp	r2, r3
 8009970:	d242      	bcs.n	80099f8 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	3308      	adds	r3, #8
 8009978:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800997a:	6a3b      	ldr	r3, [r7, #32]
 800997c:	e853 3f00 	ldrex	r3, [r3]
 8009980:	61fb      	str	r3, [r7, #28]
   return(result);
 8009982:	69fb      	ldr	r3, [r7, #28]
 8009984:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009988:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	3308      	adds	r3, #8
 8009992:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009996:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009998:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800999a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800999c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800999e:	e841 2300 	strex	r3, r2, [r1]
 80099a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80099a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d1e3      	bne.n	8009972 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	4a15      	ldr	r2, [pc, #84]	@ (8009a04 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80099ae:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	e853 3f00 	ldrex	r3, [r3]
 80099bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	f043 0320 	orr.w	r3, r3, #32
 80099c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	461a      	mov	r2, r3
 80099ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80099d2:	61bb      	str	r3, [r7, #24]
 80099d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d6:	6979      	ldr	r1, [r7, #20]
 80099d8:	69ba      	ldr	r2, [r7, #24]
 80099da:	e841 2300 	strex	r3, r2, [r1]
 80099de:	613b      	str	r3, [r7, #16]
   return(result);
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d1e4      	bne.n	80099b0 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80099e6:	e007      	b.n	80099f8 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	699a      	ldr	r2, [r3, #24]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f042 0208 	orr.w	r2, r2, #8
 80099f6:	619a      	str	r2, [r3, #24]
}
 80099f8:	bf00      	nop
 80099fa:	37b0      	adds	r7, #176	@ 0xb0
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}
 8009a00:	40008000 	.word	0x40008000
 8009a04:	08009339 	.word	0x08009339

08009a08 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b0ae      	sub	sp, #184	@ 0xb8
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009a16:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	69db      	ldr	r3, [r3, #28]
 8009a20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009a3e:	2b22      	cmp	r3, #34	@ 0x22
 8009a40:	f040 8186 	bne.w	8009d50 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009a4a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a4e:	e129      	b.n	8009ca4 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a56:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009a62:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009a66:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009a6a:	4013      	ands	r3, r2
 8009a6c:	b29a      	uxth	r2, r3
 8009a6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009a72:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a78:	1c9a      	adds	r2, r3, #2
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	3b01      	subs	r3, #1
 8009a88:	b29a      	uxth	r2, r3
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	69db      	ldr	r3, [r3, #28]
 8009a96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009a9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009a9e:	f003 0307 	and.w	r3, r3, #7
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d053      	beq.n	8009b4e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009aa6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009aaa:	f003 0301 	and.w	r3, r3, #1
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d011      	beq.n	8009ad6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009ab2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d00b      	beq.n	8009ad6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009acc:	f043 0201 	orr.w	r2, r3, #1
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ad6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009ada:	f003 0302 	and.w	r3, r3, #2
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d011      	beq.n	8009b06 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009ae2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009ae6:	f003 0301 	and.w	r3, r3, #1
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d00b      	beq.n	8009b06 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	2202      	movs	r2, #2
 8009af4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009afc:	f043 0204 	orr.w	r2, r3, #4
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009b0a:	f003 0304 	and.w	r3, r3, #4
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d011      	beq.n	8009b36 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009b12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009b16:	f003 0301 	and.w	r3, r3, #1
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d00b      	beq.n	8009b36 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	2204      	movs	r2, #4
 8009b24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b2c:	f043 0202 	orr.w	r2, r3, #2
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d006      	beq.n	8009b4e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f7fe fd16 	bl	8008572 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b54:	b29b      	uxth	r3, r3
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	f040 80a4 	bne.w	8009ca4 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009b64:	e853 3f00 	ldrex	r3, [r3]
 8009b68:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009b6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009b6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	461a      	mov	r2, r3
 8009b7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009b7e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009b82:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b84:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009b86:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009b8a:	e841 2300 	strex	r3, r2, [r1]
 8009b8e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009b90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d1e2      	bne.n	8009b5c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	3308      	adds	r3, #8
 8009b9c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009ba0:	e853 3f00 	ldrex	r3, [r3]
 8009ba4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009ba6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ba8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009bac:	f023 0301 	bic.w	r3, r3, #1
 8009bb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	3308      	adds	r3, #8
 8009bba:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009bbe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009bc0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009bc4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009bc6:	e841 2300 	strex	r3, r2, [r1]
 8009bca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009bcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d1e1      	bne.n	8009b96 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2220      	movs	r2, #32
 8009bd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4a5f      	ldr	r2, [pc, #380]	@ (8009d68 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d021      	beq.n	8009c34 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d01a      	beq.n	8009c34 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c06:	e853 3f00 	ldrex	r3, [r3]
 8009c0a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009c0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c0e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009c12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009c20:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009c22:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c24:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009c26:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009c28:	e841 2300 	strex	r3, r2, [r1]
 8009c2c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009c2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d1e4      	bne.n	8009bfe <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d130      	bne.n	8009c9e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c4a:	e853 3f00 	ldrex	r3, [r3]
 8009c4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c52:	f023 0310 	bic.w	r3, r3, #16
 8009c56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	461a      	mov	r2, r3
 8009c60:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009c64:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c66:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009c6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009c6c:	e841 2300 	strex	r3, r2, [r1]
 8009c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009c72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d1e4      	bne.n	8009c42 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	69db      	ldr	r3, [r3, #28]
 8009c7e:	f003 0310 	and.w	r3, r3, #16
 8009c82:	2b10      	cmp	r3, #16
 8009c84:	d103      	bne.n	8009c8e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2210      	movs	r2, #16
 8009c8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009c94:	4619      	mov	r1, r3
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f7fe fc74 	bl	8008584 <HAL_UARTEx_RxEventCallback>
 8009c9c:	e002      	b.n	8009ca4 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f7f9 f802 	bl	8002ca8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009ca4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d006      	beq.n	8009cba <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009cac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009cb0:	f003 0320 	and.w	r3, r3, #32
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	f47f aecb 	bne.w	8009a50 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009cc0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009cc4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d049      	beq.n	8009d60 <UART_RxISR_16BIT_FIFOEN+0x358>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009cd2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d242      	bcs.n	8009d60 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	3308      	adds	r3, #8
 8009ce0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ce4:	e853 3f00 	ldrex	r3, [r3]
 8009ce8:	623b      	str	r3, [r7, #32]
   return(result);
 8009cea:	6a3b      	ldr	r3, [r7, #32]
 8009cec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009cf0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	3308      	adds	r3, #8
 8009cfa:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009cfe:	633a      	str	r2, [r7, #48]	@ 0x30
 8009d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d06:	e841 2300 	strex	r3, r2, [r1]
 8009d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d1e3      	bne.n	8009cda <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	4a15      	ldr	r2, [pc, #84]	@ (8009d6c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009d16:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	e853 3f00 	ldrex	r3, [r3]
 8009d24:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f043 0320 	orr.w	r3, r3, #32
 8009d2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	461a      	mov	r2, r3
 8009d36:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009d3a:	61fb      	str	r3, [r7, #28]
 8009d3c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d3e:	69b9      	ldr	r1, [r7, #24]
 8009d40:	69fa      	ldr	r2, [r7, #28]
 8009d42:	e841 2300 	strex	r3, r2, [r1]
 8009d46:	617b      	str	r3, [r7, #20]
   return(result);
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d1e4      	bne.n	8009d18 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d4e:	e007      	b.n	8009d60 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	699a      	ldr	r2, [r3, #24]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f042 0208 	orr.w	r2, r2, #8
 8009d5e:	619a      	str	r2, [r3, #24]
}
 8009d60:	bf00      	nop
 8009d62:	37b8      	adds	r7, #184	@ 0xb8
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}
 8009d68:	40008000 	.word	0x40008000
 8009d6c:	080094f1 	.word	0x080094f1

08009d70 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b083      	sub	sp, #12
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009d78:	bf00      	nop
 8009d7a:	370c      	adds	r7, #12
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bc80      	pop	{r7}
 8009d80:	4770      	bx	lr

08009d82 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009d82:	b480      	push	{r7}
 8009d84:	b083      	sub	sp, #12
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009d8a:	bf00      	nop
 8009d8c:	370c      	adds	r7, #12
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bc80      	pop	{r7}
 8009d92:	4770      	bx	lr

08009d94 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009d9c:	bf00      	nop
 8009d9e:	370c      	adds	r7, #12
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bc80      	pop	{r7}
 8009da4:	4770      	bx	lr

08009da6 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b088      	sub	sp, #32
 8009daa:	af02      	add	r7, sp, #8
 8009dac:	60f8      	str	r0, [r7, #12]
 8009dae:	1d3b      	adds	r3, r7, #4
 8009db0:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8009db4:	2300      	movs	r3, #0
 8009db6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	d101      	bne.n	8009dc6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8009dc2:	2302      	movs	r3, #2
 8009dc4:	e046      	b.n	8009e54 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2201      	movs	r2, #1
 8009dca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2224      	movs	r2, #36	@ 0x24
 8009dd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	681a      	ldr	r2, [r3, #0]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f022 0201 	bic.w	r2, r2, #1
 8009de4:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	689b      	ldr	r3, [r3, #8]
 8009dec:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	430a      	orrs	r2, r1
 8009df8:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d105      	bne.n	8009e0c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8009e00:	1d3b      	adds	r3, r7, #4
 8009e02:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009e06:	68f8      	ldr	r0, [r7, #12]
 8009e08:	f000 f90e 	bl	800a028 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f042 0201 	orr.w	r2, r2, #1
 8009e1a:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e1c:	f7f8 f8c2 	bl	8001fa4 <HAL_GetTick>
 8009e20:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e22:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009e26:	9300      	str	r3, [sp, #0]
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009e30:	68f8      	ldr	r0, [r7, #12]
 8009e32:	f7fe ff16 	bl	8008c62 <UART_WaitOnFlagUntilTimeout>
 8009e36:	4603      	mov	r3, r0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d002      	beq.n	8009e42 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8009e3c:	2303      	movs	r3, #3
 8009e3e:	75fb      	strb	r3, [r7, #23]
 8009e40:	e003      	b.n	8009e4a <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2220      	movs	r2, #32
 8009e46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return status;
 8009e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3718      	adds	r7, #24
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b089      	sub	sp, #36	@ 0x24
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	d101      	bne.n	8009e72 <HAL_UARTEx_EnableStopMode+0x16>
 8009e6e:	2302      	movs	r3, #2
 8009e70:	e021      	b.n	8009eb6 <HAL_UARTEx_EnableStopMode+0x5a>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2201      	movs	r2, #1
 8009e76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	e853 3f00 	ldrex	r3, [r3]
 8009e86:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	f043 0302 	orr.w	r3, r3, #2
 8009e8e:	61fb      	str	r3, [r7, #28]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	461a      	mov	r2, r3
 8009e96:	69fb      	ldr	r3, [r7, #28]
 8009e98:	61bb      	str	r3, [r7, #24]
 8009e9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e9c:	6979      	ldr	r1, [r7, #20]
 8009e9e:	69ba      	ldr	r2, [r7, #24]
 8009ea0:	e841 2300 	strex	r3, r2, [r1]
 8009ea4:	613b      	str	r3, [r7, #16]
   return(result);
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d1e6      	bne.n	8009e7a <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009eb4:	2300      	movs	r3, #0
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3724      	adds	r7, #36	@ 0x24
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bc80      	pop	{r7}
 8009ebe:	4770      	bx	lr

08009ec0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b085      	sub	sp, #20
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	d101      	bne.n	8009ed6 <HAL_UARTEx_DisableFifoMode+0x16>
 8009ed2:	2302      	movs	r3, #2
 8009ed4:	e027      	b.n	8009f26 <HAL_UARTEx_DisableFifoMode+0x66>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2201      	movs	r2, #1
 8009eda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2224      	movs	r2, #36	@ 0x24
 8009ee2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f022 0201 	bic.w	r2, r2, #1
 8009efc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009f04:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2220      	movs	r2, #32
 8009f18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f24:	2300      	movs	r3, #0
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3714      	adds	r7, #20
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bc80      	pop	{r7}
 8009f2e:	4770      	bx	lr

08009f30 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d101      	bne.n	8009f48 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009f44:	2302      	movs	r3, #2
 8009f46:	e02d      	b.n	8009fa4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2224      	movs	r2, #36	@ 0x24
 8009f54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	681a      	ldr	r2, [r3, #0]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f022 0201 	bic.w	r2, r2, #1
 8009f6e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	683a      	ldr	r2, [r7, #0]
 8009f80:	430a      	orrs	r2, r1
 8009f82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 f871 	bl	800a06c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	68fa      	ldr	r2, [r7, #12]
 8009f90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2220      	movs	r2, #32
 8009f96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009fa2:	2300      	movs	r3, #0
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3710      	adds	r7, #16
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b084      	sub	sp, #16
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d101      	bne.n	8009fc4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009fc0:	2302      	movs	r3, #2
 8009fc2:	e02d      	b.n	800a020 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2224      	movs	r2, #36	@ 0x24
 8009fd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	681a      	ldr	r2, [r3, #0]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f022 0201 	bic.w	r2, r2, #1
 8009fea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	689b      	ldr	r3, [r3, #8]
 8009ff2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	683a      	ldr	r2, [r7, #0]
 8009ffc:	430a      	orrs	r2, r1
 8009ffe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 f833 	bl	800a06c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	68fa      	ldr	r2, [r7, #12]
 800a00c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2220      	movs	r2, #32
 800a012:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2200      	movs	r2, #0
 800a01a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a01e:	2300      	movs	r3, #0
}
 800a020:	4618      	mov	r0, r3
 800a022:	3710      	adds	r7, #16
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a028:	b480      	push	{r7}
 800a02a:	b085      	sub	sp, #20
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	1d3b      	adds	r3, r7, #4
 800a032:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	f023 0210 	bic.w	r2, r3, #16
 800a040:	893b      	ldrh	r3, [r7, #8]
 800a042:	4619      	mov	r1, r3
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	430a      	orrs	r2, r1
 800a04a:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 800a056:	7abb      	ldrb	r3, [r7, #10]
 800a058:	061a      	lsls	r2, r3, #24
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	430a      	orrs	r2, r1
 800a060:	605a      	str	r2, [r3, #4]
}
 800a062:	bf00      	nop
 800a064:	3714      	adds	r7, #20
 800a066:	46bd      	mov	sp, r7
 800a068:	bc80      	pop	{r7}
 800a06a:	4770      	bx	lr

0800a06c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b085      	sub	sp, #20
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d108      	bne.n	800a08e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2201      	movs	r2, #1
 800a080:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2201      	movs	r2, #1
 800a088:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a08c:	e031      	b.n	800a0f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a08e:	2308      	movs	r3, #8
 800a090:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a092:	2308      	movs	r3, #8
 800a094:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	689b      	ldr	r3, [r3, #8]
 800a09c:	0e5b      	lsrs	r3, r3, #25
 800a09e:	b2db      	uxtb	r3, r3
 800a0a0:	f003 0307 	and.w	r3, r3, #7
 800a0a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	689b      	ldr	r3, [r3, #8]
 800a0ac:	0f5b      	lsrs	r3, r3, #29
 800a0ae:	b2db      	uxtb	r3, r3
 800a0b0:	f003 0307 	and.w	r3, r3, #7
 800a0b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a0b6:	7bbb      	ldrb	r3, [r7, #14]
 800a0b8:	7b3a      	ldrb	r2, [r7, #12]
 800a0ba:	4910      	ldr	r1, [pc, #64]	@ (800a0fc <UARTEx_SetNbDataToProcess+0x90>)
 800a0bc:	5c8a      	ldrb	r2, [r1, r2]
 800a0be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a0c2:	7b3a      	ldrb	r2, [r7, #12]
 800a0c4:	490e      	ldr	r1, [pc, #56]	@ (800a100 <UARTEx_SetNbDataToProcess+0x94>)
 800a0c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a0c8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0cc:	b29a      	uxth	r2, r3
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a0d4:	7bfb      	ldrb	r3, [r7, #15]
 800a0d6:	7b7a      	ldrb	r2, [r7, #13]
 800a0d8:	4908      	ldr	r1, [pc, #32]	@ (800a0fc <UARTEx_SetNbDataToProcess+0x90>)
 800a0da:	5c8a      	ldrb	r2, [r1, r2]
 800a0dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a0e0:	7b7a      	ldrb	r2, [r7, #13]
 800a0e2:	4907      	ldr	r1, [pc, #28]	@ (800a100 <UARTEx_SetNbDataToProcess+0x94>)
 800a0e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a0e6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0ea:	b29a      	uxth	r2, r3
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a0f2:	bf00      	nop
 800a0f4:	3714      	adds	r7, #20
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bc80      	pop	{r7}
 800a0fa:	4770      	bx	lr
 800a0fc:	0801d620 	.word	0x0801d620
 800a100:	0801d628 	.word	0x0801d628

0800a104 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800a108:	f7f7 fdf2 	bl	8001cf0 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800a10c:	f000 f820 	bl	800a150 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800a110:	bf00      	nop
 800a112:	bd80      	pop	{r7, pc}

0800a114 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800a118:	f04f 30ff 	mov.w	r0, #4294967295
 800a11c:	f011 fe36 	bl	801bd8c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800a120:	bf00      	nop
 800a122:	bd80      	pop	{r7, pc}

0800a124 <__NVIC_SystemReset>:
{
 800a124:	b480      	push	{r7}
 800a126:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800a128:	f3bf 8f4f 	dsb	sy
}
 800a12c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a12e:	4b06      	ldr	r3, [pc, #24]	@ (800a148 <__NVIC_SystemReset+0x24>)
 800a130:	68db      	ldr	r3, [r3, #12]
 800a132:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a136:	4904      	ldr	r1, [pc, #16]	@ (800a148 <__NVIC_SystemReset+0x24>)
 800a138:	4b04      	ldr	r3, [pc, #16]	@ (800a14c <__NVIC_SystemReset+0x28>)
 800a13a:	4313      	orrs	r3, r2
 800a13c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a13e:	f3bf 8f4f 	dsb	sy
}
 800a142:	bf00      	nop
    __NOP();
 800a144:	bf00      	nop
 800a146:	e7fd      	b.n	800a144 <__NVIC_SystemReset+0x20>
 800a148:	e000ed00 	.word	0xe000ed00
 800a14c:	05fa0004 	.word	0x05fa0004

0800a150 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b086      	sub	sp, #24
 800a154:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800a156:	2300      	movs	r3, #0
 800a158:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800a15a:	2300      	movs	r3, #0
 800a15c:	9302      	str	r3, [sp, #8]
 800a15e:	2303      	movs	r3, #3
 800a160:	9301      	str	r3, [sp, #4]
 800a162:	2301      	movs	r3, #1
 800a164:	9300      	str	r3, [sp, #0]
 800a166:	4b5d      	ldr	r3, [pc, #372]	@ (800a2dc <LoRaWAN_Init+0x18c>)
 800a168:	2200      	movs	r2, #0
 800a16a:	2100      	movs	r1, #0
 800a16c:	2002      	movs	r0, #2
 800a16e:	f012 fa59 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 800a172:	2300      	movs	r3, #0
 800a174:	9302      	str	r3, [sp, #8]
 800a176:	2305      	movs	r3, #5
 800a178:	9301      	str	r3, [sp, #4]
 800a17a:	2302      	movs	r3, #2
 800a17c:	9300      	str	r3, [sp, #0]
 800a17e:	4b58      	ldr	r3, [pc, #352]	@ (800a2e0 <LoRaWAN_Init+0x190>)
 800a180:	2200      	movs	r2, #0
 800a182:	2100      	movs	r1, #0
 800a184:	2002      	movs	r0, #2
 800a186:	f012 fa4d 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800a18a:	2300      	movs	r3, #0
 800a18c:	9302      	str	r3, [sp, #8]
 800a18e:	2303      	movs	r3, #3
 800a190:	9301      	str	r3, [sp, #4]
 800a192:	2301      	movs	r3, #1
 800a194:	9300      	str	r3, [sp, #0]
 800a196:	4b53      	ldr	r3, [pc, #332]	@ (800a2e4 <LoRaWAN_Init+0x194>)
 800a198:	2200      	movs	r2, #0
 800a19a:	2100      	movs	r1, #0
 800a19c:	2002      	movs	r0, #2
 800a19e:	f012 fa41 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800a1a2:	1d3b      	adds	r3, r7, #4
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	2000      	movs	r0, #0
 800a1a8:	f003 fa80 	bl	800d6ac <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	0e1b      	lsrs	r3, r3, #24
 800a1b0:	b2db      	uxtb	r3, r3
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	0c1b      	lsrs	r3, r3, #16
 800a1b8:	b2db      	uxtb	r3, r3
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	0a1b      	lsrs	r3, r3, #8
 800a1c0:	b2db      	uxtb	r3, r3
 800a1c2:	9302      	str	r3, [sp, #8]
 800a1c4:	9101      	str	r1, [sp, #4]
 800a1c6:	9200      	str	r2, [sp, #0]
 800a1c8:	4b47      	ldr	r3, [pc, #284]	@ (800a2e8 <LoRaWAN_Init+0x198>)
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	2100      	movs	r1, #0
 800a1ce:	2002      	movs	r0, #2
 800a1d0:	f012 fa28 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800a1d4:	1d3b      	adds	r3, r7, #4
 800a1d6:	4619      	mov	r1, r3
 800a1d8:	2001      	movs	r0, #1
 800a1da:	f003 fa67 	bl	800d6ac <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	0e1b      	lsrs	r3, r3, #24
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	0c1b      	lsrs	r3, r3, #16
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	0a1b      	lsrs	r3, r3, #8
 800a1f2:	b2db      	uxtb	r3, r3
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	b2c0      	uxtb	r0, r0
 800a1f8:	9003      	str	r0, [sp, #12]
 800a1fa:	9302      	str	r3, [sp, #8]
 800a1fc:	9101      	str	r1, [sp, #4]
 800a1fe:	9200      	str	r2, [sp, #0]
 800a200:	4b3a      	ldr	r3, [pc, #232]	@ (800a2ec <LoRaWAN_Init+0x19c>)
 800a202:	2200      	movs	r2, #0
 800a204:	2100      	movs	r1, #0
 800a206:	2002      	movs	r0, #2
 800a208:	f012 fa0c 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800a20c:	2300      	movs	r3, #0
 800a20e:	9300      	str	r3, [sp, #0]
 800a210:	4b37      	ldr	r3, [pc, #220]	@ (800a2f0 <LoRaWAN_Init+0x1a0>)
 800a212:	2200      	movs	r2, #0
 800a214:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800a218:	4836      	ldr	r0, [pc, #216]	@ (800a2f4 <LoRaWAN_Init+0x1a4>)
 800a21a:	f011 ff55 	bl	801c0c8 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800a21e:	2300      	movs	r3, #0
 800a220:	9300      	str	r3, [sp, #0]
 800a222:	4b35      	ldr	r3, [pc, #212]	@ (800a2f8 <LoRaWAN_Init+0x1a8>)
 800a224:	2200      	movs	r2, #0
 800a226:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800a22a:	4834      	ldr	r0, [pc, #208]	@ (800a2fc <LoRaWAN_Init+0x1ac>)
 800a22c:	f011 ff4c 	bl	801c0c8 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800a230:	2300      	movs	r3, #0
 800a232:	9300      	str	r3, [sp, #0]
 800a234:	4b32      	ldr	r3, [pc, #200]	@ (800a300 <LoRaWAN_Init+0x1b0>)
 800a236:	2201      	movs	r2, #1
 800a238:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800a23c:	4831      	ldr	r0, [pc, #196]	@ (800a304 <LoRaWAN_Init+0x1b4>)
 800a23e:	f011 ff43 	bl	801c0c8 <UTIL_TIMER_Create>

  if (FLASH_IF_Init(NULL) != FLASH_IF_OK)
 800a242:	2000      	movs	r0, #0
 800a244:	f7f7 f82a 	bl	800129c <FLASH_IF_Init>
 800a248:	4603      	mov	r3, r0
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d001      	beq.n	800a252 <LoRaWAN_Init+0x102>
  {
    Error_Handler();
 800a24e:	f7f7 fb6d 	bl	800192c <Error_Handler>
  }

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800a252:	2300      	movs	r3, #0
 800a254:	9300      	str	r3, [sp, #0]
 800a256:	4b2c      	ldr	r3, [pc, #176]	@ (800a308 <LoRaWAN_Init+0x1b8>)
 800a258:	2200      	movs	r2, #0
 800a25a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800a25e:	482b      	ldr	r0, [pc, #172]	@ (800a30c <LoRaWAN_Init+0x1bc>)
 800a260:	f011 ff32 	bl	801c0c8 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800a264:	4a2a      	ldr	r2, [pc, #168]	@ (800a310 <LoRaWAN_Init+0x1c0>)
 800a266:	2100      	movs	r1, #0
 800a268:	2001      	movs	r0, #1
 800a26a:	f011 fe8b 	bl	801bf84 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800a26e:	4a29      	ldr	r2, [pc, #164]	@ (800a314 <LoRaWAN_Init+0x1c4>)
 800a270:	2100      	movs	r1, #0
 800a272:	2002      	movs	r0, #2
 800a274:	f011 fe86 	bl	801bf84 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800a278:	4a27      	ldr	r2, [pc, #156]	@ (800a318 <LoRaWAN_Init+0x1c8>)
 800a27a:	2100      	movs	r1, #0
 800a27c:	2004      	movs	r0, #4
 800a27e:	f011 fe81 	bl	801bf84 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800a282:	4a26      	ldr	r2, [pc, #152]	@ (800a31c <LoRaWAN_Init+0x1cc>)
 800a284:	2100      	movs	r1, #0
 800a286:	2008      	movs	r0, #8
 800a288:	f011 fe7c 	bl	801bf84 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800a28c:	f000 fd60 	bl	800ad50 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800a290:	4923      	ldr	r1, [pc, #140]	@ (800a320 <LoRaWAN_Init+0x1d0>)
 800a292:	4824      	ldr	r0, [pc, #144]	@ (800a324 <LoRaWAN_Init+0x1d4>)
 800a294:	f002 fa8c 	bl	800c7b0 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800a298:	4823      	ldr	r0, [pc, #140]	@ (800a328 <LoRaWAN_Init+0x1d8>)
 800a29a:	f002 fae5 	bl	800c868 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800a29e:	4819      	ldr	r0, [pc, #100]	@ (800a304 <LoRaWAN_Init+0x1b4>)
 800a2a0:	f011 ff48 	bl	801c134 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800a2a4:	4b21      	ldr	r3, [pc, #132]	@ (800a32c <LoRaWAN_Init+0x1dc>)
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	4a21      	ldr	r2, [pc, #132]	@ (800a330 <LoRaWAN_Init+0x1e0>)
 800a2aa:	7812      	ldrb	r2, [r2, #0]
 800a2ac:	4611      	mov	r1, r2
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f002 fc3e 	bl	800cb30 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800a2b4:	4b1f      	ldr	r3, [pc, #124]	@ (800a334 <LoRaWAN_Init+0x1e4>)
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d10b      	bne.n	800a2d4 <LoRaWAN_Init+0x184>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800a2bc:	4b1e      	ldr	r3, [pc, #120]	@ (800a338 <LoRaWAN_Init+0x1e8>)
 800a2be:	6819      	ldr	r1, [r3, #0]
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	9300      	str	r3, [sp, #0]
 800a2c4:	4b1d      	ldr	r3, [pc, #116]	@ (800a33c <LoRaWAN_Init+0x1ec>)
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	481d      	ldr	r0, [pc, #116]	@ (800a340 <LoRaWAN_Init+0x1f0>)
 800a2ca:	f011 fefd 	bl	801c0c8 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800a2ce:	481c      	ldr	r0, [pc, #112]	@ (800a340 <LoRaWAN_Init+0x1f0>)
 800a2d0:	f011 ff30 	bl	801c134 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800a2d4:	bf00      	nop
 800a2d6:	3708      	adds	r7, #8
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}
 800a2dc:	0801ccd0 	.word	0x0801ccd0
 800a2e0:	0801ccf4 	.word	0x0801ccf4
 800a2e4:	0801cd18 	.word	0x0801cd18
 800a2e8:	0801cd3c 	.word	0x0801cd3c
 800a2ec:	0801cd60 	.word	0x0801cd60
 800a2f0:	0800a7f9 	.word	0x0800a7f9
 800a2f4:	20000564 	.word	0x20000564
 800a2f8:	0800a819 	.word	0x0800a819
 800a2fc:	2000057c 	.word	0x2000057c
 800a300:	0800a839 	.word	0x0800a839
 800a304:	20000594 	.word	0x20000594
 800a308:	0800ac2d 	.word	0x0800ac2d
 800a30c:	20000458 	.word	0x20000458
 800a310:	0800cb05 	.word	0x0800cb05
 800a314:	0800a499 	.word	0x0800a499
 800a318:	0800ac75 	.word	0x0800ac75
 800a31c:	0800ab89 	.word	0x0800ab89
 800a320:	01030000 	.word	0x01030000
 800a324:	20000028 	.word	0x20000028
 800a328:	20000074 	.word	0x20000074
 800a32c:	20000024 	.word	0x20000024
 800a330:	2000043c 	.word	0x2000043c
 800a334:	2000043d 	.word	0x2000043d
 800a338:	2000008c 	.word	0x2000008c
 800a33c:	0800a7d5 	.word	0x0800a7d5
 800a340:	20000440 	.word	0x20000440

0800a344 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800a344:	b5b0      	push	{r4, r5, r7, lr}
 800a346:	b08a      	sub	sp, #40	@ 0x28
 800a348:	af06      	add	r7, sp, #24
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  uint8_t RxPort = 0;
 800a34e:	2300      	movs	r3, #0
 800a350:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	2b00      	cmp	r3, #0
 800a356:	f000 808c 	beq.w	800a472 <OnRxData+0x12e>
  {
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 800a35a:	2201      	movs	r2, #1
 800a35c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a360:	4846      	ldr	r0, [pc, #280]	@ (800a47c <OnRxData+0x138>)
 800a362:	f7fb f89b 	bl	800549c <HAL_GPIO_WritePin>

    UTIL_TIMER_Start(&RxLedTimer);
 800a366:	4846      	ldr	r0, [pc, #280]	@ (800a480 <OnRxData+0x13c>)
 800a368:	f011 fee4 	bl	801c134 <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d05a      	beq.n	800a42a <OnRxData+0xe6>
    {
      if (appData != NULL)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d057      	beq.n	800a42a <OnRxData+0xe6>
      {
        RxPort = appData->Port;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d050      	beq.n	800a42a <OnRxData+0xe6>
        {
          switch (appData->Port)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	2b02      	cmp	r3, #2
 800a38e:	d01f      	beq.n	800a3d0 <OnRxData+0x8c>
 800a390:	2b03      	cmp	r3, #3
 800a392:	d145      	bne.n	800a420 <OnRxData+0xdc>
          {
            case LORAWAN_SWITCH_CLASS_PORT:
              /*this port switches the class*/
              if (appData->BufferSize == 1)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	785b      	ldrb	r3, [r3, #1]
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d143      	bne.n	800a424 <OnRxData+0xe0>
              {
                switch (appData->Buffer[0])
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	2b02      	cmp	r3, #2
 800a3a4:	d00e      	beq.n	800a3c4 <OnRxData+0x80>
 800a3a6:	2b02      	cmp	r3, #2
 800a3a8:	dc10      	bgt.n	800a3cc <OnRxData+0x88>
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d002      	beq.n	800a3b4 <OnRxData+0x70>
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	d004      	beq.n	800a3bc <OnRxData+0x78>
                  {
                    LmHandlerRequestClass(CLASS_C);
                    break;
                  }
                  default:
                    break;
 800a3b2:	e00b      	b.n	800a3cc <OnRxData+0x88>
                    LmHandlerRequestClass(CLASS_A);
 800a3b4:	2000      	movs	r0, #0
 800a3b6:	f002 fd81 	bl	800cebc <LmHandlerRequestClass>
                    break;
 800a3ba:	e008      	b.n	800a3ce <OnRxData+0x8a>
                    LmHandlerRequestClass(CLASS_B);
 800a3bc:	2001      	movs	r0, #1
 800a3be:	f002 fd7d 	bl	800cebc <LmHandlerRequestClass>
                    break;
 800a3c2:	e004      	b.n	800a3ce <OnRxData+0x8a>
                    LmHandlerRequestClass(CLASS_C);
 800a3c4:	2002      	movs	r0, #2
 800a3c6:	f002 fd79 	bl	800cebc <LmHandlerRequestClass>
                    break;
 800a3ca:	e000      	b.n	800a3ce <OnRxData+0x8a>
                    break;
 800a3cc:	bf00      	nop
                }
              }
              break;
 800a3ce:	e029      	b.n	800a424 <OnRxData+0xe0>
            case LORAWAN_USER_APP_PORT:
              if (appData->BufferSize == 1)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	785b      	ldrb	r3, [r3, #1]
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d127      	bne.n	800a428 <OnRxData+0xe4>
              {
                AppLedStateOn = appData->Buffer[0] & 0x01;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	f003 0301 	and.w	r3, r3, #1
 800a3e2:	b2da      	uxtb	r2, r3
 800a3e4:	4b27      	ldr	r3, [pc, #156]	@ (800a484 <OnRxData+0x140>)
 800a3e6:	701a      	strb	r2, [r3, #0]
                if (AppLedStateOn == RESET)
 800a3e8:	4b26      	ldr	r3, [pc, #152]	@ (800a484 <OnRxData+0x140>)
 800a3ea:	781b      	ldrb	r3, [r3, #0]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d10b      	bne.n	800a408 <OnRxData+0xc4>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 800a3f0:	4b25      	ldr	r3, [pc, #148]	@ (800a488 <OnRxData+0x144>)
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	2100      	movs	r1, #0
 800a3f6:	2003      	movs	r0, #3
 800a3f8:	f012 f914 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	2120      	movs	r1, #32
 800a400:	481e      	ldr	r0, [pc, #120]	@ (800a47c <OnRxData+0x138>)
 800a402:	f7fb f84b 	bl	800549c <HAL_GPIO_WritePin>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
                }
              }
              break;
 800a406:	e00f      	b.n	800a428 <OnRxData+0xe4>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800a408:	4b20      	ldr	r3, [pc, #128]	@ (800a48c <OnRxData+0x148>)
 800a40a:	2200      	movs	r2, #0
 800a40c:	2100      	movs	r1, #0
 800a40e:	2003      	movs	r0, #3
 800a410:	f012 f908 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 800a414:	2201      	movs	r2, #1
 800a416:	2120      	movs	r1, #32
 800a418:	4818      	ldr	r0, [pc, #96]	@ (800a47c <OnRxData+0x138>)
 800a41a:	f7fb f83f 	bl	800549c <HAL_GPIO_WritePin>
              break;
 800a41e:	e003      	b.n	800a428 <OnRxData+0xe4>

            default:

              break;
 800a420:	bf00      	nop
 800a422:	e002      	b.n	800a42a <OnRxData+0xe6>
              break;
 800a424:	bf00      	nop
 800a426:	e000      	b.n	800a42a <OnRxData+0xe6>
              break;
 800a428:	bf00      	nop
          }
        }
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	7c1b      	ldrb	r3, [r3, #16]
 800a42e:	2b05      	cmp	r3, #5
 800a430:	d81f      	bhi.n	800a472 <OnRxData+0x12e>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	68db      	ldr	r3, [r3, #12]
 800a436:	7bfa      	ldrb	r2, [r7, #15]
 800a438:	6839      	ldr	r1, [r7, #0]
 800a43a:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800a43e:	460c      	mov	r4, r1
 800a440:	6839      	ldr	r1, [r7, #0]
 800a442:	7c09      	ldrb	r1, [r1, #16]
 800a444:	4608      	mov	r0, r1
 800a446:	4912      	ldr	r1, [pc, #72]	@ (800a490 <OnRxData+0x14c>)
 800a448:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800a44c:	6838      	ldr	r0, [r7, #0]
 800a44e:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800a452:	4605      	mov	r5, r0
 800a454:	6838      	ldr	r0, [r7, #0]
 800a456:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800a45a:	9005      	str	r0, [sp, #20]
 800a45c:	9504      	str	r5, [sp, #16]
 800a45e:	9103      	str	r1, [sp, #12]
 800a460:	9402      	str	r4, [sp, #8]
 800a462:	9201      	str	r2, [sp, #4]
 800a464:	9300      	str	r3, [sp, #0]
 800a466:	4b0b      	ldr	r3, [pc, #44]	@ (800a494 <OnRxData+0x150>)
 800a468:	2200      	movs	r2, #0
 800a46a:	2100      	movs	r1, #0
 800a46c:	2003      	movs	r0, #3
 800a46e:	f012 f8d9 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot],
              params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800a472:	bf00      	nop
 800a474:	3710      	adds	r7, #16
 800a476:	46bd      	mov	sp, r7
 800a478:	bdb0      	pop	{r4, r5, r7, pc}
 800a47a:	bf00      	nop
 800a47c:	48000400 	.word	0x48000400
 800a480:	2000057c 	.word	0x2000057c
 800a484:	20000562 	.word	0x20000562
 800a488:	0801cd84 	.word	0x0801cd84
 800a48c:	0801cd90 	.word	0x0801cd90
 800a490:	2000000c 	.word	0x2000000c
 800a494:	0801cd9c 	.word	0x0801cd9c

0800a498 <SendTxData>:

static void SendTxData(void)
{
 800a498:	b590      	push	{r4, r7, lr}
 800a49a:	b091      	sub	sp, #68	@ 0x44
 800a49c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800a49e:	23ff      	movs	r3, #255	@ 0xff
 800a4a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t batteryLevel = GetBatteryLevel();
 800a4a4:	f7f7 fc58 	bl	8001d58 <GetBatteryLevel>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	637b      	str	r3, [r7, #52]	@ 0x34

  if (LmHandlerIsBusy() == false)
 800a4b2:	f002 faf7 	bl	800caa4 <LmHandlerIsBusy>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	f083 0301 	eor.w	r3, r3, #1
 800a4bc:	b2db      	uxtb	r3, r3
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	f000 8165 	beq.w	800a78e <SendTxData+0x2f6>
  {
#ifdef CAYENNE_LPP
    uint8_t channel = 0;
#else
    uint16_t pressure = 0;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    int16_t temperature = 0;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint16_t humidity = 0;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	853b      	strh	r3, [r7, #40]	@ 0x28
    uint32_t i = 0;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	633b      	str	r3, [r7, #48]	@ 0x30
    int32_t latitude = 0;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	627b      	str	r3, [r7, #36]	@ 0x24
    int32_t longitude = 0;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	623b      	str	r3, [r7, #32]
    uint16_t altitudeGps = 0;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	83fb      	strh	r3, [r7, #30]
#endif /* CAYENNE_LPP */

    EnvSensors_Read(&sensor_data);
 800a4e0:	1d3b      	adds	r3, r7, #4
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7f7 fe90 	bl	8002208 <EnvSensors_Read>

    APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800a4e8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a4ec:	9300      	str	r3, [sp, #0]
 800a4ee:	4b92      	ldr	r3, [pc, #584]	@ (800a738 <SendTxData+0x2a0>)
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	2100      	movs	r1, #0
 800a4f4:	2002      	movs	r0, #2
 800a4f6:	f012 f895 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f7f6 fb0d 	bl	8000b1c <__aeabi_f2iz>
 800a502:	4603      	mov	r3, r0
 800a504:	b21b      	sxth	r3, r3
 800a506:	9300      	str	r3, [sp, #0]
 800a508:	4b8c      	ldr	r3, [pc, #560]	@ (800a73c <SendTxData+0x2a4>)
 800a50a:	2201      	movs	r2, #1
 800a50c:	2100      	movs	r1, #0
 800a50e:	2002      	movs	r0, #2
 800a510:	f012 f888 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>

    AppData.Port = LORAWAN_USER_APP_PORT;
 800a514:	4b8a      	ldr	r3, [pc, #552]	@ (800a740 <SendTxData+0x2a8>)
 800a516:	2202      	movs	r2, #2
 800a518:	701a      	strb	r2, [r3, #0]
    }

    CayenneLppCopy(AppData.Buffer);
    AppData.BufferSize = CayenneLppGetSize();
#else  /* not CAYENNE_LPP */
    humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	4989      	ldr	r1, [pc, #548]	@ (800a744 <SendTxData+0x2ac>)
 800a51e:	4618      	mov	r0, r3
 800a520:	f7f6 f9ac 	bl	800087c <__aeabi_fmul>
 800a524:	4603      	mov	r3, r0
 800a526:	4618      	mov	r0, r3
 800a528:	f7f6 fb1e 	bl	8000b68 <__aeabi_f2uiz>
 800a52c:	4603      	mov	r3, r0
 800a52e:	853b      	strh	r3, [r7, #40]	@ 0x28
    temperature = (int16_t)(sensor_data.temperature);
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	4618      	mov	r0, r3
 800a534:	f7f6 faf2 	bl	8000b1c <__aeabi_f2iz>
 800a538:	4603      	mov	r3, r0
 800a53a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	4982      	ldr	r1, [pc, #520]	@ (800a748 <SendTxData+0x2b0>)
 800a540:	4618      	mov	r0, r3
 800a542:	f7f6 f99b 	bl	800087c <__aeabi_fmul>
 800a546:	4603      	mov	r3, r0
 800a548:	497e      	ldr	r1, [pc, #504]	@ (800a744 <SendTxData+0x2ac>)
 800a54a:	4618      	mov	r0, r3
 800a54c:	f7f6 fa4a 	bl	80009e4 <__aeabi_fdiv>
 800a550:	4603      	mov	r3, r0
 800a552:	4618      	mov	r0, r3
 800a554:	f7f6 fb08 	bl	8000b68 <__aeabi_f2uiz>
 800a558:	4603      	mov	r3, r0
 800a55a:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    AppData.Buffer[i++] = AppLedStateOn;
 800a55c:	4b78      	ldr	r3, [pc, #480]	@ (800a740 <SendTxData+0x2a8>)
 800a55e:	685a      	ldr	r2, [r3, #4]
 800a560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a562:	1c59      	adds	r1, r3, #1
 800a564:	6339      	str	r1, [r7, #48]	@ 0x30
 800a566:	4413      	add	r3, r2
 800a568:	4a78      	ldr	r2, [pc, #480]	@ (800a74c <SendTxData+0x2b4>)
 800a56a:	7812      	ldrb	r2, [r2, #0]
 800a56c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 800a56e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a570:	0a1b      	lsrs	r3, r3, #8
 800a572:	b298      	uxth	r0, r3
 800a574:	4b72      	ldr	r3, [pc, #456]	@ (800a740 <SendTxData+0x2a8>)
 800a576:	685a      	ldr	r2, [r3, #4]
 800a578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a57a:	1c59      	adds	r1, r3, #1
 800a57c:	6339      	str	r1, [r7, #48]	@ 0x30
 800a57e:	4413      	add	r3, r2
 800a580:	b2c2      	uxtb	r2, r0
 800a582:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 800a584:	4b6e      	ldr	r3, [pc, #440]	@ (800a740 <SendTxData+0x2a8>)
 800a586:	685a      	ldr	r2, [r3, #4]
 800a588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a58a:	1c59      	adds	r1, r3, #1
 800a58c:	6339      	str	r1, [r7, #48]	@ 0x30
 800a58e:	4413      	add	r3, r2
 800a590:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800a592:	b2d2      	uxtb	r2, r2
 800a594:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 800a596:	4b6a      	ldr	r3, [pc, #424]	@ (800a740 <SendTxData+0x2a8>)
 800a598:	685a      	ldr	r2, [r3, #4]
 800a59a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a59c:	1c59      	adds	r1, r3, #1
 800a59e:	6339      	str	r1, [r7, #48]	@ 0x30
 800a5a0:	4413      	add	r3, r2
 800a5a2:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800a5a4:	b2d2      	uxtb	r2, r2
 800a5a6:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800a5a8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a5aa:	0a1b      	lsrs	r3, r3, #8
 800a5ac:	b298      	uxth	r0, r3
 800a5ae:	4b64      	ldr	r3, [pc, #400]	@ (800a740 <SendTxData+0x2a8>)
 800a5b0:	685a      	ldr	r2, [r3, #4]
 800a5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5b4:	1c59      	adds	r1, r3, #1
 800a5b6:	6339      	str	r1, [r7, #48]	@ 0x30
 800a5b8:	4413      	add	r3, r2
 800a5ba:	b2c2      	uxtb	r2, r0
 800a5bc:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 800a5be:	4b60      	ldr	r3, [pc, #384]	@ (800a740 <SendTxData+0x2a8>)
 800a5c0:	685a      	ldr	r2, [r3, #4]
 800a5c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5c4:	1c59      	adds	r1, r3, #1
 800a5c6:	6339      	str	r1, [r7, #48]	@ 0x30
 800a5c8:	4413      	add	r3, r2
 800a5ca:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a5cc:	b2d2      	uxtb	r2, r2
 800a5ce:	701a      	strb	r2, [r3, #0]

    if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 800a5d0:	4b5f      	ldr	r3, [pc, #380]	@ (800a750 <SendTxData+0x2b8>)
 800a5d2:	781b      	ldrb	r3, [r3, #0]
 800a5d4:	2b08      	cmp	r3, #8
 800a5d6:	d007      	beq.n	800a5e8 <SendTxData+0x150>
 800a5d8:	4b5d      	ldr	r3, [pc, #372]	@ (800a750 <SendTxData+0x2b8>)
 800a5da:	781b      	ldrb	r3, [r3, #0]
 800a5dc:	2b01      	cmp	r3, #1
 800a5de:	d003      	beq.n	800a5e8 <SendTxData+0x150>
        || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 800a5e0:	4b5b      	ldr	r3, [pc, #364]	@ (800a750 <SendTxData+0x2b8>)
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d120      	bne.n	800a62a <SendTxData+0x192>
    {
      AppData.Buffer[i++] = 0;
 800a5e8:	4b55      	ldr	r3, [pc, #340]	@ (800a740 <SendTxData+0x2a8>)
 800a5ea:	685a      	ldr	r2, [r3, #4]
 800a5ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ee:	1c59      	adds	r1, r3, #1
 800a5f0:	6339      	str	r1, [r7, #48]	@ 0x30
 800a5f2:	4413      	add	r3, r2
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	701a      	strb	r2, [r3, #0]
      AppData.Buffer[i++] = 0;
 800a5f8:	4b51      	ldr	r3, [pc, #324]	@ (800a740 <SendTxData+0x2a8>)
 800a5fa:	685a      	ldr	r2, [r3, #4]
 800a5fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5fe:	1c59      	adds	r1, r3, #1
 800a600:	6339      	str	r1, [r7, #48]	@ 0x30
 800a602:	4413      	add	r3, r2
 800a604:	2200      	movs	r2, #0
 800a606:	701a      	strb	r2, [r3, #0]
      AppData.Buffer[i++] = 0;
 800a608:	4b4d      	ldr	r3, [pc, #308]	@ (800a740 <SendTxData+0x2a8>)
 800a60a:	685a      	ldr	r2, [r3, #4]
 800a60c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a60e:	1c59      	adds	r1, r3, #1
 800a610:	6339      	str	r1, [r7, #48]	@ 0x30
 800a612:	4413      	add	r3, r2
 800a614:	2200      	movs	r2, #0
 800a616:	701a      	strb	r2, [r3, #0]
      AppData.Buffer[i++] = 0;
 800a618:	4b49      	ldr	r3, [pc, #292]	@ (800a740 <SendTxData+0x2a8>)
 800a61a:	685a      	ldr	r2, [r3, #4]
 800a61c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a61e:	1c59      	adds	r1, r3, #1
 800a620:	6339      	str	r1, [r7, #48]	@ 0x30
 800a622:	4413      	add	r3, r2
 800a624:	2200      	movs	r2, #0
 800a626:	701a      	strb	r2, [r3, #0]
 800a628:	e05b      	b.n	800a6e2 <SendTxData+0x24a>
    }
    else
    {
      latitude = sensor_data.latitude;
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	627b      	str	r3, [r7, #36]	@ 0x24
      longitude = sensor_data.longitude;
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	623b      	str	r3, [r7, #32]

      AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800a632:	4b43      	ldr	r3, [pc, #268]	@ (800a740 <SendTxData+0x2a8>)
 800a634:	685a      	ldr	r2, [r3, #4]
 800a636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a638:	1c59      	adds	r1, r3, #1
 800a63a:	6339      	str	r1, [r7, #48]	@ 0x30
 800a63c:	18d4      	adds	r4, r2, r3
 800a63e:	f7f7 fb8b 	bl	8001d58 <GetBatteryLevel>
 800a642:	4603      	mov	r3, r0
 800a644:	7023      	strb	r3, [r4, #0]
      AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800a646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a648:	1418      	asrs	r0, r3, #16
 800a64a:	4b3d      	ldr	r3, [pc, #244]	@ (800a740 <SendTxData+0x2a8>)
 800a64c:	685a      	ldr	r2, [r3, #4]
 800a64e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a650:	1c59      	adds	r1, r3, #1
 800a652:	6339      	str	r1, [r7, #48]	@ 0x30
 800a654:	4413      	add	r3, r2
 800a656:	b2c2      	uxtb	r2, r0
 800a658:	701a      	strb	r2, [r3, #0]
      AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800a65a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a65c:	1218      	asrs	r0, r3, #8
 800a65e:	4b38      	ldr	r3, [pc, #224]	@ (800a740 <SendTxData+0x2a8>)
 800a660:	685a      	ldr	r2, [r3, #4]
 800a662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a664:	1c59      	adds	r1, r3, #1
 800a666:	6339      	str	r1, [r7, #48]	@ 0x30
 800a668:	4413      	add	r3, r2
 800a66a:	b2c2      	uxtb	r2, r0
 800a66c:	701a      	strb	r2, [r3, #0]
      AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800a66e:	4b34      	ldr	r3, [pc, #208]	@ (800a740 <SendTxData+0x2a8>)
 800a670:	685a      	ldr	r2, [r3, #4]
 800a672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a674:	1c59      	adds	r1, r3, #1
 800a676:	6339      	str	r1, [r7, #48]	@ 0x30
 800a678:	4413      	add	r3, r2
 800a67a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a67c:	b2d2      	uxtb	r2, r2
 800a67e:	701a      	strb	r2, [r3, #0]
      AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800a680:	6a3b      	ldr	r3, [r7, #32]
 800a682:	1418      	asrs	r0, r3, #16
 800a684:	4b2e      	ldr	r3, [pc, #184]	@ (800a740 <SendTxData+0x2a8>)
 800a686:	685a      	ldr	r2, [r3, #4]
 800a688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a68a:	1c59      	adds	r1, r3, #1
 800a68c:	6339      	str	r1, [r7, #48]	@ 0x30
 800a68e:	4413      	add	r3, r2
 800a690:	b2c2      	uxtb	r2, r0
 800a692:	701a      	strb	r2, [r3, #0]
      AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800a694:	6a3b      	ldr	r3, [r7, #32]
 800a696:	1218      	asrs	r0, r3, #8
 800a698:	4b29      	ldr	r3, [pc, #164]	@ (800a740 <SendTxData+0x2a8>)
 800a69a:	685a      	ldr	r2, [r3, #4]
 800a69c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a69e:	1c59      	adds	r1, r3, #1
 800a6a0:	6339      	str	r1, [r7, #48]	@ 0x30
 800a6a2:	4413      	add	r3, r2
 800a6a4:	b2c2      	uxtb	r2, r0
 800a6a6:	701a      	strb	r2, [r3, #0]
      AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800a6a8:	4b25      	ldr	r3, [pc, #148]	@ (800a740 <SendTxData+0x2a8>)
 800a6aa:	685a      	ldr	r2, [r3, #4]
 800a6ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ae:	1c59      	adds	r1, r3, #1
 800a6b0:	6339      	str	r1, [r7, #48]	@ 0x30
 800a6b2:	4413      	add	r3, r2
 800a6b4:	6a3a      	ldr	r2, [r7, #32]
 800a6b6:	b2d2      	uxtb	r2, r2
 800a6b8:	701a      	strb	r2, [r3, #0]
      AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800a6ba:	8bfb      	ldrh	r3, [r7, #30]
 800a6bc:	0a1b      	lsrs	r3, r3, #8
 800a6be:	b298      	uxth	r0, r3
 800a6c0:	4b1f      	ldr	r3, [pc, #124]	@ (800a740 <SendTxData+0x2a8>)
 800a6c2:	685a      	ldr	r2, [r3, #4]
 800a6c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6c6:	1c59      	adds	r1, r3, #1
 800a6c8:	6339      	str	r1, [r7, #48]	@ 0x30
 800a6ca:	4413      	add	r3, r2
 800a6cc:	b2c2      	uxtb	r2, r0
 800a6ce:	701a      	strb	r2, [r3, #0]
      AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800a6d0:	4b1b      	ldr	r3, [pc, #108]	@ (800a740 <SendTxData+0x2a8>)
 800a6d2:	685a      	ldr	r2, [r3, #4]
 800a6d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6d6:	1c59      	adds	r1, r3, #1
 800a6d8:	6339      	str	r1, [r7, #48]	@ 0x30
 800a6da:	4413      	add	r3, r2
 800a6dc:	8bfa      	ldrh	r2, [r7, #30]
 800a6de:	b2d2      	uxtb	r2, r2
 800a6e0:	701a      	strb	r2, [r3, #0]
    }

    AppData.BufferSize = i;
 800a6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e4:	b2da      	uxtb	r2, r3
 800a6e6:	4b16      	ldr	r3, [pc, #88]	@ (800a740 <SendTxData+0x2a8>)
 800a6e8:	705a      	strb	r2, [r3, #1]
#endif /* CAYENNE_LPP */

    if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800a6ea:	4b1a      	ldr	r3, [pc, #104]	@ (800a754 <SendTxData+0x2bc>)
 800a6ec:	7a5b      	ldrb	r3, [r3, #9]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d00c      	beq.n	800a70c <SendTxData+0x274>
 800a6f2:	f002 fac1 	bl	800cc78 <LmHandlerJoinStatus>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	d107      	bne.n	800a70c <SendTxData+0x274>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 800a6fc:	4815      	ldr	r0, [pc, #84]	@ (800a754 <SendTxData+0x2bc>)
 800a6fe:	f011 fd87 	bl	801c210 <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 800a702:	2200      	movs	r2, #0
 800a704:	2120      	movs	r1, #32
 800a706:	4814      	ldr	r0, [pc, #80]	@ (800a758 <SendTxData+0x2c0>)
 800a708:	f7fa fec8 	bl	800549c <HAL_GPIO_WritePin>
    }

    status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800a70c:	4b10      	ldr	r3, [pc, #64]	@ (800a750 <SendTxData+0x2b8>)
 800a70e:	78db      	ldrb	r3, [r3, #3]
 800a710:	2200      	movs	r2, #0
 800a712:	4619      	mov	r1, r3
 800a714:	480a      	ldr	r0, [pc, #40]	@ (800a740 <SendTxData+0x2a8>)
 800a716:	f002 facb 	bl	800ccb0 <LmHandlerSend>
 800a71a:	4603      	mov	r3, r0
 800a71c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (LORAMAC_HANDLER_SUCCESS == status)
 800a720:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800a724:	2b00      	cmp	r3, #0
 800a726:	d11b      	bne.n	800a760 <SendTxData+0x2c8>
    {
      APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800a728:	4b0c      	ldr	r3, [pc, #48]	@ (800a75c <SendTxData+0x2c4>)
 800a72a:	2201      	movs	r2, #1
 800a72c:	2100      	movs	r1, #0
 800a72e:	2001      	movs	r0, #1
 800a730:	f011 ff78 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
 800a734:	e02b      	b.n	800a78e <SendTxData+0x2f6>
 800a736:	bf00      	nop
 800a738:	0801cde4 	.word	0x0801cde4
 800a73c:	0801cdf0 	.word	0x0801cdf0
 800a740:	20000090 	.word	0x20000090
 800a744:	41200000 	.word	0x41200000
 800a748:	42c80000 	.word	0x42c80000
 800a74c:	20000562 	.word	0x20000562
 800a750:	20000074 	.word	0x20000074
 800a754:	20000594 	.word	0x20000594
 800a758:	48000400 	.word	0x48000400
 800a75c:	0801cdfc 	.word	0x0801cdfc
    }
    else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800a760:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800a764:	f113 0f06 	cmn.w	r3, #6
 800a768:	d111      	bne.n	800a78e <SendTxData+0x2f6>
    {
      nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800a76a:	f002 f9d7 	bl	800cb1c <LmHandlerGetDutyCycleWaitTime>
 800a76e:	6378      	str	r0, [r7, #52]	@ 0x34
      if (nextTxIn > 0)
 800a770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a772:	2b00      	cmp	r3, #0
 800a774:	d00b      	beq.n	800a78e <SendTxData+0x2f6>
      {
        APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800a776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a778:	4a11      	ldr	r2, [pc, #68]	@ (800a7c0 <SendTxData+0x328>)
 800a77a:	fba2 2303 	umull	r2, r3, r2, r3
 800a77e:	099b      	lsrs	r3, r3, #6
 800a780:	9300      	str	r3, [sp, #0]
 800a782:	4b10      	ldr	r3, [pc, #64]	@ (800a7c4 <SendTxData+0x32c>)
 800a784:	2201      	movs	r2, #1
 800a786:	2100      	movs	r1, #0
 800a788:	2001      	movs	r0, #1
 800a78a:	f011 ff4b 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
      }
    }
  }

  if (EventType == TX_ON_TIMER)
 800a78e:	4b0e      	ldr	r3, [pc, #56]	@ (800a7c8 <SendTxData+0x330>)
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d10f      	bne.n	800a7b6 <SendTxData+0x31e>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800a796:	480d      	ldr	r0, [pc, #52]	@ (800a7cc <SendTxData+0x334>)
 800a798:	f011 fd3a 	bl	801c210 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800a79c:	4b0c      	ldr	r3, [pc, #48]	@ (800a7d0 <SendTxData+0x338>)
 800a79e:	681a      	ldr	r2, [r3, #0]
 800a7a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	bf38      	it	cc
 800a7a6:	4613      	movcc	r3, r2
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	4808      	ldr	r0, [pc, #32]	@ (800a7cc <SendTxData+0x334>)
 800a7ac:	f011 fda0 	bl	801c2f0 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800a7b0:	4806      	ldr	r0, [pc, #24]	@ (800a7cc <SendTxData+0x334>)
 800a7b2:	f011 fcbf 	bl	801c134 <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800a7b6:	bf00      	nop
 800a7b8:	373c      	adds	r7, #60	@ 0x3c
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd90      	pop	{r4, r7, pc}
 800a7be:	bf00      	nop
 800a7c0:	10624dd3 	.word	0x10624dd3
 800a7c4:	0801ce0c 	.word	0x0801ce0c
 800a7c8:	2000043d 	.word	0x2000043d
 800a7cc:	20000440 	.word	0x20000440
 800a7d0:	2000008c 	.word	0x2000008c

0800a7d4 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a7dc:	2100      	movs	r1, #0
 800a7de:	2002      	movs	r0, #2
 800a7e0:	f011 fbf2 	bl	801bfc8 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800a7e4:	4803      	ldr	r0, [pc, #12]	@ (800a7f4 <OnTxTimerEvent+0x20>)
 800a7e6:	f011 fca5 	bl	801c134 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800a7ea:	bf00      	nop
 800a7ec:	3708      	adds	r7, #8
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop
 800a7f4:	20000440 	.word	0x20000440

0800a7f8 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b082      	sub	sp, #8
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 800a800:	2200      	movs	r2, #0
 800a802:	2180      	movs	r1, #128	@ 0x80
 800a804:	4803      	ldr	r0, [pc, #12]	@ (800a814 <OnTxTimerLedEvent+0x1c>)
 800a806:	f7fa fe49 	bl	800549c <HAL_GPIO_WritePin>
}
 800a80a:	bf00      	nop
 800a80c:	3708      	adds	r7, #8
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	48000400 	.word	0x48000400

0800a818 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b082      	sub	sp, #8
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 800a820:	2200      	movs	r2, #0
 800a822:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a826:	4803      	ldr	r0, [pc, #12]	@ (800a834 <OnRxTimerLedEvent+0x1c>)
 800a828:	f7fa fe38 	bl	800549c <HAL_GPIO_WritePin>
}
 800a82c:	bf00      	nop
 800a82e:	3708      	adds	r7, #8
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}
 800a834:	48000400 	.word	0x48000400

0800a838 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 800a840:	2120      	movs	r1, #32
 800a842:	4803      	ldr	r0, [pc, #12]	@ (800a850 <OnJoinTimerLedEvent+0x18>)
 800a844:	f7fa fe41 	bl	80054ca <HAL_GPIO_TogglePin>
}
 800a848:	bf00      	nop
 800a84a:	3708      	adds	r7, #8
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}
 800a850:	48000400 	.word	0x48000400

0800a854 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b086      	sub	sp, #24
 800a858:	af04      	add	r7, sp, #16
 800a85a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d046      	beq.n	800a8f0 <OnTxData+0x9c>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d042      	beq.n	800a8f0 <OnTxData+0x9c>
    {
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 800a86a:	2201      	movs	r2, #1
 800a86c:	2180      	movs	r1, #128	@ 0x80
 800a86e:	4822      	ldr	r0, [pc, #136]	@ (800a8f8 <OnTxData+0xa4>)
 800a870:	f7fa fe14 	bl	800549c <HAL_GPIO_WritePin>
      UTIL_TIMER_Start(&TxLedTimer);
 800a874:	4821      	ldr	r0, [pc, #132]	@ (800a8fc <OnTxData+0xa8>)
 800a876:	f011 fc5d 	bl	801c134 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800a87a:	4b21      	ldr	r3, [pc, #132]	@ (800a900 <OnTxData+0xac>)
 800a87c:	2200      	movs	r2, #0
 800a87e:	2100      	movs	r1, #0
 800a880:	2002      	movs	r0, #2
 800a882:	f011 fecf 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	68db      	ldr	r3, [r3, #12]
 800a88a:	687a      	ldr	r2, [r7, #4]
 800a88c:	7c12      	ldrb	r2, [r2, #16]
 800a88e:	4611      	mov	r1, r2
 800a890:	687a      	ldr	r2, [r7, #4]
 800a892:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800a896:	4610      	mov	r0, r2
 800a898:	687a      	ldr	r2, [r7, #4]
 800a89a:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800a89e:	9203      	str	r2, [sp, #12]
 800a8a0:	9002      	str	r0, [sp, #8]
 800a8a2:	9101      	str	r1, [sp, #4]
 800a8a4:	9300      	str	r3, [sp, #0]
 800a8a6:	4b17      	ldr	r3, [pc, #92]	@ (800a904 <OnTxData+0xb0>)
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	2100      	movs	r1, #0
 800a8ac:	2003      	movs	r0, #3
 800a8ae:	f011 feb9 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800a8b2:	4b15      	ldr	r3, [pc, #84]	@ (800a908 <OnTxData+0xb4>)
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	2100      	movs	r1, #0
 800a8b8:	2003      	movs	r0, #3
 800a8ba:	f011 feb3 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	7a1b      	ldrb	r3, [r3, #8]
 800a8c2:	2b01      	cmp	r3, #1
 800a8c4:	d10e      	bne.n	800a8e4 <OnTxData+0x90>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	7a5b      	ldrb	r3, [r3, #9]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d001      	beq.n	800a8d2 <OnTxData+0x7e>
 800a8ce:	4b0f      	ldr	r3, [pc, #60]	@ (800a90c <OnTxData+0xb8>)
 800a8d0:	e000      	b.n	800a8d4 <OnTxData+0x80>
 800a8d2:	4b0f      	ldr	r3, [pc, #60]	@ (800a910 <OnTxData+0xbc>)
 800a8d4:	9300      	str	r3, [sp, #0]
 800a8d6:	4b0f      	ldr	r3, [pc, #60]	@ (800a914 <OnTxData+0xc0>)
 800a8d8:	2200      	movs	r2, #0
 800a8da:	2100      	movs	r1, #0
 800a8dc:	2003      	movs	r0, #3
 800a8de:	f011 fea1 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800a8e2:	e005      	b.n	800a8f0 <OnTxData+0x9c>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800a8e4:	4b0c      	ldr	r3, [pc, #48]	@ (800a918 <OnTxData+0xc4>)
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	2100      	movs	r1, #0
 800a8ea:	2003      	movs	r0, #3
 800a8ec:	f011 fe9a 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
}
 800a8f0:	bf00      	nop
 800a8f2:	3708      	adds	r7, #8
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}
 800a8f8:	48000400 	.word	0x48000400
 800a8fc:	20000564 	.word	0x20000564
 800a900:	0801ce2c 	.word	0x0801ce2c
 800a904:	0801ce60 	.word	0x0801ce60
 800a908:	0801ce94 	.word	0x0801ce94
 800a90c:	0801cea4 	.word	0x0801cea4
 800a910:	0801cea8 	.word	0x0801cea8
 800a914:	0801ceb0 	.word	0x0801ceb0
 800a918:	0801cec4 	.word	0x0801cec4

0800a91c <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af02      	add	r7, sp, #8
 800a922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d039      	beq.n	800a99e <OnJoinRequest+0x82>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d11f      	bne.n	800a974 <OnJoinRequest+0x58>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 800a934:	481c      	ldr	r0, [pc, #112]	@ (800a9a8 <OnJoinRequest+0x8c>)
 800a936:	f011 fc6b 	bl	801c210 <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 800a93a:	2200      	movs	r2, #0
 800a93c:	2120      	movs	r1, #32
 800a93e:	481b      	ldr	r0, [pc, #108]	@ (800a9ac <OnJoinRequest+0x90>)
 800a940:	f7fa fdac 	bl	800549c <HAL_GPIO_WritePin>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800a944:	4b1a      	ldr	r3, [pc, #104]	@ (800a9b0 <OnJoinRequest+0x94>)
 800a946:	2200      	movs	r2, #0
 800a948:	2100      	movs	r1, #0
 800a94a:	2002      	movs	r0, #2
 800a94c:	f011 fe6a 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	79db      	ldrb	r3, [r3, #7]
 800a954:	2b01      	cmp	r3, #1
 800a956:	d106      	bne.n	800a966 <OnJoinRequest+0x4a>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800a958:	4b16      	ldr	r3, [pc, #88]	@ (800a9b4 <OnJoinRequest+0x98>)
 800a95a:	2200      	movs	r2, #0
 800a95c:	2100      	movs	r1, #0
 800a95e:	2002      	movs	r0, #2
 800a960:	f011 fe60 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
 800a964:	e00c      	b.n	800a980 <OnJoinRequest+0x64>
      }
      else
      {
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800a966:	4b14      	ldr	r3, [pc, #80]	@ (800a9b8 <OnJoinRequest+0x9c>)
 800a968:	2200      	movs	r2, #0
 800a96a:	2100      	movs	r1, #0
 800a96c:	2002      	movs	r0, #2
 800a96e:	f011 fe59 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
 800a972:	e005      	b.n	800a980 <OnJoinRequest+0x64>
      }
    }
    else
    {
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800a974:	4b11      	ldr	r3, [pc, #68]	@ (800a9bc <OnJoinRequest+0xa0>)
 800a976:	2200      	movs	r2, #0
 800a978:	2100      	movs	r1, #0
 800a97a:	2002      	movs	r0, #2
 800a97c:	f011 fe52 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
    }

    APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:JOIN | DR:%d | PWR:%d\r\n", joinParams->Datarate, joinParams->TxPower);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800a986:	461a      	mov	r2, r3
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800a98e:	9301      	str	r3, [sp, #4]
 800a990:	9200      	str	r2, [sp, #0]
 800a992:	4b0b      	ldr	r3, [pc, #44]	@ (800a9c0 <OnJoinRequest+0xa4>)
 800a994:	2200      	movs	r2, #0
 800a996:	2100      	movs	r1, #0
 800a998:	2003      	movs	r0, #3
 800a99a:	f011 fe43 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800a99e:	bf00      	nop
 800a9a0:	3708      	adds	r7, #8
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
 800a9a6:	bf00      	nop
 800a9a8:	20000594 	.word	0x20000594
 800a9ac:	48000400 	.word	0x48000400
 800a9b0:	0801ced4 	.word	0x0801ced4
 800a9b4:	0801ceec 	.word	0x0801ceec
 800a9b8:	0801cf0c 	.word	0x0801cf0c
 800a9bc:	0801cf2c 	.word	0x0801cf2c
 800a9c0:	0801cf48 	.word	0x0801cf48

0800a9c4 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800a9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9c6:	b093      	sub	sp, #76	@ 0x4c
 800a9c8:	af0c      	add	r7, sp, #48	@ 0x30
 800a9ca:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d056      	beq.n	800aa80 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	785b      	ldrb	r3, [r3, #1]
 800a9d6:	2b02      	cmp	r3, #2
 800a9d8:	d008      	beq.n	800a9ec <OnBeaconStatusChange+0x28>
 800a9da:	2b03      	cmp	r3, #3
 800a9dc:	d049      	beq.n	800aa72 <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800a9de:	4b2a      	ldr	r3, [pc, #168]	@ (800aa88 <OnBeaconStatusChange+0xc4>)
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	2100      	movs	r1, #0
 800a9e4:	2002      	movs	r0, #2
 800a9e6:	f011 fe1d 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800a9ea:	e049      	b.n	800aa80 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	7c1b      	ldrb	r3, [r3, #16]
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800a9f8:	461c      	mov	r4, r3
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800aa00:	461d      	mov	r5, r3
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	68db      	ldr	r3, [r3, #12]
 800aa06:	697a      	ldr	r2, [r7, #20]
 800aa08:	6852      	ldr	r2, [r2, #4]
 800aa0a:	6979      	ldr	r1, [r7, #20]
 800aa0c:	7d49      	ldrb	r1, [r1, #21]
 800aa0e:	460e      	mov	r6, r1
 800aa10:	6979      	ldr	r1, [r7, #20]
 800aa12:	7d89      	ldrb	r1, [r1, #22]
 800aa14:	6139      	str	r1, [r7, #16]
 800aa16:	6979      	ldr	r1, [r7, #20]
 800aa18:	7dc9      	ldrb	r1, [r1, #23]
 800aa1a:	60f9      	str	r1, [r7, #12]
 800aa1c:	6979      	ldr	r1, [r7, #20]
 800aa1e:	7e09      	ldrb	r1, [r1, #24]
 800aa20:	60b9      	str	r1, [r7, #8]
 800aa22:	6979      	ldr	r1, [r7, #20]
 800aa24:	7e49      	ldrb	r1, [r1, #25]
 800aa26:	6079      	str	r1, [r7, #4]
 800aa28:	6979      	ldr	r1, [r7, #20]
 800aa2a:	7e89      	ldrb	r1, [r1, #26]
 800aa2c:	6039      	str	r1, [r7, #0]
 800aa2e:	6979      	ldr	r1, [r7, #20]
 800aa30:	7ec9      	ldrb	r1, [r1, #27]
 800aa32:	910b      	str	r1, [sp, #44]	@ 0x2c
 800aa34:	f8d7 c000 	ldr.w	ip, [r7]
 800aa38:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 800aa3c:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800aa40:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 800aa44:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800aa48:	f8cd c020 	str.w	ip, [sp, #32]
 800aa4c:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800aa50:	f8cd c01c 	str.w	ip, [sp, #28]
 800aa54:	6939      	ldr	r1, [r7, #16]
 800aa56:	9106      	str	r1, [sp, #24]
 800aa58:	9605      	str	r6, [sp, #20]
 800aa5a:	9204      	str	r2, [sp, #16]
 800aa5c:	9303      	str	r3, [sp, #12]
 800aa5e:	9502      	str	r5, [sp, #8]
 800aa60:	9401      	str	r4, [sp, #4]
 800aa62:	9000      	str	r0, [sp, #0]
 800aa64:	4b09      	ldr	r3, [pc, #36]	@ (800aa8c <OnBeaconStatusChange+0xc8>)
 800aa66:	2200      	movs	r2, #0
 800aa68:	2100      	movs	r1, #0
 800aa6a:	2002      	movs	r0, #2
 800aa6c:	f011 fdda 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800aa70:	e006      	b.n	800aa80 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800aa72:	4b07      	ldr	r3, [pc, #28]	@ (800aa90 <OnBeaconStatusChange+0xcc>)
 800aa74:	2200      	movs	r2, #0
 800aa76:	2100      	movs	r1, #0
 800aa78:	2002      	movs	r0, #2
 800aa7a:	f011 fdd3 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800aa7e:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800aa80:	bf00      	nop
 800aa82:	371c      	adds	r7, #28
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa88:	0801cf74 	.word	0x0801cf74
 800aa8c:	0801cf8c 	.word	0x0801cf8c
 800aa90:	0801d000 	.word	0x0801d000

0800aa94 <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 800aa94:	b480      	push	{r7}
 800aa96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 800aa98:	bf00      	nop
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bc80      	pop	{r7}
 800aa9e:	4770      	bx	lr

0800aaa0 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b084      	sub	sp, #16
 800aaa4:	af02      	add	r7, sp, #8
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800aaaa:	79fb      	ldrb	r3, [r7, #7]
 800aaac:	4a06      	ldr	r2, [pc, #24]	@ (800aac8 <OnClassChange+0x28>)
 800aaae:	5cd3      	ldrb	r3, [r2, r3]
 800aab0:	9300      	str	r3, [sp, #0]
 800aab2:	4b06      	ldr	r3, [pc, #24]	@ (800aacc <OnClassChange+0x2c>)
 800aab4:	2200      	movs	r2, #0
 800aab6:	2100      	movs	r1, #0
 800aab8:	2002      	movs	r0, #2
 800aaba:	f011 fdb3 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800aabe:	bf00      	nop
 800aac0:	3708      	adds	r7, #8
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}
 800aac6:	bf00      	nop
 800aac8:	0801d03c 	.word	0x0801d03c
 800aacc:	0801d020 	.word	0x0801d020

0800aad0 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800aad4:	2100      	movs	r1, #0
 800aad6:	2001      	movs	r0, #1
 800aad8:	f011 fa76 	bl	801bfc8 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800aadc:	bf00      	nop
 800aade:	bd80      	pop	{r7, pc}

0800aae0 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b082      	sub	sp, #8
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800aae8:	4a0d      	ldr	r2, [pc, #52]	@ (800ab20 <OnTxPeriodicityChanged+0x40>)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800aaee:	4b0c      	ldr	r3, [pc, #48]	@ (800ab20 <OnTxPeriodicityChanged+0x40>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d103      	bne.n	800aafe <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800aaf6:	4b0a      	ldr	r3, [pc, #40]	@ (800ab20 <OnTxPeriodicityChanged+0x40>)
 800aaf8:	f242 7210 	movw	r2, #10000	@ 0x2710
 800aafc:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800aafe:	4809      	ldr	r0, [pc, #36]	@ (800ab24 <OnTxPeriodicityChanged+0x44>)
 800ab00:	f011 fb86 	bl	801c210 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800ab04:	4b06      	ldr	r3, [pc, #24]	@ (800ab20 <OnTxPeriodicityChanged+0x40>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	4619      	mov	r1, r3
 800ab0a:	4806      	ldr	r0, [pc, #24]	@ (800ab24 <OnTxPeriodicityChanged+0x44>)
 800ab0c:	f011 fbf0 	bl	801c2f0 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800ab10:	4804      	ldr	r0, [pc, #16]	@ (800ab24 <OnTxPeriodicityChanged+0x44>)
 800ab12:	f011 fb0f 	bl	801c134 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800ab16:	bf00      	nop
 800ab18:	3708      	adds	r7, #8
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}
 800ab1e:	bf00      	nop
 800ab20:	2000008c 	.word	0x2000008c
 800ab24:	20000440 	.word	0x20000440

0800ab28 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b083      	sub	sp, #12
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	4603      	mov	r3, r0
 800ab30:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800ab32:	4a04      	ldr	r2, [pc, #16]	@ (800ab44 <OnTxFrameCtrlChanged+0x1c>)
 800ab34:	79fb      	ldrb	r3, [r7, #7]
 800ab36:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800ab38:	bf00      	nop
 800ab3a:	370c      	adds	r7, #12
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bc80      	pop	{r7}
 800ab40:	4770      	bx	lr
 800ab42:	bf00      	nop
 800ab44:	20000074 	.word	0x20000074

0800ab48 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	4603      	mov	r3, r0
 800ab50:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800ab52:	4a04      	ldr	r2, [pc, #16]	@ (800ab64 <OnPingSlotPeriodicityChanged+0x1c>)
 800ab54:	79fb      	ldrb	r3, [r7, #7]
 800ab56:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800ab58:	bf00      	nop
 800ab5a:	370c      	adds	r7, #12
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bc80      	pop	{r7}
 800ab60:	4770      	bx	lr
 800ab62:	bf00      	nop
 800ab64:	20000074 	.word	0x20000074

0800ab68 <OnSystemReset>:

static void OnSystemReset(void)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800ab6c:	f002 fdcf 	bl	800d70e <LmHandlerHalt>
 800ab70:	4603      	mov	r3, r0
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d106      	bne.n	800ab84 <OnSystemReset+0x1c>
 800ab76:	f002 f87f 	bl	800cc78 <LmHandlerJoinStatus>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	d101      	bne.n	800ab84 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800ab80:	f7ff fad0 	bl	800a124 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800ab84:	bf00      	nop
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <StopJoin>:

static void StopJoin(void)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN StopJoin_1 */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 800ab8c:	2201      	movs	r2, #1
 800ab8e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ab92:	481e      	ldr	r0, [pc, #120]	@ (800ac0c <StopJoin+0x84>)
 800ab94:	f7fa fc82 	bl	800549c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 800ab98:	2201      	movs	r2, #1
 800ab9a:	2180      	movs	r1, #128	@ 0x80
 800ab9c:	481b      	ldr	r0, [pc, #108]	@ (800ac0c <StopJoin+0x84>)
 800ab9e:	f7fa fc7d 	bl	800549c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 800aba2:	2201      	movs	r2, #1
 800aba4:	2120      	movs	r1, #32
 800aba6:	4819      	ldr	r0, [pc, #100]	@ (800ac0c <StopJoin+0x84>)
 800aba8:	f7fa fc78 	bl	800549c <HAL_GPIO_WritePin>
  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800abac:	4818      	ldr	r0, [pc, #96]	@ (800ac10 <StopJoin+0x88>)
 800abae:	f011 fb2f 	bl	801c210 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800abb2:	f002 fd9f 	bl	800d6f4 <LmHandlerStop>
 800abb6:	4603      	mov	r3, r0
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d006      	beq.n	800abca <StopJoin+0x42>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800abbc:	4b15      	ldr	r3, [pc, #84]	@ (800ac14 <StopJoin+0x8c>)
 800abbe:	2200      	movs	r2, #0
 800abc0:	2100      	movs	r1, #0
 800abc2:	2002      	movs	r0, #2
 800abc4:	f011 fd2e 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
 800abc8:	e01a      	b.n	800ac00 <StopJoin+0x78>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800abca:	4b13      	ldr	r3, [pc, #76]	@ (800ac18 <StopJoin+0x90>)
 800abcc:	2200      	movs	r2, #0
 800abce:	2100      	movs	r1, #0
 800abd0:	2002      	movs	r0, #2
 800abd2:	f011 fd27 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800abd6:	4b11      	ldr	r3, [pc, #68]	@ (800ac1c <StopJoin+0x94>)
 800abd8:	2201      	movs	r2, #1
 800abda:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800abdc:	4b10      	ldr	r3, [pc, #64]	@ (800ac20 <StopJoin+0x98>)
 800abde:	2200      	movs	r2, #0
 800abe0:	2100      	movs	r1, #0
 800abe2:	2002      	movs	r0, #2
 800abe4:	f011 fd1e 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800abe8:	480e      	ldr	r0, [pc, #56]	@ (800ac24 <StopJoin+0x9c>)
 800abea:	f001 fe3d 	bl	800c868 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800abee:	4b0b      	ldr	r3, [pc, #44]	@ (800ac1c <StopJoin+0x94>)
 800abf0:	781b      	ldrb	r3, [r3, #0]
 800abf2:	2101      	movs	r1, #1
 800abf4:	4618      	mov	r0, r3
 800abf6:	f001 ff9b 	bl	800cb30 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800abfa:	4805      	ldr	r0, [pc, #20]	@ (800ac10 <StopJoin+0x88>)
 800abfc:	f011 fa9a 	bl	801c134 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800ac00:	4809      	ldr	r0, [pc, #36]	@ (800ac28 <StopJoin+0xa0>)
 800ac02:	f011 fa97 	bl	801c134 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800ac06:	bf00      	nop
 800ac08:	bd80      	pop	{r7, pc}
 800ac0a:	bf00      	nop
 800ac0c:	48000400 	.word	0x48000400
 800ac10:	20000440 	.word	0x20000440
 800ac14:	0801d040 	.word	0x0801d040
 800ac18:	0801d060 	.word	0x0801d060
 800ac1c:	20000024 	.word	0x20000024
 800ac20:	0801d074 	.word	0x0801d074
 800ac24:	20000074 	.word	0x20000074
 800ac28:	20000458 	.word	0x20000458

0800ac2c <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b082      	sub	sp, #8
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800ac34:	4b0d      	ldr	r3, [pc, #52]	@ (800ac6c <OnStopJoinTimerEvent+0x40>)
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	2b02      	cmp	r3, #2
 800ac3a:	d103      	bne.n	800ac44 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800ac3c:	2100      	movs	r1, #0
 800ac3e:	2008      	movs	r0, #8
 800ac40:	f011 f9c2 	bl	801bfc8 <UTIL_SEQ_SetTask>
  }
  /* USER CODE BEGIN OnStopJoinTimerEvent_Last */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 800ac44:	2200      	movs	r2, #0
 800ac46:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ac4a:	4809      	ldr	r0, [pc, #36]	@ (800ac70 <OnStopJoinTimerEvent+0x44>)
 800ac4c:	f7fa fc26 	bl	800549c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 800ac50:	2200      	movs	r2, #0
 800ac52:	2180      	movs	r1, #128	@ 0x80
 800ac54:	4806      	ldr	r0, [pc, #24]	@ (800ac70 <OnStopJoinTimerEvent+0x44>)
 800ac56:	f7fa fc21 	bl	800549c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	2120      	movs	r1, #32
 800ac5e:	4804      	ldr	r0, [pc, #16]	@ (800ac70 <OnStopJoinTimerEvent+0x44>)
 800ac60:	f7fa fc1c 	bl	800549c <HAL_GPIO_WritePin>
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800ac64:	bf00      	nop
 800ac66:	3708      	adds	r7, #8
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}
 800ac6c:	20000024 	.word	0x20000024
 800ac70:	48000400 	.word	0x48000400

0800ac74 <StoreContext>:

static void StoreContext(void)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b082      	sub	sp, #8
 800ac78:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800ac7a:	23ff      	movs	r3, #255	@ 0xff
 800ac7c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800ac7e:	f002 fd7b 	bl	800d778 <LmHandlerNvmDataStore>
 800ac82:	4603      	mov	r3, r0
 800ac84:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800ac86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac8a:	f113 0f08 	cmn.w	r3, #8
 800ac8e:	d106      	bne.n	800ac9e <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800ac90:	4b0a      	ldr	r3, [pc, #40]	@ (800acbc <StoreContext+0x48>)
 800ac92:	2200      	movs	r2, #0
 800ac94:	2100      	movs	r1, #0
 800ac96:	2002      	movs	r0, #2
 800ac98:	f011 fcc4 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800ac9c:	e00a      	b.n	800acb4 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800ac9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aca6:	d105      	bne.n	800acb4 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800aca8:	4b05      	ldr	r3, [pc, #20]	@ (800acc0 <StoreContext+0x4c>)
 800acaa:	2200      	movs	r2, #0
 800acac:	2100      	movs	r1, #0
 800acae:	2002      	movs	r0, #2
 800acb0:	f011 fcb8 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
}
 800acb4:	bf00      	nop
 800acb6:	3708      	adds	r7, #8
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}
 800acbc:	0801d094 	.word	0x0801d094
 800acc0:	0801d0ac 	.word	0x0801d0ac

0800acc4 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b082      	sub	sp, #8
 800acc8:	af00      	add	r7, sp, #0
 800acca:	4603      	mov	r3, r0
 800accc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800acce:	79fb      	ldrb	r3, [r7, #7]
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	d106      	bne.n	800ace2 <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800acd4:	4b08      	ldr	r3, [pc, #32]	@ (800acf8 <OnNvmDataChange+0x34>)
 800acd6:	2200      	movs	r2, #0
 800acd8:	2100      	movs	r1, #0
 800acda:	2002      	movs	r0, #2
 800acdc:	f011 fca2 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800ace0:	e005      	b.n	800acee <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800ace2:	4b06      	ldr	r3, [pc, #24]	@ (800acfc <OnNvmDataChange+0x38>)
 800ace4:	2200      	movs	r2, #0
 800ace6:	2100      	movs	r1, #0
 800ace8:	2002      	movs	r0, #2
 800acea:	f011 fc9b 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
}
 800acee:	bf00      	nop
 800acf0:	3708      	adds	r7, #8
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
 800acf6:	bf00      	nop
 800acf8:	0801d0c4 	.word	0x0801d0c4
 800acfc:	0801d0d8 	.word	0x0801d0d8

0800ad00 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b082      	sub	sp, #8
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800ad0a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800ad0e:	4807      	ldr	r0, [pc, #28]	@ (800ad2c <OnStoreContextRequest+0x2c>)
 800ad10:	f7f6 fb26 	bl	8001360 <FLASH_IF_Erase>
 800ad14:	4603      	mov	r3, r0
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d104      	bne.n	800ad24 <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800ad1a:	683a      	ldr	r2, [r7, #0]
 800ad1c:	6879      	ldr	r1, [r7, #4]
 800ad1e:	4803      	ldr	r0, [pc, #12]	@ (800ad2c <OnStoreContextRequest+0x2c>)
 800ad20:	f7f6 face 	bl	80012c0 <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800ad24:	bf00      	nop
 800ad26:	3708      	adds	r7, #8
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}
 800ad2c:	0803f000 	.word	0x0803f000

0800ad30 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b082      	sub	sp, #8
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800ad3a:	683a      	ldr	r2, [r7, #0]
 800ad3c:	4903      	ldr	r1, [pc, #12]	@ (800ad4c <OnRestoreContextRequest+0x1c>)
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f7f6 fae6 	bl	8001310 <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800ad44:	bf00      	nop
 800ad46:	3708      	adds	r7, #8
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	0803f000 	.word	0x0803f000

0800ad50 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 800ad54:	4b18      	ldr	r3, [pc, #96]	@ (800adb8 <LoraInfo_Init+0x68>)
 800ad56:	2200      	movs	r2, #0
 800ad58:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800ad5a:	4b17      	ldr	r3, [pc, #92]	@ (800adb8 <LoraInfo_Init+0x68>)
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800ad60:	4b15      	ldr	r3, [pc, #84]	@ (800adb8 <LoraInfo_Init+0x68>)
 800ad62:	2200      	movs	r2, #0
 800ad64:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800ad66:	4b14      	ldr	r3, [pc, #80]	@ (800adb8 <LoraInfo_Init+0x68>)
 800ad68:	2200      	movs	r2, #0
 800ad6a:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800ad6c:	4b12      	ldr	r3, [pc, #72]	@ (800adb8 <LoraInfo_Init+0x68>)
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	f043 0320 	orr.w	r3, r3, #32
 800ad74:	4a10      	ldr	r2, [pc, #64]	@ (800adb8 <LoraInfo_Init+0x68>)
 800ad76:	6053      	str	r3, [r2, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 800ad78:	4b0f      	ldr	r3, [pc, #60]	@ (800adb8 <LoraInfo_Init+0x68>)
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ad80:	4a0d      	ldr	r2, [pc, #52]	@ (800adb8 <LoraInfo_Init+0x68>)
 800ad82:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800ad84:	4b0c      	ldr	r3, [pc, #48]	@ (800adb8 <LoraInfo_Init+0x68>)
 800ad86:	685b      	ldr	r3, [r3, #4]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d10d      	bne.n	800ada8 <LoraInfo_Init+0x58>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800ad8c:	4b0b      	ldr	r3, [pc, #44]	@ (800adbc <LoraInfo_Init+0x6c>)
 800ad8e:	2200      	movs	r2, #0
 800ad90:	2100      	movs	r1, #0
 800ad92:	2000      	movs	r0, #0
 800ad94:	f011 fc46 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800ad98:	bf00      	nop
 800ad9a:	f011 fc31 	bl	801c600 <UTIL_ADV_TRACE_IsBufferEmpty>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	2b01      	cmp	r3, #1
 800ada2:	d1fa      	bne.n	800ad9a <LoraInfo_Init+0x4a>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800ada4:	bf00      	nop
 800ada6:	e7fd      	b.n	800ada4 <LoraInfo_Init+0x54>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800ada8:	4b03      	ldr	r3, [pc, #12]	@ (800adb8 <LoraInfo_Init+0x68>)
 800adaa:	2200      	movs	r2, #0
 800adac:	60da      	str	r2, [r3, #12]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 800adae:	4b02      	ldr	r3, [pc, #8]	@ (800adb8 <LoraInfo_Init+0x68>)
 800adb0:	2201      	movs	r2, #1
 800adb2:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800adb4:	bf00      	nop
 800adb6:	bd80      	pop	{r7, pc}
 800adb8:	200005ac 	.word	0x200005ac
 800adbc:	0801d0ec 	.word	0x0801d0ec

0800adc0 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800adc0:	b480      	push	{r7}
 800adc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800adc4:	4b02      	ldr	r3, [pc, #8]	@ (800add0 <LoraInfo_GetPtr+0x10>)
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	46bd      	mov	sp, r7
 800adca:	bc80      	pop	{r7}
 800adcc:	4770      	bx	lr
 800adce:	bf00      	nop
 800add0:	200005ac 	.word	0x200005ac

0800add4 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800add8:	f7f7 ffcf 	bl	8002d7a <BSP_RADIO_Init>
 800addc:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800adde:	4618      	mov	r0, r3
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800ade2:	b580      	push	{r7, lr}
 800ade4:	b082      	sub	sp, #8
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	4603      	mov	r3, r0
 800adea:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800adec:	79fb      	ldrb	r3, [r7, #7]
 800adee:	4618      	mov	r0, r3
 800adf0:	f7f8 f806 	bl	8002e00 <BSP_RADIO_ConfigRFSwitch>
 800adf4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3708      	adds	r7, #8
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}

0800adfe <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800adfe:	b580      	push	{r7, lr}
 800ae00:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800ae02:	f7f8 f863 	bl	8002ecc <BSP_RADIO_GetTxConfig>
 800ae06:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	bd80      	pop	{r7, pc}

0800ae0c <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800ae10:	f7f8 f863 	bl	8002eda <BSP_RADIO_IsTCXO>
 800ae14:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	bd80      	pop	{r7, pc}

0800ae1a <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800ae1a:	b580      	push	{r7, lr}
 800ae1c:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800ae1e:	f7f8 f863 	bl	8002ee8 <BSP_RADIO_IsDCDC>
 800ae22:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b082      	sub	sp, #8
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	4603      	mov	r3, r0
 800ae30:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800ae32:	79fb      	ldrb	r3, [r7, #7]
 800ae34:	4618      	mov	r0, r3
 800ae36:	f7f8 f85e 	bl	8002ef6 <BSP_RADIO_GetRFOMaxPowerConfig>
 800ae3a:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3708      	adds	r7, #8
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b082      	sub	sp, #8
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	33f1      	adds	r3, #241	@ 0xf1
 800ae50:	2210      	movs	r2, #16
 800ae52:	2100      	movs	r1, #0
 800ae54:	4618      	mov	r0, r3
 800ae56:	f00d fdff 	bl	8018a58 <memset1>
    ctx->M_n = 0;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	22f0      	movs	r2, #240	@ 0xf0
 800ae66:	2100      	movs	r1, #0
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f00d fdf5 	bl	8018a58 <memset1>
}
 800ae6e:	bf00      	nop
 800ae70:	3708      	adds	r7, #8
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}

0800ae76 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800ae76:	b580      	push	{r7, lr}
 800ae78:	b082      	sub	sp, #8
 800ae7a:	af00      	add	r7, sp, #0
 800ae7c:	6078      	str	r0, [r7, #4]
 800ae7e:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	461a      	mov	r2, r3
 800ae84:	2110      	movs	r1, #16
 800ae86:	6838      	ldr	r0, [r7, #0]
 800ae88:	f000 fe5c 	bl	800bb44 <lorawan_aes_set_key>
}
 800ae8c:	bf00      	nop
 800ae8e:	3708      	adds	r7, #8
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b08c      	sub	sp, #48	@ 0x30
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	60f8      	str	r0, [r7, #12]
 800ae9c:	60b9      	str	r1, [r7, #8]
 800ae9e:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	f000 80a1 	beq.w	800afee <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800aeb2:	f1c3 0310 	rsb	r3, r3, #16
 800aeb6:	687a      	ldr	r2, [r7, #4]
 800aeb8:	4293      	cmp	r3, r2
 800aeba:	bf28      	it	cs
 800aebc:	4613      	movcs	r3, r2
 800aebe:	627b      	str	r3, [r7, #36]	@ 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f203 1201 	addw	r2, r3, #257	@ 0x101
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800aecc:	4413      	add	r3, r2
 800aece:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aed0:	b292      	uxth	r2, r2
 800aed2:	68b9      	ldr	r1, [r7, #8]
 800aed4:	4618      	mov	r0, r3
 800aed6:	f00d fd84 	bl	80189e2 <memcpy1>
        ctx->M_n += mlen;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800aee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aee2:	441a      	add	r2, r3
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800aef0:	2b0f      	cmp	r3, #15
 800aef2:	f240 808d 	bls.w	800b010 <AES_CMAC_Update+0x17c>
 800aef6:	687a      	ldr	r2, [r7, #4]
 800aef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aefa:	429a      	cmp	r2, r3
 800aefc:	f000 8088 	beq.w	800b010 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800af00:	2300      	movs	r3, #0
 800af02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800af04:	e015      	b.n	800af32 <AES_CMAC_Update+0x9e>
 800af06:	68fa      	ldr	r2, [r7, #12]
 800af08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af0a:	4413      	add	r3, r2
 800af0c:	33f1      	adds	r3, #241	@ 0xf1
 800af0e:	781a      	ldrb	r2, [r3, #0]
 800af10:	68f9      	ldr	r1, [r7, #12]
 800af12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af14:	440b      	add	r3, r1
 800af16:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800af1a:	781b      	ldrb	r3, [r3, #0]
 800af1c:	4053      	eors	r3, r2
 800af1e:	b2d9      	uxtb	r1, r3
 800af20:	68fa      	ldr	r2, [r7, #12]
 800af22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af24:	4413      	add	r3, r2
 800af26:	33f1      	adds	r3, #241	@ 0xf1
 800af28:	460a      	mov	r2, r1
 800af2a:	701a      	strb	r2, [r3, #0]
 800af2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af2e:	3301      	adds	r3, #1
 800af30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800af32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af34:	2b0f      	cmp	r3, #15
 800af36:	dde6      	ble.n	800af06 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800af3e:	f107 0314 	add.w	r3, r7, #20
 800af42:	2210      	movs	r2, #16
 800af44:	4618      	mov	r0, r3
 800af46:	f00d fd4c 	bl	80189e2 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800af4a:	68fa      	ldr	r2, [r7, #12]
 800af4c:	f107 0114 	add.w	r1, r7, #20
 800af50:	f107 0314 	add.w	r3, r7, #20
 800af54:	4618      	mov	r0, r3
 800af56:	f000 fed3 	bl	800bd00 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	33f1      	adds	r3, #241	@ 0xf1
 800af5e:	f107 0114 	add.w	r1, r7, #20
 800af62:	2210      	movs	r2, #16
 800af64:	4618      	mov	r0, r3
 800af66:	f00d fd3c 	bl	80189e2 <memcpy1>

        data += mlen;
 800af6a:	68ba      	ldr	r2, [r7, #8]
 800af6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af6e:	4413      	add	r3, r2
 800af70:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800af72:	687a      	ldr	r2, [r7, #4]
 800af74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af76:	1ad3      	subs	r3, r2, r3
 800af78:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800af7a:	e038      	b.n	800afee <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800af7c:	2300      	movs	r3, #0
 800af7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800af80:	e013      	b.n	800afaa <AES_CMAC_Update+0x116>
 800af82:	68fa      	ldr	r2, [r7, #12]
 800af84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af86:	4413      	add	r3, r2
 800af88:	33f1      	adds	r3, #241	@ 0xf1
 800af8a:	781a      	ldrb	r2, [r3, #0]
 800af8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af8e:	68b9      	ldr	r1, [r7, #8]
 800af90:	440b      	add	r3, r1
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	4053      	eors	r3, r2
 800af96:	b2d9      	uxtb	r1, r3
 800af98:	68fa      	ldr	r2, [r7, #12]
 800af9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af9c:	4413      	add	r3, r2
 800af9e:	33f1      	adds	r3, #241	@ 0xf1
 800afa0:	460a      	mov	r2, r1
 800afa2:	701a      	strb	r2, [r3, #0]
 800afa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afa6:	3301      	adds	r3, #1
 800afa8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800afaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afac:	2b0f      	cmp	r3, #15
 800afae:	dde8      	ble.n	800af82 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800afb6:	f107 0314 	add.w	r3, r7, #20
 800afba:	2210      	movs	r2, #16
 800afbc:	4618      	mov	r0, r3
 800afbe:	f00d fd10 	bl	80189e2 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800afc2:	68fa      	ldr	r2, [r7, #12]
 800afc4:	f107 0114 	add.w	r1, r7, #20
 800afc8:	f107 0314 	add.w	r3, r7, #20
 800afcc:	4618      	mov	r0, r3
 800afce:	f000 fe97 	bl	800bd00 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	33f1      	adds	r3, #241	@ 0xf1
 800afd6:	f107 0114 	add.w	r1, r7, #20
 800afda:	2210      	movs	r2, #16
 800afdc:	4618      	mov	r0, r3
 800afde:	f00d fd00 	bl	80189e2 <memcpy1>

        data += 16;
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	3310      	adds	r3, #16
 800afe6:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	3b10      	subs	r3, #16
 800afec:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2b10      	cmp	r3, #16
 800aff2:	d8c3      	bhi.n	800af7c <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800affa:	687a      	ldr	r2, [r7, #4]
 800affc:	b292      	uxth	r2, r2
 800affe:	68b9      	ldr	r1, [r7, #8]
 800b000:	4618      	mov	r0, r3
 800b002:	f00d fcee 	bl	80189e2 <memcpy1>
    ctx->M_n = len;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	687a      	ldr	r2, [r7, #4]
 800b00a:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800b00e:	e000      	b.n	800b012 <AES_CMAC_Update+0x17e>
            return;
 800b010:	bf00      	nop
}
 800b012:	3730      	adds	r7, #48	@ 0x30
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}

0800b018 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b092      	sub	sp, #72	@ 0x48
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
 800b020:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800b022:	f107 031c 	add.w	r3, r7, #28
 800b026:	2210      	movs	r2, #16
 800b028:	2100      	movs	r1, #0
 800b02a:	4618      	mov	r0, r3
 800b02c:	f00d fd14 	bl	8018a58 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800b030:	683a      	ldr	r2, [r7, #0]
 800b032:	f107 011c 	add.w	r1, r7, #28
 800b036:	f107 031c 	add.w	r3, r7, #28
 800b03a:	4618      	mov	r0, r3
 800b03c:	f000 fe60 	bl	800bd00 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800b040:	7f3b      	ldrb	r3, [r7, #28]
 800b042:	b25b      	sxtb	r3, r3
 800b044:	2b00      	cmp	r3, #0
 800b046:	da30      	bge.n	800b0aa <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800b048:	2300      	movs	r3, #0
 800b04a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b04c:	e01b      	b.n	800b086 <AES_CMAC_Final+0x6e>
 800b04e:	f107 021c 	add.w	r2, r7, #28
 800b052:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b054:	4413      	add	r3, r2
 800b056:	781b      	ldrb	r3, [r3, #0]
 800b058:	005b      	lsls	r3, r3, #1
 800b05a:	b25a      	sxtb	r2, r3
 800b05c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b05e:	3301      	adds	r3, #1
 800b060:	3348      	adds	r3, #72	@ 0x48
 800b062:	443b      	add	r3, r7
 800b064:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b068:	09db      	lsrs	r3, r3, #7
 800b06a:	b2db      	uxtb	r3, r3
 800b06c:	b25b      	sxtb	r3, r3
 800b06e:	4313      	orrs	r3, r2
 800b070:	b25b      	sxtb	r3, r3
 800b072:	b2d9      	uxtb	r1, r3
 800b074:	f107 021c 	add.w	r2, r7, #28
 800b078:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b07a:	4413      	add	r3, r2
 800b07c:	460a      	mov	r2, r1
 800b07e:	701a      	strb	r2, [r3, #0]
 800b080:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b082:	3301      	adds	r3, #1
 800b084:	647b      	str	r3, [r7, #68]	@ 0x44
 800b086:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b088:	2b0e      	cmp	r3, #14
 800b08a:	dde0      	ble.n	800b04e <AES_CMAC_Final+0x36>
 800b08c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b090:	005b      	lsls	r3, r3, #1
 800b092:	b2db      	uxtb	r3, r3
 800b094:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        K[15] ^= 0x87;
 800b098:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b09c:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800b0a0:	43db      	mvns	r3, r3
 800b0a2:	b2db      	uxtb	r3, r3
 800b0a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0a8:	e027      	b.n	800b0fa <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	643b      	str	r3, [r7, #64]	@ 0x40
 800b0ae:	e01b      	b.n	800b0e8 <AES_CMAC_Final+0xd0>
 800b0b0:	f107 021c 	add.w	r2, r7, #28
 800b0b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0b6:	4413      	add	r3, r2
 800b0b8:	781b      	ldrb	r3, [r3, #0]
 800b0ba:	005b      	lsls	r3, r3, #1
 800b0bc:	b25a      	sxtb	r2, r3
 800b0be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0c0:	3301      	adds	r3, #1
 800b0c2:	3348      	adds	r3, #72	@ 0x48
 800b0c4:	443b      	add	r3, r7
 800b0c6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b0ca:	09db      	lsrs	r3, r3, #7
 800b0cc:	b2db      	uxtb	r3, r3
 800b0ce:	b25b      	sxtb	r3, r3
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	b25b      	sxtb	r3, r3
 800b0d4:	b2d9      	uxtb	r1, r3
 800b0d6:	f107 021c 	add.w	r2, r7, #28
 800b0da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0dc:	4413      	add	r3, r2
 800b0de:	460a      	mov	r2, r1
 800b0e0:	701a      	strb	r2, [r3, #0]
 800b0e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0e4:	3301      	adds	r3, #1
 800b0e6:	643b      	str	r3, [r7, #64]	@ 0x40
 800b0e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0ea:	2b0e      	cmp	r3, #14
 800b0ec:	dde0      	ble.n	800b0b0 <AES_CMAC_Final+0x98>
 800b0ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b0f2:	005b      	lsls	r3, r3, #1
 800b0f4:	b2db      	uxtb	r3, r3
 800b0f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if( ctx->M_n == 16 )
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b100:	2b10      	cmp	r3, #16
 800b102:	d11d      	bne.n	800b140 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800b104:	2300      	movs	r3, #0
 800b106:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b108:	e016      	b.n	800b138 <AES_CMAC_Final+0x120>
 800b10a:	683a      	ldr	r2, [r7, #0]
 800b10c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b10e:	4413      	add	r3, r2
 800b110:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b114:	781a      	ldrb	r2, [r3, #0]
 800b116:	f107 011c 	add.w	r1, r7, #28
 800b11a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b11c:	440b      	add	r3, r1
 800b11e:	781b      	ldrb	r3, [r3, #0]
 800b120:	4053      	eors	r3, r2
 800b122:	b2d9      	uxtb	r1, r3
 800b124:	683a      	ldr	r2, [r7, #0]
 800b126:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b128:	4413      	add	r3, r2
 800b12a:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b12e:	460a      	mov	r2, r1
 800b130:	701a      	strb	r2, [r3, #0]
 800b132:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b134:	3301      	adds	r3, #1
 800b136:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b138:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b13a:	2b0f      	cmp	r3, #15
 800b13c:	dde5      	ble.n	800b10a <AES_CMAC_Final+0xf2>
 800b13e:	e096      	b.n	800b26e <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800b140:	7f3b      	ldrb	r3, [r7, #28]
 800b142:	b25b      	sxtb	r3, r3
 800b144:	2b00      	cmp	r3, #0
 800b146:	da30      	bge.n	800b1aa <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800b148:	2300      	movs	r3, #0
 800b14a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b14c:	e01b      	b.n	800b186 <AES_CMAC_Final+0x16e>
 800b14e:	f107 021c 	add.w	r2, r7, #28
 800b152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b154:	4413      	add	r3, r2
 800b156:	781b      	ldrb	r3, [r3, #0]
 800b158:	005b      	lsls	r3, r3, #1
 800b15a:	b25a      	sxtb	r2, r3
 800b15c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b15e:	3301      	adds	r3, #1
 800b160:	3348      	adds	r3, #72	@ 0x48
 800b162:	443b      	add	r3, r7
 800b164:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b168:	09db      	lsrs	r3, r3, #7
 800b16a:	b2db      	uxtb	r3, r3
 800b16c:	b25b      	sxtb	r3, r3
 800b16e:	4313      	orrs	r3, r2
 800b170:	b25b      	sxtb	r3, r3
 800b172:	b2d9      	uxtb	r1, r3
 800b174:	f107 021c 	add.w	r2, r7, #28
 800b178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b17a:	4413      	add	r3, r2
 800b17c:	460a      	mov	r2, r1
 800b17e:	701a      	strb	r2, [r3, #0]
 800b180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b182:	3301      	adds	r3, #1
 800b184:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b188:	2b0e      	cmp	r3, #14
 800b18a:	dde0      	ble.n	800b14e <AES_CMAC_Final+0x136>
 800b18c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b190:	005b      	lsls	r3, r3, #1
 800b192:	b2db      	uxtb	r3, r3
 800b194:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            K[15] ^= 0x87;
 800b198:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b19c:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800b1a0:	43db      	mvns	r3, r3
 800b1a2:	b2db      	uxtb	r3, r3
 800b1a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1a8:	e027      	b.n	800b1fa <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1ae:	e01b      	b.n	800b1e8 <AES_CMAC_Final+0x1d0>
 800b1b0:	f107 021c 	add.w	r2, r7, #28
 800b1b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1b6:	4413      	add	r3, r2
 800b1b8:	781b      	ldrb	r3, [r3, #0]
 800b1ba:	005b      	lsls	r3, r3, #1
 800b1bc:	b25a      	sxtb	r2, r3
 800b1be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1c0:	3301      	adds	r3, #1
 800b1c2:	3348      	adds	r3, #72	@ 0x48
 800b1c4:	443b      	add	r3, r7
 800b1c6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b1ca:	09db      	lsrs	r3, r3, #7
 800b1cc:	b2db      	uxtb	r3, r3
 800b1ce:	b25b      	sxtb	r3, r3
 800b1d0:	4313      	orrs	r3, r2
 800b1d2:	b25b      	sxtb	r3, r3
 800b1d4:	b2d9      	uxtb	r1, r3
 800b1d6:	f107 021c 	add.w	r2, r7, #28
 800b1da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1dc:	4413      	add	r3, r2
 800b1de:	460a      	mov	r2, r1
 800b1e0:	701a      	strb	r2, [r3, #0]
 800b1e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1e4:	3301      	adds	r3, #1
 800b1e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1ea:	2b0e      	cmp	r3, #14
 800b1ec:	dde0      	ble.n	800b1b0 <AES_CMAC_Final+0x198>
 800b1ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b1f2:	005b      	lsls	r3, r3, #1
 800b1f4:	b2db      	uxtb	r3, r3
 800b1f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b200:	683a      	ldr	r2, [r7, #0]
 800b202:	4413      	add	r3, r2
 800b204:	2280      	movs	r2, #128	@ 0x80
 800b206:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800b20a:	e007      	b.n	800b21c <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b212:	683a      	ldr	r2, [r7, #0]
 800b214:	4413      	add	r3, r2
 800b216:	2200      	movs	r2, #0
 800b218:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b222:	1c5a      	adds	r2, r3, #1
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b230:	2b0f      	cmp	r3, #15
 800b232:	d9eb      	bls.n	800b20c <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800b234:	2300      	movs	r3, #0
 800b236:	633b      	str	r3, [r7, #48]	@ 0x30
 800b238:	e016      	b.n	800b268 <AES_CMAC_Final+0x250>
 800b23a:	683a      	ldr	r2, [r7, #0]
 800b23c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b23e:	4413      	add	r3, r2
 800b240:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b244:	781a      	ldrb	r2, [r3, #0]
 800b246:	f107 011c 	add.w	r1, r7, #28
 800b24a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b24c:	440b      	add	r3, r1
 800b24e:	781b      	ldrb	r3, [r3, #0]
 800b250:	4053      	eors	r3, r2
 800b252:	b2d9      	uxtb	r1, r3
 800b254:	683a      	ldr	r2, [r7, #0]
 800b256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b258:	4413      	add	r3, r2
 800b25a:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b25e:	460a      	mov	r2, r1
 800b260:	701a      	strb	r2, [r3, #0]
 800b262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b264:	3301      	adds	r3, #1
 800b266:	633b      	str	r3, [r7, #48]	@ 0x30
 800b268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b26a:	2b0f      	cmp	r3, #15
 800b26c:	dde5      	ble.n	800b23a <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800b26e:	2300      	movs	r3, #0
 800b270:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b272:	e015      	b.n	800b2a0 <AES_CMAC_Final+0x288>
 800b274:	683a      	ldr	r2, [r7, #0]
 800b276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b278:	4413      	add	r3, r2
 800b27a:	33f1      	adds	r3, #241	@ 0xf1
 800b27c:	781a      	ldrb	r2, [r3, #0]
 800b27e:	6839      	ldr	r1, [r7, #0]
 800b280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b282:	440b      	add	r3, r1
 800b284:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b288:	781b      	ldrb	r3, [r3, #0]
 800b28a:	4053      	eors	r3, r2
 800b28c:	b2d9      	uxtb	r1, r3
 800b28e:	683a      	ldr	r2, [r7, #0]
 800b290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b292:	4413      	add	r3, r2
 800b294:	33f1      	adds	r3, #241	@ 0xf1
 800b296:	460a      	mov	r2, r1
 800b298:	701a      	strb	r2, [r3, #0]
 800b29a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b29c:	3301      	adds	r3, #1
 800b29e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b2a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2a2:	2b0f      	cmp	r3, #15
 800b2a4:	dde6      	ble.n	800b274 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800b2ac:	f107 030c 	add.w	r3, r7, #12
 800b2b0:	2210      	movs	r2, #16
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f00d fb95 	bl	80189e2 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800b2b8:	683a      	ldr	r2, [r7, #0]
 800b2ba:	f107 030c 	add.w	r3, r7, #12
 800b2be:	6879      	ldr	r1, [r7, #4]
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f000 fd1d 	bl	800bd00 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800b2c6:	f107 031c 	add.w	r3, r7, #28
 800b2ca:	2210      	movs	r2, #16
 800b2cc:	2100      	movs	r1, #0
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f00d fbc2 	bl	8018a58 <memset1>
}
 800b2d4:	bf00      	nop
 800b2d6:	3748      	adds	r7, #72	@ 0x48
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}

0800b2dc <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b083      	sub	sp, #12
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
 800b2e4:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	781a      	ldrb	r2, [r3, #0]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	683a      	ldr	r2, [r7, #0]
 800b2f4:	7852      	ldrb	r2, [r2, #1]
 800b2f6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	3302      	adds	r3, #2
 800b2fc:	683a      	ldr	r2, [r7, #0]
 800b2fe:	7892      	ldrb	r2, [r2, #2]
 800b300:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	3303      	adds	r3, #3
 800b306:	683a      	ldr	r2, [r7, #0]
 800b308:	78d2      	ldrb	r2, [r2, #3]
 800b30a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	3304      	adds	r3, #4
 800b310:	683a      	ldr	r2, [r7, #0]
 800b312:	7912      	ldrb	r2, [r2, #4]
 800b314:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	3305      	adds	r3, #5
 800b31a:	683a      	ldr	r2, [r7, #0]
 800b31c:	7952      	ldrb	r2, [r2, #5]
 800b31e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	3306      	adds	r3, #6
 800b324:	683a      	ldr	r2, [r7, #0]
 800b326:	7992      	ldrb	r2, [r2, #6]
 800b328:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	3307      	adds	r3, #7
 800b32e:	683a      	ldr	r2, [r7, #0]
 800b330:	79d2      	ldrb	r2, [r2, #7]
 800b332:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	3308      	adds	r3, #8
 800b338:	683a      	ldr	r2, [r7, #0]
 800b33a:	7a12      	ldrb	r2, [r2, #8]
 800b33c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	3309      	adds	r3, #9
 800b342:	683a      	ldr	r2, [r7, #0]
 800b344:	7a52      	ldrb	r2, [r2, #9]
 800b346:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	330a      	adds	r3, #10
 800b34c:	683a      	ldr	r2, [r7, #0]
 800b34e:	7a92      	ldrb	r2, [r2, #10]
 800b350:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	330b      	adds	r3, #11
 800b356:	683a      	ldr	r2, [r7, #0]
 800b358:	7ad2      	ldrb	r2, [r2, #11]
 800b35a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	330c      	adds	r3, #12
 800b360:	683a      	ldr	r2, [r7, #0]
 800b362:	7b12      	ldrb	r2, [r2, #12]
 800b364:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	330d      	adds	r3, #13
 800b36a:	683a      	ldr	r2, [r7, #0]
 800b36c:	7b52      	ldrb	r2, [r2, #13]
 800b36e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	330e      	adds	r3, #14
 800b374:	683a      	ldr	r2, [r7, #0]
 800b376:	7b92      	ldrb	r2, [r2, #14]
 800b378:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	330f      	adds	r3, #15
 800b37e:	683a      	ldr	r2, [r7, #0]
 800b380:	7bd2      	ldrb	r2, [r2, #15]
 800b382:	701a      	strb	r2, [r3, #0]
#endif
}
 800b384:	bf00      	nop
 800b386:	370c      	adds	r7, #12
 800b388:	46bd      	mov	sp, r7
 800b38a:	bc80      	pop	{r7}
 800b38c:	4770      	bx	lr

0800b38e <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800b38e:	b480      	push	{r7}
 800b390:	b085      	sub	sp, #20
 800b392:	af00      	add	r7, sp, #0
 800b394:	60f8      	str	r0, [r7, #12]
 800b396:	60b9      	str	r1, [r7, #8]
 800b398:	4613      	mov	r3, r2
 800b39a:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800b39c:	e007      	b.n	800b3ae <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800b39e:	68ba      	ldr	r2, [r7, #8]
 800b3a0:	1c53      	adds	r3, r2, #1
 800b3a2:	60bb      	str	r3, [r7, #8]
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	1c59      	adds	r1, r3, #1
 800b3a8:	60f9      	str	r1, [r7, #12]
 800b3aa:	7812      	ldrb	r2, [r2, #0]
 800b3ac:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800b3ae:	79fb      	ldrb	r3, [r7, #7]
 800b3b0:	1e5a      	subs	r2, r3, #1
 800b3b2:	71fa      	strb	r2, [r7, #7]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d1f2      	bne.n	800b39e <copy_block_nn+0x10>
}
 800b3b8:	bf00      	nop
 800b3ba:	bf00      	nop
 800b3bc:	3714      	adds	r7, #20
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bc80      	pop	{r7}
 800b3c2:	4770      	bx	lr

0800b3c4 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b083      	sub	sp, #12
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
 800b3cc:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	781a      	ldrb	r2, [r3, #0]
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	781b      	ldrb	r3, [r3, #0]
 800b3d6:	4053      	eors	r3, r2
 800b3d8:	b2da      	uxtb	r2, r3
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	7819      	ldrb	r1, [r3, #0]
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	3301      	adds	r3, #1
 800b3e8:	781a      	ldrb	r2, [r3, #0]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	3301      	adds	r3, #1
 800b3ee:	404a      	eors	r2, r1
 800b3f0:	b2d2      	uxtb	r2, r2
 800b3f2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	3302      	adds	r3, #2
 800b3f8:	7819      	ldrb	r1, [r3, #0]
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	3302      	adds	r3, #2
 800b3fe:	781a      	ldrb	r2, [r3, #0]
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	3302      	adds	r3, #2
 800b404:	404a      	eors	r2, r1
 800b406:	b2d2      	uxtb	r2, r2
 800b408:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	3303      	adds	r3, #3
 800b40e:	7819      	ldrb	r1, [r3, #0]
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	3303      	adds	r3, #3
 800b414:	781a      	ldrb	r2, [r3, #0]
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	3303      	adds	r3, #3
 800b41a:	404a      	eors	r2, r1
 800b41c:	b2d2      	uxtb	r2, r2
 800b41e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	3304      	adds	r3, #4
 800b424:	7819      	ldrb	r1, [r3, #0]
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	3304      	adds	r3, #4
 800b42a:	781a      	ldrb	r2, [r3, #0]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	3304      	adds	r3, #4
 800b430:	404a      	eors	r2, r1
 800b432:	b2d2      	uxtb	r2, r2
 800b434:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	3305      	adds	r3, #5
 800b43a:	7819      	ldrb	r1, [r3, #0]
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	3305      	adds	r3, #5
 800b440:	781a      	ldrb	r2, [r3, #0]
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	3305      	adds	r3, #5
 800b446:	404a      	eors	r2, r1
 800b448:	b2d2      	uxtb	r2, r2
 800b44a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	3306      	adds	r3, #6
 800b450:	7819      	ldrb	r1, [r3, #0]
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	3306      	adds	r3, #6
 800b456:	781a      	ldrb	r2, [r3, #0]
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	3306      	adds	r3, #6
 800b45c:	404a      	eors	r2, r1
 800b45e:	b2d2      	uxtb	r2, r2
 800b460:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	3307      	adds	r3, #7
 800b466:	7819      	ldrb	r1, [r3, #0]
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	3307      	adds	r3, #7
 800b46c:	781a      	ldrb	r2, [r3, #0]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	3307      	adds	r3, #7
 800b472:	404a      	eors	r2, r1
 800b474:	b2d2      	uxtb	r2, r2
 800b476:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	3308      	adds	r3, #8
 800b47c:	7819      	ldrb	r1, [r3, #0]
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	3308      	adds	r3, #8
 800b482:	781a      	ldrb	r2, [r3, #0]
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	3308      	adds	r3, #8
 800b488:	404a      	eors	r2, r1
 800b48a:	b2d2      	uxtb	r2, r2
 800b48c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	3309      	adds	r3, #9
 800b492:	7819      	ldrb	r1, [r3, #0]
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	3309      	adds	r3, #9
 800b498:	781a      	ldrb	r2, [r3, #0]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	3309      	adds	r3, #9
 800b49e:	404a      	eors	r2, r1
 800b4a0:	b2d2      	uxtb	r2, r2
 800b4a2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	330a      	adds	r3, #10
 800b4a8:	7819      	ldrb	r1, [r3, #0]
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	330a      	adds	r3, #10
 800b4ae:	781a      	ldrb	r2, [r3, #0]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	330a      	adds	r3, #10
 800b4b4:	404a      	eors	r2, r1
 800b4b6:	b2d2      	uxtb	r2, r2
 800b4b8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	330b      	adds	r3, #11
 800b4be:	7819      	ldrb	r1, [r3, #0]
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	330b      	adds	r3, #11
 800b4c4:	781a      	ldrb	r2, [r3, #0]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	330b      	adds	r3, #11
 800b4ca:	404a      	eors	r2, r1
 800b4cc:	b2d2      	uxtb	r2, r2
 800b4ce:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	330c      	adds	r3, #12
 800b4d4:	7819      	ldrb	r1, [r3, #0]
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	330c      	adds	r3, #12
 800b4da:	781a      	ldrb	r2, [r3, #0]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	330c      	adds	r3, #12
 800b4e0:	404a      	eors	r2, r1
 800b4e2:	b2d2      	uxtb	r2, r2
 800b4e4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	330d      	adds	r3, #13
 800b4ea:	7819      	ldrb	r1, [r3, #0]
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	330d      	adds	r3, #13
 800b4f0:	781a      	ldrb	r2, [r3, #0]
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	330d      	adds	r3, #13
 800b4f6:	404a      	eors	r2, r1
 800b4f8:	b2d2      	uxtb	r2, r2
 800b4fa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	330e      	adds	r3, #14
 800b500:	7819      	ldrb	r1, [r3, #0]
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	330e      	adds	r3, #14
 800b506:	781a      	ldrb	r2, [r3, #0]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	330e      	adds	r3, #14
 800b50c:	404a      	eors	r2, r1
 800b50e:	b2d2      	uxtb	r2, r2
 800b510:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	330f      	adds	r3, #15
 800b516:	7819      	ldrb	r1, [r3, #0]
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	330f      	adds	r3, #15
 800b51c:	781a      	ldrb	r2, [r3, #0]
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	330f      	adds	r3, #15
 800b522:	404a      	eors	r2, r1
 800b524:	b2d2      	uxtb	r2, r2
 800b526:	701a      	strb	r2, [r3, #0]
#endif
}
 800b528:	bf00      	nop
 800b52a:	370c      	adds	r7, #12
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bc80      	pop	{r7}
 800b530:	4770      	bx	lr

0800b532 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800b532:	b480      	push	{r7}
 800b534:	b085      	sub	sp, #20
 800b536:	af00      	add	r7, sp, #0
 800b538:	60f8      	str	r0, [r7, #12]
 800b53a:	60b9      	str	r1, [r7, #8]
 800b53c:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	781a      	ldrb	r2, [r3, #0]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	781b      	ldrb	r3, [r3, #0]
 800b546:	4053      	eors	r3, r2
 800b548:	b2da      	uxtb	r2, r3
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	3301      	adds	r3, #1
 800b552:	7819      	ldrb	r1, [r3, #0]
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	3301      	adds	r3, #1
 800b558:	781a      	ldrb	r2, [r3, #0]
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	3301      	adds	r3, #1
 800b55e:	404a      	eors	r2, r1
 800b560:	b2d2      	uxtb	r2, r2
 800b562:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	3302      	adds	r3, #2
 800b568:	7819      	ldrb	r1, [r3, #0]
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	3302      	adds	r3, #2
 800b56e:	781a      	ldrb	r2, [r3, #0]
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	3302      	adds	r3, #2
 800b574:	404a      	eors	r2, r1
 800b576:	b2d2      	uxtb	r2, r2
 800b578:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	3303      	adds	r3, #3
 800b57e:	7819      	ldrb	r1, [r3, #0]
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	3303      	adds	r3, #3
 800b584:	781a      	ldrb	r2, [r3, #0]
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	3303      	adds	r3, #3
 800b58a:	404a      	eors	r2, r1
 800b58c:	b2d2      	uxtb	r2, r2
 800b58e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	3304      	adds	r3, #4
 800b594:	7819      	ldrb	r1, [r3, #0]
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	3304      	adds	r3, #4
 800b59a:	781a      	ldrb	r2, [r3, #0]
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	3304      	adds	r3, #4
 800b5a0:	404a      	eors	r2, r1
 800b5a2:	b2d2      	uxtb	r2, r2
 800b5a4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	3305      	adds	r3, #5
 800b5aa:	7819      	ldrb	r1, [r3, #0]
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	3305      	adds	r3, #5
 800b5b0:	781a      	ldrb	r2, [r3, #0]
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	3305      	adds	r3, #5
 800b5b6:	404a      	eors	r2, r1
 800b5b8:	b2d2      	uxtb	r2, r2
 800b5ba:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	3306      	adds	r3, #6
 800b5c0:	7819      	ldrb	r1, [r3, #0]
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	3306      	adds	r3, #6
 800b5c6:	781a      	ldrb	r2, [r3, #0]
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	3306      	adds	r3, #6
 800b5cc:	404a      	eors	r2, r1
 800b5ce:	b2d2      	uxtb	r2, r2
 800b5d0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	3307      	adds	r3, #7
 800b5d6:	7819      	ldrb	r1, [r3, #0]
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	3307      	adds	r3, #7
 800b5dc:	781a      	ldrb	r2, [r3, #0]
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	3307      	adds	r3, #7
 800b5e2:	404a      	eors	r2, r1
 800b5e4:	b2d2      	uxtb	r2, r2
 800b5e6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	3308      	adds	r3, #8
 800b5ec:	7819      	ldrb	r1, [r3, #0]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	3308      	adds	r3, #8
 800b5f2:	781a      	ldrb	r2, [r3, #0]
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	3308      	adds	r3, #8
 800b5f8:	404a      	eors	r2, r1
 800b5fa:	b2d2      	uxtb	r2, r2
 800b5fc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	3309      	adds	r3, #9
 800b602:	7819      	ldrb	r1, [r3, #0]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	3309      	adds	r3, #9
 800b608:	781a      	ldrb	r2, [r3, #0]
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	3309      	adds	r3, #9
 800b60e:	404a      	eors	r2, r1
 800b610:	b2d2      	uxtb	r2, r2
 800b612:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	330a      	adds	r3, #10
 800b618:	7819      	ldrb	r1, [r3, #0]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	330a      	adds	r3, #10
 800b61e:	781a      	ldrb	r2, [r3, #0]
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	330a      	adds	r3, #10
 800b624:	404a      	eors	r2, r1
 800b626:	b2d2      	uxtb	r2, r2
 800b628:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	330b      	adds	r3, #11
 800b62e:	7819      	ldrb	r1, [r3, #0]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	330b      	adds	r3, #11
 800b634:	781a      	ldrb	r2, [r3, #0]
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	330b      	adds	r3, #11
 800b63a:	404a      	eors	r2, r1
 800b63c:	b2d2      	uxtb	r2, r2
 800b63e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	330c      	adds	r3, #12
 800b644:	7819      	ldrb	r1, [r3, #0]
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	330c      	adds	r3, #12
 800b64a:	781a      	ldrb	r2, [r3, #0]
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	330c      	adds	r3, #12
 800b650:	404a      	eors	r2, r1
 800b652:	b2d2      	uxtb	r2, r2
 800b654:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	330d      	adds	r3, #13
 800b65a:	7819      	ldrb	r1, [r3, #0]
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	330d      	adds	r3, #13
 800b660:	781a      	ldrb	r2, [r3, #0]
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	330d      	adds	r3, #13
 800b666:	404a      	eors	r2, r1
 800b668:	b2d2      	uxtb	r2, r2
 800b66a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	330e      	adds	r3, #14
 800b670:	7819      	ldrb	r1, [r3, #0]
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	330e      	adds	r3, #14
 800b676:	781a      	ldrb	r2, [r3, #0]
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	330e      	adds	r3, #14
 800b67c:	404a      	eors	r2, r1
 800b67e:	b2d2      	uxtb	r2, r2
 800b680:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	330f      	adds	r3, #15
 800b686:	7819      	ldrb	r1, [r3, #0]
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	330f      	adds	r3, #15
 800b68c:	781a      	ldrb	r2, [r3, #0]
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	330f      	adds	r3, #15
 800b692:	404a      	eors	r2, r1
 800b694:	b2d2      	uxtb	r2, r2
 800b696:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800b698:	bf00      	nop
 800b69a:	3714      	adds	r7, #20
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bc80      	pop	{r7}
 800b6a0:	4770      	bx	lr

0800b6a2 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800b6a2:	b580      	push	{r7, lr}
 800b6a4:	b082      	sub	sp, #8
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	6078      	str	r0, [r7, #4]
 800b6aa:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800b6ac:	6839      	ldr	r1, [r7, #0]
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f7ff fe88 	bl	800b3c4 <xor_block>
}
 800b6b4:	bf00      	nop
 800b6b6:	3708      	adds	r7, #8
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}

0800b6bc <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800b6bc:	b480      	push	{r7}
 800b6be:	b085      	sub	sp, #20
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	461a      	mov	r2, r3
 800b6ca:	4b48      	ldr	r3, [pc, #288]	@ (800b7ec <shift_sub_rows+0x130>)
 800b6cc:	5c9a      	ldrb	r2, [r3, r2]
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	701a      	strb	r2, [r3, #0]
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	3304      	adds	r3, #4
 800b6d6:	781b      	ldrb	r3, [r3, #0]
 800b6d8:	4619      	mov	r1, r3
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	3304      	adds	r3, #4
 800b6de:	4a43      	ldr	r2, [pc, #268]	@ (800b7ec <shift_sub_rows+0x130>)
 800b6e0:	5c52      	ldrb	r2, [r2, r1]
 800b6e2:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	3308      	adds	r3, #8
 800b6e8:	781b      	ldrb	r3, [r3, #0]
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	3308      	adds	r3, #8
 800b6f0:	4a3e      	ldr	r2, [pc, #248]	@ (800b7ec <shift_sub_rows+0x130>)
 800b6f2:	5c52      	ldrb	r2, [r2, r1]
 800b6f4:	701a      	strb	r2, [r3, #0]
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	330c      	adds	r3, #12
 800b6fa:	781b      	ldrb	r3, [r3, #0]
 800b6fc:	4619      	mov	r1, r3
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	330c      	adds	r3, #12
 800b702:	4a3a      	ldr	r2, [pc, #232]	@ (800b7ec <shift_sub_rows+0x130>)
 800b704:	5c52      	ldrb	r2, [r2, r1]
 800b706:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	785b      	ldrb	r3, [r3, #1]
 800b70c:	73fb      	strb	r3, [r7, #15]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	3305      	adds	r3, #5
 800b712:	781b      	ldrb	r3, [r3, #0]
 800b714:	4619      	mov	r1, r3
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	3301      	adds	r3, #1
 800b71a:	4a34      	ldr	r2, [pc, #208]	@ (800b7ec <shift_sub_rows+0x130>)
 800b71c:	5c52      	ldrb	r2, [r2, r1]
 800b71e:	701a      	strb	r2, [r3, #0]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	3309      	adds	r3, #9
 800b724:	781b      	ldrb	r3, [r3, #0]
 800b726:	4619      	mov	r1, r3
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	3305      	adds	r3, #5
 800b72c:	4a2f      	ldr	r2, [pc, #188]	@ (800b7ec <shift_sub_rows+0x130>)
 800b72e:	5c52      	ldrb	r2, [r2, r1]
 800b730:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	330d      	adds	r3, #13
 800b736:	781b      	ldrb	r3, [r3, #0]
 800b738:	4619      	mov	r1, r3
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	3309      	adds	r3, #9
 800b73e:	4a2b      	ldr	r2, [pc, #172]	@ (800b7ec <shift_sub_rows+0x130>)
 800b740:	5c52      	ldrb	r2, [r2, r1]
 800b742:	701a      	strb	r2, [r3, #0]
 800b744:	7bfa      	ldrb	r2, [r7, #15]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	330d      	adds	r3, #13
 800b74a:	4928      	ldr	r1, [pc, #160]	@ (800b7ec <shift_sub_rows+0x130>)
 800b74c:	5c8a      	ldrb	r2, [r1, r2]
 800b74e:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	789b      	ldrb	r3, [r3, #2]
 800b754:	73fb      	strb	r3, [r7, #15]
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	330a      	adds	r3, #10
 800b75a:	781b      	ldrb	r3, [r3, #0]
 800b75c:	4619      	mov	r1, r3
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	3302      	adds	r3, #2
 800b762:	4a22      	ldr	r2, [pc, #136]	@ (800b7ec <shift_sub_rows+0x130>)
 800b764:	5c52      	ldrb	r2, [r2, r1]
 800b766:	701a      	strb	r2, [r3, #0]
 800b768:	7bfa      	ldrb	r2, [r7, #15]
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	330a      	adds	r3, #10
 800b76e:	491f      	ldr	r1, [pc, #124]	@ (800b7ec <shift_sub_rows+0x130>)
 800b770:	5c8a      	ldrb	r2, [r1, r2]
 800b772:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	799b      	ldrb	r3, [r3, #6]
 800b778:	73fb      	strb	r3, [r7, #15]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	330e      	adds	r3, #14
 800b77e:	781b      	ldrb	r3, [r3, #0]
 800b780:	4619      	mov	r1, r3
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	3306      	adds	r3, #6
 800b786:	4a19      	ldr	r2, [pc, #100]	@ (800b7ec <shift_sub_rows+0x130>)
 800b788:	5c52      	ldrb	r2, [r2, r1]
 800b78a:	701a      	strb	r2, [r3, #0]
 800b78c:	7bfa      	ldrb	r2, [r7, #15]
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	330e      	adds	r3, #14
 800b792:	4916      	ldr	r1, [pc, #88]	@ (800b7ec <shift_sub_rows+0x130>)
 800b794:	5c8a      	ldrb	r2, [r1, r2]
 800b796:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	7bdb      	ldrb	r3, [r3, #15]
 800b79c:	73fb      	strb	r3, [r7, #15]
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	330b      	adds	r3, #11
 800b7a2:	781b      	ldrb	r3, [r3, #0]
 800b7a4:	4619      	mov	r1, r3
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	330f      	adds	r3, #15
 800b7aa:	4a10      	ldr	r2, [pc, #64]	@ (800b7ec <shift_sub_rows+0x130>)
 800b7ac:	5c52      	ldrb	r2, [r2, r1]
 800b7ae:	701a      	strb	r2, [r3, #0]
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	3307      	adds	r3, #7
 800b7b4:	781b      	ldrb	r3, [r3, #0]
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	330b      	adds	r3, #11
 800b7bc:	4a0b      	ldr	r2, [pc, #44]	@ (800b7ec <shift_sub_rows+0x130>)
 800b7be:	5c52      	ldrb	r2, [r2, r1]
 800b7c0:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	3303      	adds	r3, #3
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	3307      	adds	r3, #7
 800b7ce:	4a07      	ldr	r2, [pc, #28]	@ (800b7ec <shift_sub_rows+0x130>)
 800b7d0:	5c52      	ldrb	r2, [r2, r1]
 800b7d2:	701a      	strb	r2, [r3, #0]
 800b7d4:	7bfa      	ldrb	r2, [r7, #15]
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	3303      	adds	r3, #3
 800b7da:	4904      	ldr	r1, [pc, #16]	@ (800b7ec <shift_sub_rows+0x130>)
 800b7dc:	5c8a      	ldrb	r2, [r1, r2]
 800b7de:	701a      	strb	r2, [r3, #0]
}
 800b7e0:	bf00      	nop
 800b7e2:	3714      	adds	r7, #20
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bc80      	pop	{r7}
 800b7e8:	4770      	bx	lr
 800b7ea:	bf00      	nop
 800b7ec:	0801d630 	.word	0x0801d630

0800b7f0 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b086      	sub	sp, #24
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800b7f8:	f107 0308 	add.w	r3, r7, #8
 800b7fc:	6879      	ldr	r1, [r7, #4]
 800b7fe:	4618      	mov	r0, r3
 800b800:	f7ff fd6c 	bl	800b2dc <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800b804:	7a3b      	ldrb	r3, [r7, #8]
 800b806:	461a      	mov	r2, r3
 800b808:	4b9a      	ldr	r3, [pc, #616]	@ (800ba74 <mix_sub_columns+0x284>)
 800b80a:	5c9a      	ldrb	r2, [r3, r2]
 800b80c:	7b7b      	ldrb	r3, [r7, #13]
 800b80e:	4619      	mov	r1, r3
 800b810:	4b99      	ldr	r3, [pc, #612]	@ (800ba78 <mix_sub_columns+0x288>)
 800b812:	5c5b      	ldrb	r3, [r3, r1]
 800b814:	4053      	eors	r3, r2
 800b816:	b2da      	uxtb	r2, r3
 800b818:	7cbb      	ldrb	r3, [r7, #18]
 800b81a:	4619      	mov	r1, r3
 800b81c:	4b97      	ldr	r3, [pc, #604]	@ (800ba7c <mix_sub_columns+0x28c>)
 800b81e:	5c5b      	ldrb	r3, [r3, r1]
 800b820:	4053      	eors	r3, r2
 800b822:	b2da      	uxtb	r2, r3
 800b824:	7dfb      	ldrb	r3, [r7, #23]
 800b826:	4619      	mov	r1, r3
 800b828:	4b94      	ldr	r3, [pc, #592]	@ (800ba7c <mix_sub_columns+0x28c>)
 800b82a:	5c5b      	ldrb	r3, [r3, r1]
 800b82c:	4053      	eors	r3, r2
 800b82e:	b2da      	uxtb	r2, r3
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800b834:	7a3b      	ldrb	r3, [r7, #8]
 800b836:	461a      	mov	r2, r3
 800b838:	4b90      	ldr	r3, [pc, #576]	@ (800ba7c <mix_sub_columns+0x28c>)
 800b83a:	5c9a      	ldrb	r2, [r3, r2]
 800b83c:	7b7b      	ldrb	r3, [r7, #13]
 800b83e:	4619      	mov	r1, r3
 800b840:	4b8c      	ldr	r3, [pc, #560]	@ (800ba74 <mix_sub_columns+0x284>)
 800b842:	5c5b      	ldrb	r3, [r3, r1]
 800b844:	4053      	eors	r3, r2
 800b846:	b2da      	uxtb	r2, r3
 800b848:	7cbb      	ldrb	r3, [r7, #18]
 800b84a:	4619      	mov	r1, r3
 800b84c:	4b8a      	ldr	r3, [pc, #552]	@ (800ba78 <mix_sub_columns+0x288>)
 800b84e:	5c5b      	ldrb	r3, [r3, r1]
 800b850:	4053      	eors	r3, r2
 800b852:	b2d9      	uxtb	r1, r3
 800b854:	7dfb      	ldrb	r3, [r7, #23]
 800b856:	461a      	mov	r2, r3
 800b858:	4b88      	ldr	r3, [pc, #544]	@ (800ba7c <mix_sub_columns+0x28c>)
 800b85a:	5c9a      	ldrb	r2, [r3, r2]
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	3301      	adds	r3, #1
 800b860:	404a      	eors	r2, r1
 800b862:	b2d2      	uxtb	r2, r2
 800b864:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800b866:	7a3b      	ldrb	r3, [r7, #8]
 800b868:	461a      	mov	r2, r3
 800b86a:	4b84      	ldr	r3, [pc, #528]	@ (800ba7c <mix_sub_columns+0x28c>)
 800b86c:	5c9a      	ldrb	r2, [r3, r2]
 800b86e:	7b7b      	ldrb	r3, [r7, #13]
 800b870:	4619      	mov	r1, r3
 800b872:	4b82      	ldr	r3, [pc, #520]	@ (800ba7c <mix_sub_columns+0x28c>)
 800b874:	5c5b      	ldrb	r3, [r3, r1]
 800b876:	4053      	eors	r3, r2
 800b878:	b2da      	uxtb	r2, r3
 800b87a:	7cbb      	ldrb	r3, [r7, #18]
 800b87c:	4619      	mov	r1, r3
 800b87e:	4b7d      	ldr	r3, [pc, #500]	@ (800ba74 <mix_sub_columns+0x284>)
 800b880:	5c5b      	ldrb	r3, [r3, r1]
 800b882:	4053      	eors	r3, r2
 800b884:	b2d9      	uxtb	r1, r3
 800b886:	7dfb      	ldrb	r3, [r7, #23]
 800b888:	461a      	mov	r2, r3
 800b88a:	4b7b      	ldr	r3, [pc, #492]	@ (800ba78 <mix_sub_columns+0x288>)
 800b88c:	5c9a      	ldrb	r2, [r3, r2]
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	3302      	adds	r3, #2
 800b892:	404a      	eors	r2, r1
 800b894:	b2d2      	uxtb	r2, r2
 800b896:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800b898:	7a3b      	ldrb	r3, [r7, #8]
 800b89a:	461a      	mov	r2, r3
 800b89c:	4b76      	ldr	r3, [pc, #472]	@ (800ba78 <mix_sub_columns+0x288>)
 800b89e:	5c9a      	ldrb	r2, [r3, r2]
 800b8a0:	7b7b      	ldrb	r3, [r7, #13]
 800b8a2:	4619      	mov	r1, r3
 800b8a4:	4b75      	ldr	r3, [pc, #468]	@ (800ba7c <mix_sub_columns+0x28c>)
 800b8a6:	5c5b      	ldrb	r3, [r3, r1]
 800b8a8:	4053      	eors	r3, r2
 800b8aa:	b2da      	uxtb	r2, r3
 800b8ac:	7cbb      	ldrb	r3, [r7, #18]
 800b8ae:	4619      	mov	r1, r3
 800b8b0:	4b72      	ldr	r3, [pc, #456]	@ (800ba7c <mix_sub_columns+0x28c>)
 800b8b2:	5c5b      	ldrb	r3, [r3, r1]
 800b8b4:	4053      	eors	r3, r2
 800b8b6:	b2d9      	uxtb	r1, r3
 800b8b8:	7dfb      	ldrb	r3, [r7, #23]
 800b8ba:	461a      	mov	r2, r3
 800b8bc:	4b6d      	ldr	r3, [pc, #436]	@ (800ba74 <mix_sub_columns+0x284>)
 800b8be:	5c9a      	ldrb	r2, [r3, r2]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	3303      	adds	r3, #3
 800b8c4:	404a      	eors	r2, r1
 800b8c6:	b2d2      	uxtb	r2, r2
 800b8c8:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800b8ca:	7b3b      	ldrb	r3, [r7, #12]
 800b8cc:	461a      	mov	r2, r3
 800b8ce:	4b69      	ldr	r3, [pc, #420]	@ (800ba74 <mix_sub_columns+0x284>)
 800b8d0:	5c9a      	ldrb	r2, [r3, r2]
 800b8d2:	7c7b      	ldrb	r3, [r7, #17]
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	4b68      	ldr	r3, [pc, #416]	@ (800ba78 <mix_sub_columns+0x288>)
 800b8d8:	5c5b      	ldrb	r3, [r3, r1]
 800b8da:	4053      	eors	r3, r2
 800b8dc:	b2da      	uxtb	r2, r3
 800b8de:	7dbb      	ldrb	r3, [r7, #22]
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	4b66      	ldr	r3, [pc, #408]	@ (800ba7c <mix_sub_columns+0x28c>)
 800b8e4:	5c5b      	ldrb	r3, [r3, r1]
 800b8e6:	4053      	eors	r3, r2
 800b8e8:	b2d9      	uxtb	r1, r3
 800b8ea:	7afb      	ldrb	r3, [r7, #11]
 800b8ec:	461a      	mov	r2, r3
 800b8ee:	4b63      	ldr	r3, [pc, #396]	@ (800ba7c <mix_sub_columns+0x28c>)
 800b8f0:	5c9a      	ldrb	r2, [r3, r2]
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	3304      	adds	r3, #4
 800b8f6:	404a      	eors	r2, r1
 800b8f8:	b2d2      	uxtb	r2, r2
 800b8fa:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800b8fc:	7b3b      	ldrb	r3, [r7, #12]
 800b8fe:	461a      	mov	r2, r3
 800b900:	4b5e      	ldr	r3, [pc, #376]	@ (800ba7c <mix_sub_columns+0x28c>)
 800b902:	5c9a      	ldrb	r2, [r3, r2]
 800b904:	7c7b      	ldrb	r3, [r7, #17]
 800b906:	4619      	mov	r1, r3
 800b908:	4b5a      	ldr	r3, [pc, #360]	@ (800ba74 <mix_sub_columns+0x284>)
 800b90a:	5c5b      	ldrb	r3, [r3, r1]
 800b90c:	4053      	eors	r3, r2
 800b90e:	b2da      	uxtb	r2, r3
 800b910:	7dbb      	ldrb	r3, [r7, #22]
 800b912:	4619      	mov	r1, r3
 800b914:	4b58      	ldr	r3, [pc, #352]	@ (800ba78 <mix_sub_columns+0x288>)
 800b916:	5c5b      	ldrb	r3, [r3, r1]
 800b918:	4053      	eors	r3, r2
 800b91a:	b2d9      	uxtb	r1, r3
 800b91c:	7afb      	ldrb	r3, [r7, #11]
 800b91e:	461a      	mov	r2, r3
 800b920:	4b56      	ldr	r3, [pc, #344]	@ (800ba7c <mix_sub_columns+0x28c>)
 800b922:	5c9a      	ldrb	r2, [r3, r2]
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	3305      	adds	r3, #5
 800b928:	404a      	eors	r2, r1
 800b92a:	b2d2      	uxtb	r2, r2
 800b92c:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800b92e:	7b3b      	ldrb	r3, [r7, #12]
 800b930:	461a      	mov	r2, r3
 800b932:	4b52      	ldr	r3, [pc, #328]	@ (800ba7c <mix_sub_columns+0x28c>)
 800b934:	5c9a      	ldrb	r2, [r3, r2]
 800b936:	7c7b      	ldrb	r3, [r7, #17]
 800b938:	4619      	mov	r1, r3
 800b93a:	4b50      	ldr	r3, [pc, #320]	@ (800ba7c <mix_sub_columns+0x28c>)
 800b93c:	5c5b      	ldrb	r3, [r3, r1]
 800b93e:	4053      	eors	r3, r2
 800b940:	b2da      	uxtb	r2, r3
 800b942:	7dbb      	ldrb	r3, [r7, #22]
 800b944:	4619      	mov	r1, r3
 800b946:	4b4b      	ldr	r3, [pc, #300]	@ (800ba74 <mix_sub_columns+0x284>)
 800b948:	5c5b      	ldrb	r3, [r3, r1]
 800b94a:	4053      	eors	r3, r2
 800b94c:	b2d9      	uxtb	r1, r3
 800b94e:	7afb      	ldrb	r3, [r7, #11]
 800b950:	461a      	mov	r2, r3
 800b952:	4b49      	ldr	r3, [pc, #292]	@ (800ba78 <mix_sub_columns+0x288>)
 800b954:	5c9a      	ldrb	r2, [r3, r2]
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	3306      	adds	r3, #6
 800b95a:	404a      	eors	r2, r1
 800b95c:	b2d2      	uxtb	r2, r2
 800b95e:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800b960:	7b3b      	ldrb	r3, [r7, #12]
 800b962:	461a      	mov	r2, r3
 800b964:	4b44      	ldr	r3, [pc, #272]	@ (800ba78 <mix_sub_columns+0x288>)
 800b966:	5c9a      	ldrb	r2, [r3, r2]
 800b968:	7c7b      	ldrb	r3, [r7, #17]
 800b96a:	4619      	mov	r1, r3
 800b96c:	4b43      	ldr	r3, [pc, #268]	@ (800ba7c <mix_sub_columns+0x28c>)
 800b96e:	5c5b      	ldrb	r3, [r3, r1]
 800b970:	4053      	eors	r3, r2
 800b972:	b2da      	uxtb	r2, r3
 800b974:	7dbb      	ldrb	r3, [r7, #22]
 800b976:	4619      	mov	r1, r3
 800b978:	4b40      	ldr	r3, [pc, #256]	@ (800ba7c <mix_sub_columns+0x28c>)
 800b97a:	5c5b      	ldrb	r3, [r3, r1]
 800b97c:	4053      	eors	r3, r2
 800b97e:	b2d9      	uxtb	r1, r3
 800b980:	7afb      	ldrb	r3, [r7, #11]
 800b982:	461a      	mov	r2, r3
 800b984:	4b3b      	ldr	r3, [pc, #236]	@ (800ba74 <mix_sub_columns+0x284>)
 800b986:	5c9a      	ldrb	r2, [r3, r2]
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	3307      	adds	r3, #7
 800b98c:	404a      	eors	r2, r1
 800b98e:	b2d2      	uxtb	r2, r2
 800b990:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800b992:	7c3b      	ldrb	r3, [r7, #16]
 800b994:	461a      	mov	r2, r3
 800b996:	4b37      	ldr	r3, [pc, #220]	@ (800ba74 <mix_sub_columns+0x284>)
 800b998:	5c9a      	ldrb	r2, [r3, r2]
 800b99a:	7d7b      	ldrb	r3, [r7, #21]
 800b99c:	4619      	mov	r1, r3
 800b99e:	4b36      	ldr	r3, [pc, #216]	@ (800ba78 <mix_sub_columns+0x288>)
 800b9a0:	5c5b      	ldrb	r3, [r3, r1]
 800b9a2:	4053      	eors	r3, r2
 800b9a4:	b2da      	uxtb	r2, r3
 800b9a6:	7abb      	ldrb	r3, [r7, #10]
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	4b34      	ldr	r3, [pc, #208]	@ (800ba7c <mix_sub_columns+0x28c>)
 800b9ac:	5c5b      	ldrb	r3, [r3, r1]
 800b9ae:	4053      	eors	r3, r2
 800b9b0:	b2d9      	uxtb	r1, r3
 800b9b2:	7bfb      	ldrb	r3, [r7, #15]
 800b9b4:	461a      	mov	r2, r3
 800b9b6:	4b31      	ldr	r3, [pc, #196]	@ (800ba7c <mix_sub_columns+0x28c>)
 800b9b8:	5c9a      	ldrb	r2, [r3, r2]
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	3308      	adds	r3, #8
 800b9be:	404a      	eors	r2, r1
 800b9c0:	b2d2      	uxtb	r2, r2
 800b9c2:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800b9c4:	7c3b      	ldrb	r3, [r7, #16]
 800b9c6:	461a      	mov	r2, r3
 800b9c8:	4b2c      	ldr	r3, [pc, #176]	@ (800ba7c <mix_sub_columns+0x28c>)
 800b9ca:	5c9a      	ldrb	r2, [r3, r2]
 800b9cc:	7d7b      	ldrb	r3, [r7, #21]
 800b9ce:	4619      	mov	r1, r3
 800b9d0:	4b28      	ldr	r3, [pc, #160]	@ (800ba74 <mix_sub_columns+0x284>)
 800b9d2:	5c5b      	ldrb	r3, [r3, r1]
 800b9d4:	4053      	eors	r3, r2
 800b9d6:	b2da      	uxtb	r2, r3
 800b9d8:	7abb      	ldrb	r3, [r7, #10]
 800b9da:	4619      	mov	r1, r3
 800b9dc:	4b26      	ldr	r3, [pc, #152]	@ (800ba78 <mix_sub_columns+0x288>)
 800b9de:	5c5b      	ldrb	r3, [r3, r1]
 800b9e0:	4053      	eors	r3, r2
 800b9e2:	b2d9      	uxtb	r1, r3
 800b9e4:	7bfb      	ldrb	r3, [r7, #15]
 800b9e6:	461a      	mov	r2, r3
 800b9e8:	4b24      	ldr	r3, [pc, #144]	@ (800ba7c <mix_sub_columns+0x28c>)
 800b9ea:	5c9a      	ldrb	r2, [r3, r2]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	3309      	adds	r3, #9
 800b9f0:	404a      	eors	r2, r1
 800b9f2:	b2d2      	uxtb	r2, r2
 800b9f4:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800b9f6:	7c3b      	ldrb	r3, [r7, #16]
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	4b20      	ldr	r3, [pc, #128]	@ (800ba7c <mix_sub_columns+0x28c>)
 800b9fc:	5c9a      	ldrb	r2, [r3, r2]
 800b9fe:	7d7b      	ldrb	r3, [r7, #21]
 800ba00:	4619      	mov	r1, r3
 800ba02:	4b1e      	ldr	r3, [pc, #120]	@ (800ba7c <mix_sub_columns+0x28c>)
 800ba04:	5c5b      	ldrb	r3, [r3, r1]
 800ba06:	4053      	eors	r3, r2
 800ba08:	b2da      	uxtb	r2, r3
 800ba0a:	7abb      	ldrb	r3, [r7, #10]
 800ba0c:	4619      	mov	r1, r3
 800ba0e:	4b19      	ldr	r3, [pc, #100]	@ (800ba74 <mix_sub_columns+0x284>)
 800ba10:	5c5b      	ldrb	r3, [r3, r1]
 800ba12:	4053      	eors	r3, r2
 800ba14:	b2d9      	uxtb	r1, r3
 800ba16:	7bfb      	ldrb	r3, [r7, #15]
 800ba18:	461a      	mov	r2, r3
 800ba1a:	4b17      	ldr	r3, [pc, #92]	@ (800ba78 <mix_sub_columns+0x288>)
 800ba1c:	5c9a      	ldrb	r2, [r3, r2]
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	330a      	adds	r3, #10
 800ba22:	404a      	eors	r2, r1
 800ba24:	b2d2      	uxtb	r2, r2
 800ba26:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800ba28:	7c3b      	ldrb	r3, [r7, #16]
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	4b12      	ldr	r3, [pc, #72]	@ (800ba78 <mix_sub_columns+0x288>)
 800ba2e:	5c9a      	ldrb	r2, [r3, r2]
 800ba30:	7d7b      	ldrb	r3, [r7, #21]
 800ba32:	4619      	mov	r1, r3
 800ba34:	4b11      	ldr	r3, [pc, #68]	@ (800ba7c <mix_sub_columns+0x28c>)
 800ba36:	5c5b      	ldrb	r3, [r3, r1]
 800ba38:	4053      	eors	r3, r2
 800ba3a:	b2da      	uxtb	r2, r3
 800ba3c:	7abb      	ldrb	r3, [r7, #10]
 800ba3e:	4619      	mov	r1, r3
 800ba40:	4b0e      	ldr	r3, [pc, #56]	@ (800ba7c <mix_sub_columns+0x28c>)
 800ba42:	5c5b      	ldrb	r3, [r3, r1]
 800ba44:	4053      	eors	r3, r2
 800ba46:	b2d9      	uxtb	r1, r3
 800ba48:	7bfb      	ldrb	r3, [r7, #15]
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	4b09      	ldr	r3, [pc, #36]	@ (800ba74 <mix_sub_columns+0x284>)
 800ba4e:	5c9a      	ldrb	r2, [r3, r2]
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	330b      	adds	r3, #11
 800ba54:	404a      	eors	r2, r1
 800ba56:	b2d2      	uxtb	r2, r2
 800ba58:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800ba5a:	7d3b      	ldrb	r3, [r7, #20]
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	4b05      	ldr	r3, [pc, #20]	@ (800ba74 <mix_sub_columns+0x284>)
 800ba60:	5c9a      	ldrb	r2, [r3, r2]
 800ba62:	7a7b      	ldrb	r3, [r7, #9]
 800ba64:	4619      	mov	r1, r3
 800ba66:	4b04      	ldr	r3, [pc, #16]	@ (800ba78 <mix_sub_columns+0x288>)
 800ba68:	5c5b      	ldrb	r3, [r3, r1]
 800ba6a:	4053      	eors	r3, r2
 800ba6c:	b2da      	uxtb	r2, r3
 800ba6e:	7bbb      	ldrb	r3, [r7, #14]
 800ba70:	4619      	mov	r1, r3
 800ba72:	e005      	b.n	800ba80 <mix_sub_columns+0x290>
 800ba74:	0801d730 	.word	0x0801d730
 800ba78:	0801d830 	.word	0x0801d830
 800ba7c:	0801d630 	.word	0x0801d630
 800ba80:	4b2d      	ldr	r3, [pc, #180]	@ (800bb38 <mix_sub_columns+0x348>)
 800ba82:	5c5b      	ldrb	r3, [r3, r1]
 800ba84:	4053      	eors	r3, r2
 800ba86:	b2d9      	uxtb	r1, r3
 800ba88:	7cfb      	ldrb	r3, [r7, #19]
 800ba8a:	461a      	mov	r2, r3
 800ba8c:	4b2a      	ldr	r3, [pc, #168]	@ (800bb38 <mix_sub_columns+0x348>)
 800ba8e:	5c9a      	ldrb	r2, [r3, r2]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	330c      	adds	r3, #12
 800ba94:	404a      	eors	r2, r1
 800ba96:	b2d2      	uxtb	r2, r2
 800ba98:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800ba9a:	7d3b      	ldrb	r3, [r7, #20]
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	4b26      	ldr	r3, [pc, #152]	@ (800bb38 <mix_sub_columns+0x348>)
 800baa0:	5c9a      	ldrb	r2, [r3, r2]
 800baa2:	7a7b      	ldrb	r3, [r7, #9]
 800baa4:	4619      	mov	r1, r3
 800baa6:	4b25      	ldr	r3, [pc, #148]	@ (800bb3c <mix_sub_columns+0x34c>)
 800baa8:	5c5b      	ldrb	r3, [r3, r1]
 800baaa:	4053      	eors	r3, r2
 800baac:	b2da      	uxtb	r2, r3
 800baae:	7bbb      	ldrb	r3, [r7, #14]
 800bab0:	4619      	mov	r1, r3
 800bab2:	4b23      	ldr	r3, [pc, #140]	@ (800bb40 <mix_sub_columns+0x350>)
 800bab4:	5c5b      	ldrb	r3, [r3, r1]
 800bab6:	4053      	eors	r3, r2
 800bab8:	b2d9      	uxtb	r1, r3
 800baba:	7cfb      	ldrb	r3, [r7, #19]
 800babc:	461a      	mov	r2, r3
 800babe:	4b1e      	ldr	r3, [pc, #120]	@ (800bb38 <mix_sub_columns+0x348>)
 800bac0:	5c9a      	ldrb	r2, [r3, r2]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	330d      	adds	r3, #13
 800bac6:	404a      	eors	r2, r1
 800bac8:	b2d2      	uxtb	r2, r2
 800baca:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800bacc:	7d3b      	ldrb	r3, [r7, #20]
 800bace:	461a      	mov	r2, r3
 800bad0:	4b19      	ldr	r3, [pc, #100]	@ (800bb38 <mix_sub_columns+0x348>)
 800bad2:	5c9a      	ldrb	r2, [r3, r2]
 800bad4:	7a7b      	ldrb	r3, [r7, #9]
 800bad6:	4619      	mov	r1, r3
 800bad8:	4b17      	ldr	r3, [pc, #92]	@ (800bb38 <mix_sub_columns+0x348>)
 800bada:	5c5b      	ldrb	r3, [r3, r1]
 800badc:	4053      	eors	r3, r2
 800bade:	b2da      	uxtb	r2, r3
 800bae0:	7bbb      	ldrb	r3, [r7, #14]
 800bae2:	4619      	mov	r1, r3
 800bae4:	4b15      	ldr	r3, [pc, #84]	@ (800bb3c <mix_sub_columns+0x34c>)
 800bae6:	5c5b      	ldrb	r3, [r3, r1]
 800bae8:	4053      	eors	r3, r2
 800baea:	b2d9      	uxtb	r1, r3
 800baec:	7cfb      	ldrb	r3, [r7, #19]
 800baee:	461a      	mov	r2, r3
 800baf0:	4b13      	ldr	r3, [pc, #76]	@ (800bb40 <mix_sub_columns+0x350>)
 800baf2:	5c9a      	ldrb	r2, [r3, r2]
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	330e      	adds	r3, #14
 800baf8:	404a      	eors	r2, r1
 800bafa:	b2d2      	uxtb	r2, r2
 800bafc:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800bafe:	7d3b      	ldrb	r3, [r7, #20]
 800bb00:	461a      	mov	r2, r3
 800bb02:	4b0f      	ldr	r3, [pc, #60]	@ (800bb40 <mix_sub_columns+0x350>)
 800bb04:	5c9a      	ldrb	r2, [r3, r2]
 800bb06:	7a7b      	ldrb	r3, [r7, #9]
 800bb08:	4619      	mov	r1, r3
 800bb0a:	4b0b      	ldr	r3, [pc, #44]	@ (800bb38 <mix_sub_columns+0x348>)
 800bb0c:	5c5b      	ldrb	r3, [r3, r1]
 800bb0e:	4053      	eors	r3, r2
 800bb10:	b2da      	uxtb	r2, r3
 800bb12:	7bbb      	ldrb	r3, [r7, #14]
 800bb14:	4619      	mov	r1, r3
 800bb16:	4b08      	ldr	r3, [pc, #32]	@ (800bb38 <mix_sub_columns+0x348>)
 800bb18:	5c5b      	ldrb	r3, [r3, r1]
 800bb1a:	4053      	eors	r3, r2
 800bb1c:	b2d9      	uxtb	r1, r3
 800bb1e:	7cfb      	ldrb	r3, [r7, #19]
 800bb20:	461a      	mov	r2, r3
 800bb22:	4b06      	ldr	r3, [pc, #24]	@ (800bb3c <mix_sub_columns+0x34c>)
 800bb24:	5c9a      	ldrb	r2, [r3, r2]
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	330f      	adds	r3, #15
 800bb2a:	404a      	eors	r2, r1
 800bb2c:	b2d2      	uxtb	r2, r2
 800bb2e:	701a      	strb	r2, [r3, #0]
  }
 800bb30:	bf00      	nop
 800bb32:	3718      	adds	r7, #24
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}
 800bb38:	0801d630 	.word	0x0801d630
 800bb3c:	0801d730 	.word	0x0801d730
 800bb40:	0801d830 	.word	0x0801d830

0800bb44 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b086      	sub	sp, #24
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	60f8      	str	r0, [r7, #12]
 800bb4c:	460b      	mov	r3, r1
 800bb4e:	607a      	str	r2, [r7, #4]
 800bb50:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800bb52:	7afb      	ldrb	r3, [r7, #11]
 800bb54:	3b10      	subs	r3, #16
 800bb56:	2b10      	cmp	r3, #16
 800bb58:	bf8c      	ite	hi
 800bb5a:	2201      	movhi	r2, #1
 800bb5c:	2200      	movls	r2, #0
 800bb5e:	b2d2      	uxtb	r2, r2
 800bb60:	2a00      	cmp	r2, #0
 800bb62:	d10b      	bne.n	800bb7c <lorawan_aes_set_key+0x38>
 800bb64:	4a64      	ldr	r2, [pc, #400]	@ (800bcf8 <lorawan_aes_set_key+0x1b4>)
 800bb66:	fa22 f303 	lsr.w	r3, r2, r3
 800bb6a:	f003 0301 	and.w	r3, r3, #1
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	bf14      	ite	ne
 800bb72:	2301      	movne	r3, #1
 800bb74:	2300      	moveq	r3, #0
 800bb76:	b2db      	uxtb	r3, r3
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d105      	bne.n	800bb88 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
        return ( uint8_t )-1;
 800bb84:	23ff      	movs	r3, #255	@ 0xff
 800bb86:	e0b2      	b.n	800bcee <lorawan_aes_set_key+0x1aa>
        break;
 800bb88:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	7afa      	ldrb	r2, [r7, #11]
 800bb8e:	68f9      	ldr	r1, [r7, #12]
 800bb90:	4618      	mov	r0, r3
 800bb92:	f7ff fbfc 	bl	800b38e <copy_block_nn>
    hi = (keylen + 28) << 2;
 800bb96:	7afb      	ldrb	r3, [r7, #11]
 800bb98:	331c      	adds	r3, #28
 800bb9a:	b2db      	uxtb	r3, r3
 800bb9c:	009b      	lsls	r3, r3, #2
 800bb9e:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800bba0:	7c7b      	ldrb	r3, [r7, #17]
 800bba2:	091b      	lsrs	r3, r3, #4
 800bba4:	b2db      	uxtb	r3, r3
 800bba6:	3b01      	subs	r3, #1
 800bba8:	b2da      	uxtb	r2, r3
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800bbb0:	7afb      	ldrb	r3, [r7, #11]
 800bbb2:	75fb      	strb	r3, [r7, #23]
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	75bb      	strb	r3, [r7, #22]
 800bbb8:	e093      	b.n	800bce2 <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800bbba:	7dfb      	ldrb	r3, [r7, #23]
 800bbbc:	3b04      	subs	r3, #4
 800bbbe:	687a      	ldr	r2, [r7, #4]
 800bbc0:	5cd3      	ldrb	r3, [r2, r3]
 800bbc2:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800bbc4:	7dfb      	ldrb	r3, [r7, #23]
 800bbc6:	3b03      	subs	r3, #3
 800bbc8:	687a      	ldr	r2, [r7, #4]
 800bbca:	5cd3      	ldrb	r3, [r2, r3]
 800bbcc:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800bbce:	7dfb      	ldrb	r3, [r7, #23]
 800bbd0:	3b02      	subs	r3, #2
 800bbd2:	687a      	ldr	r2, [r7, #4]
 800bbd4:	5cd3      	ldrb	r3, [r2, r3]
 800bbd6:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800bbd8:	7dfb      	ldrb	r3, [r7, #23]
 800bbda:	3b01      	subs	r3, #1
 800bbdc:	687a      	ldr	r2, [r7, #4]
 800bbde:	5cd3      	ldrb	r3, [r2, r3]
 800bbe0:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800bbe2:	7dfb      	ldrb	r3, [r7, #23]
 800bbe4:	7afa      	ldrb	r2, [r7, #11]
 800bbe6:	fbb3 f1f2 	udiv	r1, r3, r2
 800bbea:	fb01 f202 	mul.w	r2, r1, r2
 800bbee:	1a9b      	subs	r3, r3, r2
 800bbf0:	b2db      	uxtb	r3, r3
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d127      	bne.n	800bc46 <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800bbf6:	7d7b      	ldrb	r3, [r7, #21]
 800bbf8:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800bbfa:	7d3b      	ldrb	r3, [r7, #20]
 800bbfc:	4a3f      	ldr	r2, [pc, #252]	@ (800bcfc <lorawan_aes_set_key+0x1b8>)
 800bbfe:	5cd2      	ldrb	r2, [r2, r3]
 800bc00:	7dbb      	ldrb	r3, [r7, #22]
 800bc02:	4053      	eors	r3, r2
 800bc04:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800bc06:	7cfb      	ldrb	r3, [r7, #19]
 800bc08:	4a3c      	ldr	r2, [pc, #240]	@ (800bcfc <lorawan_aes_set_key+0x1b8>)
 800bc0a:	5cd3      	ldrb	r3, [r2, r3]
 800bc0c:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800bc0e:	7cbb      	ldrb	r3, [r7, #18]
 800bc10:	4a3a      	ldr	r2, [pc, #232]	@ (800bcfc <lorawan_aes_set_key+0x1b8>)
 800bc12:	5cd3      	ldrb	r3, [r2, r3]
 800bc14:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800bc16:	7c3b      	ldrb	r3, [r7, #16]
 800bc18:	4a38      	ldr	r2, [pc, #224]	@ (800bcfc <lorawan_aes_set_key+0x1b8>)
 800bc1a:	5cd3      	ldrb	r3, [r2, r3]
 800bc1c:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800bc1e:	7dbb      	ldrb	r3, [r7, #22]
 800bc20:	005b      	lsls	r3, r3, #1
 800bc22:	b25a      	sxtb	r2, r3
 800bc24:	7dbb      	ldrb	r3, [r7, #22]
 800bc26:	09db      	lsrs	r3, r3, #7
 800bc28:	b2db      	uxtb	r3, r3
 800bc2a:	4619      	mov	r1, r3
 800bc2c:	0049      	lsls	r1, r1, #1
 800bc2e:	440b      	add	r3, r1
 800bc30:	4619      	mov	r1, r3
 800bc32:	00c8      	lsls	r0, r1, #3
 800bc34:	4619      	mov	r1, r3
 800bc36:	4603      	mov	r3, r0
 800bc38:	440b      	add	r3, r1
 800bc3a:	b2db      	uxtb	r3, r3
 800bc3c:	b25b      	sxtb	r3, r3
 800bc3e:	4053      	eors	r3, r2
 800bc40:	b25b      	sxtb	r3, r3
 800bc42:	75bb      	strb	r3, [r7, #22]
 800bc44:	e01c      	b.n	800bc80 <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800bc46:	7afb      	ldrb	r3, [r7, #11]
 800bc48:	2b18      	cmp	r3, #24
 800bc4a:	d919      	bls.n	800bc80 <lorawan_aes_set_key+0x13c>
 800bc4c:	7dfb      	ldrb	r3, [r7, #23]
 800bc4e:	7afa      	ldrb	r2, [r7, #11]
 800bc50:	fbb3 f1f2 	udiv	r1, r3, r2
 800bc54:	fb01 f202 	mul.w	r2, r1, r2
 800bc58:	1a9b      	subs	r3, r3, r2
 800bc5a:	b2db      	uxtb	r3, r3
 800bc5c:	2b10      	cmp	r3, #16
 800bc5e:	d10f      	bne.n	800bc80 <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800bc60:	7d7b      	ldrb	r3, [r7, #21]
 800bc62:	4a26      	ldr	r2, [pc, #152]	@ (800bcfc <lorawan_aes_set_key+0x1b8>)
 800bc64:	5cd3      	ldrb	r3, [r2, r3]
 800bc66:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800bc68:	7d3b      	ldrb	r3, [r7, #20]
 800bc6a:	4a24      	ldr	r2, [pc, #144]	@ (800bcfc <lorawan_aes_set_key+0x1b8>)
 800bc6c:	5cd3      	ldrb	r3, [r2, r3]
 800bc6e:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800bc70:	7cfb      	ldrb	r3, [r7, #19]
 800bc72:	4a22      	ldr	r2, [pc, #136]	@ (800bcfc <lorawan_aes_set_key+0x1b8>)
 800bc74:	5cd3      	ldrb	r3, [r2, r3]
 800bc76:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800bc78:	7cbb      	ldrb	r3, [r7, #18]
 800bc7a:	4a20      	ldr	r2, [pc, #128]	@ (800bcfc <lorawan_aes_set_key+0x1b8>)
 800bc7c:	5cd3      	ldrb	r3, [r2, r3]
 800bc7e:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800bc80:	7dfa      	ldrb	r2, [r7, #23]
 800bc82:	7afb      	ldrb	r3, [r7, #11]
 800bc84:	1ad3      	subs	r3, r2, r3
 800bc86:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800bc88:	7c3b      	ldrb	r3, [r7, #16]
 800bc8a:	687a      	ldr	r2, [r7, #4]
 800bc8c:	5cd1      	ldrb	r1, [r2, r3]
 800bc8e:	7dfb      	ldrb	r3, [r7, #23]
 800bc90:	7d7a      	ldrb	r2, [r7, #21]
 800bc92:	404a      	eors	r2, r1
 800bc94:	b2d1      	uxtb	r1, r2
 800bc96:	687a      	ldr	r2, [r7, #4]
 800bc98:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800bc9a:	7c3b      	ldrb	r3, [r7, #16]
 800bc9c:	3301      	adds	r3, #1
 800bc9e:	687a      	ldr	r2, [r7, #4]
 800bca0:	5cd1      	ldrb	r1, [r2, r3]
 800bca2:	7dfb      	ldrb	r3, [r7, #23]
 800bca4:	3301      	adds	r3, #1
 800bca6:	7d3a      	ldrb	r2, [r7, #20]
 800bca8:	404a      	eors	r2, r1
 800bcaa:	b2d1      	uxtb	r1, r2
 800bcac:	687a      	ldr	r2, [r7, #4]
 800bcae:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800bcb0:	7c3b      	ldrb	r3, [r7, #16]
 800bcb2:	3302      	adds	r3, #2
 800bcb4:	687a      	ldr	r2, [r7, #4]
 800bcb6:	5cd1      	ldrb	r1, [r2, r3]
 800bcb8:	7dfb      	ldrb	r3, [r7, #23]
 800bcba:	3302      	adds	r3, #2
 800bcbc:	7cfa      	ldrb	r2, [r7, #19]
 800bcbe:	404a      	eors	r2, r1
 800bcc0:	b2d1      	uxtb	r1, r2
 800bcc2:	687a      	ldr	r2, [r7, #4]
 800bcc4:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800bcc6:	7c3b      	ldrb	r3, [r7, #16]
 800bcc8:	3303      	adds	r3, #3
 800bcca:	687a      	ldr	r2, [r7, #4]
 800bccc:	5cd1      	ldrb	r1, [r2, r3]
 800bcce:	7dfb      	ldrb	r3, [r7, #23]
 800bcd0:	3303      	adds	r3, #3
 800bcd2:	7cba      	ldrb	r2, [r7, #18]
 800bcd4:	404a      	eors	r2, r1
 800bcd6:	b2d1      	uxtb	r1, r2
 800bcd8:	687a      	ldr	r2, [r7, #4]
 800bcda:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800bcdc:	7dfb      	ldrb	r3, [r7, #23]
 800bcde:	3304      	adds	r3, #4
 800bce0:	75fb      	strb	r3, [r7, #23]
 800bce2:	7dfa      	ldrb	r2, [r7, #23]
 800bce4:	7c7b      	ldrb	r3, [r7, #17]
 800bce6:	429a      	cmp	r2, r3
 800bce8:	f4ff af67 	bcc.w	800bbba <lorawan_aes_set_key+0x76>
    }
    return 0;
 800bcec:	2300      	movs	r3, #0
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3718      	adds	r7, #24
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}
 800bcf6:	bf00      	nop
 800bcf8:	00010101 	.word	0x00010101
 800bcfc:	0801d630 	.word	0x0801d630

0800bd00 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b08a      	sub	sp, #40	@ 0x28
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	60f8      	str	r0, [r7, #12]
 800bd08:	60b9      	str	r1, [r7, #8]
 800bd0a:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d038      	beq.n	800bd88 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800bd16:	687a      	ldr	r2, [r7, #4]
 800bd18:	f107 0314 	add.w	r3, r7, #20
 800bd1c:	68f9      	ldr	r1, [r7, #12]
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f7ff fc07 	bl	800b532 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800bd24:	2301      	movs	r3, #1
 800bd26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bd2a:	e014      	b.n	800bd56 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800bd2c:	f107 0314 	add.w	r3, r7, #20
 800bd30:	4618      	mov	r0, r3
 800bd32:	f7ff fd5d 	bl	800b7f0 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800bd3c:	0112      	lsls	r2, r2, #4
 800bd3e:	441a      	add	r2, r3
 800bd40:	f107 0314 	add.w	r3, r7, #20
 800bd44:	4611      	mov	r1, r2
 800bd46:	4618      	mov	r0, r3
 800bd48:	f7ff fcab 	bl	800b6a2 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800bd4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bd50:	3301      	adds	r3, #1
 800bd52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800bd5c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d3e3      	bcc.n	800bd2c <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800bd64:	f107 0314 	add.w	r3, r7, #20
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f7ff fca7 	bl	800b6bc <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800bd74:	0112      	lsls	r2, r2, #4
 800bd76:	441a      	add	r2, r3
 800bd78:	f107 0314 	add.w	r3, r7, #20
 800bd7c:	4619      	mov	r1, r3
 800bd7e:	68b8      	ldr	r0, [r7, #8]
 800bd80:	f7ff fbd7 	bl	800b532 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800bd84:	2300      	movs	r3, #0
 800bd86:	e000      	b.n	800bd8a <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800bd88:	23ff      	movs	r3, #255	@ 0xff
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3728      	adds	r7, #40	@ 0x28
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}
	...

0800bd94 <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800bd94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd96:	b0a1      	sub	sp, #132	@ 0x84
 800bd98:	af12      	add	r7, sp, #72	@ 0x48
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800bda0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800bda4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bda8:	4611      	mov	r1, r2
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f000 fa12 	bl	800c1d4 <SecureElementGetKeyByID>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d174      	bne.n	800bea0 <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bdbc:	e06c      	b.n	800be98 <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 800bdbe:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800bdc2:	4939      	ldr	r1, [pc, #228]	@ (800bea8 <PrintKey+0x114>)
 800bdc4:	4613      	mov	r3, r2
 800bdc6:	005b      	lsls	r3, r3, #1
 800bdc8:	4413      	add	r3, r2
 800bdca:	009b      	lsls	r3, r3, #2
 800bdcc:	440b      	add	r3, r1
 800bdce:	781b      	ldrb	r3, [r3, #0]
 800bdd0:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800bdd4:	429a      	cmp	r2, r3
 800bdd6:	d15a      	bne.n	800be8e <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 800bdd8:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800bddc:	4932      	ldr	r1, [pc, #200]	@ (800bea8 <PrintKey+0x114>)
 800bdde:	4613      	mov	r3, r2
 800bde0:	005b      	lsls	r3, r3, #1
 800bde2:	4413      	add	r3, r2
 800bde4:	009b      	lsls	r3, r3, #2
 800bde6:	440b      	add	r3, r1
 800bde8:	3308      	adds	r3, #8
 800bdea:	6819      	ldr	r1, [r3, #0]
 800bdec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdee:	785b      	ldrb	r3, [r3, #1]
 800bdf0:	461d      	mov	r5, r3
 800bdf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdf4:	789b      	ldrb	r3, [r3, #2]
 800bdf6:	461e      	mov	r6, r3
 800bdf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdfa:	78db      	ldrb	r3, [r3, #3]
 800bdfc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bdfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be00:	791b      	ldrb	r3, [r3, #4]
 800be02:	627b      	str	r3, [r7, #36]	@ 0x24
 800be04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be06:	795b      	ldrb	r3, [r3, #5]
 800be08:	623b      	str	r3, [r7, #32]
 800be0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be0c:	799b      	ldrb	r3, [r3, #6]
 800be0e:	61fb      	str	r3, [r7, #28]
 800be10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be12:	79db      	ldrb	r3, [r3, #7]
 800be14:	61bb      	str	r3, [r7, #24]
 800be16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be18:	7a1b      	ldrb	r3, [r3, #8]
 800be1a:	617b      	str	r3, [r7, #20]
 800be1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be1e:	7a5b      	ldrb	r3, [r3, #9]
 800be20:	613b      	str	r3, [r7, #16]
 800be22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be24:	7a9b      	ldrb	r3, [r3, #10]
 800be26:	60fb      	str	r3, [r7, #12]
 800be28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be2a:	7adb      	ldrb	r3, [r3, #11]
 800be2c:	60bb      	str	r3, [r7, #8]
 800be2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be30:	7b1b      	ldrb	r3, [r3, #12]
 800be32:	607b      	str	r3, [r7, #4]
 800be34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be36:	7b5b      	ldrb	r3, [r3, #13]
 800be38:	461c      	mov	r4, r3
 800be3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be3c:	7b9b      	ldrb	r3, [r3, #14]
 800be3e:	4618      	mov	r0, r3
 800be40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be42:	7bdb      	ldrb	r3, [r3, #15]
 800be44:	461a      	mov	r2, r3
 800be46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be48:	7c1b      	ldrb	r3, [r3, #16]
 800be4a:	9310      	str	r3, [sp, #64]	@ 0x40
 800be4c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800be4e:	900e      	str	r0, [sp, #56]	@ 0x38
 800be50:	940d      	str	r4, [sp, #52]	@ 0x34
 800be52:	687a      	ldr	r2, [r7, #4]
 800be54:	920c      	str	r2, [sp, #48]	@ 0x30
 800be56:	68ba      	ldr	r2, [r7, #8]
 800be58:	920b      	str	r2, [sp, #44]	@ 0x2c
 800be5a:	68fa      	ldr	r2, [r7, #12]
 800be5c:	920a      	str	r2, [sp, #40]	@ 0x28
 800be5e:	693a      	ldr	r2, [r7, #16]
 800be60:	9209      	str	r2, [sp, #36]	@ 0x24
 800be62:	697a      	ldr	r2, [r7, #20]
 800be64:	9208      	str	r2, [sp, #32]
 800be66:	69ba      	ldr	r2, [r7, #24]
 800be68:	9207      	str	r2, [sp, #28]
 800be6a:	69fa      	ldr	r2, [r7, #28]
 800be6c:	9206      	str	r2, [sp, #24]
 800be6e:	6a3a      	ldr	r2, [r7, #32]
 800be70:	9205      	str	r2, [sp, #20]
 800be72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be74:	9204      	str	r2, [sp, #16]
 800be76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be78:	9303      	str	r3, [sp, #12]
 800be7a:	9602      	str	r6, [sp, #8]
 800be7c:	9501      	str	r5, [sp, #4]
 800be7e:	9100      	str	r1, [sp, #0]
 800be80:	4b0a      	ldr	r3, [pc, #40]	@ (800beac <PrintKey+0x118>)
 800be82:	2200      	movs	r2, #0
 800be84:	2100      	movs	r1, #0
 800be86:	2002      	movs	r0, #2
 800be88:	f010 fbcc 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
 800be8c:	e008      	b.n	800bea0 <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800be8e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800be92:	3301      	adds	r3, #1
 800be94:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800be98:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800be9c:	2b0a      	cmp	r3, #10
 800be9e:	d98e      	bls.n	800bdbe <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800bea0:	373c      	adds	r7, #60	@ 0x3c
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bea6:	bf00      	nop
 800bea8:	0801d930 	.word	0x0801d930
 800beac:	0801d1d0 	.word	0x0801d1d0

0800beb0 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800beb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800beb2:	b091      	sub	sp, #68	@ 0x44
 800beb4:	af08      	add	r7, sp, #32
 800beb6:	4603      	mov	r3, r0
 800beb8:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800beba:	2300      	movs	r3, #0
 800bebc:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800bebe:	f107 0310 	add.w	r3, r7, #16
 800bec2:	4618      	mov	r0, r3
 800bec4:	f000 fbf0 	bl	800c6a8 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800bec8:	7c3b      	ldrb	r3, [r7, #16]
 800beca:	7c7a      	ldrb	r2, [r7, #17]
 800becc:	7cb9      	ldrb	r1, [r7, #18]
 800bece:	7cf8      	ldrb	r0, [r7, #19]
 800bed0:	7d3c      	ldrb	r4, [r7, #20]
 800bed2:	7d7d      	ldrb	r5, [r7, #21]
 800bed4:	7dbe      	ldrb	r6, [r7, #22]
 800bed6:	f897 c017 	ldrb.w	ip, [r7, #23]
 800beda:	f8cd c01c 	str.w	ip, [sp, #28]
 800bede:	9606      	str	r6, [sp, #24]
 800bee0:	9505      	str	r5, [sp, #20]
 800bee2:	9404      	str	r4, [sp, #16]
 800bee4:	9003      	str	r0, [sp, #12]
 800bee6:	9102      	str	r1, [sp, #8]
 800bee8:	9201      	str	r2, [sp, #4]
 800beea:	9300      	str	r3, [sp, #0]
 800beec:	4b24      	ldr	r3, [pc, #144]	@ (800bf80 <PrintIds+0xd0>)
 800beee:	2200      	movs	r2, #0
 800bef0:	2100      	movs	r1, #0
 800bef2:	2002      	movs	r0, #2
 800bef4:	f010 fb96 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800bef8:	f107 0318 	add.w	r3, r7, #24
 800befc:	4618      	mov	r0, r3
 800befe:	f000 fc03 	bl	800c708 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800bf02:	7e3b      	ldrb	r3, [r7, #24]
 800bf04:	7e7a      	ldrb	r2, [r7, #25]
 800bf06:	7eb9      	ldrb	r1, [r7, #26]
 800bf08:	7ef8      	ldrb	r0, [r7, #27]
 800bf0a:	7f3c      	ldrb	r4, [r7, #28]
 800bf0c:	7f7d      	ldrb	r5, [r7, #29]
 800bf0e:	7fbe      	ldrb	r6, [r7, #30]
 800bf10:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800bf14:	f8cd c01c 	str.w	ip, [sp, #28]
 800bf18:	9606      	str	r6, [sp, #24]
 800bf1a:	9505      	str	r5, [sp, #20]
 800bf1c:	9404      	str	r4, [sp, #16]
 800bf1e:	9003      	str	r0, [sp, #12]
 800bf20:	9102      	str	r1, [sp, #8]
 800bf22:	9201      	str	r2, [sp, #4]
 800bf24:	9300      	str	r3, [sp, #0]
 800bf26:	4b17      	ldr	r3, [pc, #92]	@ (800bf84 <PrintIds+0xd4>)
 800bf28:	2200      	movs	r2, #0
 800bf2a:	2100      	movs	r1, #0
 800bf2c:	2002      	movs	r0, #2
 800bf2e:	f010 fb79 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800bf32:	f107 020c 	add.w	r2, r7, #12
 800bf36:	79fb      	ldrb	r3, [r7, #7]
 800bf38:	4611      	mov	r1, r2
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f000 fc16 	bl	800c76c <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800bf40:	f107 030c 	add.w	r3, r7, #12
 800bf44:	3303      	adds	r3, #3
 800bf46:	781b      	ldrb	r3, [r3, #0]
 800bf48:	461a      	mov	r2, r3
 800bf4a:	f107 030c 	add.w	r3, r7, #12
 800bf4e:	3302      	adds	r3, #2
 800bf50:	781b      	ldrb	r3, [r3, #0]
 800bf52:	4619      	mov	r1, r3
 800bf54:	f107 030c 	add.w	r3, r7, #12
 800bf58:	3301      	adds	r3, #1
 800bf5a:	781b      	ldrb	r3, [r3, #0]
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f107 030c 	add.w	r3, r7, #12
 800bf62:	781b      	ldrb	r3, [r3, #0]
 800bf64:	9303      	str	r3, [sp, #12]
 800bf66:	9002      	str	r0, [sp, #8]
 800bf68:	9101      	str	r1, [sp, #4]
 800bf6a:	9200      	str	r2, [sp, #0]
 800bf6c:	4b06      	ldr	r3, [pc, #24]	@ (800bf88 <PrintIds+0xd8>)
 800bf6e:	2200      	movs	r2, #0
 800bf70:	2100      	movs	r1, #0
 800bf72:	2002      	movs	r0, #2
 800bf74:	f010 fb56 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800bf78:	bf00      	nop
 800bf7a:	3724      	adds	r7, #36	@ 0x24
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf80:	0801d22c 	.word	0x0801d22c
 800bf84:	0801d26c 	.word	0x0801d26c
 800bf88:	0801d2ac 	.word	0x0801d2ac

0800bf8c <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b085      	sub	sp, #20
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	4603      	mov	r3, r0
 800bf94:	6039      	str	r1, [r7, #0]
 800bf96:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bf98:	2300      	movs	r3, #0
 800bf9a:	73fb      	strb	r3, [r7, #15]
 800bf9c:	e01a      	b.n	800bfd4 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800bf9e:	4b12      	ldr	r3, [pc, #72]	@ (800bfe8 <GetKeyByID+0x5c>)
 800bfa0:	6819      	ldr	r1, [r3, #0]
 800bfa2:	7bfa      	ldrb	r2, [r7, #15]
 800bfa4:	4613      	mov	r3, r2
 800bfa6:	011b      	lsls	r3, r3, #4
 800bfa8:	4413      	add	r3, r2
 800bfaa:	440b      	add	r3, r1
 800bfac:	3318      	adds	r3, #24
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	79fa      	ldrb	r2, [r7, #7]
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	d10b      	bne.n	800bfce <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800bfb6:	4b0c      	ldr	r3, [pc, #48]	@ (800bfe8 <GetKeyByID+0x5c>)
 800bfb8:	6819      	ldr	r1, [r3, #0]
 800bfba:	7bfa      	ldrb	r2, [r7, #15]
 800bfbc:	4613      	mov	r3, r2
 800bfbe:	011b      	lsls	r3, r3, #4
 800bfc0:	4413      	add	r3, r2
 800bfc2:	3318      	adds	r3, #24
 800bfc4:	18ca      	adds	r2, r1, r3
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	e006      	b.n	800bfdc <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bfce:	7bfb      	ldrb	r3, [r7, #15]
 800bfd0:	3301      	adds	r3, #1
 800bfd2:	73fb      	strb	r3, [r7, #15]
 800bfd4:	7bfb      	ldrb	r3, [r7, #15]
 800bfd6:	2b0a      	cmp	r3, #10
 800bfd8:	d9e1      	bls.n	800bf9e <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bfda:	2303      	movs	r3, #3
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	3714      	adds	r7, #20
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bc80      	pop	{r7}
 800bfe4:	4770      	bx	lr
 800bfe6:	bf00      	nop
 800bfe8:	200005bc 	.word	0x200005bc

0800bfec <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800bfec:	b590      	push	{r4, r7, lr}
 800bfee:	b0d1      	sub	sp, #324	@ 0x144
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 800bff6:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 800bffa:	6020      	str	r0, [r4, #0]
 800bffc:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800c000:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800c004:	6001      	str	r1, [r0, #0]
 800c006:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800c00a:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 800c00e:	600a      	str	r2, [r1, #0]
 800c010:	461a      	mov	r2, r3
 800c012:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c016:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800c01a:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800c01c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c020:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d003      	beq.n	800c032 <ComputeCmac+0x46>
 800c02a:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d101      	bne.n	800c036 <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c032:	2302      	movs	r3, #2
 800c034:	e05d      	b.n	800c0f2 <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800c036:	f107 0314 	add.w	r3, r7, #20
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7fe ff02 	bl	800ae44 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800c040:	f107 0210 	add.w	r2, r7, #16
 800c044:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c048:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800c04c:	781b      	ldrb	r3, [r3, #0]
 800c04e:	4611      	mov	r1, r2
 800c050:	4618      	mov	r0, r3
 800c052:	f7ff ff9b 	bl	800bf8c <GetKeyByID>
 800c056:	4603      	mov	r3, r0
 800c058:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800c05c:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800c060:	2b00      	cmp	r3, #0
 800c062:	d144      	bne.n	800c0ee <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800c064:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c068:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	1c5a      	adds	r2, r3, #1
 800c070:	f107 0314 	add.w	r3, r7, #20
 800c074:	4611      	mov	r1, r2
 800c076:	4618      	mov	r0, r3
 800c078:	f7fe fefd 	bl	800ae76 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800c07c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c080:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d009      	beq.n	800c09e <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800c08a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c08e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800c092:	f107 0014 	add.w	r0, r7, #20
 800c096:	2210      	movs	r2, #16
 800c098:	6819      	ldr	r1, [r3, #0]
 800c09a:	f7fe fefb 	bl	800ae94 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800c09e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c0a2:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 800c0a6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c0aa:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800c0ae:	f107 0014 	add.w	r0, r7, #20
 800c0b2:	6812      	ldr	r2, [r2, #0]
 800c0b4:	6819      	ldr	r1, [r3, #0]
 800c0b6:	f7fe feed 	bl	800ae94 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800c0ba:	f107 0214 	add.w	r2, r7, #20
 800c0be:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800c0c2:	4611      	mov	r1, r2
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f7fe ffa7 	bl	800b018 <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800c0ca:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800c0d4:	021b      	lsls	r3, r3, #8
 800c0d6:	431a      	orrs	r2, r3
 800c0d8:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800c0dc:	041b      	lsls	r3, r3, #16
 800c0de:	431a      	orrs	r2, r3
 800c0e0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800c0e4:	061b      	lsls	r3, r3, #24
 800c0e6:	431a      	orrs	r2, r3
 800c0e8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800c0ec:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800c0ee:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd90      	pop	{r4, r7, pc}

0800c0fc <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b082      	sub	sp, #8
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d101      	bne.n	800c10e <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c10a:	2302      	movs	r3, #2
 800c10c:	e00a      	b.n	800c124 <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800c10e:	4a07      	ldr	r2, [pc, #28]	@ (800c12c <SecureElementInit+0x30>)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800c114:	4b05      	ldr	r3, [pc, #20]	@ (800c12c <SecureElementInit+0x30>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	22d8      	movs	r2, #216	@ 0xd8
 800c11a:	4905      	ldr	r1, [pc, #20]	@ (800c130 <SecureElementInit+0x34>)
 800c11c:	4618      	mov	r0, r3
 800c11e:	f00c fc60 	bl	80189e2 <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800c122:	2300      	movs	r3, #0
}
 800c124:	4618      	mov	r0, r3
 800c126:	3708      	adds	r7, #8
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}
 800c12c:	200005bc 	.word	0x200005bc
 800c130:	0801dbd0 	.word	0x0801dbd0

0800c134 <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b086      	sub	sp, #24
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
 800c13c:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800c13e:	2300      	movs	r3, #0
 800c140:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800c142:	f107 030c 	add.w	r3, r7, #12
 800c146:	4618      	mov	r0, r3
 800c148:	f000 faae 	bl	800c6a8 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800c14c:	f107 0308 	add.w	r3, r7, #8
 800c150:	4619      	mov	r1, r3
 800c152:	2001      	movs	r0, #1
 800c154:	f000 fb0a 	bl	800c76c <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d024      	beq.n	800c1a8 <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800c15e:	2300      	movs	r3, #0
 800c160:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800c162:	2300      	movs	r3, #0
 800c164:	75bb      	strb	r3, [r7, #22]
 800c166:	e00c      	b.n	800c182 <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800c168:	7dbb      	ldrb	r3, [r7, #22]
 800c16a:	3318      	adds	r3, #24
 800c16c:	443b      	add	r3, r7
 800c16e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d002      	beq.n	800c17c <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 800c176:	2301      	movs	r3, #1
 800c178:	75fb      	strb	r3, [r7, #23]
                break;
 800c17a:	e005      	b.n	800c188 <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800c17c:	7dbb      	ldrb	r3, [r7, #22]
 800c17e:	3301      	adds	r3, #1
 800c180:	75bb      	strb	r3, [r7, #22]
 800c182:	7dbb      	ldrb	r3, [r7, #22]
 800c184:	2b07      	cmp	r3, #7
 800c186:	d9ef      	bls.n	800c168 <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 800c188:	7dfb      	ldrb	r3, [r7, #23]
 800c18a:	f083 0301 	eor.w	r3, r3, #1
 800c18e:	b2db      	uxtb	r3, r3
 800c190:	2b00      	cmp	r3, #0
 800c192:	d009      	beq.n	800c1a8 <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 800c194:	f107 020c 	add.w	r2, r7, #12
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	4610      	mov	r0, r2
 800c19c:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 800c19e:	f107 030c 	add.w	r3, r7, #12
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f000 fa68 	bl	800c678 <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d00c      	beq.n	800c1c8 <SecureElementInitMcuID+0x94>
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d109      	bne.n	800c1c8 <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 800c1b4:	f107 0208 	add.w	r2, r7, #8
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	4610      	mov	r0, r2
 800c1bc:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	4619      	mov	r1, r3
 800c1c2:	2001      	movs	r0, #1
 800c1c4:	f000 fab8 	bl	800c738 <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c1c8:	2300      	movs	r3, #0
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3718      	adds	r7, #24
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}
	...

0800c1d4 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	b085      	sub	sp, #20
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	4603      	mov	r3, r0
 800c1dc:	6039      	str	r1, [r7, #0]
 800c1de:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	73fb      	strb	r3, [r7, #15]
 800c1e4:	e01a      	b.n	800c21c <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800c1e6:	4b12      	ldr	r3, [pc, #72]	@ (800c230 <SecureElementGetKeyByID+0x5c>)
 800c1e8:	6819      	ldr	r1, [r3, #0]
 800c1ea:	7bfa      	ldrb	r2, [r7, #15]
 800c1ec:	4613      	mov	r3, r2
 800c1ee:	011b      	lsls	r3, r3, #4
 800c1f0:	4413      	add	r3, r2
 800c1f2:	440b      	add	r3, r1
 800c1f4:	3318      	adds	r3, #24
 800c1f6:	781b      	ldrb	r3, [r3, #0]
 800c1f8:	79fa      	ldrb	r2, [r7, #7]
 800c1fa:	429a      	cmp	r2, r3
 800c1fc:	d10b      	bne.n	800c216 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800c1fe:	4b0c      	ldr	r3, [pc, #48]	@ (800c230 <SecureElementGetKeyByID+0x5c>)
 800c200:	6819      	ldr	r1, [r3, #0]
 800c202:	7bfa      	ldrb	r2, [r7, #15]
 800c204:	4613      	mov	r3, r2
 800c206:	011b      	lsls	r3, r3, #4
 800c208:	4413      	add	r3, r2
 800c20a:	3318      	adds	r3, #24
 800c20c:	18ca      	adds	r2, r1, r3
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800c212:	2300      	movs	r3, #0
 800c214:	e006      	b.n	800c224 <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c216:	7bfb      	ldrb	r3, [r7, #15]
 800c218:	3301      	adds	r3, #1
 800c21a:	73fb      	strb	r3, [r7, #15]
 800c21c:	7bfb      	ldrb	r3, [r7, #15]
 800c21e:	2b0a      	cmp	r3, #10
 800c220:	d9e1      	bls.n	800c1e6 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c222:	2303      	movs	r3, #3
}
 800c224:	4618      	mov	r0, r3
 800c226:	3714      	adds	r7, #20
 800c228:	46bd      	mov	sp, r7
 800c22a:	bc80      	pop	{r7}
 800c22c:	4770      	bx	lr
 800c22e:	bf00      	nop
 800c230:	200005bc 	.word	0x200005bc

0800c234 <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800c234:	b580      	push	{r7, lr}
 800c236:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 800c238:	2000      	movs	r0, #0
 800c23a:	f7ff fdab 	bl	800bd94 <PrintKey>
    PrintKey( NWK_KEY );
 800c23e:	2001      	movs	r0, #1
 800c240:	f7ff fda8 	bl	800bd94 <PrintKey>
    PrintKey( APP_S_KEY );
 800c244:	2009      	movs	r0, #9
 800c246:	f7ff fda5 	bl	800bd94 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800c24a:	2008      	movs	r0, #8
 800c24c:	f7ff fda2 	bl	800bd94 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 800c250:	2000      	movs	r0, #0
 800c252:	f7ff fe2d 	bl	800beb0 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800c256:	2300      	movs	r3, #0
}
 800c258:	4618      	mov	r0, r3
 800c25a:	bd80      	pop	{r7, pc}

0800c25c <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b082      	sub	sp, #8
 800c260:	af00      	add	r7, sp, #0
 800c262:	4603      	mov	r3, r0
 800c264:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 800c266:	200b      	movs	r0, #11
 800c268:	f7ff fd94 	bl	800bd94 <PrintKey>
    PrintKey( MC_KE_KEY );
 800c26c:	200c      	movs	r0, #12
 800c26e:	f7ff fd91 	bl	800bd94 <PrintKey>
    PrintKey( APP_S_KEY );
 800c272:	2009      	movs	r0, #9
 800c274:	f7ff fd8e 	bl	800bd94 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800c278:	2008      	movs	r0, #8
 800c27a:	f7ff fd8b 	bl	800bd94 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 800c27e:	200a      	movs	r0, #10
 800c280:	f7ff fd88 	bl	800bd94 <PrintKey>
    PrintIds( mode );
 800c284:	79fb      	ldrb	r3, [r7, #7]
 800c286:	4618      	mov	r0, r3
 800c288:	f7ff fe12 	bl	800beb0 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800c28c:	2300      	movs	r3, #0
}
 800c28e:	4618      	mov	r0, r3
 800c290:	3708      	adds	r7, #8
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}
	...

0800c298 <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b088      	sub	sp, #32
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	4603      	mov	r3, r0
 800c2a0:	6039      	str	r1, [r7, #0]
 800c2a2:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d101      	bne.n	800c2ae <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c2aa:	2302      	movs	r3, #2
 800c2ac:	e04c      	b.n	800c348 <SecureElementSetKey+0xb0>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	77fb      	strb	r3, [r7, #31]
 800c2b2:	e045      	b.n	800c340 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800c2b4:	4b26      	ldr	r3, [pc, #152]	@ (800c350 <SecureElementSetKey+0xb8>)
 800c2b6:	6819      	ldr	r1, [r3, #0]
 800c2b8:	7ffa      	ldrb	r2, [r7, #31]
 800c2ba:	4613      	mov	r3, r2
 800c2bc:	011b      	lsls	r3, r3, #4
 800c2be:	4413      	add	r3, r2
 800c2c0:	440b      	add	r3, r1
 800c2c2:	3318      	adds	r3, #24
 800c2c4:	781b      	ldrb	r3, [r3, #0]
 800c2c6:	79fa      	ldrb	r2, [r7, #7]
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d136      	bne.n	800c33a <SecureElementSetKey+0xa2>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 800c2cc:	79fb      	ldrb	r3, [r7, #7]
 800c2ce:	2b0d      	cmp	r3, #13
 800c2d0:	d123      	bne.n	800c31a <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800c2d2:	2306      	movs	r3, #6
 800c2d4:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	60fb      	str	r3, [r7, #12]
 800c2da:	f107 0310 	add.w	r3, r7, #16
 800c2de:	2200      	movs	r2, #0
 800c2e0:	601a      	str	r2, [r3, #0]
 800c2e2:	605a      	str	r2, [r3, #4]
 800c2e4:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800c2e6:	f107 030c 	add.w	r3, r7, #12
 800c2ea:	220c      	movs	r2, #12
 800c2ec:	2110      	movs	r1, #16
 800c2ee:	6838      	ldr	r0, [r7, #0]
 800c2f0:	f000 f876 	bl	800c3e0 <SecureElementAesEncrypt>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800c2f8:	4b15      	ldr	r3, [pc, #84]	@ (800c350 <SecureElementSetKey+0xb8>)
 800c2fa:	6819      	ldr	r1, [r3, #0]
 800c2fc:	7ffa      	ldrb	r2, [r7, #31]
 800c2fe:	4613      	mov	r3, r2
 800c300:	011b      	lsls	r3, r3, #4
 800c302:	4413      	add	r3, r2
 800c304:	3318      	adds	r3, #24
 800c306:	440b      	add	r3, r1
 800c308:	3301      	adds	r3, #1
 800c30a:	f107 010c 	add.w	r1, r7, #12
 800c30e:	2210      	movs	r2, #16
 800c310:	4618      	mov	r0, r3
 800c312:	f00c fb66 	bl	80189e2 <memcpy1>
                return retval;
 800c316:	7fbb      	ldrb	r3, [r7, #30]
 800c318:	e016      	b.n	800c348 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800c31a:	4b0d      	ldr	r3, [pc, #52]	@ (800c350 <SecureElementSetKey+0xb8>)
 800c31c:	6819      	ldr	r1, [r3, #0]
 800c31e:	7ffa      	ldrb	r2, [r7, #31]
 800c320:	4613      	mov	r3, r2
 800c322:	011b      	lsls	r3, r3, #4
 800c324:	4413      	add	r3, r2
 800c326:	3318      	adds	r3, #24
 800c328:	440b      	add	r3, r1
 800c32a:	3301      	adds	r3, #1
 800c32c:	2210      	movs	r2, #16
 800c32e:	6839      	ldr	r1, [r7, #0]
 800c330:	4618      	mov	r0, r3
 800c332:	f00c fb56 	bl	80189e2 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800c336:	2300      	movs	r3, #0
 800c338:	e006      	b.n	800c348 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c33a:	7ffb      	ldrb	r3, [r7, #31]
 800c33c:	3301      	adds	r3, #1
 800c33e:	77fb      	strb	r3, [r7, #31]
 800c340:	7ffb      	ldrb	r3, [r7, #31]
 800c342:	2b0a      	cmp	r3, #10
 800c344:	d9b6      	bls.n	800c2b4 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c346:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c348:	4618      	mov	r0, r3
 800c34a:	3720      	adds	r7, #32
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}
 800c350:	200005bc 	.word	0x200005bc

0800c354 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b086      	sub	sp, #24
 800c358:	af02      	add	r7, sp, #8
 800c35a:	60f8      	str	r0, [r7, #12]
 800c35c:	60b9      	str	r1, [r7, #8]
 800c35e:	607a      	str	r2, [r7, #4]
 800c360:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 800c362:	78fb      	ldrb	r3, [r7, #3]
 800c364:	2b0b      	cmp	r3, #11
 800c366:	d901      	bls.n	800c36c <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c368:	2303      	movs	r3, #3
 800c36a:	e009      	b.n	800c380 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800c36c:	78fa      	ldrb	r2, [r7, #3]
 800c36e:	69bb      	ldr	r3, [r7, #24]
 800c370:	9300      	str	r3, [sp, #0]
 800c372:	4613      	mov	r3, r2
 800c374:	687a      	ldr	r2, [r7, #4]
 800c376:	68b9      	ldr	r1, [r7, #8]
 800c378:	68f8      	ldr	r0, [r7, #12]
 800c37a:	f7ff fe37 	bl	800bfec <ComputeCmac>
 800c37e:	4603      	mov	r3, r0
}
 800c380:	4618      	mov	r0, r3
 800c382:	3710      	adds	r7, #16
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}

0800c388 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b088      	sub	sp, #32
 800c38c:	af02      	add	r7, sp, #8
 800c38e:	60f8      	str	r0, [r7, #12]
 800c390:	60b9      	str	r1, [r7, #8]
 800c392:	607a      	str	r2, [r7, #4]
 800c394:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d101      	bne.n	800c3a0 <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c39c:	2302      	movs	r3, #2
 800c39e:	e01b      	b.n	800c3d8 <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800c3a0:	2306      	movs	r3, #6
 800c3a2:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800c3a8:	78fa      	ldrb	r2, [r7, #3]
 800c3aa:	f107 0310 	add.w	r3, r7, #16
 800c3ae:	9300      	str	r3, [sp, #0]
 800c3b0:	4613      	mov	r3, r2
 800c3b2:	68ba      	ldr	r2, [r7, #8]
 800c3b4:	68f9      	ldr	r1, [r7, #12]
 800c3b6:	2000      	movs	r0, #0
 800c3b8:	f7ff fe18 	bl	800bfec <ComputeCmac>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c3c0:	7dfb      	ldrb	r3, [r7, #23]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d001      	beq.n	800c3ca <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 800c3c6:	7dfb      	ldrb	r3, [r7, #23]
 800c3c8:	e006      	b.n	800c3d8 <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 800c3ca:	693b      	ldr	r3, [r7, #16]
 800c3cc:	687a      	ldr	r2, [r7, #4]
 800c3ce:	429a      	cmp	r2, r3
 800c3d0:	d001      	beq.n	800c3d6 <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800c3d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3718      	adds	r7, #24
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b0c2      	sub	sp, #264	@ 0x108
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	60f8      	str	r0, [r7, #12]
 800c3e8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c3ec:	f5a0 7080 	sub.w	r0, r0, #256	@ 0x100
 800c3f0:	6001      	str	r1, [r0, #0]
 800c3f2:	4611      	mov	r1, r2
 800c3f4:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800c3f8:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800c3fc:	6013      	str	r3, [r2, #0]
 800c3fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c402:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800c406:	460a      	mov	r2, r1
 800c408:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d006      	beq.n	800c41e <SecureElementAesEncrypt+0x3e>
 800c410:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c414:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d101      	bne.n	800c422 <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c41e:	2302      	movs	r3, #2
 800c420:	e059      	b.n	800c4d6 <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800c422:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c426:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	f003 030f 	and.w	r3, r3, #15
 800c430:	2b00      	cmp	r3, #0
 800c432:	d001      	beq.n	800c438 <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c434:	2305      	movs	r3, #5
 800c436:	e04e      	b.n	800c4d6 <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800c438:	f107 0314 	add.w	r3, r7, #20
 800c43c:	22f0      	movs	r2, #240	@ 0xf0
 800c43e:	2100      	movs	r1, #0
 800c440:	4618      	mov	r0, r3
 800c442:	f00c fb09 	bl	8018a58 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800c446:	f107 0210 	add.w	r2, r7, #16
 800c44a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c44e:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800c452:	781b      	ldrb	r3, [r3, #0]
 800c454:	4611      	mov	r1, r2
 800c456:	4618      	mov	r0, r3
 800c458:	f7ff fd98 	bl	800bf8c <GetKeyByID>
 800c45c:	4603      	mov	r3, r0
 800c45e:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800c462:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 800c466:	2b00      	cmp	r3, #0
 800c468:	d133      	bne.n	800c4d2 <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	3301      	adds	r3, #1
 800c46e:	f107 0214 	add.w	r2, r7, #20
 800c472:	2110      	movs	r1, #16
 800c474:	4618      	mov	r0, r3
 800c476:	f7ff fb65 	bl	800bb44 <lorawan_aes_set_key>

        uint8_t block = 0;
 800c47a:	2300      	movs	r3, #0
 800c47c:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

        while( size != 0 )
 800c480:	e020      	b.n	800c4c4 <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800c482:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800c486:	68fa      	ldr	r2, [r7, #12]
 800c488:	18d0      	adds	r0, r2, r3
 800c48a:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800c48e:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800c492:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800c496:	6812      	ldr	r2, [r2, #0]
 800c498:	4413      	add	r3, r2
 800c49a:	f107 0214 	add.w	r2, r7, #20
 800c49e:	4619      	mov	r1, r3
 800c4a0:	f7ff fc2e 	bl	800bd00 <lorawan_aes_encrypt>
            block = block + 16;
 800c4a4:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800c4a8:	3310      	adds	r3, #16
 800c4aa:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
            size  = size - 16;
 800c4ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c4b2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800c4b6:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800c4ba:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 800c4be:	6812      	ldr	r2, [r2, #0]
 800c4c0:	3a10      	subs	r2, #16
 800c4c2:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 800c4c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c4c8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d1d7      	bne.n	800c482 <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800c4d2:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}

0800c4e0 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b088      	sub	sp, #32
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	460b      	mov	r3, r1
 800c4ea:	70fb      	strb	r3, [r7, #3]
 800c4ec:	4613      	mov	r3, r2
 800c4ee:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d101      	bne.n	800c4fa <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c4f6:	2302      	movs	r3, #2
 800c4f8:	e02e      	b.n	800c558 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800c4fa:	2306      	movs	r3, #6
 800c4fc:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800c4fe:	78bb      	ldrb	r3, [r7, #2]
 800c500:	2b0c      	cmp	r3, #12
 800c502:	d104      	bne.n	800c50e <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800c504:	78fb      	ldrb	r3, [r7, #3]
 800c506:	2b0b      	cmp	r3, #11
 800c508:	d001      	beq.n	800c50e <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c50a:	2303      	movs	r3, #3
 800c50c:	e024      	b.n	800c558 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800c50e:	2300      	movs	r3, #0
 800c510:	60fb      	str	r3, [r7, #12]
 800c512:	f107 0310 	add.w	r3, r7, #16
 800c516:	2200      	movs	r2, #0
 800c518:	601a      	str	r2, [r3, #0]
 800c51a:	605a      	str	r2, [r3, #4]
 800c51c:	609a      	str	r2, [r3, #8]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800c51e:	f107 030c 	add.w	r3, r7, #12
 800c522:	78fa      	ldrb	r2, [r7, #3]
 800c524:	2110      	movs	r1, #16
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f7ff ff5a 	bl	800c3e0 <SecureElementAesEncrypt>
 800c52c:	4603      	mov	r3, r0
 800c52e:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c530:	7ffb      	ldrb	r3, [r7, #31]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d001      	beq.n	800c53a <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800c536:	7ffb      	ldrb	r3, [r7, #31]
 800c538:	e00e      	b.n	800c558 <SecureElementDeriveAndStoreKey+0x78>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 800c53a:	f107 020c 	add.w	r2, r7, #12
 800c53e:	78bb      	ldrb	r3, [r7, #2]
 800c540:	4611      	mov	r1, r2
 800c542:	4618      	mov	r0, r3
 800c544:	f7ff fea8 	bl	800c298 <SecureElementSetKey>
 800c548:	4603      	mov	r3, r0
 800c54a:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c54c:	7ffb      	ldrb	r3, [r7, #31]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d001      	beq.n	800c556 <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800c552:	7ffb      	ldrb	r3, [r7, #31]
 800c554:	e000      	b.n	800c558 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c556:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c558:	4618      	mov	r0, r3
 800c55a:	3720      	adds	r7, #32
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}

0800c560 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b086      	sub	sp, #24
 800c564:	af00      	add	r7, sp, #0
 800c566:	60b9      	str	r1, [r7, #8]
 800c568:	607b      	str	r3, [r7, #4]
 800c56a:	4603      	mov	r3, r0
 800c56c:	73fb      	strb	r3, [r7, #15]
 800c56e:	4613      	mov	r3, r2
 800c570:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d005      	beq.n	800c584 <SecureElementProcessJoinAccept+0x24>
 800c578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d002      	beq.n	800c584 <SecureElementProcessJoinAccept+0x24>
 800c57e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c580:	2b00      	cmp	r3, #0
 800c582:	d101      	bne.n	800c588 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c584:	2302      	movs	r3, #2
 800c586:	e05c      	b.n	800c642 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800c588:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c58c:	2b21      	cmp	r3, #33	@ 0x21
 800c58e:	d901      	bls.n	800c594 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c590:	2305      	movs	r3, #5
 800c592:	e056      	b.n	800c642 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 800c594:	2301      	movs	r3, #1
 800c596:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800c598:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c59c:	b29b      	uxth	r3, r3
 800c59e:	461a      	mov	r2, r3
 800c5a0:	6879      	ldr	r1, [r7, #4]
 800c5a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c5a4:	f00c fa1d 	bl	80189e2 <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	1c58      	adds	r0, r3, #1
 800c5ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c5b0:	3b01      	subs	r3, #1
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5b6:	3301      	adds	r3, #1
 800c5b8:	7dfa      	ldrb	r2, [r7, #23]
 800c5ba:	f7ff ff11 	bl	800c3e0 <SecureElementAesEncrypt>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d001      	beq.n	800c5c8 <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800c5c4:	2307      	movs	r3, #7
 800c5c6:	e03c      	b.n	800c642 <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800c5c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ca:	330b      	adds	r3, #11
 800c5cc:	781b      	ldrb	r3, [r3, #0]
 800c5ce:	09db      	lsrs	r3, r3, #7
 800c5d0:	b2da      	uxtb	r2, r3
 800c5d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5d4:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800c5d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c5da:	3b04      	subs	r3, #4
 800c5dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5de:	4413      	add	r3, r2
 800c5e0:	781b      	ldrb	r3, [r3, #0]
 800c5e2:	4619      	mov	r1, r3
 800c5e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c5e8:	3b03      	subs	r3, #3
 800c5ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5ec:	4413      	add	r3, r2
 800c5ee:	781b      	ldrb	r3, [r3, #0]
 800c5f0:	021b      	lsls	r3, r3, #8
 800c5f2:	ea41 0203 	orr.w	r2, r1, r3
 800c5f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c5fa:	3b02      	subs	r3, #2
 800c5fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c5fe:	440b      	add	r3, r1
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	041b      	lsls	r3, r3, #16
 800c604:	431a      	orrs	r2, r3
 800c606:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c60a:	3b01      	subs	r3, #1
 800c60c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c60e:	440b      	add	r3, r1
 800c610:	781b      	ldrb	r3, [r3, #0]
 800c612:	061b      	lsls	r3, r3, #24
 800c614:	4313      	orrs	r3, r2
 800c616:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800c618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c61a:	781b      	ldrb	r3, [r3, #0]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d10d      	bne.n	800c63c <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800c620:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c624:	3b04      	subs	r3, #4
 800c626:	4619      	mov	r1, r3
 800c628:	2301      	movs	r3, #1
 800c62a:	693a      	ldr	r2, [r7, #16]
 800c62c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c62e:	f7ff feab 	bl	800c388 <SecureElementVerifyAesCmac>
 800c632:	4603      	mov	r3, r0
 800c634:	2b00      	cmp	r3, #0
 800c636:	d003      	beq.n	800c640 <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800c638:	2301      	movs	r3, #1
 800c63a:	e002      	b.n	800c642 <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800c63c:	2304      	movs	r3, #4
 800c63e:	e000      	b.n	800c642 <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c640:	2300      	movs	r3, #0
}
 800c642:	4618      	mov	r0, r3
 800c644:	3718      	adds	r7, #24
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}
	...

0800c64c <SecureElementRandomNumber>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t *randomNum )
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b082      	sub	sp, #8
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d101      	bne.n	800c65e <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c65a:	2302      	movs	r3, #2
 800c65c:	e006      	b.n	800c66c <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800c65e:	4b05      	ldr	r3, [pc, #20]	@ (800c674 <SecureElementRandomNumber+0x28>)
 800c660:	695b      	ldr	r3, [r3, #20]
 800c662:	4798      	blx	r3
 800c664:	4602      	mov	r2, r0
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800c66a:	2300      	movs	r3, #0
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	3708      	adds	r7, #8
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}
 800c674:	0801da80 	.word	0x0801da80

0800c678 <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b082      	sub	sp, #8
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d101      	bne.n	800c68a <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c686:	2302      	movs	r3, #2
 800c688:	e007      	b.n	800c69a <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800c68a:	4b06      	ldr	r3, [pc, #24]	@ (800c6a4 <SecureElementSetDevEui+0x2c>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	2208      	movs	r2, #8
 800c690:	6879      	ldr	r1, [r7, #4]
 800c692:	4618      	mov	r0, r3
 800c694:	f00c f9a5 	bl	80189e2 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c698:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3708      	adds	r7, #8
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}
 800c6a2:	bf00      	nop
 800c6a4:	200005bc 	.word	0x200005bc

0800c6a8 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b082      	sub	sp, #8
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d101      	bne.n	800c6ba <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c6b6:	2302      	movs	r3, #2
 800c6b8:	e007      	b.n	800c6ca <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800c6ba:	4b06      	ldr	r3, [pc, #24]	@ (800c6d4 <SecureElementGetDevEui+0x2c>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	2208      	movs	r2, #8
 800c6c0:	4619      	mov	r1, r3
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f00c f98d 	bl	80189e2 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c6c8:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3708      	adds	r7, #8
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}
 800c6d2:	bf00      	nop
 800c6d4:	200005bc 	.word	0x200005bc

0800c6d8 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b082      	sub	sp, #8
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d101      	bne.n	800c6ea <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c6e6:	2302      	movs	r3, #2
 800c6e8:	e008      	b.n	800c6fc <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800c6ea:	4b06      	ldr	r3, [pc, #24]	@ (800c704 <SecureElementSetJoinEui+0x2c>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	3308      	adds	r3, #8
 800c6f0:	2208      	movs	r2, #8
 800c6f2:	6879      	ldr	r1, [r7, #4]
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f00c f974 	bl	80189e2 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c6fa:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	3708      	adds	r7, #8
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}
 800c704:	200005bc 	.word	0x200005bc

0800c708 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b082      	sub	sp, #8
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d101      	bne.n	800c71a <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c716:	2302      	movs	r3, #2
 800c718:	e008      	b.n	800c72c <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800c71a:	4b06      	ldr	r3, [pc, #24]	@ (800c734 <SecureElementGetJoinEui+0x2c>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	3308      	adds	r3, #8
 800c720:	2208      	movs	r2, #8
 800c722:	4619      	mov	r1, r3
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f00c f95c 	bl	80189e2 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c72a:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3708      	adds	r7, #8
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}
 800c734:	200005bc 	.word	0x200005bc

0800c738 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 800c738:	b480      	push	{r7}
 800c73a:	b083      	sub	sp, #12
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	4603      	mov	r3, r0
 800c740:	6039      	str	r1, [r7, #0]
 800c742:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800c744:	79fb      	ldrb	r3, [r7, #7]
 800c746:	2b02      	cmp	r3, #2
 800c748:	d104      	bne.n	800c754 <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800c74a:	4b07      	ldr	r3, [pc, #28]	@ (800c768 <SecureElementSetDevAddr+0x30>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	683a      	ldr	r2, [r7, #0]
 800c750:	611a      	str	r2, [r3, #16]
 800c752:	e003      	b.n	800c75c <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800c754:	4b04      	ldr	r3, [pc, #16]	@ (800c768 <SecureElementSetDevAddr+0x30>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	683a      	ldr	r2, [r7, #0]
 800c75a:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 800c75c:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800c75e:	4618      	mov	r0, r3
 800c760:	370c      	adds	r7, #12
 800c762:	46bd      	mov	sp, r7
 800c764:	bc80      	pop	{r7}
 800c766:	4770      	bx	lr
 800c768:	200005bc 	.word	0x200005bc

0800c76c <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 800c76c:	b480      	push	{r7}
 800c76e:	b083      	sub	sp, #12
 800c770:	af00      	add	r7, sp, #0
 800c772:	4603      	mov	r3, r0
 800c774:	6039      	str	r1, [r7, #0]
 800c776:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d101      	bne.n	800c782 <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c77e:	2302      	movs	r3, #2
 800c780:	e00e      	b.n	800c7a0 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800c782:	79fb      	ldrb	r3, [r7, #7]
 800c784:	2b02      	cmp	r3, #2
 800c786:	d105      	bne.n	800c794 <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800c788:	4b08      	ldr	r3, [pc, #32]	@ (800c7ac <SecureElementGetDevAddr+0x40>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	691a      	ldr	r2, [r3, #16]
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	601a      	str	r2, [r3, #0]
 800c792:	e004      	b.n	800c79e <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800c794:	4b05      	ldr	r3, [pc, #20]	@ (800c7ac <SecureElementGetDevAddr+0x40>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	695a      	ldr	r2, [r3, #20]
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800c79e:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	370c      	adds	r7, #12
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bc80      	pop	{r7}
 800c7a8:	4770      	bx	lr
 800c7aa:	bf00      	nop
 800c7ac:	200005bc 	.word	0x200005bc

0800c7b0 <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b082      	sub	sp, #8
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800c7ba:	4a22      	ldr	r2, [pc, #136]	@ (800c844 <LmHandlerInit+0x94>)
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800c7c0:	4b21      	ldr	r3, [pc, #132]	@ (800c848 <LmHandlerInit+0x98>)
 800c7c2:	4a22      	ldr	r2, [pc, #136]	@ (800c84c <LmHandlerInit+0x9c>)
 800c7c4:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800c7c6:	4b20      	ldr	r3, [pc, #128]	@ (800c848 <LmHandlerInit+0x98>)
 800c7c8:	4a21      	ldr	r2, [pc, #132]	@ (800c850 <LmHandlerInit+0xa0>)
 800c7ca:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800c7cc:	4b1e      	ldr	r3, [pc, #120]	@ (800c848 <LmHandlerInit+0x98>)
 800c7ce:	4a21      	ldr	r2, [pc, #132]	@ (800c854 <LmHandlerInit+0xa4>)
 800c7d0:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800c7d2:	4b1d      	ldr	r3, [pc, #116]	@ (800c848 <LmHandlerInit+0x98>)
 800c7d4:	4a20      	ldr	r2, [pc, #128]	@ (800c858 <LmHandlerInit+0xa8>)
 800c7d6:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800c7d8:	4b1a      	ldr	r3, [pc, #104]	@ (800c844 <LmHandlerInit+0x94>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	4a1f      	ldr	r2, [pc, #124]	@ (800c85c <LmHandlerInit+0xac>)
 800c7e0:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800c7e2:	4b18      	ldr	r3, [pc, #96]	@ (800c844 <LmHandlerInit+0x94>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	685b      	ldr	r3, [r3, #4]
 800c7e8:	4a1c      	ldr	r2, [pc, #112]	@ (800c85c <LmHandlerInit+0xac>)
 800c7ea:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800c7ec:	4b15      	ldr	r3, [pc, #84]	@ (800c844 <LmHandlerInit+0x94>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	689b      	ldr	r3, [r3, #8]
 800c7f2:	4a1a      	ldr	r2, [pc, #104]	@ (800c85c <LmHandlerInit+0xac>)
 800c7f4:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800c7f6:	4b13      	ldr	r3, [pc, #76]	@ (800c844 <LmHandlerInit+0x94>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	68db      	ldr	r3, [r3, #12]
 800c7fc:	4a17      	ldr	r2, [pc, #92]	@ (800c85c <LmHandlerInit+0xac>)
 800c7fe:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800c800:	4b16      	ldr	r3, [pc, #88]	@ (800c85c <LmHandlerInit+0xac>)
 800c802:	4a17      	ldr	r2, [pc, #92]	@ (800c860 <LmHandlerInit+0xb0>)
 800c804:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800c806:	4b0f      	ldr	r3, [pc, #60]	@ (800c844 <LmHandlerInit+0x94>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	699b      	ldr	r3, [r3, #24]
 800c80c:	4a13      	ldr	r2, [pc, #76]	@ (800c85c <LmHandlerInit+0xac>)
 800c80e:	6153      	str	r3, [r2, #20]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800c810:	4914      	ldr	r1, [pc, #80]	@ (800c864 <LmHandlerInit+0xb4>)
 800c812:	2000      	movs	r0, #0
 800c814:	f000 fdd8 	bl	800d3c8 <LmHandlerPackageRegister>
 800c818:	4603      	mov	r3, r0
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d002      	beq.n	800c824 <LmHandlerInit+0x74>
    {
        return LORAMAC_HANDLER_ERROR;
 800c81e:	f04f 33ff 	mov.w	r3, #4294967295
 800c822:	e00a      	b.n	800c83a <LmHandlerInit+0x8a>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800c824:	463b      	mov	r3, r7
 800c826:	4618      	mov	r0, r3
 800c828:	f001 fb40 	bl	800deac <LmhpPackagesRegistrationInit>
 800c82c:	4603      	mov	r3, r0
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d002      	beq.n	800c838 <LmHandlerInit+0x88>
    {
        return LORAMAC_HANDLER_ERROR;
 800c832:	f04f 33ff 	mov.w	r3, #4294967295
 800c836:	e000      	b.n	800c83a <LmHandlerInit+0x8a>
    }

    return LORAMAC_HANDLER_SUCCESS;
 800c838:	2300      	movs	r3, #0
}
 800c83a:	4618      	mov	r0, r3
 800c83c:	3708      	adds	r7, #8
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}
 800c842:	bf00      	nop
 800c844:	20000604 	.word	0x20000604
 800c848:	20000608 	.word	0x20000608
 800c84c:	0800d08d 	.word	0x0800d08d
 800c850:	0800d101 	.word	0x0800d101
 800c854:	0800d1e1 	.word	0x0800d1e1
 800c858:	0800d335 	.word	0x0800d335
 800c85c:	20000618 	.word	0x20000618
 800c860:	0800d829 	.word	0x0800d829
 800c864:	20000098 	.word	0x20000098

0800c868 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b092      	sub	sp, #72	@ 0x48
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800c870:	2218      	movs	r2, #24
 800c872:	6879      	ldr	r1, [r7, #4]
 800c874:	4883      	ldr	r0, [pc, #524]	@ (800ca84 <LmHandlerConfigure+0x21c>)
 800c876:	f00c f8b4 	bl	80189e2 <memcpy1>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800c87a:	f7fe faa1 	bl	800adc0 <LoraInfo_GetPtr>
 800c87e:	6478      	str	r0, [r7, #68]	@ 0x44

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800c880:	4b80      	ldr	r3, [pc, #512]	@ (800ca84 <LmHandlerConfigure+0x21c>)
 800c882:	781b      	ldrb	r3, [r3, #0]
 800c884:	461a      	mov	r2, r3
 800c886:	2301      	movs	r3, #1
 800c888:	4093      	lsls	r3, r2
 800c88a:	461a      	mov	r2, r3
 800c88c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c88e:	685b      	ldr	r3, [r3, #4]
 800c890:	4013      	ands	r3, r2
 800c892:	2b00      	cmp	r3, #0
 800c894:	d107      	bne.n	800c8a6 <LmHandlerConfigure+0x3e>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800c896:	4b7c      	ldr	r3, [pc, #496]	@ (800ca88 <LmHandlerConfigure+0x220>)
 800c898:	2201      	movs	r2, #1
 800c89a:	2100      	movs	r1, #0
 800c89c:	2000      	movs	r0, #0
 800c89e:	f00f fec1 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800c8a2:	bf00      	nop
 800c8a4:	e7fd      	b.n	800c8a2 <LmHandlerConfigure+0x3a>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800c8a6:	4b77      	ldr	r3, [pc, #476]	@ (800ca84 <LmHandlerConfigure+0x21c>)
 800c8a8:	781b      	ldrb	r3, [r3, #0]
 800c8aa:	461a      	mov	r2, r3
 800c8ac:	4977      	ldr	r1, [pc, #476]	@ (800ca8c <LmHandlerConfigure+0x224>)
 800c8ae:	4878      	ldr	r0, [pc, #480]	@ (800ca90 <LmHandlerConfigure+0x228>)
 800c8b0:	f004 fd84 	bl	80113bc <LoRaMacInitialization>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d002      	beq.n	800c8c0 <LmHandlerConfigure+0x58>
    {
        return LORAMAC_HANDLER_ERROR;
 800c8ba:	f04f 33ff 	mov.w	r3, #4294967295
 800c8be:	e0dc      	b.n	800ca7a <LmHandlerConfigure+0x212>
    }

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    /* Try the restore context from the Backup RAM structure if data retention is available */
    mibReq.Type = MIB_NVM_CTXS;
 800c8c0:	2326      	movs	r3, #38	@ 0x26
 800c8c2:	763b      	strb	r3, [r7, #24]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800c8c4:	f107 0318 	add.w	r3, r7, #24
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f005 fad5 	bl	8011e78 <LoRaMacMibSetRequestConfirm>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d103      	bne.n	800c8dc <LmHandlerConfigure+0x74>
    {
        CtxRestoreDone = true;
 800c8d4:	4b6f      	ldr	r3, [pc, #444]	@ (800ca94 <LmHandlerConfigure+0x22c>)
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	701a      	strb	r2, [r3, #0]
 800c8da:	e02a      	b.n	800c932 <LmHandlerConfigure+0xca>
    }
    else
    {
        /* Restore context data backup from user callback (stored in FLASH) */
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800c8dc:	2327      	movs	r3, #39	@ 0x27
 800c8de:	763b      	strb	r3, [r7, #24]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 800c8e0:	4b6d      	ldr	r3, [pc, #436]	@ (800ca98 <LmHandlerConfigure+0x230>)
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	691b      	ldr	r3, [r3, #16]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d00c      	beq.n	800c904 <LmHandlerConfigure+0x9c>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800c8ea:	f107 0318 	add.w	r3, r7, #24
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	f005 f90a 	bl	8011b08 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 800c8f4:	4b68      	ldr	r3, [pc, #416]	@ (800ca98 <LmHandlerConfigure+0x230>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	691b      	ldr	r3, [r3, #16]
 800c8fa:	69fa      	ldr	r2, [r7, #28]
 800c8fc:	f44f 61ef 	mov.w	r1, #1912	@ 0x778
 800c900:	4610      	mov	r0, r2
 800c902:	4798      	blx	r3
        }
        /* Restore context data from backup to main nvm structure */
        mibReq.Type = MIB_NVM_CTXS;
 800c904:	2326      	movs	r3, #38	@ 0x26
 800c906:	763b      	strb	r3, [r7, #24]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800c908:	f107 0318 	add.w	r3, r7, #24
 800c90c:	4618      	mov	r0, r3
 800c90e:	f005 fab3 	bl	8011e78 <LoRaMacMibSetRequestConfirm>
 800c912:	4603      	mov	r3, r0
 800c914:	2b00      	cmp	r3, #0
 800c916:	d10c      	bne.n	800c932 <LmHandlerConfigure+0xca>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c918:	2301      	movs	r3, #1
 800c91a:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800c91c:	f107 0318 	add.w	r3, r7, #24
 800c920:	4618      	mov	r0, r3
 800c922:	f005 f8f1 	bl	8011b08 <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 800c926:	7f3b      	ldrb	r3, [r7, #28]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d002      	beq.n	800c932 <LmHandlerConfigure+0xca>
            {
                CtxRestoreDone = true;
 800c92c:	4b59      	ldr	r3, [pc, #356]	@ (800ca94 <LmHandlerConfigure+0x22c>)
 800c92e:	2201      	movs	r2, #1
 800c930:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if( CtxRestoreDone == true )
 800c932:	4b58      	ldr	r3, [pc, #352]	@ (800ca94 <LmHandlerConfigure+0x22c>)
 800c934:	781b      	ldrb	r3, [r3, #0]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d022      	beq.n	800c980 <LmHandlerConfigure+0x118>
    {
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800c93a:	4b57      	ldr	r3, [pc, #348]	@ (800ca98 <LmHandlerConfigure+0x230>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	69db      	ldr	r3, [r3, #28]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d004      	beq.n	800c94e <LmHandlerConfigure+0xe6>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800c944:	4b54      	ldr	r3, [pc, #336]	@ (800ca98 <LmHandlerConfigure+0x230>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	69db      	ldr	r3, [r3, #28]
 800c94a:	2000      	movs	r0, #0
 800c94c:	4798      	blx	r3
        }

        mibReq.Type = MIB_NVM_CTXS;
 800c94e:	2326      	movs	r3, #38	@ 0x26
 800c950:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800c952:	f107 0318 	add.w	r3, r7, #24
 800c956:	4618      	mov	r0, r3
 800c958:	f005 f8d6 	bl	8011b08 <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 800c95c:	69fb      	ldr	r3, [r7, #28]
 800c95e:	643b      	str	r3, [r7, #64]	@ 0x40

        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 800c960:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c962:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800c966:	4b47      	ldr	r3, [pc, #284]	@ (800ca84 <LmHandlerConfigure+0x21c>)
 800c968:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 800c96a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c96c:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 800c970:	4b44      	ldr	r3, [pc, #272]	@ (800ca84 <LmHandlerConfigure+0x21c>)
 800c972:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 800c974:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c976:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 800c97a:	4b42      	ldr	r3, [pc, #264]	@ (800ca84 <LmHandlerConfigure+0x21c>)
 800c97c:	709a      	strb	r2, [r3, #2]
 800c97e:	e008      	b.n	800c992 <LmHandlerConfigure+0x12a>
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800c980:	2305      	movs	r3, #5
 800c982:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800c984:	2300      	movs	r3, #0
 800c986:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800c988:	f107 0318 	add.w	r3, r7, #24
 800c98c:	4618      	mov	r0, r3
 800c98e:	f005 fa73 	bl	8011e78 <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800c992:	4b3e      	ldr	r3, [pc, #248]	@ (800ca8c <LmHandlerConfigure+0x224>)
 800c994:	689b      	ldr	r3, [r3, #8]
 800c996:	4a3d      	ldr	r2, [pc, #244]	@ (800ca8c <LmHandlerConfigure+0x224>)
 800c998:	68d2      	ldr	r2, [r2, #12]
 800c99a:	4611      	mov	r1, r2
 800c99c:	4618      	mov	r0, r3
 800c99e:	f7ff fbc9 	bl	800c134 <SecureElementInitMcuID>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d002      	beq.n	800c9ae <LmHandlerConfigure+0x146>
    {
        return LORAMAC_HANDLER_ERROR;
 800c9a8:	f04f 33ff 	mov.w	r3, #4294967295
 800c9ac:	e065      	b.n	800ca7a <LmHandlerConfigure+0x212>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800c9ae:	2306      	movs	r3, #6
 800c9b0:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c9b2:	f107 0318 	add.w	r3, r7, #24
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f005 f8a6 	bl	8011b08 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800c9bc:	69fb      	ldr	r3, [r7, #28]
 800c9be:	4a37      	ldr	r2, [pc, #220]	@ (800ca9c <LmHandlerConfigure+0x234>)
 800c9c0:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c9c2:	f107 0318 	add.w	r3, r7, #24
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f005 fa56 	bl	8011e78 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800c9cc:	2302      	movs	r3, #2
 800c9ce:	763b      	strb	r3, [r7, #24]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800c9d0:	4b32      	ldr	r3, [pc, #200]	@ (800ca9c <LmHandlerConfigure+0x234>)
 800c9d2:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c9d4:	f107 0318 	add.w	r3, r7, #24
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f005 f895 	bl	8011b08 <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800c9de:	2303      	movs	r3, #3
 800c9e0:	763b      	strb	r3, [r7, #24]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800c9e2:	4b2f      	ldr	r3, [pc, #188]	@ (800caa0 <LmHandlerConfigure+0x238>)
 800c9e4:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c9e6:	f107 0318 	add.w	r3, r7, #24
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f005 f88c 	bl	8011b08 <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800c9f0:	f7ff fc20 	bl	800c234 <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800c9f4:	230f      	movs	r3, #15
 800c9f6:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c9fc:	f107 0318 	add.w	r3, r7, #24
 800ca00:	4618      	mov	r0, r3
 800ca02:	f005 fa39 	bl	8011e78 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800ca06:	2310      	movs	r3, #16
 800ca08:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800ca0e:	f107 0318 	add.w	r3, r7, #24
 800ca12:	4618      	mov	r0, r3
 800ca14:	f005 fa30 	bl	8011e78 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800ca18:	2304      	movs	r3, #4
 800ca1a:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800ca1c:	4b19      	ldr	r3, [pc, #100]	@ (800ca84 <LmHandlerConfigure+0x21c>)
 800ca1e:	789b      	ldrb	r3, [r3, #2]
 800ca20:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800ca22:	f107 0318 	add.w	r3, r7, #24
 800ca26:	4618      	mov	r0, r3
 800ca28:	f005 fa26 	bl	8011e78 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800ca2c:	2339      	movs	r3, #57	@ 0x39
 800ca2e:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800ca30:	4b14      	ldr	r3, [pc, #80]	@ (800ca84 <LmHandlerConfigure+0x21c>)
 800ca32:	695b      	ldr	r3, [r3, #20]
 800ca34:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800ca36:	f107 0318 	add.w	r3, r7, #24
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	f005 fa1c 	bl	8011e78 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800ca40:	230f      	movs	r3, #15
 800ca42:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800ca44:	4b0f      	ldr	r3, [pc, #60]	@ (800ca84 <LmHandlerConfigure+0x21c>)
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	f107 0210 	add.w	r2, r7, #16
 800ca4c:	4611      	mov	r1, r2
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f008 f8f4 	bl	8014c3c <RegionGetPhyParam>
 800ca54:	4603      	mov	r3, r0
 800ca56:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	bf14      	ite	ne
 800ca5e:	2301      	movne	r3, #1
 800ca60:	2300      	moveq	r3, #0
 800ca62:	b2da      	uxtb	r2, r3
 800ca64:	4b07      	ldr	r3, [pc, #28]	@ (800ca84 <LmHandlerConfigure+0x21c>)
 800ca66:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800ca68:	2014      	movs	r0, #20
 800ca6a:	f000 faf7 	bl	800d05c <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800ca6e:	4b05      	ldr	r3, [pc, #20]	@ (800ca84 <LmHandlerConfigure+0x21c>)
 800ca70:	79db      	ldrb	r3, [r3, #7]
 800ca72:	4618      	mov	r0, r3
 800ca74:	f005 ffdc 	bl	8012a30 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800ca78:	2300      	movs	r3, #0
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3748      	adds	r7, #72	@ 0x48
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}
 800ca82:	bf00      	nop
 800ca84:	200005ec 	.word	0x200005ec
 800ca88:	0801d2d8 	.word	0x0801d2d8
 800ca8c:	20000618 	.word	0x20000618
 800ca90:	20000608 	.word	0x20000608
 800ca94:	20000726 	.word	0x20000726
 800ca98:	20000604 	.word	0x20000604
 800ca9c:	200005c0 	.word	0x200005c0
 800caa0:	200005c8 	.word	0x200005c8

0800caa4 <LmHandlerIsBusy>:

bool LmHandlerIsBusy( void )
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == true )
 800caa8:	f002 f96c 	bl	800ed84 <LoRaMacIsBusy>
 800caac:	4603      	mov	r3, r0
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d001      	beq.n	800cab6 <LmHandlerIsBusy+0x12>
    {
        return true;
 800cab2:	2301      	movs	r3, #1
 800cab4:	e01f      	b.n	800caf6 <LmHandlerIsBusy+0x52>
    }
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800cab6:	f000 f8df 	bl	800cc78 <LmHandlerJoinStatus>
 800caba:	4603      	mov	r3, r0
 800cabc:	2b01      	cmp	r3, #1
 800cabe:	d009      	beq.n	800cad4 <LmHandlerIsBusy+0x30>
    {
        /* The network isn't yet joined, try again later. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800cac0:	4b0e      	ldr	r3, [pc, #56]	@ (800cafc <LmHandlerIsBusy+0x58>)
 800cac2:	79db      	ldrb	r3, [r3, #7]
 800cac4:	4a0d      	ldr	r2, [pc, #52]	@ (800cafc <LmHandlerIsBusy+0x58>)
 800cac6:	7a12      	ldrb	r2, [r2, #8]
 800cac8:	4611      	mov	r1, r2
 800caca:	4618      	mov	r0, r3
 800cacc:	f000 f830 	bl	800cb30 <LmHandlerJoin>
        return true;
 800cad0:	2301      	movs	r3, #1
 800cad2:	e010      	b.n	800caf6 <LmHandlerIsBusy+0x52>
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true )
 800cad4:	4b0a      	ldr	r3, [pc, #40]	@ (800cb00 <LmHandlerIsBusy+0x5c>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	68db      	ldr	r3, [r3, #12]
 800cada:	4798      	blx	r3
 800cadc:	4603      	mov	r3, r0
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d001      	beq.n	800cae6 <LmHandlerIsBusy+0x42>
    {
        return true;
 800cae2:	2301      	movs	r3, #1
 800cae4:	e007      	b.n	800caf6 <LmHandlerIsBusy+0x52>
    }
#endif /* LORAMAC_VERSION */

    if( LmHandlerPackageIsTxPending( ) == true )
 800cae6:	f000 fd7f 	bl	800d5e8 <LmHandlerPackageIsTxPending>
 800caea:	4603      	mov	r3, r0
 800caec:	2b00      	cmp	r3, #0
 800caee:	d001      	beq.n	800caf4 <LmHandlerIsBusy+0x50>
    {
        return true;
 800caf0:	2301      	movs	r3, #1
 800caf2:	e000      	b.n	800caf6 <LmHandlerIsBusy+0x52>
    }

    return false;
 800caf4:	2300      	movs	r3, #0
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	bd80      	pop	{r7, pc}
 800cafa:	bf00      	nop
 800cafc:	200000a4 	.word	0x200000a4
 800cb00:	200005d8 	.word	0x200005d8

0800cb04 <LmHandlerProcess>:

void LmHandlerProcess( void )
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 800cb08:	f002 fbb0 	bl	800f26c <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 800cb0c:	f000 fd9a 	bl	800d644 <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 800cb10:	f000 fd6a 	bl	800d5e8 <LmHandlerPackageIsTxPending>
 800cb14:	4603      	mov	r3, r0
 800cb16:	2b00      	cmp	r3, #0
        {
            IsUplinkTxPending = false;
        }
    }
#endif /* LORAMAC_VERSION */
}
 800cb18:	bd80      	pop	{r7, pc}
	...

0800cb1c <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800cb1c:	b480      	push	{r7}
 800cb1e:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800cb20:	4b02      	ldr	r3, [pc, #8]	@ (800cb2c <LmHandlerGetDutyCycleWaitTime+0x10>)
 800cb22:	681b      	ldr	r3, [r3, #0]
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bc80      	pop	{r7}
 800cb2a:	4770      	bx	lr
 800cb2c:	20000630 	.word	0x20000630

0800cb30 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b092      	sub	sp, #72	@ 0x48
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	4603      	mov	r3, r0
 800cb38:	460a      	mov	r2, r1
 800cb3a:	71fb      	strb	r3, [r7, #7]
 800cb3c:	4613      	mov	r3, r2
 800cb3e:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800cb40:	2301      	movs	r3, #1
 800cb42:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800cb46:	4b47      	ldr	r3, [pc, #284]	@ (800cc64 <LmHandlerJoin+0x134>)
 800cb48:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800cb4c:	b2db      	uxtb	r3, r3
 800cb4e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800cb52:	4b44      	ldr	r3, [pc, #272]	@ (800cc64 <LmHandlerJoin+0x134>)
 800cb54:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800cb58:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 800cb5c:	79fb      	ldrb	r3, [r7, #7]
 800cb5e:	2b02      	cmp	r3, #2
 800cb60:	d110      	bne.n	800cb84 <LmHandlerJoin+0x54>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800cb62:	2302      	movs	r3, #2
 800cb64:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800cb68:	4b3f      	ldr	r3, [pc, #252]	@ (800cc68 <LmHandlerJoin+0x138>)
 800cb6a:	2202      	movs	r2, #2
 800cb6c:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800cb6e:	4a3e      	ldr	r2, [pc, #248]	@ (800cc68 <LmHandlerJoin+0x138>)
 800cb70:	79bb      	ldrb	r3, [r7, #6]
 800cb72:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 800cb74:	f004 fed4 	bl	8011920 <LoRaMacStart>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        /* Starts the OTAA join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 800cb78:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f005 fd0f 	bl	80125a0 <LoRaMacMlmeRequest>
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
#endif /* LORAMAC_VERSION */
}
 800cb82:	e06b      	b.n	800cc5c <LmHandlerJoin+0x12c>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800cb84:	2301      	movs	r3, #1
 800cb86:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800cb8a:	4b37      	ldr	r3, [pc, #220]	@ (800cc68 <LmHandlerJoin+0x138>)
 800cb8c:	2201      	movs	r2, #1
 800cb8e:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800cb90:	4b34      	ldr	r3, [pc, #208]	@ (800cc64 <LmHandlerJoin+0x134>)
 800cb92:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800cb96:	4b34      	ldr	r3, [pc, #208]	@ (800cc68 <LmHandlerJoin+0x138>)
 800cb98:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800cb9a:	4b32      	ldr	r3, [pc, #200]	@ (800cc64 <LmHandlerJoin+0x134>)
 800cb9c:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800cba0:	4b31      	ldr	r3, [pc, #196]	@ (800cc68 <LmHandlerJoin+0x138>)
 800cba2:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800cba4:	4b30      	ldr	r3, [pc, #192]	@ (800cc68 <LmHandlerJoin+0x138>)
 800cba6:	2200      	movs	r2, #0
 800cba8:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800cbaa:	4a2f      	ldr	r2, [pc, #188]	@ (800cc68 <LmHandlerJoin+0x138>)
 800cbac:	79bb      	ldrb	r3, [r7, #6]
 800cbae:	7213      	strb	r3, [r2, #8]
        if( CtxRestoreDone == false )
 800cbb0:	4b2e      	ldr	r3, [pc, #184]	@ (800cc6c <LmHandlerJoin+0x13c>)
 800cbb2:	781b      	ldrb	r3, [r3, #0]
 800cbb4:	f083 0301 	eor.w	r3, r3, #1
 800cbb8:	b2db      	uxtb	r3, r3
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d034      	beq.n	800cc28 <LmHandlerJoin+0xf8>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800cbbe:	231e      	movs	r3, #30
 800cbc0:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800cbc2:	4b28      	ldr	r3, [pc, #160]	@ (800cc64 <LmHandlerJoin+0x134>)
 800cbc4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800cbc8:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800cbca:	f107 030c 	add.w	r3, r7, #12
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f005 f952 	bl	8011e78 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800cbd4:	231f      	movs	r3, #31
 800cbd6:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800cbd8:	4b22      	ldr	r3, [pc, #136]	@ (800cc64 <LmHandlerJoin+0x134>)
 800cbda:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800cbde:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800cbe0:	f107 030c 	add.w	r3, r7, #12
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	f005 f947 	bl	8011e78 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800cbea:	2321      	movs	r3, #33	@ 0x21
 800cbec:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800cbee:	4b1d      	ldr	r3, [pc, #116]	@ (800cc64 <LmHandlerJoin+0x134>)
 800cbf0:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800cbf4:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800cbf6:	f107 030c 	add.w	r3, r7, #12
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f005 f93c 	bl	8011e78 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800cc00:	2320      	movs	r3, #32
 800cc02:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800cc04:	4b17      	ldr	r3, [pc, #92]	@ (800cc64 <LmHandlerJoin+0x134>)
 800cc06:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800cc0a:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800cc0c:	f107 030c 	add.w	r3, r7, #12
 800cc10:	4618      	mov	r0, r3
 800cc12:	f005 f931 	bl	8011e78 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800cc16:	2328      	movs	r3, #40	@ 0x28
 800cc18:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800cc1a:	4b15      	ldr	r3, [pc, #84]	@ (800cc70 <LmHandlerJoin+0x140>)
 800cc1c:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800cc1e:	f107 030c 	add.w	r3, r7, #12
 800cc22:	4618      	mov	r0, r3
 800cc24:	f005 f928 	bl	8011e78 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800cc28:	f004 fe7a 	bl	8011920 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800cc30:	2301      	movs	r3, #1
 800cc32:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800cc34:	f107 030c 	add.w	r3, r7, #12
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f005 f91d 	bl	8011e78 <LoRaMacMibSetRequestConfirm>
        if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800cc3e:	4b0d      	ldr	r3, [pc, #52]	@ (800cc74 <LmHandlerJoin+0x144>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d004      	beq.n	800cc52 <LmHandlerJoin+0x122>
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800cc48:	4b0a      	ldr	r3, [pc, #40]	@ (800cc74 <LmHandlerJoin+0x144>)
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc4e:	4806      	ldr	r0, [pc, #24]	@ (800cc68 <LmHandlerJoin+0x138>)
 800cc50:	4798      	blx	r3
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800cc52:	4b04      	ldr	r3, [pc, #16]	@ (800cc64 <LmHandlerJoin+0x134>)
 800cc54:	785b      	ldrb	r3, [r3, #1]
 800cc56:	4618      	mov	r0, r3
 800cc58:	f000 f930 	bl	800cebc <LmHandlerRequestClass>
}
 800cc5c:	bf00      	nop
 800cc5e:	3748      	adds	r7, #72	@ 0x48
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bd80      	pop	{r7, pc}
 800cc64:	200005ec 	.word	0x200005ec
 800cc68:	200000a4 	.word	0x200000a4
 800cc6c:	20000726 	.word	0x20000726
 800cc70:	01000300 	.word	0x01000300
 800cc74:	20000604 	.word	0x20000604

0800cc78 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b08c      	sub	sp, #48	@ 0x30
 800cc7c:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800cc7e:	2301      	movs	r3, #1
 800cc80:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800cc82:	1d3b      	adds	r3, r7, #4
 800cc84:	4618      	mov	r0, r3
 800cc86:	f004 ff3f 	bl	8011b08 <LoRaMacMibGetRequestConfirm>
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if( status == LORAMAC_STATUS_OK )
 800cc90:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d106      	bne.n	800cca6 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800cc98:	7a3b      	ldrb	r3, [r7, #8]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d101      	bne.n	800cca2 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	e002      	b.n	800cca8 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800cca2:	2301      	movs	r3, #1
 800cca4:	e000      	b.n	800cca8 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800cca6:	2300      	movs	r3, #0
    }
}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	3730      	adds	r7, #48	@ 0x30
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd80      	pop	{r7, pc}

0800ccb0 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b08a      	sub	sp, #40	@ 0x28
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
 800ccb8:	460b      	mov	r3, r1
 800ccba:	70fb      	strb	r3, [r7, #3]
 800ccbc:	4613      	mov	r3, r2
 800ccbe:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800ccc0:	23ff      	movs	r3, #255	@ 0xff
 800ccc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800ccc6:	f002 f85d 	bl	800ed84 <LoRaMacIsBusy>
 800ccca:	4603      	mov	r3, r0
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d002      	beq.n	800ccd6 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800ccd0:	f06f 0301 	mvn.w	r3, #1
 800ccd4:	e0bc      	b.n	800ce50 <LmHandlerSend+0x1a0>
    }

    if( LoRaMacIsStopped() == true )
 800ccd6:	f002 f871 	bl	800edbc <LoRaMacIsStopped>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d002      	beq.n	800cce6 <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800cce0:	f06f 0302 	mvn.w	r3, #2
 800cce4:	e0b4      	b.n	800ce50 <LmHandlerSend+0x1a0>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800cce6:	f7ff ffc7 	bl	800cc78 <LmHandlerJoinStatus>
 800ccea:	4603      	mov	r3, r0
 800ccec:	2b01      	cmp	r3, #1
 800ccee:	d00a      	beq.n	800cd06 <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800ccf0:	4b59      	ldr	r3, [pc, #356]	@ (800ce58 <LmHandlerSend+0x1a8>)
 800ccf2:	79db      	ldrb	r3, [r3, #7]
 800ccf4:	4a58      	ldr	r2, [pc, #352]	@ (800ce58 <LmHandlerSend+0x1a8>)
 800ccf6:	7a12      	ldrb	r2, [r2, #8]
 800ccf8:	4611      	mov	r1, r2
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f7ff ff18 	bl	800cb30 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800cd00:	f06f 0302 	mvn.w	r3, #2
 800cd04:	e0a4      	b.n	800ce50 <LmHandlerSend+0x1a0>
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true )
 800cd06:	4b55      	ldr	r3, [pc, #340]	@ (800ce5c <LmHandlerSend+0x1ac>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	68db      	ldr	r3, [r3, #12]
 800cd0c:	4798      	blx	r3
 800cd0e:	4603      	mov	r3, r0
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d00d      	beq.n	800cd30 <LmHandlerSend+0x80>
        && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	781a      	ldrb	r2, [r3, #0]
 800cd18:	4b50      	ldr	r3, [pc, #320]	@ (800ce5c <LmHandlerSend+0x1ac>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	781b      	ldrb	r3, [r3, #0]
 800cd1e:	429a      	cmp	r2, r3
 800cd20:	d006      	beq.n	800cd30 <LmHandlerSend+0x80>
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	781b      	ldrb	r3, [r3, #0]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d002      	beq.n	800cd30 <LmHandlerSend+0x80>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800cd2a:	f06f 0303 	mvn.w	r3, #3
 800cd2e:	e08f      	b.n	800ce50 <LmHandlerSend+0x1a0>
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800cd30:	4a4b      	ldr	r2, [pc, #300]	@ (800ce60 <LmHandlerSend+0x1b0>)
 800cd32:	78fb      	ldrb	r3, [r7, #3]
 800cd34:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800cd36:	78fb      	ldrb	r3, [r7, #3]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	bf14      	ite	ne
 800cd3c:	2301      	movne	r3, #1
 800cd3e:	2300      	moveq	r3, #0
 800cd40:	b2db      	uxtb	r3, r3
 800cd42:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800cd44:	4b47      	ldr	r3, [pc, #284]	@ (800ce64 <LmHandlerSend+0x1b4>)
 800cd46:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800cd4a:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	785b      	ldrb	r3, [r3, #1]
 800cd50:	f107 020c 	add.w	r2, r7, #12
 800cd54:	4611      	mov	r1, r2
 800cd56:	4618      	mov	r0, r3
 800cd58:	f004 fe50 	bl	80119fc <LoRaMacQueryTxPossible>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d009      	beq.n	800cd76 <LmHandlerSend+0xc6>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800cd62:	2300      	movs	r3, #0
 800cd64:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800cd66:	2300      	movs	r3, #0
 800cd68:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800cd6e:	23f9      	movs	r3, #249	@ 0xf9
 800cd70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cd74:	e008      	b.n	800cd88 <LmHandlerSend+0xd8>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	781b      	ldrb	r3, [r3, #0]
 800cd7a:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	785b      	ldrb	r3, [r3, #1]
 800cd80:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	685b      	ldr	r3, [r3, #4]
 800cd86:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800cd88:	4b35      	ldr	r3, [pc, #212]	@ (800ce60 <LmHandlerSend+0x1b0>)
 800cd8a:	687a      	ldr	r2, [r7, #4]
 800cd8c:	3310      	adds	r3, #16
 800cd8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cd92:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800cd96:	4b33      	ldr	r3, [pc, #204]	@ (800ce64 <LmHandlerSend+0x1b4>)
 800cd98:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800cd9c:	4b30      	ldr	r3, [pc, #192]	@ (800ce60 <LmHandlerSend+0x1b0>)
 800cd9e:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800cda0:	78ba      	ldrb	r2, [r7, #2]
 800cda2:	f107 0310 	add.w	r3, r7, #16
 800cda6:	4611      	mov	r1, r2
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f005 fd4b 	bl	8012844 <LoRaMacMcpsRequest>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800cdb4:	6a3b      	ldr	r3, [r7, #32]
 800cdb6:	4a2c      	ldr	r2, [pc, #176]	@ (800ce68 <LmHandlerSend+0x1b8>)
 800cdb8:	6013      	str	r3, [r2, #0]

    switch( status )
 800cdba:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cdbe:	2b11      	cmp	r3, #17
 800cdc0:	d83f      	bhi.n	800ce42 <LmHandlerSend+0x192>
 800cdc2:	a201      	add	r2, pc, #4	@ (adr r2, 800cdc8 <LmHandlerSend+0x118>)
 800cdc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdc8:	0800ce11 	.word	0x0800ce11
 800cdcc:	0800ce23 	.word	0x0800ce23
 800cdd0:	0800ce43 	.word	0x0800ce43
 800cdd4:	0800ce43 	.word	0x0800ce43
 800cdd8:	0800ce43 	.word	0x0800ce43
 800cddc:	0800ce43 	.word	0x0800ce43
 800cde0:	0800ce43 	.word	0x0800ce43
 800cde4:	0800ce2b 	.word	0x0800ce2b
 800cde8:	0800ce43 	.word	0x0800ce43
 800cdec:	0800ce43 	.word	0x0800ce43
 800cdf0:	0800ce43 	.word	0x0800ce43
 800cdf4:	0800ce3b 	.word	0x0800ce3b
 800cdf8:	0800ce43 	.word	0x0800ce43
 800cdfc:	0800ce43 	.word	0x0800ce43
 800ce00:	0800ce23 	.word	0x0800ce23
 800ce04:	0800ce23 	.word	0x0800ce23
 800ce08:	0800ce23 	.word	0x0800ce23
 800ce0c:	0800ce33 	.word	0x0800ce33
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800ce10:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ce14:	f113 0f07 	cmn.w	r3, #7
 800ce18:	d017      	beq.n	800ce4a <LmHandlerSend+0x19a>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800ce20:	e013      	b.n	800ce4a <LmHandlerSend+0x19a>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800ce22:	23fe      	movs	r3, #254	@ 0xfe
 800ce24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800ce28:	e010      	b.n	800ce4c <LmHandlerSend+0x19c>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800ce2a:	23fd      	movs	r3, #253	@ 0xfd
 800ce2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800ce30:	e00c      	b.n	800ce4c <LmHandlerSend+0x19c>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800ce32:	23fb      	movs	r3, #251	@ 0xfb
 800ce34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800ce38:	e008      	b.n	800ce4c <LmHandlerSend+0x19c>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800ce3a:	23fa      	movs	r3, #250	@ 0xfa
 800ce3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800ce40:	e004      	b.n	800ce4c <LmHandlerSend+0x19c>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800ce42:	23ff      	movs	r3, #255	@ 0xff
 800ce44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800ce48:	e000      	b.n	800ce4c <LmHandlerSend+0x19c>
            break;
 800ce4a:	bf00      	nop
    }

    return lmhStatus;
 800ce4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800ce50:	4618      	mov	r0, r3
 800ce52:	3728      	adds	r7, #40	@ 0x28
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}
 800ce58:	200000a4 	.word	0x200000a4
 800ce5c:	200005d8 	.word	0x200005d8
 800ce60:	200000b0 	.word	0x200000b0
 800ce64:	200005ec 	.word	0x200005ec
 800ce68:	20000630 	.word	0x20000630

0800ce6c <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b086      	sub	sp, #24
 800ce70:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800ce72:	230a      	movs	r3, #10
 800ce74:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800ce76:	463b      	mov	r3, r7
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f005 fb91 	bl	80125a0 <LoRaMacMlmeRequest>
 800ce7e:	4603      	mov	r3, r0
 800ce80:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800ce82:	693b      	ldr	r3, [r7, #16]
 800ce84:	4a06      	ldr	r2, [pc, #24]	@ (800cea0 <LmHandlerDeviceTimeReq+0x34>)
 800ce86:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800ce88:	7dfb      	ldrb	r3, [r7, #23]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d101      	bne.n	800ce92 <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	e001      	b.n	800ce96 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800ce92:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800ce96:	4618      	mov	r0, r3
 800ce98:	3718      	adds	r7, #24
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}
 800ce9e:	bf00      	nop
 800cea0:	20000630 	.word	0x20000630

0800cea4 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800cea4:	b480      	push	{r7}
 800cea6:	b083      	sub	sp, #12
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	4603      	mov	r3, r0
 800ceac:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800ceae:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	370c      	adds	r7, #12
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bc80      	pop	{r7}
 800ceba:	4770      	bx	lr

0800cebc <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b08e      	sub	sp, #56	@ 0x38
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	4603      	mov	r3, r0
 800cec4:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800cec6:	2300      	movs	r3, #0
 800cec8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( LoRaMacIsBusy() == true )
 800cecc:	f001 ff5a 	bl	800ed84 <LoRaMacIsBusy>
 800ced0:	4603      	mov	r3, r0
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d002      	beq.n	800cedc <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800ced6:	f06f 0301 	mvn.w	r3, #1
 800ceda:	e071      	b.n	800cfc0 <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800cedc:	f7ff fecc 	bl	800cc78 <LmHandlerJoinStatus>
 800cee0:	4603      	mov	r3, r0
 800cee2:	2b01      	cmp	r3, #1
 800cee4:	d002      	beq.n	800ceec <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800cee6:	f06f 0302 	mvn.w	r3, #2
 800ceea:	e069      	b.n	800cfc0 <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800ceec:	2300      	movs	r3, #0
 800ceee:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800cef0:	f107 030c 	add.w	r3, r7, #12
 800cef4:	4618      	mov	r0, r3
 800cef6:	f004 fe07 	bl	8011b08 <LoRaMacMibGetRequestConfirm>
 800cefa:	4603      	mov	r3, r0
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d002      	beq.n	800cf06 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800cf00:	f04f 33ff 	mov.w	r3, #4294967295
 800cf04:	e05c      	b.n	800cfc0 <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800cf06:	7c3b      	ldrb	r3, [r7, #16]
 800cf08:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800cf0c:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800cf10:	79fb      	ldrb	r3, [r7, #7]
 800cf12:	429a      	cmp	r2, r3
 800cf14:	d052      	beq.n	800cfbc <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800cf16:	79fb      	ldrb	r3, [r7, #7]
 800cf18:	2b02      	cmp	r3, #2
 800cf1a:	d028      	beq.n	800cf6e <LmHandlerRequestClass+0xb2>
 800cf1c:	2b02      	cmp	r3, #2
 800cf1e:	dc48      	bgt.n	800cfb2 <LmHandlerRequestClass+0xf6>
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d002      	beq.n	800cf2a <LmHandlerRequestClass+0x6e>
 800cf24:	2b01      	cmp	r3, #1
 800cf26:	d01e      	beq.n	800cf66 <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800cf28:	e043      	b.n	800cfb2 <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800cf2a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d041      	beq.n	800cfb6 <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800cf32:	79fb      	ldrb	r3, [r7, #7]
 800cf34:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800cf36:	f107 030c 	add.w	r3, r7, #12
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f004 ff9c 	bl	8011e78 <LoRaMacMibSetRequestConfirm>
 800cf40:	4603      	mov	r3, r0
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d10b      	bne.n	800cf5e <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800cf46:	4b20      	ldr	r3, [pc, #128]	@ (800cfc8 <LmHandlerRequestClass+0x10c>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d032      	beq.n	800cfb6 <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800cf50:	4b1d      	ldr	r3, [pc, #116]	@ (800cfc8 <LmHandlerRequestClass+0x10c>)
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf56:	79fa      	ldrb	r2, [r7, #7]
 800cf58:	4610      	mov	r0, r2
 800cf5a:	4798      	blx	r3
                break;
 800cf5c:	e02b      	b.n	800cfb6 <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800cf5e:	23ff      	movs	r3, #255	@ 0xff
 800cf60:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800cf64:	e027      	b.n	800cfb6 <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800cf66:	23ff      	movs	r3, #255	@ 0xff
 800cf68:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800cf6c:	e026      	b.n	800cfbc <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800cf6e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d003      	beq.n	800cf7e <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800cf76:	23ff      	movs	r3, #255	@ 0xff
 800cf78:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800cf7c:	e01d      	b.n	800cfba <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800cf7e:	79fb      	ldrb	r3, [r7, #7]
 800cf80:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800cf82:	f107 030c 	add.w	r3, r7, #12
 800cf86:	4618      	mov	r0, r3
 800cf88:	f004 ff76 	bl	8011e78 <LoRaMacMibSetRequestConfirm>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d10b      	bne.n	800cfaa <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800cf92:	4b0d      	ldr	r3, [pc, #52]	@ (800cfc8 <LmHandlerRequestClass+0x10c>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d00e      	beq.n	800cfba <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800cf9c:	4b0a      	ldr	r3, [pc, #40]	@ (800cfc8 <LmHandlerRequestClass+0x10c>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cfa2:	79fa      	ldrb	r2, [r7, #7]
 800cfa4:	4610      	mov	r0, r2
 800cfa6:	4798      	blx	r3
                break;
 800cfa8:	e007      	b.n	800cfba <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800cfaa:	23ff      	movs	r3, #255	@ 0xff
 800cfac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800cfb0:	e003      	b.n	800cfba <LmHandlerRequestClass+0xfe>
                break;
 800cfb2:	bf00      	nop
 800cfb4:	e002      	b.n	800cfbc <LmHandlerRequestClass+0x100>
                break;
 800cfb6:	bf00      	nop
 800cfb8:	e000      	b.n	800cfbc <LmHandlerRequestClass+0x100>
                break;
 800cfba:	bf00      	nop
        }
    }
    return errorStatus;
 800cfbc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	3738      	adds	r7, #56	@ 0x38
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd80      	pop	{r7, pc}
 800cfc8:	20000604 	.word	0x20000604

0800cfcc <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b08c      	sub	sp, #48	@ 0x30
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d102      	bne.n	800cfe0 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800cfda:	f04f 33ff 	mov.w	r3, #4294967295
 800cfde:	e010      	b.n	800d002 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800cfe4:	f107 0308 	add.w	r3, r7, #8
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f004 fd8d 	bl	8011b08 <LoRaMacMibGetRequestConfirm>
 800cfee:	4603      	mov	r3, r0
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d002      	beq.n	800cffa <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800cff4:	f04f 33ff 	mov.w	r3, #4294967295
 800cff8:	e003      	b.n	800d002 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800cffa:	7b3a      	ldrb	r2, [r7, #12]
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800d000:	2300      	movs	r3, #0
}
 800d002:	4618      	mov	r0, r3
 800d004:	3730      	adds	r7, #48	@ 0x30
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}
	...

0800d00c <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b08c      	sub	sp, #48	@ 0x30
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d102      	bne.n	800d020 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800d01a:	f04f 33ff 	mov.w	r3, #4294967295
 800d01e:	e016      	b.n	800d04e <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800d020:	231f      	movs	r3, #31
 800d022:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800d024:	f107 0308 	add.w	r3, r7, #8
 800d028:	4618      	mov	r0, r3
 800d02a:	f004 fd6d 	bl	8011b08 <LoRaMacMibGetRequestConfirm>
 800d02e:	4603      	mov	r3, r0
 800d030:	2b00      	cmp	r3, #0
 800d032:	d002      	beq.n	800d03a <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800d034:	f04f 33ff 	mov.w	r3, #4294967295
 800d038:	e009      	b.n	800d04e <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800d03a:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f993 2000 	ldrsb.w	r2, [r3]
 800d048:	4b03      	ldr	r3, [pc, #12]	@ (800d058 <LmHandlerGetTxDatarate+0x4c>)
 800d04a:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800d04c:	2300      	movs	r3, #0
}
 800d04e:	4618      	mov	r0, r3
 800d050:	3730      	adds	r7, #48	@ 0x30
 800d052:	46bd      	mov	sp, r7
 800d054:	bd80      	pop	{r7, pc}
 800d056:	bf00      	nop
 800d058:	200005ec 	.word	0x200005ec

0800d05c <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b08c      	sub	sp, #48	@ 0x30
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800d064:	2322      	movs	r3, #34	@ 0x22
 800d066:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800d06c:	f107 0308 	add.w	r3, r7, #8
 800d070:	4618      	mov	r0, r3
 800d072:	f004 ff01 	bl	8011e78 <LoRaMacMibSetRequestConfirm>
 800d076:	4603      	mov	r3, r0
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d002      	beq.n	800d082 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800d07c:	f04f 33ff 	mov.w	r3, #4294967295
 800d080:	e000      	b.n	800d084 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800d082:	2300      	movs	r3, #0
}
 800d084:	4618      	mov	r0, r3
 800d086:	3730      	adds	r7, #48	@ 0x30
 800d088:	46bd      	mov	sp, r7
 800d08a:	bd80      	pop	{r7, pc}

0800d08c <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b082      	sub	sp, #8
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800d094:	4b18      	ldr	r3, [pc, #96]	@ (800d0f8 <McpsConfirm+0x6c>)
 800d096:	2201      	movs	r2, #1
 800d098:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	785a      	ldrb	r2, [r3, #1]
 800d09e:	4b16      	ldr	r3, [pc, #88]	@ (800d0f8 <McpsConfirm+0x6c>)
 800d0a0:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	789b      	ldrb	r3, [r3, #2]
 800d0a6:	b25a      	sxtb	r2, r3
 800d0a8:	4b13      	ldr	r3, [pc, #76]	@ (800d0f8 <McpsConfirm+0x6c>)
 800d0aa:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	68db      	ldr	r3, [r3, #12]
 800d0b0:	4a11      	ldr	r2, [pc, #68]	@ (800d0f8 <McpsConfirm+0x6c>)
 800d0b2:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800d0ba:	4b0f      	ldr	r3, [pc, #60]	@ (800d0f8 <McpsConfirm+0x6c>)
 800d0bc:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	691b      	ldr	r3, [r3, #16]
 800d0c2:	b2da      	uxtb	r2, r3
 800d0c4:	4b0c      	ldr	r3, [pc, #48]	@ (800d0f8 <McpsConfirm+0x6c>)
 800d0c6:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	791b      	ldrb	r3, [r3, #4]
 800d0cc:	461a      	mov	r2, r3
 800d0ce:	4b0a      	ldr	r3, [pc, #40]	@ (800d0f8 <McpsConfirm+0x6c>)
 800d0d0:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800d0d2:	4b0a      	ldr	r3, [pc, #40]	@ (800d0fc <McpsConfirm+0x70>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d004      	beq.n	800d0e6 <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800d0dc:	4b07      	ldr	r3, [pc, #28]	@ (800d0fc <McpsConfirm+0x70>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0e2:	4805      	ldr	r0, [pc, #20]	@ (800d0f8 <McpsConfirm+0x6c>)
 800d0e4:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800d0e6:	6879      	ldr	r1, [r7, #4]
 800d0e8:	2000      	movs	r0, #0
 800d0ea:	f000 f9eb 	bl	800d4c4 <LmHandlerPackagesNotify>
}
 800d0ee:	bf00      	nop
 800d0f0:	3708      	adds	r7, #8
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}
 800d0f6:	bf00      	nop
 800d0f8:	200000b0 	.word	0x200000b0
 800d0fc:	20000604 	.word	0x20000604

0800d100 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b088      	sub	sp, #32
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
 800d108:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800d10a:	2300      	movs	r3, #0
 800d10c:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800d10e:	4b32      	ldr	r3, [pc, #200]	@ (800d1d8 <McpsIndication+0xd8>)
 800d110:	2201      	movs	r2, #1
 800d112:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	785a      	ldrb	r2, [r3, #1]
 800d118:	4b2f      	ldr	r3, [pc, #188]	@ (800d1d8 <McpsIndication+0xd8>)
 800d11a:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800d11c:	4b2e      	ldr	r3, [pc, #184]	@ (800d1d8 <McpsIndication+0xd8>)
 800d11e:	785b      	ldrb	r3, [r3, #1]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d155      	bne.n	800d1d0 <McpsIndication+0xd0>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	791b      	ldrb	r3, [r3, #4]
 800d128:	b25a      	sxtb	r2, r3
 800d12a:	4b2b      	ldr	r3, [pc, #172]	@ (800d1d8 <McpsIndication+0xd8>)
 800d12c:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d134:	b25a      	sxtb	r2, r3
 800d136:	4b28      	ldr	r3, [pc, #160]	@ (800d1d8 <McpsIndication+0xd8>)
 800d138:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800d140:	4b25      	ldr	r3, [pc, #148]	@ (800d1d8 <McpsIndication+0xd8>)
 800d142:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	78da      	ldrb	r2, [r3, #3]
 800d148:	4b23      	ldr	r3, [pc, #140]	@ (800d1d8 <McpsIndication+0xd8>)
 800d14a:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	691b      	ldr	r3, [r3, #16]
 800d150:	4a21      	ldr	r2, [pc, #132]	@ (800d1d8 <McpsIndication+0xd8>)
 800d152:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	78db      	ldrb	r3, [r3, #3]
 800d158:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	7b1b      	ldrb	r3, [r3, #12]
 800d15e:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	689b      	ldr	r3, [r3, #8]
 800d164:	61fb      	str	r3, [r7, #28]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800d166:	4b1d      	ldr	r3, [pc, #116]	@ (800d1dc <McpsIndication+0xdc>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d007      	beq.n	800d180 <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800d170:	4b1a      	ldr	r3, [pc, #104]	@ (800d1dc <McpsIndication+0xdc>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d176:	f107 0218 	add.w	r2, r7, #24
 800d17a:	4917      	ldr	r1, [pc, #92]	@ (800d1d8 <McpsIndication+0xd8>)
 800d17c:	4610      	mov	r0, r2
 800d17e:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800d180:	4b16      	ldr	r3, [pc, #88]	@ (800d1dc <McpsIndication+0xdc>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d186:	2b00      	cmp	r3, #0
 800d188:	d007      	beq.n	800d19a <McpsIndication+0x9a>
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	7e1b      	ldrb	r3, [r3, #24]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d003      	beq.n	800d19a <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800d192:	4b12      	ldr	r3, [pc, #72]	@ (800d1dc <McpsIndication+0xdc>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d198:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800d19a:	6879      	ldr	r1, [r7, #4]
 800d19c:	2001      	movs	r0, #1
 800d19e:	f000 f991 	bl	800d4c4 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800d1a2:	f107 0317 	add.w	r3, r7, #23
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f7ff ff10 	bl	800cfcc <LmHandlerGetCurrentClass>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	795b      	ldrb	r3, [r3, #5]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d00e      	beq.n	800d1d2 <McpsIndication+0xd2>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */

        /* Send an empty message */
        LmHandlerAppData_t appData =
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	733b      	strb	r3, [r7, #12]
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	737b      	strb	r3, [r7, #13]
 800d1bc:	2300      	movs	r3, #0
 800d1be:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800d1c0:	f107 030c 	add.w	r3, r7, #12
 800d1c4:	2201      	movs	r2, #1
 800d1c6:	2100      	movs	r1, #0
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	f7ff fd71 	bl	800ccb0 <LmHandlerSend>
 800d1ce:	e000      	b.n	800d1d2 <McpsIndication+0xd2>
        return;
 800d1d0:	bf00      	nop
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
    }
#endif /* LORAMAC_VERSION */
}
 800d1d2:	3720      	adds	r7, #32
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd80      	pop	{r7, pc}
 800d1d8:	200000cc 	.word	0x200000cc
 800d1dc:	20000604 	.word	0x20000604

0800d1e0 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b08c      	sub	sp, #48	@ 0x30
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800d1e8:	4b4a      	ldr	r3, [pc, #296]	@ (800d314 <MlmeConfirm+0x134>)
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	785a      	ldrb	r2, [r3, #1]
 800d1f2:	4b48      	ldr	r3, [pc, #288]	@ (800d314 <MlmeConfirm+0x134>)
 800d1f4:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800d1f6:	4b48      	ldr	r3, [pc, #288]	@ (800d318 <MlmeConfirm+0x138>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d004      	beq.n	800d20a <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800d200:	4b45      	ldr	r3, [pc, #276]	@ (800d318 <MlmeConfirm+0x138>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d206:	4843      	ldr	r0, [pc, #268]	@ (800d314 <MlmeConfirm+0x134>)
 800d208:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800d20a:	6879      	ldr	r1, [r7, #4]
 800d20c:	2002      	movs	r0, #2
 800d20e:	f000 f959 	bl	800d4c4 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	781b      	ldrb	r3, [r3, #0]
 800d216:	3b01      	subs	r3, #1
 800d218:	2b0c      	cmp	r3, #12
 800d21a:	d874      	bhi.n	800d306 <MlmeConfirm+0x126>
 800d21c:	a201      	add	r2, pc, #4	@ (adr r2, 800d224 <MlmeConfirm+0x44>)
 800d21e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d222:	bf00      	nop
 800d224:	0800d259 	.word	0x0800d259
 800d228:	0800d307 	.word	0x0800d307
 800d22c:	0800d307 	.word	0x0800d307
 800d230:	0800d307 	.word	0x0800d307
 800d234:	0800d2d5 	.word	0x0800d2d5
 800d238:	0800d307 	.word	0x0800d307
 800d23c:	0800d307 	.word	0x0800d307
 800d240:	0800d307 	.word	0x0800d307
 800d244:	0800d307 	.word	0x0800d307
 800d248:	0800d307 	.word	0x0800d307
 800d24c:	0800d307 	.word	0x0800d307
 800d250:	0800d2ed 	.word	0x0800d2ed
 800d254:	0800d307 	.word	0x0800d307
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 800d258:	2306      	movs	r3, #6
 800d25a:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800d25c:	f107 0308 	add.w	r3, r7, #8
 800d260:	4618      	mov	r0, r3
 800d262:	f004 fc51 	bl	8011b08 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800d266:	4b2d      	ldr	r3, [pc, #180]	@ (800d31c <MlmeConfirm+0x13c>)
 800d268:	79db      	ldrb	r3, [r3, #7]
 800d26a:	68fa      	ldr	r2, [r7, #12]
 800d26c:	4611      	mov	r1, r2
 800d26e:	4618      	mov	r0, r3
 800d270:	f7ff fa62 	bl	800c738 <SecureElementSetDevAddr>
 800d274:	4603      	mov	r3, r0
 800d276:	2b00      	cmp	r3, #0
 800d278:	d102      	bne.n	800d280 <MlmeConfirm+0xa0>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	4a28      	ldr	r2, [pc, #160]	@ (800d320 <MlmeConfirm+0x140>)
 800d27e:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800d280:	4828      	ldr	r0, [pc, #160]	@ (800d324 <MlmeConfirm+0x144>)
 800d282:	f7ff fec3 	bl	800d00c <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800d286:	4828      	ldr	r0, [pc, #160]	@ (800d328 <MlmeConfirm+0x148>)
 800d288:	f000 fa4e 	bl	800d728 <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800d28c:	4b21      	ldr	r3, [pc, #132]	@ (800d314 <MlmeConfirm+0x134>)
 800d28e:	785b      	ldrb	r3, [r3, #1]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d108      	bne.n	800d2a6 <MlmeConfirm+0xc6>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800d294:	4b21      	ldr	r3, [pc, #132]	@ (800d31c <MlmeConfirm+0x13c>)
 800d296:	2200      	movs	r2, #0
 800d298:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800d29a:	4b24      	ldr	r3, [pc, #144]	@ (800d32c <MlmeConfirm+0x14c>)
 800d29c:	785b      	ldrb	r3, [r3, #1]
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f7ff fe0c 	bl	800cebc <LmHandlerRequestClass>
 800d2a4:	e002      	b.n	800d2ac <MlmeConfirm+0xcc>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800d2a6:	4b1d      	ldr	r3, [pc, #116]	@ (800d31c <MlmeConfirm+0x13c>)
 800d2a8:	22ff      	movs	r2, #255	@ 0xff
 800d2aa:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800d2ac:	4b1a      	ldr	r3, [pc, #104]	@ (800d318 <MlmeConfirm+0x138>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d004      	beq.n	800d2c0 <MlmeConfirm+0xe0>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800d2b6:	4b18      	ldr	r3, [pc, #96]	@ (800d318 <MlmeConfirm+0x138>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2bc:	4817      	ldr	r0, [pc, #92]	@ (800d31c <MlmeConfirm+0x13c>)
 800d2be:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800d2c0:	4b14      	ldr	r3, [pc, #80]	@ (800d314 <MlmeConfirm+0x134>)
 800d2c2:	785b      	ldrb	r3, [r3, #1]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d120      	bne.n	800d30a <MlmeConfirm+0x12a>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800d2c8:	4b14      	ldr	r3, [pc, #80]	@ (800d31c <MlmeConfirm+0x13c>)
 800d2ca:	79db      	ldrb	r3, [r3, #7]
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f7fe ffc5 	bl	800c25c <SecureElementPrintSessionKeys>
                }
            }
            break;
 800d2d2:	e01a      	b.n	800d30a <MlmeConfirm+0x12a>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 800d2d4:	4b16      	ldr	r3, [pc, #88]	@ (800d330 <MlmeConfirm+0x150>)
 800d2d6:	2201      	movs	r2, #1
 800d2d8:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	7a1a      	ldrb	r2, [r3, #8]
 800d2de:	4b14      	ldr	r3, [pc, #80]	@ (800d330 <MlmeConfirm+0x150>)
 800d2e0:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	7a5a      	ldrb	r2, [r3, #9]
 800d2e6:	4b12      	ldr	r3, [pc, #72]	@ (800d330 <MlmeConfirm+0x150>)
 800d2e8:	74da      	strb	r2, [r3, #19]
            }
            break;
 800d2ea:	e00f      	b.n	800d30c <MlmeConfirm+0x12c>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	785b      	ldrb	r3, [r3, #1]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d105      	bne.n	800d300 <MlmeConfirm+0x120>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800d2f4:	4b0d      	ldr	r3, [pc, #52]	@ (800d32c <MlmeConfirm+0x14c>)
 800d2f6:	7c1b      	ldrb	r3, [r3, #16]
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f7ff fdd3 	bl	800cea4 <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 800d2fe:	e005      	b.n	800d30c <MlmeConfirm+0x12c>
                    LmHandlerDeviceTimeReq( );
 800d300:	f7ff fdb4 	bl	800ce6c <LmHandlerDeviceTimeReq>
            break;
 800d304:	e002      	b.n	800d30c <MlmeConfirm+0x12c>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800d306:	bf00      	nop
 800d308:	e000      	b.n	800d30c <MlmeConfirm+0x12c>
            break;
 800d30a:	bf00      	nop
    }
}
 800d30c:	bf00      	nop
 800d30e:	3730      	adds	r7, #48	@ 0x30
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}
 800d314:	200000b0 	.word	0x200000b0
 800d318:	20000604 	.word	0x20000604
 800d31c:	200000a4 	.word	0x200000a4
 800d320:	200005c0 	.word	0x200005c0
 800d324:	200000a8 	.word	0x200000a8
 800d328:	200000a9 	.word	0x200000a9
 800d32c:	200005ec 	.word	0x200005ec
 800d330:	200000cc 	.word	0x200000cc

0800d334 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b082      	sub	sp, #8
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
 800d33c:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800d33e:	4b20      	ldr	r3, [pc, #128]	@ (800d3c0 <MlmeIndication+0x8c>)
 800d340:	2200      	movs	r2, #0
 800d342:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	785a      	ldrb	r2, [r3, #1]
 800d348:	4b1d      	ldr	r3, [pc, #116]	@ (800d3c0 <MlmeIndication+0x8c>)
 800d34a:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	789b      	ldrb	r3, [r3, #2]
 800d350:	b25a      	sxtb	r2, r3
 800d352:	4b1b      	ldr	r3, [pc, #108]	@ (800d3c0 <MlmeIndication+0x8c>)
 800d354:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800d356:	683b      	ldr	r3, [r7, #0]
 800d358:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d35c:	b25a      	sxtb	r2, r3
 800d35e:	4b18      	ldr	r3, [pc, #96]	@ (800d3c0 <MlmeIndication+0x8c>)
 800d360:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800d368:	4b15      	ldr	r3, [pc, #84]	@ (800d3c0 <MlmeIndication+0x8c>)
 800d36a:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	78da      	ldrb	r2, [r3, #3]
 800d370:	4b13      	ldr	r3, [pc, #76]	@ (800d3c0 <MlmeIndication+0x8c>)
 800d372:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	685b      	ldr	r3, [r3, #4]
 800d378:	4a11      	ldr	r2, [pc, #68]	@ (800d3c0 <MlmeIndication+0x8c>)
 800d37a:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800d37c:	4b11      	ldr	r3, [pc, #68]	@ (800d3c4 <MlmeIndication+0x90>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d382:	2b00      	cmp	r3, #0
 800d384:	d00d      	beq.n	800d3a2 <MlmeIndication+0x6e>
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	781b      	ldrb	r3, [r3, #0]
 800d38a:	2b0b      	cmp	r3, #11
 800d38c:	d009      	beq.n	800d3a2 <MlmeIndication+0x6e>
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	781b      	ldrb	r3, [r3, #0]
 800d392:	2b0f      	cmp	r3, #15
 800d394:	d005      	beq.n	800d3a2 <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800d396:	4b0b      	ldr	r3, [pc, #44]	@ (800d3c4 <MlmeIndication+0x90>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d39c:	4908      	ldr	r1, [pc, #32]	@ (800d3c0 <MlmeIndication+0x8c>)
 800d39e:	2000      	movs	r0, #0
 800d3a0:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800d3a2:	6879      	ldr	r1, [r7, #4]
 800d3a4:	2003      	movs	r0, #3
 800d3a6:	f000 f88d 	bl	800d4c4 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	781b      	ldrb	r3, [r3, #0]
 800d3ae:	2b0b      	cmp	r3, #11
 800d3b0:	d001      	beq.n	800d3b6 <MlmeIndication+0x82>
 800d3b2:	2b0f      	cmp	r3, #15
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800d3b4:	e000      	b.n	800d3b8 <MlmeIndication+0x84>
            break;
 800d3b6:	bf00      	nop
    }
}
 800d3b8:	bf00      	nop
 800d3ba:	3708      	adds	r7, #8
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}
 800d3c0:	200000cc 	.word	0x200000cc
 800d3c4:	20000604 	.word	0x20000604

0800d3c8 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b084      	sub	sp, #16
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	6039      	str	r1, [r7, #0]
 800d3d2:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	60fb      	str	r3, [r7, #12]
    switch( id )
 800d3d8:	79fb      	ldrb	r3, [r7, #7]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d104      	bne.n	800d3e8 <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 800d3de:	f000 fa59 	bl	800d894 <LmhpCompliancePackageFactory>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	60fb      	str	r3, [r7, #12]
                break;
 800d3e6:	e00d      	b.n	800d404 <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800d3e8:	f107 020c 	add.w	r2, r7, #12
 800d3ec:	79fb      	ldrb	r3, [r7, #7]
 800d3ee:	4611      	mov	r1, r2
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f000 fd65 	bl	800dec0 <LmhpPackagesRegister>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d002      	beq.n	800d402 <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 800d3fc:	f04f 33ff 	mov.w	r3, #4294967295
 800d400:	e031      	b.n	800d466 <LmHandlerPackageRegister+0x9e>
                }
                break;
 800d402:	bf00      	nop
            }
    }
    if( package != NULL )
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d02b      	beq.n	800d462 <LmHandlerPackageRegister+0x9a>
    {
        LmHandlerPackages[id] = package;
 800d40a:	79fb      	ldrb	r3, [r7, #7]
 800d40c:	68fa      	ldr	r2, [r7, #12]
 800d40e:	4918      	ldr	r1, [pc, #96]	@ (800d470 <LmHandlerPackageRegister+0xa8>)
 800d410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800d414:	79fb      	ldrb	r3, [r7, #7]
 800d416:	4a16      	ldr	r2, [pc, #88]	@ (800d470 <LmHandlerPackageRegister+0xa8>)
 800d418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d41c:	4a15      	ldr	r2, [pc, #84]	@ (800d474 <LmHandlerPackageRegister+0xac>)
 800d41e:	62da      	str	r2, [r3, #44]	@ 0x2c
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800d420:	79fb      	ldrb	r3, [r7, #7]
 800d422:	4a13      	ldr	r2, [pc, #76]	@ (800d470 <LmHandlerPackageRegister+0xa8>)
 800d424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d428:	4a13      	ldr	r2, [pc, #76]	@ (800d478 <LmHandlerPackageRegister+0xb0>)
 800d42a:	631a      	str	r2, [r3, #48]	@ 0x30
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800d42c:	79fb      	ldrb	r3, [r7, #7]
 800d42e:	4a10      	ldr	r2, [pc, #64]	@ (800d470 <LmHandlerPackageRegister+0xa8>)
 800d430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d434:	4a11      	ldr	r2, [pc, #68]	@ (800d47c <LmHandlerPackageRegister+0xb4>)
 800d436:	635a      	str	r2, [r3, #52]	@ 0x34
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800d438:	4b11      	ldr	r3, [pc, #68]	@ (800d480 <LmHandlerPackageRegister+0xb8>)
 800d43a:	681a      	ldr	r2, [r3, #0]
 800d43c:	79fb      	ldrb	r3, [r7, #7]
 800d43e:	490c      	ldr	r1, [pc, #48]	@ (800d470 <LmHandlerPackageRegister+0xa8>)
 800d440:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d444:	6992      	ldr	r2, [r2, #24]
 800d446:	619a      	str	r2, [r3, #24]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800d448:	79fb      	ldrb	r3, [r7, #7]
 800d44a:	4a09      	ldr	r2, [pc, #36]	@ (800d470 <LmHandlerPackageRegister+0xa8>)
 800d44c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d450:	685b      	ldr	r3, [r3, #4]
 800d452:	4a0c      	ldr	r2, [pc, #48]	@ (800d484 <LmHandlerPackageRegister+0xbc>)
 800d454:	6851      	ldr	r1, [r2, #4]
 800d456:	4a0b      	ldr	r2, [pc, #44]	@ (800d484 <LmHandlerPackageRegister+0xbc>)
 800d458:	7852      	ldrb	r2, [r2, #1]
 800d45a:	6838      	ldr	r0, [r7, #0]
 800d45c:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800d45e:	2300      	movs	r3, #0
 800d460:	e001      	b.n	800d466 <LmHandlerPackageRegister+0x9e>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800d462:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800d466:	4618      	mov	r0, r3
 800d468:	3710      	adds	r7, #16
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}
 800d46e:	bf00      	nop
 800d470:	200005d8 	.word	0x200005d8
 800d474:	0800cb31 	.word	0x0800cb31
 800d478:	0800ccb1 	.word	0x0800ccb1
 800d47c:	0800ce6d 	.word	0x0800ce6d
 800d480:	20000604 	.word	0x20000604
 800d484:	200000e0 	.word	0x200000e0

0800d488 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b082      	sub	sp, #8
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	4603      	mov	r3, r0
 800d490:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800d492:	79fb      	ldrb	r3, [r7, #7]
 800d494:	2b04      	cmp	r3, #4
 800d496:	d80e      	bhi.n	800d4b6 <LmHandlerPackageIsInitialized+0x2e>
 800d498:	79fb      	ldrb	r3, [r7, #7]
 800d49a:	4a09      	ldr	r2, [pc, #36]	@ (800d4c0 <LmHandlerPackageIsInitialized+0x38>)
 800d49c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4a0:	689b      	ldr	r3, [r3, #8]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d007      	beq.n	800d4b6 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800d4a6:	79fb      	ldrb	r3, [r7, #7]
 800d4a8:	4a05      	ldr	r2, [pc, #20]	@ (800d4c0 <LmHandlerPackageIsInitialized+0x38>)
 800d4aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4ae:	689b      	ldr	r3, [r3, #8]
 800d4b0:	4798      	blx	r3
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	e000      	b.n	800d4b8 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800d4b6:	2300      	movs	r3, #0
    }
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3708      	adds	r7, #8
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}
 800d4c0:	200005d8 	.word	0x200005d8

0800d4c4 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b084      	sub	sp, #16
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	6039      	str	r1, [r7, #0]
 800d4ce:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	73fb      	strb	r3, [r7, #15]
 800d4d4:	e07c      	b.n	800d5d0 <LmHandlerPackagesNotify+0x10c>
    {
        if( LmHandlerPackages[i] != NULL )
 800d4d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d4da:	4a42      	ldr	r2, [pc, #264]	@ (800d5e4 <LmHandlerPackagesNotify+0x120>)
 800d4dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d06f      	beq.n	800d5c4 <LmHandlerPackagesNotify+0x100>
        {
            switch( notifyType )
 800d4e4:	79fb      	ldrb	r3, [r7, #7]
 800d4e6:	2b03      	cmp	r3, #3
 800d4e8:	d863      	bhi.n	800d5b2 <LmHandlerPackagesNotify+0xee>
 800d4ea:	a201      	add	r2, pc, #4	@ (adr r2, 800d4f0 <LmHandlerPackagesNotify+0x2c>)
 800d4ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4f0:	0800d501 	.word	0x0800d501
 800d4f4:	0800d523 	.word	0x0800d523
 800d4f8:	0800d56f 	.word	0x0800d56f
 800d4fc:	0800d591 	.word	0x0800d591
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800d500:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d504:	4a37      	ldr	r2, [pc, #220]	@ (800d5e4 <LmHandlerPackagesNotify+0x120>)
 800d506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d50a:	69db      	ldr	r3, [r3, #28]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d052      	beq.n	800d5b6 <LmHandlerPackagesNotify+0xf2>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800d510:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d514:	4a33      	ldr	r2, [pc, #204]	@ (800d5e4 <LmHandlerPackagesNotify+0x120>)
 800d516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d51a:	69db      	ldr	r3, [r3, #28]
 800d51c:	6838      	ldr	r0, [r7, #0]
 800d51e:	4798      	blx	r3
                        }
                        break;
 800d520:	e049      	b.n	800d5b6 <LmHandlerPackagesNotify+0xf2>
                    }
                case PACKAGE_MCPS_INDICATION:
                    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800d522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d526:	4a2f      	ldr	r2, [pc, #188]	@ (800d5e4 <LmHandlerPackagesNotify+0x120>)
 800d528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d52c:	6a1b      	ldr	r3, [r3, #32]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d043      	beq.n	800d5ba <LmHandlerPackagesNotify+0xf6>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 800d532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d536:	4a2b      	ldr	r2, [pc, #172]	@ (800d5e4 <LmHandlerPackagesNotify+0x120>)
 800d538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d53c:	781a      	ldrb	r2, [r3, #0]
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	78db      	ldrb	r3, [r3, #3]
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800d542:	429a      	cmp	r2, r3
 800d544:	d00a      	beq.n	800d55c <LmHandlerPackagesNotify+0x98>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 800d546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d135      	bne.n	800d5ba <LmHandlerPackagesNotify+0xf6>
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
 800d54e:	4b25      	ldr	r3, [pc, #148]	@ (800d5e4 <LmHandlerPackagesNotify+0x120>)
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	68db      	ldr	r3, [r3, #12]
 800d554:	4798      	blx	r3
 800d556:	4603      	mov	r3, r0
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d02e      	beq.n	800d5ba <LmHandlerPackagesNotify+0xf6>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800d55c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d560:	4a20      	ldr	r2, [pc, #128]	@ (800d5e4 <LmHandlerPackagesNotify+0x120>)
 800d562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d566:	6a1b      	ldr	r3, [r3, #32]
 800d568:	6838      	ldr	r0, [r7, #0]
 800d56a:	4798      	blx	r3
                        }
                        break;
 800d56c:	e025      	b.n	800d5ba <LmHandlerPackagesNotify+0xf6>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800d56e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d572:	4a1c      	ldr	r2, [pc, #112]	@ (800d5e4 <LmHandlerPackagesNotify+0x120>)
 800d574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d01f      	beq.n	800d5be <LmHandlerPackagesNotify+0xfa>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800d57e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d582:	4a18      	ldr	r2, [pc, #96]	@ (800d5e4 <LmHandlerPackagesNotify+0x120>)
 800d584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d58a:	6838      	ldr	r0, [r7, #0]
 800d58c:	4798      	blx	r3
                        }
                        break;
 800d58e:	e016      	b.n	800d5be <LmHandlerPackagesNotify+0xfa>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800d590:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d594:	4a13      	ldr	r2, [pc, #76]	@ (800d5e4 <LmHandlerPackagesNotify+0x120>)
 800d596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d59a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d010      	beq.n	800d5c2 <LmHandlerPackagesNotify+0xfe>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800d5a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5a4:	4a0f      	ldr	r2, [pc, #60]	@ (800d5e4 <LmHandlerPackagesNotify+0x120>)
 800d5a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5ac:	6838      	ldr	r0, [r7, #0]
 800d5ae:	4798      	blx	r3
                        }
                        break;
 800d5b0:	e007      	b.n	800d5c2 <LmHandlerPackagesNotify+0xfe>
                    }
                default:
                    {
                        break;
 800d5b2:	bf00      	nop
 800d5b4:	e006      	b.n	800d5c4 <LmHandlerPackagesNotify+0x100>
                        break;
 800d5b6:	bf00      	nop
 800d5b8:	e004      	b.n	800d5c4 <LmHandlerPackagesNotify+0x100>
                        break;
 800d5ba:	bf00      	nop
 800d5bc:	e002      	b.n	800d5c4 <LmHandlerPackagesNotify+0x100>
                        break;
 800d5be:	bf00      	nop
 800d5c0:	e000      	b.n	800d5c4 <LmHandlerPackagesNotify+0x100>
                        break;
 800d5c2:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d5c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5c8:	b2db      	uxtb	r3, r3
 800d5ca:	3301      	adds	r3, #1
 800d5cc:	b2db      	uxtb	r3, r3
 800d5ce:	73fb      	strb	r3, [r7, #15]
 800d5d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5d4:	2b04      	cmp	r3, #4
 800d5d6:	f77f af7e 	ble.w	800d4d6 <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 800d5da:	bf00      	nop
 800d5dc:	bf00      	nop
 800d5de:	3710      	adds	r7, #16
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}
 800d5e4:	200005d8 	.word	0x200005d8

0800d5e8 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b082      	sub	sp, #8
 800d5ec:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	71fb      	strb	r3, [r7, #7]
 800d5f2:	e01c      	b.n	800d62e <LmHandlerPackageIsTxPending+0x46>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
 800d5f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d5f8:	4a11      	ldr	r2, [pc, #68]	@ (800d640 <LmHandlerPackageIsTxPending+0x58>)
 800d5fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d00f      	beq.n	800d622 <LmHandlerPackageIsTxPending+0x3a>
 800d602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d00b      	beq.n	800d622 <LmHandlerPackageIsTxPending+0x3a>
#else
        if( LmHandlerPackages[i] != NULL )
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800d60a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d60e:	4a0c      	ldr	r2, [pc, #48]	@ (800d640 <LmHandlerPackageIsTxPending+0x58>)
 800d610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d614:	691b      	ldr	r3, [r3, #16]
 800d616:	4798      	blx	r3
 800d618:	4603      	mov	r3, r0
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d001      	beq.n	800d622 <LmHandlerPackageIsTxPending+0x3a>
            {
                return true;
 800d61e:	2301      	movs	r3, #1
 800d620:	e00a      	b.n	800d638 <LmHandlerPackageIsTxPending+0x50>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d626:	b2db      	uxtb	r3, r3
 800d628:	3301      	adds	r3, #1
 800d62a:	b2db      	uxtb	r3, r3
 800d62c:	71fb      	strb	r3, [r7, #7]
 800d62e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d632:	2b04      	cmp	r3, #4
 800d634:	ddde      	ble.n	800d5f4 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800d636:	2300      	movs	r3, #0
}
 800d638:	4618      	mov	r0, r3
 800d63a:	3708      	adds	r7, #8
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}
 800d640:	200005d8 	.word	0x200005d8

0800d644 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b082      	sub	sp, #8
 800d648:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d64a:	2300      	movs	r3, #0
 800d64c:	71fb      	strb	r3, [r7, #7]
 800d64e:	e022      	b.n	800d696 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800d650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d654:	4a14      	ldr	r2, [pc, #80]	@ (800d6a8 <LmHandlerPackagesProcess+0x64>)
 800d656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d015      	beq.n	800d68a <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800d65e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d662:	4a11      	ldr	r2, [pc, #68]	@ (800d6a8 <LmHandlerPackagesProcess+0x64>)
 800d664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d668:	695b      	ldr	r3, [r3, #20]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d00d      	beq.n	800d68a <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800d66e:	79fb      	ldrb	r3, [r7, #7]
 800d670:	4618      	mov	r0, r3
 800d672:	f7ff ff09 	bl	800d488 <LmHandlerPackageIsInitialized>
 800d676:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d006      	beq.n	800d68a <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800d67c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d680:	4a09      	ldr	r2, [pc, #36]	@ (800d6a8 <LmHandlerPackagesProcess+0x64>)
 800d682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d686:	695b      	ldr	r3, [r3, #20]
 800d688:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d68a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d68e:	b2db      	uxtb	r3, r3
 800d690:	3301      	adds	r3, #1
 800d692:	b2db      	uxtb	r3, r3
 800d694:	71fb      	strb	r3, [r7, #7]
 800d696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d69a:	2b04      	cmp	r3, #4
 800d69c:	ddd8      	ble.n	800d650 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800d69e:	bf00      	nop
 800d6a0:	bf00      	nop
 800d6a2:	3708      	adds	r7, #8
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}
 800d6a8:	200005d8 	.word	0x200005d8

0800d6ac <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b083      	sub	sp, #12
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	6039      	str	r1, [r7, #0]
 800d6b6:	71fb      	strb	r3, [r7, #7]
    if( featureVersion == NULL )
 800d6b8:	683b      	ldr	r3, [r7, #0]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d102      	bne.n	800d6c4 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800d6be:	f04f 33ff 	mov.w	r3, #4294967295
 800d6c2:	e00e      	b.n	800d6e2 <LmHandlerGetVersion+0x36>
    }

    switch( lmhType )
 800d6c4:	79fb      	ldrb	r3, [r7, #7]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d002      	beq.n	800d6d0 <LmHandlerGetVersion+0x24>
 800d6ca:	2b01      	cmp	r3, #1
 800d6cc:	d004      	beq.n	800d6d8 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
            break;
 800d6ce:	e007      	b.n	800d6e0 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	4a06      	ldr	r2, [pc, #24]	@ (800d6ec <LmHandlerGetVersion+0x40>)
 800d6d4:	601a      	str	r2, [r3, #0]
            break;
 800d6d6:	e003      	b.n	800d6e0 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	4a05      	ldr	r2, [pc, #20]	@ (800d6f0 <LmHandlerGetVersion+0x44>)
 800d6dc:	601a      	str	r2, [r3, #0]
            break;
 800d6de:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800d6e0:	2300      	movs	r3, #0
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	370c      	adds	r7, #12
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bc80      	pop	{r7}
 800d6ea:	4770      	bx	lr
 800d6ec:	01000300 	.word	0x01000300
 800d6f0:	01010003 	.word	0x01010003

0800d6f4 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 800d6f8:	f005 f9c0 	bl	8012a7c <LoRaMacDeInitialization>
 800d6fc:	4603      	mov	r3, r0
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d101      	bne.n	800d706 <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d702:	2300      	movs	r3, #0
 800d704:	e001      	b.n	800d70a <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d706:	f06f 0301 	mvn.w	r3, #1
    }
}
 800d70a:	4618      	mov	r0, r3
 800d70c:	bd80      	pop	{r7, pc}

0800d70e <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 800d70e:	b580      	push	{r7, lr}
 800d710:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 800d712:	f004 f93b 	bl	801198c <LoRaMacHalt>
 800d716:	4603      	mov	r3, r0
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d101      	bne.n	800d720 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d71c:	2300      	movs	r3, #0
 800d71e:	e001      	b.n	800d724 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d720:	f06f 0301 	mvn.w	r3, #1
    }
}
 800d724:	4618      	mov	r0, r3
 800d726:	bd80      	pop	{r7, pc}

0800d728 <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b08c      	sub	sp, #48	@ 0x30
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d102      	bne.n	800d73c <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800d736:	f04f 33ff 	mov.w	r3, #4294967295
 800d73a:	e016      	b.n	800d76a <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800d73c:	2320      	movs	r3, #32
 800d73e:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800d740:	f107 0308 	add.w	r3, r7, #8
 800d744:	4618      	mov	r0, r3
 800d746:	f004 f9df 	bl	8011b08 <LoRaMacMibGetRequestConfirm>
 800d74a:	4603      	mov	r3, r0
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d002      	beq.n	800d756 <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800d750:	f04f 33ff 	mov.w	r3, #4294967295
 800d754:	e009      	b.n	800d76a <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800d756:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	f993 2000 	ldrsb.w	r2, [r3]
 800d764:	4b03      	ldr	r3, [pc, #12]	@ (800d774 <LmHandlerGetTxPower+0x4c>)
 800d766:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 800d768:	2300      	movs	r3, #0
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	3730      	adds	r7, #48	@ 0x30
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}
 800d772:	bf00      	nop
 800d774:	200005ec 	.word	0x200005ec

0800d778 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b08e      	sub	sp, #56	@ 0x38
 800d77c:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800d77e:	2300      	movs	r3, #0
 800d780:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    int32_t status = NVM_DATA_OK;
 800d784:	2300      	movs	r3, #0
 800d786:	633b      	str	r3, [r7, #48]	@ 0x30

    lmhStatus = LmHandlerHalt();
 800d788:	f7ff ffc1 	bl	800d70e <LmHandlerHalt>
 800d78c:	4603      	mov	r3, r0
 800d78e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 800d792:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800d796:	2b00      	cmp	r3, #0
 800d798:	d12f      	bne.n	800d7fa <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800d79a:	f000 f859 	bl	800d850 <NvmDataMgmtStoreBegin>
 800d79e:	6338      	str	r0, [r7, #48]	@ 0x30

        if( status == NVM_DATA_NO_UPDATED_DATA )
 800d7a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7a2:	f113 0f02 	cmn.w	r3, #2
 800d7a6:	d103      	bne.n	800d7b0 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800d7a8:	23f8      	movs	r3, #248	@ 0xf8
 800d7aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d7ae:	e01c      	b.n	800d7ea <LmHandlerNvmDataStore+0x72>
        }
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 800d7b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d104      	bne.n	800d7c0 <LmHandlerNvmDataStore+0x48>
 800d7b6:	4b1b      	ldr	r3, [pc, #108]	@ (800d824 <LmHandlerNvmDataStore+0xac>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	695b      	ldr	r3, [r3, #20]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d103      	bne.n	800d7c8 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800d7c0:	23ff      	movs	r3, #255	@ 0xff
 800d7c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d7c6:	e010      	b.n	800d7ea <LmHandlerNvmDataStore+0x72>
        }
        else
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_NVM_CTXS;
 800d7c8:	2326      	movs	r3, #38	@ 0x26
 800d7ca:	703b      	strb	r3, [r7, #0]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800d7cc:	463b      	mov	r3, r7
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f004 f99a 	bl	8011b08 <LoRaMacMibGetRequestConfirm>
            nvm = ( LoRaMacNvmData_t * )mibReq.Param.Contexts;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            nvm_size = ( ( sizeof( LoRaMacNvmData_t ) + 7 ) & ~0x07 );
 800d7d8:	f44f 63ef 	mov.w	r3, #1912	@ 0x778
 800d7dc:	62bb      	str	r3, [r7, #40]	@ 0x28
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 800d7de:	4b11      	ldr	r3, [pc, #68]	@ (800d824 <LmHandlerNvmDataStore+0xac>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	695b      	ldr	r3, [r3, #20]
 800d7e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d7e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d7e8:	4798      	blx	r3
        }

        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800d7ea:	f000 f847 	bl	800d87c <NvmDataMgmtStoreEnd>
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d002      	beq.n	800d7fa <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800d7f4:	23ff      	movs	r3, #255	@ 0xff
 800d7f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 800d7fa:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d109      	bne.n	800d816 <LmHandlerNvmDataStore+0x9e>
 800d802:	4b08      	ldr	r3, [pc, #32]	@ (800d824 <LmHandlerNvmDataStore+0xac>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	69db      	ldr	r3, [r3, #28]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d004      	beq.n	800d816 <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800d80c:	4b05      	ldr	r3, [pc, #20]	@ (800d824 <LmHandlerNvmDataStore+0xac>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	69db      	ldr	r3, [r3, #28]
 800d812:	2001      	movs	r0, #1
 800d814:	4798      	blx	r3
    }

    return lmhStatus;
 800d816:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	3738      	adds	r7, #56	@ 0x38
 800d81e:	46bd      	mov	sp, r7
 800d820:	bd80      	pop	{r7, pc}
 800d822:	bf00      	nop
 800d824:	20000604 	.word	0x20000604

0800d828 <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800d828:	b480      	push	{r7}
 800d82a:	b083      	sub	sp, #12
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	4603      	mov	r3, r0
 800d830:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800d832:	4b06      	ldr	r3, [pc, #24]	@ (800d84c <NvmDataMgmtEvent+0x24>)
 800d834:	881a      	ldrh	r2, [r3, #0]
 800d836:	88fb      	ldrh	r3, [r7, #6]
 800d838:	4313      	orrs	r3, r2
 800d83a:	b29a      	uxth	r2, r3
 800d83c:	4b03      	ldr	r3, [pc, #12]	@ (800d84c <NvmDataMgmtEvent+0x24>)
 800d83e:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800d840:	bf00      	nop
 800d842:	370c      	adds	r7, #12
 800d844:	46bd      	mov	sp, r7
 800d846:	bc80      	pop	{r7}
 800d848:	4770      	bx	lr
 800d84a:	bf00      	nop
 800d84c:	20000728 	.word	0x20000728

0800d850 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800d850:	b580      	push	{r7, lr}
 800d852:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800d854:	4b08      	ldr	r3, [pc, #32]	@ (800d878 <NvmDataMgmtStoreBegin+0x28>)
 800d856:	881b      	ldrh	r3, [r3, #0]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d102      	bne.n	800d862 <NvmDataMgmtStoreBegin+0x12>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
 800d85c:	f06f 0301 	mvn.w	r3, #1
 800d860:	e008      	b.n	800d874 <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800d862:	f004 f86b 	bl	801193c <LoRaMacStop>
 800d866:	4603      	mov	r3, r0
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d002      	beq.n	800d872 <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 800d86c:	f06f 0302 	mvn.w	r3, #2
 800d870:	e000      	b.n	800d874 <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 800d872:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d874:	4618      	mov	r0, r3
 800d876:	bd80      	pop	{r7, pc}
 800d878:	20000728 	.word	0x20000728

0800d87c <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800d880:	4b03      	ldr	r3, [pc, #12]	@ (800d890 <NvmDataMgmtStoreEnd+0x14>)
 800d882:	2200      	movs	r2, #0
 800d884:	801a      	strh	r2, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 800d886:	f004 f84b 	bl	8011920 <LoRaMacStart>
    return NVM_DATA_OK;
 800d88a:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d88c:	4618      	mov	r0, r3
 800d88e:	bd80      	pop	{r7, pc}
 800d890:	20000728 	.word	0x20000728

0800d894 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   /* To be initialized by LmHandler */
    .OnPackageProcessEvent = NULL,                             /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800d894:	b480      	push	{r7}
 800d896:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 800d898:	4b02      	ldr	r3, [pc, #8]	@ (800d8a4 <LmhpCompliancePackageFactory+0x10>)
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bc80      	pop	{r7}
 800d8a0:	4770      	bx	lr
 800d8a2:	bf00      	nop
 800d8a4:	200000e8 	.word	0x200000e8

0800d8a8 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800d8a8:	b480      	push	{r7}
 800d8aa:	b085      	sub	sp, #20
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	60f8      	str	r0, [r7, #12]
 800d8b0:	60b9      	str	r1, [r7, #8]
 800d8b2:	4613      	mov	r3, r2
 800d8b4:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d00f      	beq.n	800d8dc <LmhpComplianceInit+0x34>
 800d8bc:	68bb      	ldr	r3, [r7, #8]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d00c      	beq.n	800d8dc <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t * )params;
 800d8c2:	4a0c      	ldr	r2, [pc, #48]	@ (800d8f4 <LmhpComplianceInit+0x4c>)
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800d8c8:	4a0b      	ldr	r2, [pc, #44]	@ (800d8f8 <LmhpComplianceInit+0x50>)
 800d8ca:	68bb      	ldr	r3, [r7, #8]
 800d8cc:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800d8ce:	4a0a      	ldr	r2, [pc, #40]	@ (800d8f8 <LmhpComplianceInit+0x50>)
 800d8d0:	79fb      	ldrb	r3, [r7, #7]
 800d8d2:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 800d8d4:	4b08      	ldr	r3, [pc, #32]	@ (800d8f8 <LmhpComplianceInit+0x50>)
 800d8d6:	2201      	movs	r2, #1
 800d8d8:	701a      	strb	r2, [r3, #0]
 800d8da:	e006      	b.n	800d8ea <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 800d8dc:	4b05      	ldr	r3, [pc, #20]	@ (800d8f4 <LmhpComplianceInit+0x4c>)
 800d8de:	2200      	movs	r2, #0
 800d8e0:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800d8e2:	4b05      	ldr	r3, [pc, #20]	@ (800d8f8 <LmhpComplianceInit+0x50>)
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	701a      	strb	r2, [r3, #0]
    }
}
 800d8e8:	bf00      	nop
 800d8ea:	bf00      	nop
 800d8ec:	3714      	adds	r7, #20
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bc80      	pop	{r7}
 800d8f2:	4770      	bx	lr
 800d8f4:	20000758 	.word	0x20000758
 800d8f8:	20000744 	.word	0x20000744

0800d8fc <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800d900:	4b02      	ldr	r3, [pc, #8]	@ (800d90c <LmhpComplianceIsInitialized+0x10>)
 800d902:	781b      	ldrb	r3, [r3, #0]
}
 800d904:	4618      	mov	r0, r3
 800d906:	46bd      	mov	sp, r7
 800d908:	bc80      	pop	{r7}
 800d90a:	4770      	bx	lr
 800d90c:	20000744 	.word	0x20000744

0800d910 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 800d910:	b480      	push	{r7}
 800d912:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800d914:	4b07      	ldr	r3, [pc, #28]	@ (800d934 <LmhpComplianceIsRunning+0x24>)
 800d916:	781b      	ldrb	r3, [r3, #0]
 800d918:	f083 0301 	eor.w	r3, r3, #1
 800d91c:	b2db      	uxtb	r3, r3
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d001      	beq.n	800d926 <LmhpComplianceIsRunning+0x16>
    {
        return false;
 800d922:	2300      	movs	r3, #0
 800d924:	e001      	b.n	800d92a <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 800d926:	4b03      	ldr	r3, [pc, #12]	@ (800d934 <LmhpComplianceIsRunning+0x24>)
 800d928:	785b      	ldrb	r3, [r3, #1]
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bc80      	pop	{r7}
 800d930:	4770      	bx	lr
 800d932:	bf00      	nop
 800d934:	20000744 	.word	0x20000744

0800d938 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800d938:	b480      	push	{r7}
 800d93a:	b083      	sub	sp, #12
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800d940:	4b0f      	ldr	r3, [pc, #60]	@ (800d980 <LmhpComplianceOnMcpsConfirm+0x48>)
 800d942:	781b      	ldrb	r3, [r3, #0]
 800d944:	f083 0301 	eor.w	r3, r3, #1
 800d948:	b2db      	uxtb	r3, r3
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d112      	bne.n	800d974 <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 800d94e:	4b0c      	ldr	r3, [pc, #48]	@ (800d980 <LmhpComplianceOnMcpsConfirm+0x48>)
 800d950:	785b      	ldrb	r3, [r3, #1]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d00f      	beq.n	800d976 <LmhpComplianceOnMcpsConfirm+0x3e>
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	781b      	ldrb	r3, [r3, #0]
    if( ( ComplianceTestState.IsRunning == true ) &&
 800d95a:	2b01      	cmp	r3, #1
 800d95c:	d10b      	bne.n	800d976 <LmhpComplianceOnMcpsConfirm+0x3e>
        ( mcpsConfirm->AckReceived != 0 ) )
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	791b      	ldrb	r3, [r3, #4]
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 800d962:	2b00      	cmp	r3, #0
 800d964:	d007      	beq.n	800d976 <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800d966:	4b06      	ldr	r3, [pc, #24]	@ (800d980 <LmhpComplianceOnMcpsConfirm+0x48>)
 800d968:	899b      	ldrh	r3, [r3, #12]
 800d96a:	3301      	adds	r3, #1
 800d96c:	b29a      	uxth	r2, r3
 800d96e:	4b04      	ldr	r3, [pc, #16]	@ (800d980 <LmhpComplianceOnMcpsConfirm+0x48>)
 800d970:	819a      	strh	r2, [r3, #12]
 800d972:	e000      	b.n	800d976 <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 800d974:	bf00      	nop
    }
}
 800d976:	370c      	adds	r7, #12
 800d978:	46bd      	mov	sp, r7
 800d97a:	bc80      	pop	{r7}
 800d97c:	4770      	bx	lr
 800d97e:	bf00      	nop
 800d980:	20000744 	.word	0x20000744

0800d984 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800d984:	b480      	push	{r7}
 800d986:	b083      	sub	sp, #12
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800d98c:	4b12      	ldr	r3, [pc, #72]	@ (800d9d8 <LmhpComplianceOnMlmeConfirm+0x54>)
 800d98e:	781b      	ldrb	r3, [r3, #0]
 800d990:	f083 0301 	eor.w	r3, r3, #1
 800d994:	b2db      	uxtb	r3, r3
 800d996:	2b00      	cmp	r3, #0
 800d998:	d116      	bne.n	800d9c8 <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800d99a:	4b0f      	ldr	r3, [pc, #60]	@ (800d9d8 <LmhpComplianceOnMlmeConfirm+0x54>)
 800d99c:	785b      	ldrb	r3, [r3, #1]
 800d99e:	f083 0301 	eor.w	r3, r3, #1
 800d9a2:	b2db      	uxtb	r3, r3
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d111      	bne.n	800d9cc <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	781b      	ldrb	r3, [r3, #0]
 800d9ac:	2b05      	cmp	r3, #5
 800d9ae:	d10e      	bne.n	800d9ce <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 800d9b0:	4b09      	ldr	r3, [pc, #36]	@ (800d9d8 <LmhpComplianceOnMlmeConfirm+0x54>)
 800d9b2:	2201      	movs	r2, #1
 800d9b4:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	7a1a      	ldrb	r2, [r3, #8]
 800d9ba:	4b07      	ldr	r3, [pc, #28]	@ (800d9d8 <LmhpComplianceOnMlmeConfirm+0x54>)
 800d9bc:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	7a5a      	ldrb	r2, [r3, #9]
 800d9c2:	4b05      	ldr	r3, [pc, #20]	@ (800d9d8 <LmhpComplianceOnMlmeConfirm+0x54>)
 800d9c4:	741a      	strb	r2, [r3, #16]
 800d9c6:	e002      	b.n	800d9ce <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800d9c8:	bf00      	nop
 800d9ca:	e000      	b.n	800d9ce <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800d9cc:	bf00      	nop
    }
}
 800d9ce:	370c      	adds	r7, #12
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bc80      	pop	{r7}
 800d9d4:	4770      	bx	lr
 800d9d6:	bf00      	nop
 800d9d8:	20000744 	.word	0x20000744

0800d9dc <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b082      	sub	sp, #8
 800d9e0:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800d9e2:	4b36      	ldr	r3, [pc, #216]	@ (800dabc <LmhpComplianceTxProcess+0xe0>)
 800d9e4:	781b      	ldrb	r3, [r3, #0]
 800d9e6:	f083 0301 	eor.w	r3, r3, #1
 800d9ea:	b2db      	uxtb	r3, r3
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d002      	beq.n	800d9f6 <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 800d9f0:	f04f 33ff 	mov.w	r3, #4294967295
 800d9f4:	e05e      	b.n	800dab4 <LmhpComplianceTxProcess+0xd8>
    }

    if( ComplianceTestState.IsRunning == false )
 800d9f6:	4b31      	ldr	r3, [pc, #196]	@ (800dabc <LmhpComplianceTxProcess+0xe0>)
 800d9f8:	785b      	ldrb	r3, [r3, #1]
 800d9fa:	f083 0301 	eor.w	r3, r3, #1
 800d9fe:	b2db      	uxtb	r3, r3
 800da00:	2b00      	cmp	r3, #0
 800da02:	d001      	beq.n	800da08 <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800da04:	2300      	movs	r3, #0
 800da06:	e055      	b.n	800dab4 <LmhpComplianceTxProcess+0xd8>
    }

    if( ComplianceTestState.LinkCheck == true )
 800da08:	4b2c      	ldr	r3, [pc, #176]	@ (800dabc <LmhpComplianceTxProcess+0xe0>)
 800da0a:	7b9b      	ldrb	r3, [r3, #14]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d019      	beq.n	800da44 <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 800da10:	4b2a      	ldr	r3, [pc, #168]	@ (800dabc <LmhpComplianceTxProcess+0xe0>)
 800da12:	2200      	movs	r2, #0
 800da14:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800da16:	4b29      	ldr	r3, [pc, #164]	@ (800dabc <LmhpComplianceTxProcess+0xe0>)
 800da18:	2203      	movs	r2, #3
 800da1a:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800da1c:	4b27      	ldr	r3, [pc, #156]	@ (800dabc <LmhpComplianceTxProcess+0xe0>)
 800da1e:	689b      	ldr	r3, [r3, #8]
 800da20:	2205      	movs	r2, #5
 800da22:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800da24:	4b25      	ldr	r3, [pc, #148]	@ (800dabc <LmhpComplianceTxProcess+0xe0>)
 800da26:	689b      	ldr	r3, [r3, #8]
 800da28:	3301      	adds	r3, #1
 800da2a:	4a24      	ldr	r2, [pc, #144]	@ (800dabc <LmhpComplianceTxProcess+0xe0>)
 800da2c:	7bd2      	ldrb	r2, [r2, #15]
 800da2e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800da30:	4b22      	ldr	r3, [pc, #136]	@ (800dabc <LmhpComplianceTxProcess+0xe0>)
 800da32:	689b      	ldr	r3, [r3, #8]
 800da34:	3302      	adds	r3, #2
 800da36:	4a21      	ldr	r2, [pc, #132]	@ (800dabc <LmhpComplianceTxProcess+0xe0>)
 800da38:	7c12      	ldrb	r2, [r2, #16]
 800da3a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 800da3c:	4b1f      	ldr	r3, [pc, #124]	@ (800dabc <LmhpComplianceTxProcess+0xe0>)
 800da3e:	2201      	movs	r2, #1
 800da40:	709a      	strb	r2, [r3, #2]
 800da42:	e01c      	b.n	800da7e <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 800da44:	4b1d      	ldr	r3, [pc, #116]	@ (800dabc <LmhpComplianceTxProcess+0xe0>)
 800da46:	789b      	ldrb	r3, [r3, #2]
 800da48:	2b01      	cmp	r3, #1
 800da4a:	d005      	beq.n	800da58 <LmhpComplianceTxProcess+0x7c>
 800da4c:	2b04      	cmp	r3, #4
 800da4e:	d116      	bne.n	800da7e <LmhpComplianceTxProcess+0xa2>
        {
            case 4:
                ComplianceTestState.State = 1;
 800da50:	4b1a      	ldr	r3, [pc, #104]	@ (800dabc <LmhpComplianceTxProcess+0xe0>)
 800da52:	2201      	movs	r2, #1
 800da54:	709a      	strb	r2, [r3, #2]
                break;
 800da56:	e012      	b.n	800da7e <LmhpComplianceTxProcess+0xa2>
            case 1:
                ComplianceTestState.DataBufferSize = 2;
 800da58:	4b18      	ldr	r3, [pc, #96]	@ (800dabc <LmhpComplianceTxProcess+0xe0>)
 800da5a:	2202      	movs	r2, #2
 800da5c:	719a      	strb	r2, [r3, #6]
                ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800da5e:	4b17      	ldr	r3, [pc, #92]	@ (800dabc <LmhpComplianceTxProcess+0xe0>)
 800da60:	899b      	ldrh	r3, [r3, #12]
 800da62:	0a1b      	lsrs	r3, r3, #8
 800da64:	b29a      	uxth	r2, r3
 800da66:	4b15      	ldr	r3, [pc, #84]	@ (800dabc <LmhpComplianceTxProcess+0xe0>)
 800da68:	689b      	ldr	r3, [r3, #8]
 800da6a:	b2d2      	uxtb	r2, r2
 800da6c:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800da6e:	4b13      	ldr	r3, [pc, #76]	@ (800dabc <LmhpComplianceTxProcess+0xe0>)
 800da70:	899a      	ldrh	r2, [r3, #12]
 800da72:	4b12      	ldr	r3, [pc, #72]	@ (800dabc <LmhpComplianceTxProcess+0xe0>)
 800da74:	689b      	ldr	r3, [r3, #8]
 800da76:	3301      	adds	r3, #1
 800da78:	b2d2      	uxtb	r2, r2
 800da7a:	701a      	strb	r2, [r3, #0]
                break;
 800da7c:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 800da7e:	23e0      	movs	r3, #224	@ 0xe0
 800da80:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 800da82:	4b0e      	ldr	r3, [pc, #56]	@ (800dabc <LmhpComplianceTxProcess+0xe0>)
 800da84:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 800da86:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800da88:	4b0c      	ldr	r3, [pc, #48]	@ (800dabc <LmhpComplianceTxProcess+0xe0>)
 800da8a:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 800da8c:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    /* Schedule next transmission */
    TimerStart( &ComplianceTxNextPacketTimer );
 800da8e:	480c      	ldr	r0, [pc, #48]	@ (800dac0 <LmhpComplianceTxProcess+0xe4>)
 800da90:	f00e fb50 	bl	801c134 <UTIL_TIMER_Start>

    if( LmhpCompliancePackage.OnSendRequest == NULL)
 800da94:	4b0b      	ldr	r3, [pc, #44]	@ (800dac4 <LmhpComplianceTxProcess+0xe8>)
 800da96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d102      	bne.n	800daa2 <LmhpComplianceTxProcess+0xc6>
    {
        return LORAMAC_HANDLER_ERROR;
 800da9c:	f04f 33ff 	mov.w	r3, #4294967295
 800daa0:	e008      	b.n	800dab4 <LmhpComplianceTxProcess+0xd8>
    }

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 800daa2:	4b08      	ldr	r3, [pc, #32]	@ (800dac4 <LmhpComplianceTxProcess+0xe8>)
 800daa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800daa6:	4a05      	ldr	r2, [pc, #20]	@ (800dabc <LmhpComplianceTxProcess+0xe0>)
 800daa8:	78d2      	ldrb	r2, [r2, #3]
 800daaa:	4611      	mov	r1, r2
 800daac:	4638      	mov	r0, r7
 800daae:	2201      	movs	r2, #1
 800dab0:	4798      	blx	r3
 800dab2:	4603      	mov	r3, r0
}
 800dab4:	4618      	mov	r0, r3
 800dab6:	3708      	adds	r7, #8
 800dab8:	46bd      	mov	sp, r7
 800daba:	bd80      	pop	{r7, pc}
 800dabc:	20000744 	.word	0x20000744
 800dac0:	2000072c 	.word	0x2000072c
 800dac4:	200000e8 	.word	0x200000e8

0800dac8 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b0a4      	sub	sp, #144	@ 0x90
 800dacc:	af02      	add	r7, sp, #8
 800dace:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800dad0:	4ba5      	ldr	r3, [pc, #660]	@ (800dd68 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800dad2:	781b      	ldrb	r3, [r3, #0]
 800dad4:	f083 0301 	eor.w	r3, r3, #1
 800dad8:	b2db      	uxtb	r3, r3
 800dada:	2b00      	cmp	r3, #0
 800dadc:	f040 81c6 	bne.w	800de6c <LmhpComplianceOnMcpsIndication+0x3a4>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	7b5b      	ldrb	r3, [r3, #13]
 800dae4:	f083 0301 	eor.w	r3, r3, #1
 800dae8:	b2db      	uxtb	r3, r3
 800daea:	2b00      	cmp	r3, #0
 800daec:	f040 81c0 	bne.w	800de70 <LmhpComplianceOnMcpsIndication+0x3a8>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 800daf0:	4b9d      	ldr	r3, [pc, #628]	@ (800dd68 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800daf2:	785b      	ldrb	r3, [r3, #1]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d00c      	beq.n	800db12 <LmhpComplianceOnMcpsIndication+0x4a>
        ( mcpsIndication->AckReceived == 0 ) )
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	7b9b      	ldrb	r3, [r3, #14]
 800dafc:	f083 0301 	eor.w	r3, r3, #1
 800db00:	b2db      	uxtb	r3, r3
    if( ( ComplianceTestState.IsRunning == true ) &&
 800db02:	2b00      	cmp	r3, #0
 800db04:	d005      	beq.n	800db12 <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800db06:	4b98      	ldr	r3, [pc, #608]	@ (800dd68 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800db08:	899b      	ldrh	r3, [r3, #12]
 800db0a:	3301      	adds	r3, #1
 800db0c:	b29a      	uxth	r2, r3
 800db0e:	4b96      	ldr	r3, [pc, #600]	@ (800dd68 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800db10:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	78db      	ldrb	r3, [r3, #3]
 800db16:	2be0      	cmp	r3, #224	@ 0xe0
 800db18:	f040 81ac 	bne.w	800de74 <LmhpComplianceOnMcpsIndication+0x3ac>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800db1c:	4b92      	ldr	r3, [pc, #584]	@ (800dd68 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800db1e:	785b      	ldrb	r3, [r3, #1]
 800db20:	f083 0301 	eor.w	r3, r3, #1
 800db24:	b2db      	uxtb	r3, r3
 800db26:	2b00      	cmp	r3, #0
 800db28:	d060      	beq.n	800dbec <LmhpComplianceOnMcpsIndication+0x124>
    {
        /* Check compliance test enable command (i) */
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	7b1b      	ldrb	r3, [r3, #12]
 800db2e:	2b04      	cmp	r3, #4
 800db30:	f040 81a7 	bne.w	800de82 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	689b      	ldr	r3, [r3, #8]
 800db38:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800db3a:	2b01      	cmp	r3, #1
 800db3c:	f040 81a1 	bne.w	800de82 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	689b      	ldr	r3, [r3, #8]
 800db44:	3301      	adds	r3, #1
 800db46:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800db48:	2b01      	cmp	r3, #1
 800db4a:	f040 819a 	bne.w	800de82 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	689b      	ldr	r3, [r3, #8]
 800db52:	3302      	adds	r3, #2
 800db54:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800db56:	2b01      	cmp	r3, #1
 800db58:	f040 8193 	bne.w	800de82 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	689b      	ldr	r3, [r3, #8]
 800db60:	3303      	adds	r3, #3
 800db62:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800db64:	2b01      	cmp	r3, #1
 800db66:	f040 818c 	bne.w	800de82 <LmhpComplianceOnMcpsIndication+0x3ba>
        {
            MibRequestConfirm_t mibReq;

            /* Initialize compliance test mode context */
            ComplianceTestState.IsTxConfirmed = false;
 800db6a:	4b7f      	ldr	r3, [pc, #508]	@ (800dd68 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800db6c:	2200      	movs	r2, #0
 800db6e:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 800db70:	4b7d      	ldr	r3, [pc, #500]	@ (800dd68 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800db72:	22e0      	movs	r2, #224	@ 0xe0
 800db74:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800db76:	4b7c      	ldr	r3, [pc, #496]	@ (800dd68 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800db78:	2202      	movs	r2, #2
 800db7a:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800db7c:	4b7a      	ldr	r3, [pc, #488]	@ (800dd68 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800db7e:	2200      	movs	r2, #0
 800db80:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800db82:	4b79      	ldr	r3, [pc, #484]	@ (800dd68 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800db84:	2200      	movs	r2, #0
 800db86:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800db88:	4b77      	ldr	r3, [pc, #476]	@ (800dd68 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800db8a:	2200      	movs	r2, #0
 800db8c:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800db8e:	4b76      	ldr	r3, [pc, #472]	@ (800dd68 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800db90:	2200      	movs	r2, #0
 800db92:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800db94:	4b74      	ldr	r3, [pc, #464]	@ (800dd68 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800db96:	2201      	movs	r2, #1
 800db98:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800db9a:	4b73      	ldr	r3, [pc, #460]	@ (800dd68 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800db9c:	2201      	movs	r2, #1
 800db9e:	709a      	strb	r2, [r3, #2]

            /* Enable ADR while in compliance test mode */
            mibReq.Type = MIB_ADR;
 800dba0:	2304      	movs	r3, #4
 800dba2:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AdrEnable = true;
 800dba4:	2301      	movs	r3, #1
 800dba6:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800dba8:	f107 030c 	add.w	r3, r7, #12
 800dbac:	4618      	mov	r0, r3
 800dbae:	f004 f963 	bl	8011e78 <LoRaMacMibSetRequestConfirm>

            /* Disable duty cycle enforcement while in compliance test mode */
            LoRaMacTestSetDutyCycleOn( false );
 800dbb2:	2000      	movs	r0, #0
 800dbb4:	f004 ff3c 	bl	8012a30 <LoRaMacTestSetDutyCycleOn>

            /* Stop peripherals */
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800dbb8:	4b6c      	ldr	r3, [pc, #432]	@ (800dd6c <LmhpComplianceOnMcpsIndication+0x2a4>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	685b      	ldr	r3, [r3, #4]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d003      	beq.n	800dbca <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 800dbc2:	4b6a      	ldr	r3, [pc, #424]	@ (800dd6c <LmhpComplianceOnMcpsIndication+0x2a4>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	685b      	ldr	r3, [r3, #4]
 800dbc8:	4798      	blx	r3
            }
            /* Initialize compliance protocol transmission timer */
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800dbca:	2300      	movs	r3, #0
 800dbcc:	9300      	str	r3, [sp, #0]
 800dbce:	4b68      	ldr	r3, [pc, #416]	@ (800dd70 <LmhpComplianceOnMcpsIndication+0x2a8>)
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	f04f 31ff 	mov.w	r1, #4294967295
 800dbd6:	4867      	ldr	r0, [pc, #412]	@ (800dd74 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800dbd8:	f00e fa76 	bl	801c0c8 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800dbdc:	f241 3188 	movw	r1, #5000	@ 0x1388
 800dbe0:	4864      	ldr	r0, [pc, #400]	@ (800dd74 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800dbe2:	f00e fb85 	bl	801c2f0 <UTIL_TIMER_SetPeriod>

            /* Confirm compliance test protocol activation */
            LmhpComplianceTxProcess( );
 800dbe6:	f7ff fef9 	bl	800d9dc <LmhpComplianceTxProcess>
 800dbea:	e14a      	b.n	800de82 <LmhpComplianceOnMcpsIndication+0x3ba>
    }
    else
    {

        /* Parse compliance test protocol */
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	689b      	ldr	r3, [r3, #8]
 800dbf0:	781a      	ldrb	r2, [r3, #0]
 800dbf2:	4b5d      	ldr	r3, [pc, #372]	@ (800dd68 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800dbf4:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 800dbf6:	4b5c      	ldr	r3, [pc, #368]	@ (800dd68 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800dbf8:	789b      	ldrb	r3, [r3, #2]
 800dbfa:	2b0a      	cmp	r3, #10
 800dbfc:	f200 813c 	bhi.w	800de78 <LmhpComplianceOnMcpsIndication+0x3b0>
 800dc00:	a201      	add	r2, pc, #4	@ (adr r2, 800dc08 <LmhpComplianceOnMcpsIndication+0x140>)
 800dc02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc06:	bf00      	nop
 800dc08:	0800dc35 	.word	0x0800dc35
 800dc0c:	0800dc7f 	.word	0x0800dc7f
 800dc10:	0800dc87 	.word	0x0800dc87
 800dc14:	0800dc95 	.word	0x0800dc95
 800dc18:	0800dca3 	.word	0x0800dca3
 800dc1c:	0800dcfb 	.word	0x0800dcfb
 800dc20:	0800dd0d 	.word	0x0800dd0d
 800dc24:	0800dd7d 	.word	0x0800dd7d
 800dc28:	0800de25 	.word	0x0800de25
 800dc2c:	0800de37 	.word	0x0800de37
 800dc30:	0800de51 	.word	0x0800de51
        {
            case 0: /* Check compliance test disable command (ii) */
                {
                    MibRequestConfirm_t mibReq;

                    TimerStop( &ComplianceTxNextPacketTimer );
 800dc34:	484f      	ldr	r0, [pc, #316]	@ (800dd74 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800dc36:	f00e faeb 	bl	801c210 <UTIL_TIMER_Stop>

                    /* Disable compliance test mode and reset the downlink counter. */
                    ComplianceTestState.DownLinkCounter = 0;
 800dc3a:	4b4b      	ldr	r3, [pc, #300]	@ (800dd68 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 800dc40:	4b49      	ldr	r3, [pc, #292]	@ (800dd68 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800dc42:	2200      	movs	r2, #0
 800dc44:	705a      	strb	r2, [r3, #1]

                    /* Restore previous ADR setting */
                    mibReq.Type = MIB_ADR;
 800dc46:	2304      	movs	r3, #4
 800dc48:	733b      	strb	r3, [r7, #12]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800dc4a:	4b48      	ldr	r3, [pc, #288]	@ (800dd6c <LmhpComplianceOnMcpsIndication+0x2a4>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	781b      	ldrb	r3, [r3, #0]
 800dc50:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800dc52:	f107 030c 	add.w	r3, r7, #12
 800dc56:	4618      	mov	r0, r3
 800dc58:	f004 f90e 	bl	8011e78 <LoRaMacMibSetRequestConfirm>

                    /* Enable duty cycle enforcement */
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800dc5c:	4b43      	ldr	r3, [pc, #268]	@ (800dd6c <LmhpComplianceOnMcpsIndication+0x2a4>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	785b      	ldrb	r3, [r3, #1]
 800dc62:	4618      	mov	r0, r3
 800dc64:	f004 fee4 	bl	8012a30 <LoRaMacTestSetDutyCycleOn>

                    /* Restart peripherals */
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 800dc68:	4b40      	ldr	r3, [pc, #256]	@ (800dd6c <LmhpComplianceOnMcpsIndication+0x2a4>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	689b      	ldr	r3, [r3, #8]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	f000 8104 	beq.w	800de7c <LmhpComplianceOnMcpsIndication+0x3b4>
                    {
                        LmhpComplianceParams->StartPeripherals( );
 800dc74:	4b3d      	ldr	r3, [pc, #244]	@ (800dd6c <LmhpComplianceOnMcpsIndication+0x2a4>)
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	689b      	ldr	r3, [r3, #8]
 800dc7a:	4798      	blx	r3
                    }
                }
                break;
 800dc7c:	e0fe      	b.n	800de7c <LmhpComplianceOnMcpsIndication+0x3b4>
            case 1: /* (iii, iv) */
                ComplianceTestState.DataBufferSize = 2;
 800dc7e:	4b3a      	ldr	r3, [pc, #232]	@ (800dd68 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800dc80:	2202      	movs	r2, #2
 800dc82:	719a      	strb	r2, [r3, #6]
                break;
 800dc84:	e0fd      	b.n	800de82 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 2: /* Enable confirmed messages (v) */
                ComplianceTestState.IsTxConfirmed = true;
 800dc86:	4b38      	ldr	r3, [pc, #224]	@ (800dd68 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800dc88:	2201      	movs	r2, #1
 800dc8a:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 800dc8c:	4b36      	ldr	r3, [pc, #216]	@ (800dd68 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800dc8e:	2201      	movs	r2, #1
 800dc90:	709a      	strb	r2, [r3, #2]
                break;
 800dc92:	e0f6      	b.n	800de82 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 3:  /* Disable confirmed messages (vi) */
                ComplianceTestState.IsTxConfirmed = false;
 800dc94:	4b34      	ldr	r3, [pc, #208]	@ (800dd68 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800dc96:	2200      	movs	r2, #0
 800dc98:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 800dc9a:	4b33      	ldr	r3, [pc, #204]	@ (800dd68 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800dc9c:	2201      	movs	r2, #1
 800dc9e:	709a      	strb	r2, [r3, #2]
                break;
 800dca0:	e0ef      	b.n	800de82 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 4: /* (vii) */
                ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	7b1a      	ldrb	r2, [r3, #12]
 800dca6:	4b30      	ldr	r3, [pc, #192]	@ (800dd68 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800dca8:	719a      	strb	r2, [r3, #6]

                ComplianceTestState.DataBuffer[0] = 4;
 800dcaa:	4b2f      	ldr	r3, [pc, #188]	@ (800dd68 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800dcac:	689b      	ldr	r3, [r3, #8]
 800dcae:	2204      	movs	r2, #4
 800dcb0:	701a      	strb	r2, [r3, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800dcb8:	e012      	b.n	800dce0 <LmhpComplianceOnMcpsIndication+0x218>
                {
                    ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	689a      	ldr	r2, [r3, #8]
 800dcbe:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800dcc2:	4413      	add	r3, r2
 800dcc4:	781a      	ldrb	r2, [r3, #0]
 800dcc6:	4b28      	ldr	r3, [pc, #160]	@ (800dd68 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800dcc8:	6899      	ldr	r1, [r3, #8]
 800dcca:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800dcce:	440b      	add	r3, r1
 800dcd0:	3201      	adds	r2, #1
 800dcd2:	b2d2      	uxtb	r2, r2
 800dcd4:	701a      	strb	r2, [r3, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800dcd6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800dcda:	3301      	adds	r3, #1
 800dcdc:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800dce0:	4b21      	ldr	r3, [pc, #132]	@ (800dd68 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800dce2:	795a      	ldrb	r2, [r3, #5]
 800dce4:	4b20      	ldr	r3, [pc, #128]	@ (800dd68 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800dce6:	799b      	ldrb	r3, [r3, #6]
 800dce8:	4293      	cmp	r3, r2
 800dcea:	bf28      	it	cs
 800dcec:	4613      	movcs	r3, r2
 800dcee:	b2db      	uxtb	r3, r3
 800dcf0:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 800dcf4:	429a      	cmp	r2, r3
 800dcf6:	d3e0      	bcc.n	800dcba <LmhpComplianceOnMcpsIndication+0x1f2>
                }
                break;
 800dcf8:	e0c3      	b.n	800de82 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 5: /* (viii) */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_LINK_CHECK;
 800dcfa:	2305      	movs	r3, #5
 800dcfc:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70

                    LoRaMacMlmeRequest( &mlmeReq );
 800dd00:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800dd04:	4618      	mov	r0, r3
 800dd06:	f004 fc4b 	bl	80125a0 <LoRaMacMlmeRequest>
                }
                break;
 800dd0a:	e0ba      	b.n	800de82 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 6: /* (ix) */
                {
                    MibRequestConfirm_t mibReq;

                    TimerStop( &ComplianceTxNextPacketTimer );
 800dd0c:	4819      	ldr	r0, [pc, #100]	@ (800dd74 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800dd0e:	f00e fa7f 	bl	801c210 <UTIL_TIMER_Stop>

                    /* Disable TestMode and revert back to normal operation */
                    /* Disable compliance test mode and reset the downlink counter. */
                    ComplianceTestState.DownLinkCounter = 0;
 800dd12:	4b15      	ldr	r3, [pc, #84]	@ (800dd68 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800dd14:	2200      	movs	r2, #0
 800dd16:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 800dd18:	4b13      	ldr	r3, [pc, #76]	@ (800dd68 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	705a      	strb	r2, [r3, #1]

                    /* Restore previous ADR setting */
                    mibReq.Type = MIB_ADR;
 800dd1e:	2304      	movs	r3, #4
 800dd20:	733b      	strb	r3, [r7, #12]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800dd22:	4b12      	ldr	r3, [pc, #72]	@ (800dd6c <LmhpComplianceOnMcpsIndication+0x2a4>)
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	781b      	ldrb	r3, [r3, #0]
 800dd28:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800dd2a:	f107 030c 	add.w	r3, r7, #12
 800dd2e:	4618      	mov	r0, r3
 800dd30:	f004 f8a2 	bl	8011e78 <LoRaMacMibSetRequestConfirm>

                    /* Enable duty cycle enforcement */
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800dd34:	4b0d      	ldr	r3, [pc, #52]	@ (800dd6c <LmhpComplianceOnMcpsIndication+0x2a4>)
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	785b      	ldrb	r3, [r3, #1]
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	f004 fe78 	bl	8012a30 <LoRaMacTestSetDutyCycleOn>

                    /* Restart peripherals */
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 800dd40:	4b0a      	ldr	r3, [pc, #40]	@ (800dd6c <LmhpComplianceOnMcpsIndication+0x2a4>)
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	689b      	ldr	r3, [r3, #8]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d003      	beq.n	800dd52 <LmhpComplianceOnMcpsIndication+0x28a>
                    {
                        LmhpComplianceParams->StartPeripherals( );
 800dd4a:	4b08      	ldr	r3, [pc, #32]	@ (800dd6c <LmhpComplianceOnMcpsIndication+0x2a4>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	689b      	ldr	r3, [r3, #8]
 800dd50:	4798      	blx	r3
                    }

                    if( LmhpCompliancePackage.OnJoinRequest != NULL )
 800dd52:	4b09      	ldr	r3, [pc, #36]	@ (800dd78 <LmhpComplianceOnMcpsIndication+0x2b0>)
 800dd54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	f000 8092 	beq.w	800de80 <LmhpComplianceOnMcpsIndication+0x3b8>
                    {
                        LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800dd5c:	4b06      	ldr	r3, [pc, #24]	@ (800dd78 <LmhpComplianceOnMcpsIndication+0x2b0>)
 800dd5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd60:	2101      	movs	r1, #1
 800dd62:	2002      	movs	r0, #2
 800dd64:	4798      	blx	r3
                    }
                }
                break;
 800dd66:	e08b      	b.n	800de80 <LmhpComplianceOnMcpsIndication+0x3b8>
 800dd68:	20000744 	.word	0x20000744
 800dd6c:	20000758 	.word	0x20000758
 800dd70:	0800de99 	.word	0x0800de99
 800dd74:	2000072c 	.word	0x2000072c
 800dd78:	200000e8 	.word	0x200000e8
            case 7: /* (x) */
                {
                    MlmeReq_t mlmeReq;
                    if( mcpsIndication->BufferSize == 3 )
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	7b1b      	ldrb	r3, [r3, #12]
 800dd80:	2b03      	cmp	r3, #3
 800dd82:	d113      	bne.n	800ddac <LmhpComplianceOnMcpsIndication+0x2e4>
                    {
                        mlmeReq.Type = MLME_TXCW;
 800dd84:	2306      	movs	r3, #6
 800dd86:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	689b      	ldr	r3, [r3, #8]
 800dd8e:	3301      	adds	r3, #1
 800dd90:	781b      	ldrb	r3, [r3, #0]
 800dd92:	021b      	lsls	r3, r3, #8
 800dd94:	b21a      	sxth	r2, r3
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	689b      	ldr	r3, [r3, #8]
 800dd9a:	3302      	adds	r3, #2
 800dd9c:	781b      	ldrb	r3, [r3, #0]
 800dd9e:	b21b      	sxth	r3, r3
 800dda0:	4313      	orrs	r3, r2
 800dda2:	b21b      	sxth	r3, r3
 800dda4:	b29b      	uxth	r3, r3
 800dda6:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800ddaa:	e032      	b.n	800de12 <LmhpComplianceOnMcpsIndication+0x34a>
                    }
                    else if( mcpsIndication->BufferSize == 7 )
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	7b1b      	ldrb	r3, [r3, #12]
 800ddb0:	2b07      	cmp	r3, #7
 800ddb2:	d12e      	bne.n	800de12 <LmhpComplianceOnMcpsIndication+0x34a>
                    {
                        mlmeReq.Type = MLME_TXCW_1;
 800ddb4:	2307      	movs	r3, #7
 800ddb6:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	689b      	ldr	r3, [r3, #8]
 800ddbe:	3301      	adds	r3, #1
 800ddc0:	781b      	ldrb	r3, [r3, #0]
 800ddc2:	021b      	lsls	r3, r3, #8
 800ddc4:	b21a      	sxth	r2, r3
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	689b      	ldr	r3, [r3, #8]
 800ddca:	3302      	adds	r3, #2
 800ddcc:	781b      	ldrb	r3, [r3, #0]
 800ddce:	b21b      	sxth	r3, r3
 800ddd0:	4313      	orrs	r3, r2
 800ddd2:	b21b      	sxth	r3, r3
 800ddd4:	b29b      	uxth	r3, r3
 800ddd6:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
                        mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	689b      	ldr	r3, [r3, #8]
 800ddde:	3303      	adds	r3, #3
 800dde0:	781b      	ldrb	r3, [r3, #0]
 800dde2:	041a      	lsls	r2, r3, #16
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	689b      	ldr	r3, [r3, #8]
 800dde8:	3304      	adds	r3, #4
 800ddea:	781b      	ldrb	r3, [r3, #0]
 800ddec:	021b      	lsls	r3, r3, #8
 800ddee:	4313      	orrs	r3, r2
 800ddf0:	687a      	ldr	r2, [r7, #4]
 800ddf2:	6892      	ldr	r2, [r2, #8]
 800ddf4:	3205      	adds	r2, #5
 800ddf6:	7812      	ldrb	r2, [r2, #0]
 800ddf8:	4313      	orrs	r3, r2
 800ddfa:	461a      	mov	r2, r3
 800ddfc:	2364      	movs	r3, #100	@ 0x64
 800ddfe:	fb02 f303 	mul.w	r3, r2, r3
 800de02:	667b      	str	r3, [r7, #100]	@ 0x64
                        mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	689b      	ldr	r3, [r3, #8]
 800de08:	3306      	adds	r3, #6
 800de0a:	781b      	ldrb	r3, [r3, #0]
 800de0c:	b25b      	sxtb	r3, r3
 800de0e:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacMlmeRequest( &mlmeReq );
 800de12:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800de16:	4618      	mov	r0, r3
 800de18:	f004 fbc2 	bl	80125a0 <LoRaMacMlmeRequest>
                    ComplianceTestState.State = 1;
 800de1c:	4b1a      	ldr	r3, [pc, #104]	@ (800de88 <LmhpComplianceOnMcpsIndication+0x3c0>)
 800de1e:	2201      	movs	r2, #1
 800de20:	709a      	strb	r2, [r3, #2]
                }
                break;
 800de22:	e02e      	b.n	800de82 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 8: /* Send DeviceTimeReq */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_DEVICE_TIME;
 800de24:	230a      	movs	r3, #10
 800de26:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 800de2a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800de2e:	4618      	mov	r0, r3
 800de30:	f004 fbb6 	bl	80125a0 <LoRaMacMlmeRequest>
                }
                break;
 800de34:	e025      	b.n	800de82 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 9: /* Switch end device Class */
                {
                    MibRequestConfirm_t mibReq;

                    mibReq.Type = MIB_DEVICE_CLASS;
 800de36:	2300      	movs	r3, #0
 800de38:	733b      	strb	r3, [r7, #12]
                    /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                    mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	689b      	ldr	r3, [r3, #8]
 800de3e:	3301      	adds	r3, #1
 800de40:	781b      	ldrb	r3, [r3, #0]
 800de42:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800de44:	f107 030c 	add.w	r3, r7, #12
 800de48:	4618      	mov	r0, r3
 800de4a:	f004 f815 	bl	8011e78 <LoRaMacMibSetRequestConfirm>
                }
                break;
 800de4e:	e018      	b.n	800de82 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 10: /* Send PingSlotInfoReq */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_PING_SLOT_INFO;
 800de50:	230d      	movs	r3, #13
 800de52:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                    mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	689b      	ldr	r3, [r3, #8]
 800de5a:	785b      	ldrb	r3, [r3, #1]
 800de5c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38

                    LoRaMacMlmeRequest( &mlmeReq );
 800de60:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800de64:	4618      	mov	r0, r3
 800de66:	f004 fb9b 	bl	80125a0 <LoRaMacMlmeRequest>
                }
                break;
 800de6a:	e00a      	b.n	800de82 <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 800de6c:	bf00      	nop
 800de6e:	e008      	b.n	800de82 <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 800de70:	bf00      	nop
 800de72:	e006      	b.n	800de82 <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 800de74:	bf00      	nop
 800de76:	e004      	b.n	800de82 <LmhpComplianceOnMcpsIndication+0x3ba>
            default:
                break;
 800de78:	bf00      	nop
 800de7a:	e002      	b.n	800de82 <LmhpComplianceOnMcpsIndication+0x3ba>
                break;
 800de7c:	bf00      	nop
 800de7e:	e000      	b.n	800de82 <LmhpComplianceOnMcpsIndication+0x3ba>
                break;
 800de80:	bf00      	nop
        }
    }
}
 800de82:	3788      	adds	r7, #136	@ 0x88
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}
 800de88:	20000744 	.word	0x20000744

0800de8c <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800de8c:	b480      	push	{r7}
 800de8e:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 800de90:	bf00      	nop
 800de92:	46bd      	mov	sp, r7
 800de94:	bc80      	pop	{r7}
 800de96:	4770      	bx	lr

0800de98 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void *context )
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b082      	sub	sp, #8
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 800dea0:	f7ff fd9c 	bl	800d9dc <LmhpComplianceTxProcess>
}
 800dea4:	bf00      	nop
 800dea6:	3708      	adds	r7, #8
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd80      	pop	{r7, pc}

0800deac <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 800deac:	b480      	push	{r7}
 800deae:	b083      	sub	sp, #12
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 800deb4:	2300      	movs	r3, #0
}
 800deb6:	4618      	mov	r0, r3
 800deb8:	370c      	adds	r7, #12
 800deba:	46bd      	mov	sp, r7
 800debc:	bc80      	pop	{r7}
 800debe:	4770      	bx	lr

0800dec0 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 800dec0:	b480      	push	{r7}
 800dec2:	b083      	sub	sp, #12
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	4603      	mov	r3, r0
 800dec8:	6039      	str	r1, [r7, #0]
 800deca:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 800decc:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 800ded0:	4618      	mov	r0, r3
 800ded2:	370c      	adds	r7, #12
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bc80      	pop	{r7}
 800ded8:	4770      	bx	lr
	...

0800dedc <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 800dedc:	b590      	push	{r4, r7, lr}
 800dede:	b083      	sub	sp, #12
 800dee0:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800dee2:	f00e faaf 	bl	801c444 <UTIL_TIMER_GetCurrentTime>
 800dee6:	4603      	mov	r3, r0
 800dee8:	4a0f      	ldr	r2, [pc, #60]	@ (800df28 <OnRadioTxDone+0x4c>)
 800deea:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800deec:	4c0f      	ldr	r4, [pc, #60]	@ (800df2c <OnRadioTxDone+0x50>)
 800deee:	463b      	mov	r3, r7
 800def0:	4618      	mov	r0, r3
 800def2:	f00d fc27 	bl	801b744 <SysTimeGet>
 800def6:	f504 734e 	add.w	r3, r4, #824	@ 0x338
 800defa:	463a      	mov	r2, r7
 800defc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800df00:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800df04:	4a0a      	ldr	r2, [pc, #40]	@ (800df30 <OnRadioTxDone+0x54>)
 800df06:	7813      	ldrb	r3, [r2, #0]
 800df08:	f043 0310 	orr.w	r3, r3, #16
 800df0c:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800df0e:	f003 f993 	bl	8011238 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800df12:	4b08      	ldr	r3, [pc, #32]	@ (800df34 <OnRadioTxDone+0x58>)
 800df14:	2201      	movs	r2, #1
 800df16:	2100      	movs	r1, #0
 800df18:	2002      	movs	r0, #2
 800df1a:	f00e fb83 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
}
 800df1e:	bf00      	nop
 800df20:	370c      	adds	r7, #12
 800df22:	46bd      	mov	sp, r7
 800df24:	bd90      	pop	{r4, r7, pc}
 800df26:	bf00      	nop
 800df28:	20001b58 	.word	0x20001b58
 800df2c:	2000075c 	.word	0x2000075c
 800df30:	20001b54 	.word	0x20001b54
 800df34:	0801d324 	.word	0x0801d324

0800df38 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b084      	sub	sp, #16
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	60f8      	str	r0, [r7, #12]
 800df40:	4608      	mov	r0, r1
 800df42:	4611      	mov	r1, r2
 800df44:	461a      	mov	r2, r3
 800df46:	4603      	mov	r3, r0
 800df48:	817b      	strh	r3, [r7, #10]
 800df4a:	460b      	mov	r3, r1
 800df4c:	813b      	strh	r3, [r7, #8]
 800df4e:	4613      	mov	r3, r2
 800df50:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800df52:	f00e fa77 	bl	801c444 <UTIL_TIMER_GetCurrentTime>
 800df56:	4603      	mov	r3, r0
 800df58:	4a0f      	ldr	r2, [pc, #60]	@ (800df98 <OnRadioRxDone+0x60>)
 800df5a:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800df5c:	4a0e      	ldr	r2, [pc, #56]	@ (800df98 <OnRadioRxDone+0x60>)
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800df62:	4a0d      	ldr	r2, [pc, #52]	@ (800df98 <OnRadioRxDone+0x60>)
 800df64:	897b      	ldrh	r3, [r7, #10]
 800df66:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800df68:	4a0b      	ldr	r2, [pc, #44]	@ (800df98 <OnRadioRxDone+0x60>)
 800df6a:	893b      	ldrh	r3, [r7, #8]
 800df6c:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800df6e:	4a0a      	ldr	r2, [pc, #40]	@ (800df98 <OnRadioRxDone+0x60>)
 800df70:	79fb      	ldrb	r3, [r7, #7]
 800df72:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800df74:	4a09      	ldr	r2, [pc, #36]	@ (800df9c <OnRadioRxDone+0x64>)
 800df76:	7813      	ldrb	r3, [r2, #0]
 800df78:	f043 0308 	orr.w	r3, r3, #8
 800df7c:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 800df7e:	f003 f95b 	bl	8011238 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800df82:	4b07      	ldr	r3, [pc, #28]	@ (800dfa0 <OnRadioRxDone+0x68>)
 800df84:	2201      	movs	r2, #1
 800df86:	2100      	movs	r1, #0
 800df88:	2002      	movs	r0, #2
 800df8a:	f00e fb4b 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
}
 800df8e:	bf00      	nop
 800df90:	3710      	adds	r7, #16
 800df92:	46bd      	mov	sp, r7
 800df94:	bd80      	pop	{r7, pc}
 800df96:	bf00      	nop
 800df98:	20001b5c 	.word	0x20001b5c
 800df9c:	20001b54 	.word	0x20001b54
 800dfa0:	0801d334 	.word	0x0801d334

0800dfa4 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800dfa8:	4a07      	ldr	r2, [pc, #28]	@ (800dfc8 <OnRadioTxTimeout+0x24>)
 800dfaa:	7813      	ldrb	r3, [r2, #0]
 800dfac:	f043 0304 	orr.w	r3, r3, #4
 800dfb0:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800dfb2:	f003 f941 	bl	8011238 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800dfb6:	4b05      	ldr	r3, [pc, #20]	@ (800dfcc <OnRadioTxTimeout+0x28>)
 800dfb8:	2201      	movs	r2, #1
 800dfba:	2100      	movs	r1, #0
 800dfbc:	2002      	movs	r0, #2
 800dfbe:	f00e fb31 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
}
 800dfc2:	bf00      	nop
 800dfc4:	bd80      	pop	{r7, pc}
 800dfc6:	bf00      	nop
 800dfc8:	20001b54 	.word	0x20001b54
 800dfcc:	0801d344 	.word	0x0801d344

0800dfd0 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800dfd4:	4a04      	ldr	r2, [pc, #16]	@ (800dfe8 <OnRadioRxError+0x18>)
 800dfd6:	7813      	ldrb	r3, [r2, #0]
 800dfd8:	f043 0302 	orr.w	r3, r3, #2
 800dfdc:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800dfde:	f003 f92b 	bl	8011238 <OnMacProcessNotify>
}
 800dfe2:	bf00      	nop
 800dfe4:	bd80      	pop	{r7, pc}
 800dfe6:	bf00      	nop
 800dfe8:	20001b54 	.word	0x20001b54

0800dfec <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800dff0:	4a07      	ldr	r2, [pc, #28]	@ (800e010 <OnRadioRxTimeout+0x24>)
 800dff2:	7813      	ldrb	r3, [r2, #0]
 800dff4:	f043 0301 	orr.w	r3, r3, #1
 800dff8:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800dffa:	f003 f91d 	bl	8011238 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800dffe:	4b05      	ldr	r3, [pc, #20]	@ (800e014 <OnRadioRxTimeout+0x28>)
 800e000:	2201      	movs	r2, #1
 800e002:	2100      	movs	r1, #0
 800e004:	2002      	movs	r0, #2
 800e006:	f00e fb0d 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
}
 800e00a:	bf00      	nop
 800e00c:	bd80      	pop	{r7, pc}
 800e00e:	bf00      	nop
 800e010:	20001b54 	.word	0x20001b54
 800e014:	0801d354 	.word	0x0801d354

0800e018 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800e018:	b480      	push	{r7}
 800e01a:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e01c:	4b08      	ldr	r3, [pc, #32]	@ (800e040 <UpdateRxSlotIdleState+0x28>)
 800e01e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800e022:	2b02      	cmp	r3, #2
 800e024:	d004      	beq.n	800e030 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800e026:	4b07      	ldr	r3, [pc, #28]	@ (800e044 <UpdateRxSlotIdleState+0x2c>)
 800e028:	2206      	movs	r2, #6
 800e02a:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800e02e:	e003      	b.n	800e038 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800e030:	4b04      	ldr	r3, [pc, #16]	@ (800e044 <UpdateRxSlotIdleState+0x2c>)
 800e032:	2202      	movs	r2, #2
 800e034:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480
}
 800e038:	bf00      	nop
 800e03a:	46bd      	mov	sp, r7
 800e03c:	bc80      	pop	{r7}
 800e03e:	4770      	bx	lr
 800e040:	20000c64 	.word	0x20000c64
 800e044:	2000075c 	.word	0x2000075c

0800e048 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b092      	sub	sp, #72	@ 0x48
 800e04c:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e04e:	4b50      	ldr	r3, [pc, #320]	@ (800e190 <ProcessRadioTxDone+0x148>)
 800e050:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800e054:	2b02      	cmp	r3, #2
 800e056:	d002      	beq.n	800e05e <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800e058:	4b4e      	ldr	r3, [pc, #312]	@ (800e194 <ProcessRadioTxDone+0x14c>)
 800e05a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e05c:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e05e:	f3ef 8310 	mrs	r3, PRIMASK
 800e062:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800e064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 800e066:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 800e068:	b672      	cpsid	i
}
 800e06a:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800e06c:	f00e f9ea 	bl	801c444 <UTIL_TIMER_GetCurrentTime>
 800e070:	4602      	mov	r2, r0
 800e072:	4b49      	ldr	r3, [pc, #292]	@ (800e198 <ProcessRadioTxDone+0x150>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	1ad3      	subs	r3, r2, r3
 800e078:	63bb      	str	r3, [r7, #56]	@ 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800e07a:	4b48      	ldr	r3, [pc, #288]	@ (800e19c <ProcessRadioTxDone+0x154>)
 800e07c:	f8d3 23b0 	ldr.w	r2, [r3, #944]	@ 0x3b0
 800e080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e082:	1ad3      	subs	r3, r2, r3
 800e084:	4619      	mov	r1, r3
 800e086:	4846      	ldr	r0, [pc, #280]	@ (800e1a0 <ProcessRadioTxDone+0x158>)
 800e088:	f00e f932 	bl	801c2f0 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800e08c:	4844      	ldr	r0, [pc, #272]	@ (800e1a0 <ProcessRadioTxDone+0x158>)
 800e08e:	f00e f851 	bl	801c134 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800e092:	4b42      	ldr	r3, [pc, #264]	@ (800e19c <ProcessRadioTxDone+0x154>)
 800e094:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800e098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e09a:	1ad3      	subs	r3, r2, r3
 800e09c:	4619      	mov	r1, r3
 800e09e:	4841      	ldr	r0, [pc, #260]	@ (800e1a4 <ProcessRadioTxDone+0x15c>)
 800e0a0:	f00e f926 	bl	801c2f0 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800e0a4:	483f      	ldr	r0, [pc, #252]	@ (800e1a4 <ProcessRadioTxDone+0x15c>)
 800e0a6:	f00e f845 	bl	801c134 <UTIL_TIMER_Start>
 800e0aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0ac:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e0ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0b0:	f383 8810 	msr	PRIMASK, r3
}
 800e0b4:	bf00      	nop
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* DISABLE_LORAWAN_RX_WINDOW */

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800e0b6:	4b36      	ldr	r3, [pc, #216]	@ (800e190 <ProcessRadioTxDone+0x148>)
 800e0b8:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800e0bc:	2b02      	cmp	r3, #2
 800e0be:	d004      	beq.n	800e0ca <ProcessRadioTxDone+0x82>
 800e0c0:	4b36      	ldr	r3, [pc, #216]	@ (800e19c <ProcessRadioTxDone+0x154>)
 800e0c2:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d019      	beq.n	800e0fe <ProcessRadioTxDone+0xb6>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800e0ca:	2316      	movs	r3, #22
 800e0cc:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e0d0:	4b2f      	ldr	r3, [pc, #188]	@ (800e190 <ProcessRadioTxDone+0x148>)
 800e0d2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e0d6:	f107 0220 	add.w	r2, r7, #32
 800e0da:	4611      	mov	r1, r2
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f006 fdad 	bl	8014c3c <RegionGetPhyParam>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800e0e6:	4b2d      	ldr	r3, [pc, #180]	@ (800e19c <ProcessRadioTxDone+0x154>)
 800e0e8:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800e0ec:	69fb      	ldr	r3, [r7, #28]
 800e0ee:	4413      	add	r3, r2
 800e0f0:	4619      	mov	r1, r3
 800e0f2:	482d      	ldr	r0, [pc, #180]	@ (800e1a8 <ProcessRadioTxDone+0x160>)
 800e0f4:	f00e f8fc 	bl	801c2f0 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800e0f8:	482b      	ldr	r0, [pc, #172]	@ (800e1a8 <ProcessRadioTxDone+0x160>)
 800e0fa:	f00e f81b 	bl	801c134 <UTIL_TIMER_Start>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800e0fe:	4b26      	ldr	r3, [pc, #152]	@ (800e198 <ProcessRadioTxDone+0x150>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	4a23      	ldr	r2, [pc, #140]	@ (800e190 <ProcessRadioTxDone+0x148>)
 800e104:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800e106:	4b25      	ldr	r3, [pc, #148]	@ (800e19c <ProcessRadioTxDone+0x154>)
 800e108:	f893 3411 	ldrb.w	r3, [r3, #1041]	@ 0x411
 800e10c:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800e10e:	4b22      	ldr	r3, [pc, #136]	@ (800e198 <ProcessRadioTxDone+0x150>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800e114:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e118:	4618      	mov	r0, r3
 800e11a:	f00d fb4b 	bl	801b7b4 <SysTimeGetMcuTime>
 800e11e:	4638      	mov	r0, r7
 800e120:	4b1b      	ldr	r3, [pc, #108]	@ (800e190 <ProcessRadioTxDone+0x148>)
 800e122:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
 800e126:	9200      	str	r2, [sp, #0]
 800e128:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800e12c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800e130:	ca06      	ldmia	r2, {r1, r2}
 800e132:	f00d faa0 	bl	801b676 <SysTimeSub>
 800e136:	f107 0314 	add.w	r3, r7, #20
 800e13a:	463a      	mov	r2, r7
 800e13c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e140:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800e144:	4b15      	ldr	r3, [pc, #84]	@ (800e19c <ProcessRadioTxDone+0x154>)
 800e146:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 800e14a:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800e14c:	2301      	movs	r3, #1
 800e14e:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800e150:	4b0f      	ldr	r3, [pc, #60]	@ (800e190 <ProcessRadioTxDone+0x148>)
 800e152:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 800e156:	2b00      	cmp	r3, #0
 800e158:	d101      	bne.n	800e15e <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 800e15a:	2300      	movs	r3, #0
 800e15c:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800e15e:	4b0c      	ldr	r3, [pc, #48]	@ (800e190 <ProcessRadioTxDone+0x148>)
 800e160:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e164:	f107 0208 	add.w	r2, r7, #8
 800e168:	4611      	mov	r1, r2
 800e16a:	4618      	mov	r0, r3
 800e16c:	f006 fd87 	bl	8014c7e <RegionSetBandTxDone>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 800e170:	4b0a      	ldr	r3, [pc, #40]	@ (800e19c <ProcessRadioTxDone+0x154>)
 800e172:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800e176:	f083 0301 	eor.w	r3, r3, #1
 800e17a:	b2db      	uxtb	r3, r3
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d003      	beq.n	800e188 <ProcessRadioTxDone+0x140>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e180:	4b06      	ldr	r3, [pc, #24]	@ (800e19c <ProcessRadioTxDone+0x154>)
 800e182:	2200      	movs	r2, #0
 800e184:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435
    }
#endif /* LORAMAC_VERSION */
}
 800e188:	bf00      	nop
 800e18a:	3740      	adds	r7, #64	@ 0x40
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bd80      	pop	{r7, pc}
 800e190:	20000c64 	.word	0x20000c64
 800e194:	0801da80 	.word	0x0801da80
 800e198:	20001b58 	.word	0x20001b58
 800e19c:	2000075c 	.word	0x2000075c
 800e1a0:	20000adc 	.word	0x20000adc
 800e1a4:	20000af4 	.word	0x20000af4
 800e1a8:	20000b50 	.word	0x20000b50

0800e1ac <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800e1b0:	4b10      	ldr	r3, [pc, #64]	@ (800e1f4 <PrepareRxDoneAbort+0x48>)
 800e1b2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e1b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e1ba:	4a0e      	ldr	r2, [pc, #56]	@ (800e1f4 <PrepareRxDoneAbort+0x48>)
 800e1bc:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    if( MacCtx.NodeAckRequested == true )
 800e1c0:	4b0c      	ldr	r3, [pc, #48]	@ (800e1f4 <PrepareRxDoneAbort+0x48>)
 800e1c2:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d002      	beq.n	800e1d0 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
 800e1ca:	2000      	movs	r0, #0
 800e1cc:	f001 f950 	bl	800f470 <OnAckTimeoutTimerEvent>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800e1d0:	4a08      	ldr	r2, [pc, #32]	@ (800e1f4 <PrepareRxDoneAbort+0x48>)
 800e1d2:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800e1d6:	f043 0302 	orr.w	r3, r3, #2
 800e1da:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e1de:	4a05      	ldr	r2, [pc, #20]	@ (800e1f4 <PrepareRxDoneAbort+0x48>)
 800e1e0:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800e1e4:	f043 0310 	orr.w	r3, r3, #16
 800e1e8:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481

    UpdateRxSlotIdleState( );
 800e1ec:	f7ff ff14 	bl	800e018 <UpdateRxSlotIdleState>
}
 800e1f0:	bf00      	nop
 800e1f2:	bd80      	pop	{r7, pc}
 800e1f4:	2000075c 	.word	0x2000075c

0800e1f8 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800e1f8:	b5b0      	push	{r4, r5, r7, lr}
 800e1fa:	b0aa      	sub	sp, #168	@ 0xa8
 800e1fc:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800e1fe:	2313      	movs	r3, #19
 800e200:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800e204:	4b78      	ldr	r3, [pc, #480]	@ (800e3e8 <ProcessRadioRxDone+0x1f0>)
 800e206:	685b      	ldr	r3, [r3, #4]
 800e208:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    uint16_t size = RxDoneParams.Size;
 800e20c:	4b76      	ldr	r3, [pc, #472]	@ (800e3e8 <ProcessRadioRxDone+0x1f0>)
 800e20e:	891b      	ldrh	r3, [r3, #8]
 800e210:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    int16_t rssi = RxDoneParams.Rssi;
 800e214:	4b74      	ldr	r3, [pc, #464]	@ (800e3e8 <ProcessRadioRxDone+0x1f0>)
 800e216:	895b      	ldrh	r3, [r3, #10]
 800e218:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
    int8_t snr = RxDoneParams.Snr;
 800e21c:	4b72      	ldr	r3, [pc, #456]	@ (800e3e8 <ProcessRadioRxDone+0x1f0>)
 800e21e:	7b1b      	ldrb	r3, [r3, #12]
 800e220:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

    uint8_t pktHeaderLen = 0;
 800e224:	2300      	movs	r3, #0
 800e226:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86

    uint32_t downLinkCounter = 0;
 800e22a:	2300      	movs	r3, #0
 800e22c:	613b      	str	r3, [r7, #16]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800e22e:	4b6f      	ldr	r3, [pc, #444]	@ (800e3ec <ProcessRadioRxDone+0x1f4>)
 800e230:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e234:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    uint8_t multicast = 0;
 800e238:	2300      	movs	r3, #0
 800e23a:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800e23e:	2301      	movs	r3, #1
 800e240:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 800e244:	2301      	movs	r3, #1
 800e246:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800e24a:	4b69      	ldr	r3, [pc, #420]	@ (800e3f0 <ProcessRadioRxDone+0x1f8>)
 800e24c:	2200      	movs	r2, #0
 800e24e:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
    MacCtx.RxStatus.Rssi = rssi;
 800e252:	4a67      	ldr	r2, [pc, #412]	@ (800e3f0 <ProcessRadioRxDone+0x1f8>)
 800e254:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800e258:	f8a2 347c 	strh.w	r3, [r2, #1148]	@ 0x47c
    MacCtx.RxStatus.Snr = snr;
 800e25c:	4a64      	ldr	r2, [pc, #400]	@ (800e3f0 <ProcessRadioRxDone+0x1f8>)
 800e25e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800e262:	f882 347e 	strb.w	r3, [r2, #1150]	@ 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800e266:	4b62      	ldr	r3, [pc, #392]	@ (800e3f0 <ProcessRadioRxDone+0x1f8>)
 800e268:	f893 2480 	ldrb.w	r2, [r3, #1152]	@ 0x480
 800e26c:	4b60      	ldr	r3, [pc, #384]	@ (800e3f0 <ProcessRadioRxDone+0x1f8>)
 800e26e:	f883 247f 	strb.w	r2, [r3, #1151]	@ 0x47f
    MacCtx.McpsIndication.Port = 0;
 800e272:	4b5f      	ldr	r3, [pc, #380]	@ (800e3f0 <ProcessRadioRxDone+0x1f8>)
 800e274:	2200      	movs	r2, #0
 800e276:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b
    MacCtx.McpsIndication.Multicast = 0;
 800e27a:	4b5d      	ldr	r3, [pc, #372]	@ (800e3f0 <ProcessRadioRxDone+0x1f8>)
 800e27c:	2200      	movs	r2, #0
 800e27e:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800e282:	4b5b      	ldr	r3, [pc, #364]	@ (800e3f0 <ProcessRadioRxDone+0x1f8>)
 800e284:	2200      	movs	r2, #0
 800e286:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
    MacCtx.McpsIndication.Buffer = NULL;
 800e28a:	4b59      	ldr	r3, [pc, #356]	@ (800e3f0 <ProcessRadioRxDone+0x1f8>)
 800e28c:	2200      	movs	r2, #0
 800e28e:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
    MacCtx.McpsIndication.BufferSize = 0;
 800e292:	4b57      	ldr	r3, [pc, #348]	@ (800e3f0 <ProcessRadioRxDone+0x1f8>)
 800e294:	2200      	movs	r2, #0
 800e296:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
    MacCtx.McpsIndication.RxData = false;
 800e29a:	4b55      	ldr	r3, [pc, #340]	@ (800e3f0 <ProcessRadioRxDone+0x1f8>)
 800e29c:	2200      	movs	r2, #0
 800e29e:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
    MacCtx.McpsIndication.AckReceived = false;
 800e2a2:	4b53      	ldr	r3, [pc, #332]	@ (800e3f0 <ProcessRadioRxDone+0x1f8>)
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	f883 2426 	strb.w	r2, [r3, #1062]	@ 0x426
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800e2aa:	4b51      	ldr	r3, [pc, #324]	@ (800e3f0 <ProcessRadioRxDone+0x1f8>)
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e2b2:	4b4f      	ldr	r3, [pc, #316]	@ (800e3f0 <ProcessRadioRxDone+0x1f8>)
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.McpsIndication.DevAddress = 0;
 800e2ba:	4b4d      	ldr	r3, [pc, #308]	@ (800e3f0 <ProcessRadioRxDone+0x1f8>)
 800e2bc:	2200      	movs	r2, #0
 800e2be:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800e2c2:	4b4b      	ldr	r3, [pc, #300]	@ (800e3f0 <ProcessRadioRxDone+0x1f8>)
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800e2ca:	4b4a      	ldr	r3, [pc, #296]	@ (800e3f4 <ProcessRadioRxDone+0x1fc>)
 800e2cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2ce:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
 800e2d0:	4849      	ldr	r0, [pc, #292]	@ (800e3f8 <ProcessRadioRxDone+0x200>)
 800e2d2:	f00d ff9d 	bl	801c210 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800e2d6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e2da:	4619      	mov	r1, r3
 800e2dc:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800e2e0:	f004 fd0d 	bl	8012cfe <LoRaMacClassBRxBeacon>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d00b      	beq.n	800e302 <ProcessRadioRxDone+0x10a>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800e2ea:	4a41      	ldr	r2, [pc, #260]	@ (800e3f0 <ProcessRadioRxDone+0x1f8>)
 800e2ec:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800e2f0:	f8a2 3472 	strh.w	r3, [r2, #1138]	@ 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800e2f4:	4a3e      	ldr	r2, [pc, #248]	@ (800e3f0 <ProcessRadioRxDone+0x1f8>)
 800e2f6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800e2fa:	f882 3474 	strb.w	r3, [r2, #1140]	@ 0x474
        return;
 800e2fe:	f000 bc1f 	b.w	800eb40 <ProcessRadioRxDone+0x948>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e302:	4b3a      	ldr	r3, [pc, #232]	@ (800e3ec <ProcessRadioRxDone+0x1f4>)
 800e304:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800e308:	2b01      	cmp	r3, #1
 800e30a:	d11e      	bne.n	800e34a <ProcessRadioRxDone+0x152>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e30c:	f004 fd0a 	bl	8012d24 <LoRaMacClassBIsPingExpected>
 800e310:	4603      	mov	r3, r0
 800e312:	2b00      	cmp	r3, #0
 800e314:	d00a      	beq.n	800e32c <ProcessRadioRxDone+0x134>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e316:	2000      	movs	r0, #0
 800e318:	f004 fcbb 	bl	8012c92 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e31c:	2000      	movs	r0, #0
 800e31e:	f004 fcdc 	bl	8012cda <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800e322:	4b33      	ldr	r3, [pc, #204]	@ (800e3f0 <ProcessRadioRxDone+0x1f8>)
 800e324:	2204      	movs	r2, #4
 800e326:	f883 247f 	strb.w	r2, [r3, #1151]	@ 0x47f
 800e32a:	e00e      	b.n	800e34a <ProcessRadioRxDone+0x152>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e32c:	f004 fd01 	bl	8012d32 <LoRaMacClassBIsMulticastExpected>
 800e330:	4603      	mov	r3, r0
 800e332:	2b00      	cmp	r3, #0
 800e334:	d009      	beq.n	800e34a <ProcessRadioRxDone+0x152>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e336:	2000      	movs	r0, #0
 800e338:	f004 fcb5 	bl	8012ca6 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e33c:	2000      	movs	r0, #0
 800e33e:	f004 fcd5 	bl	8012cec <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800e342:	4b2b      	ldr	r3, [pc, #172]	@ (800e3f0 <ProcessRadioRxDone+0x1f8>)
 800e344:	2205      	movs	r2, #5
 800e346:	f883 247f 	strb.w	r2, [r3, #1151]	@ 0x47f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 800e34a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d106      	bne.n	800e360 <ProcessRadioRxDone+0x168>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e352:	4b27      	ldr	r3, [pc, #156]	@ (800e3f0 <ProcessRadioRxDone+0x1f8>)
 800e354:	2201      	movs	r2, #1
 800e356:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
        PrepareRxDoneAbort( );
 800e35a:	f7ff ff27 	bl	800e1ac <PrepareRxDoneAbort>
        return;
 800e35e:	e3ef      	b.n	800eb40 <ProcessRadioRxDone+0x948>
    }

    macHdr.Value = payload[pktHeaderLen++];
 800e360:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800e364:	1c5a      	adds	r2, r3, #1
 800e366:	f887 2086 	strb.w	r2, [r7, #134]	@ 0x86
 800e36a:	461a      	mov	r2, r3
 800e36c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e370:	4413      	add	r3, r2
 800e372:	781b      	ldrb	r3, [r3, #0]
 800e374:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 800e378:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800e37c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800e380:	b2db      	uxtb	r3, r3
 800e382:	3b01      	subs	r3, #1
 800e384:	2b06      	cmp	r3, #6
 800e386:	f200 83b4 	bhi.w	800eaf2 <ProcessRadioRxDone+0x8fa>
 800e38a:	a201      	add	r2, pc, #4	@ (adr r2, 800e390 <ProcessRadioRxDone+0x198>)
 800e38c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e390:	0800e3ad 	.word	0x0800e3ad
 800e394:	0800eaf3 	.word	0x0800eaf3
 800e398:	0800e58d 	.word	0x0800e58d
 800e39c:	0800eaf3 	.word	0x0800eaf3
 800e3a0:	0800e585 	.word	0x0800e585
 800e3a4:	0800eaf3 	.word	0x0800eaf3
 800e3a8:	0800ea97 	.word	0x0800ea97
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800e3ac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e3b0:	2b10      	cmp	r3, #16
 800e3b2:	d806      	bhi.n	800e3c2 <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e3b4:	4b0e      	ldr	r3, [pc, #56]	@ (800e3f0 <ProcessRadioRxDone+0x1f8>)
 800e3b6:	2201      	movs	r2, #1
 800e3b8:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800e3bc:	f7ff fef6 	bl	800e1ac <PrepareRxDoneAbort>
                return;
 800e3c0:	e3be      	b.n	800eb40 <ProcessRadioRxDone+0x948>
            }
            macMsgJoinAccept.Buffer = payload;
 800e3c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e3c6:	617b      	str	r3, [r7, #20]
            macMsgJoinAccept.BufSize = size;
 800e3c8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e3cc:	b2db      	uxtb	r3, r3
 800e3ce:	763b      	strb	r3, [r7, #24]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800e3d0:	4b06      	ldr	r3, [pc, #24]	@ (800e3ec <ProcessRadioRxDone+0x1f4>)
 800e3d2:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d010      	beq.n	800e3fc <ProcessRadioRxDone+0x204>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e3da:	4b05      	ldr	r3, [pc, #20]	@ (800e3f0 <ProcessRadioRxDone+0x1f8>)
 800e3dc:	2201      	movs	r2, #1
 800e3de:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800e3e2:	f7ff fee3 	bl	800e1ac <PrepareRxDoneAbort>
                return;
 800e3e6:	e3ab      	b.n	800eb40 <ProcessRadioRxDone+0x948>
 800e3e8:	20001b5c 	.word	0x20001b5c
 800e3ec:	20000c64 	.word	0x20000c64
 800e3f0:	2000075c 	.word	0x2000075c
 800e3f4:	0801da80 	.word	0x0801da80
 800e3f8:	20000af4 	.word	0x20000af4
            }

            SecureElementGetJoinEui( joinEui );
 800e3fc:	1d3b      	adds	r3, r7, #4
 800e3fe:	4618      	mov	r0, r3
 800e400:	f7fe f982 	bl	800c708 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 800e404:	f107 0214 	add.w	r2, r7, #20
 800e408:	1d3b      	adds	r3, r7, #4
 800e40a:	4619      	mov	r1, r3
 800e40c:	20ff      	movs	r0, #255	@ 0xff
 800e40e:	f005 fe97 	bl	8014140 <LoRaMacCryptoHandleJoinAccept>
 800e412:	4603      	mov	r3, r0
 800e414:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */

            VerifyParams_t verifyRxDr;
            bool rxDrValid = false;
 800e418:	2300      	movs	r3, #0
 800e41a:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800e41e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e422:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e426:	b2db      	uxtb	r3, r3
 800e428:	b25b      	sxtb	r3, r3
 800e42a:	703b      	strb	r3, [r7, #0]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e42c:	4bbb      	ldr	r3, [pc, #748]	@ (800e71c <ProcessRadioRxDone+0x524>)
 800e42e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800e432:	707b      	strb	r3, [r7, #1]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 800e434:	4bb9      	ldr	r3, [pc, #740]	@ (800e71c <ProcessRadioRxDone+0x524>)
 800e436:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e43a:	4639      	mov	r1, r7
 800e43c:	2207      	movs	r2, #7
 800e43e:	4618      	mov	r0, r3
 800e440:	f006 fc4a 	bl	8014cd8 <RegionVerify>
 800e444:	4603      	mov	r3, r0
 800e446:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 800e44a:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800e44e:	2b00      	cmp	r3, #0
 800e450:	f040 808c 	bne.w	800e56c <ProcessRadioRxDone+0x374>
 800e454:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800e458:	2b00      	cmp	r3, #0
 800e45a:	f000 8087 	beq.w	800e56c <ProcessRadioRxDone+0x374>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800e45e:	7f7b      	ldrb	r3, [r7, #29]
 800e460:	461a      	mov	r2, r3
 800e462:	4bae      	ldr	r3, [pc, #696]	@ (800e71c <ProcessRadioRxDone+0x524>)
 800e464:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800e468:	4bac      	ldr	r3, [pc, #688]	@ (800e71c <ProcessRadioRxDone+0x524>)
 800e46a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800e46e:	7fbb      	ldrb	r3, [r7, #30]
 800e470:	021b      	lsls	r3, r3, #8
 800e472:	4313      	orrs	r3, r2
 800e474:	4aa9      	ldr	r2, [pc, #676]	@ (800e71c <ProcessRadioRxDone+0x524>)
 800e476:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800e47a:	4ba8      	ldr	r3, [pc, #672]	@ (800e71c <ProcessRadioRxDone+0x524>)
 800e47c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800e480:	7ffb      	ldrb	r3, [r7, #31]
 800e482:	041b      	lsls	r3, r3, #16
 800e484:	4313      	orrs	r3, r2
 800e486:	4aa5      	ldr	r2, [pc, #660]	@ (800e71c <ProcessRadioRxDone+0x524>)
 800e488:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800e48c:	6a3b      	ldr	r3, [r7, #32]
 800e48e:	4aa3      	ldr	r2, [pc, #652]	@ (800e71c <ProcessRadioRxDone+0x524>)
 800e490:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 800e494:	4ba1      	ldr	r3, [pc, #644]	@ (800e71c <ProcessRadioRxDone+0x524>)
 800e496:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e49a:	4619      	mov	r1, r3
 800e49c:	2002      	movs	r0, #2
 800e49e:	f7fe f94b 	bl	800c738 <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800e4a2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e4a6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800e4aa:	b2db      	uxtb	r3, r3
 800e4ac:	461a      	mov	r2, r3
 800e4ae:	4b9b      	ldr	r3, [pc, #620]	@ (800e71c <ProcessRadioRxDone+0x524>)
 800e4b0:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800e4b4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e4b8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e4bc:	b2db      	uxtb	r3, r3
 800e4be:	461a      	mov	r2, r3
 800e4c0:	4b96      	ldr	r3, [pc, #600]	@ (800e71c <ProcessRadioRxDone+0x524>)
 800e4c2:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800e4c6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e4ca:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e4ce:	b2db      	uxtb	r3, r3
 800e4d0:	461a      	mov	r2, r3
 800e4d2:	4b92      	ldr	r3, [pc, #584]	@ (800e71c <ProcessRadioRxDone+0x524>)
 800e4d4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800e4d8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800e4dc:	461a      	mov	r2, r3
 800e4de:	4b8f      	ldr	r3, [pc, #572]	@ (800e71c <ProcessRadioRxDone+0x524>)
 800e4e0:	659a      	str	r2, [r3, #88]	@ 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800e4e2:	4b8e      	ldr	r3, [pc, #568]	@ (800e71c <ProcessRadioRxDone+0x524>)
 800e4e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d102      	bne.n	800e4f0 <ProcessRadioRxDone+0x2f8>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800e4ea:	4b8c      	ldr	r3, [pc, #560]	@ (800e71c <ProcessRadioRxDone+0x524>)
 800e4ec:	2201      	movs	r2, #1
 800e4ee:	659a      	str	r2, [r3, #88]	@ 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800e4f0:	4b8a      	ldr	r3, [pc, #552]	@ (800e71c <ProcessRadioRxDone+0x524>)
 800e4f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e4f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e4f8:	fb02 f303 	mul.w	r3, r2, r3
 800e4fc:	4a87      	ldr	r2, [pc, #540]	@ (800e71c <ProcessRadioRxDone+0x524>)
 800e4fe:	6593      	str	r3, [r2, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800e500:	4b86      	ldr	r3, [pc, #536]	@ (800e71c <ProcessRadioRxDone+0x524>)
 800e502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e504:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800e508:	4a84      	ldr	r2, [pc, #528]	@ (800e71c <ProcessRadioRxDone+0x524>)
 800e50a:	65d3      	str	r3, [r2, #92]	@ 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 800e50c:	4b83      	ldr	r3, [pc, #524]	@ (800e71c <ProcessRadioRxDone+0x524>)
 800e50e:	2201      	movs	r2, #1
 800e510:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800e514:	4b81      	ldr	r3, [pc, #516]	@ (800e71c <ProcessRadioRxDone+0x524>)
 800e516:	2200      	movs	r2, #0
 800e518:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800e51c:	f107 0314 	add.w	r3, r7, #20
 800e520:	3312      	adds	r3, #18
 800e522:	67bb      	str	r3, [r7, #120]	@ 0x78
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800e524:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e528:	b2db      	uxtb	r3, r3
 800e52a:	3b11      	subs	r3, #17
 800e52c:	b2db      	uxtb	r3, r3
 800e52e:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800e532:	4b7a      	ldr	r3, [pc, #488]	@ (800e71c <ProcessRadioRxDone+0x524>)
 800e534:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e538:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800e53c:	4611      	mov	r1, r2
 800e53e:	4618      	mov	r0, r3
 800e540:	f006 fbeb 	bl	8014d1a <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800e544:	4b75      	ldr	r3, [pc, #468]	@ (800e71c <ProcessRadioRxDone+0x524>)
 800e546:	2202      	movs	r2, #2
 800e548:	f883 212c 	strb.w	r2, [r3, #300]	@ 0x12c
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800e54c:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800e550:	4618      	mov	r0, r3
 800e552:	f005 f8cf 	bl	80136f4 <LoRaMacConfirmQueueIsCmdActive>
 800e556:	4603      	mov	r3, r0
 800e558:	2b00      	cmp	r3, #0
 800e55a:	f000 82d2 	beq.w	800eb02 <ProcessRadioRxDone+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 800e55e:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800e562:	4619      	mov	r1, r3
 800e564:	2000      	movs	r0, #0
 800e566:	f005 f839 	bl	80135dc <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800e56a:	e2ca      	b.n	800eb02 <ProcessRadioRxDone+0x90a>
#endif /* LORAMAC_VERSION */
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800e56c:	2001      	movs	r0, #1
 800e56e:	f005 f8c1 	bl	80136f4 <LoRaMacConfirmQueueIsCmdActive>
 800e572:	4603      	mov	r3, r0
 800e574:	2b00      	cmp	r3, #0
 800e576:	f000 82c3 	beq.w	800eb00 <ProcessRadioRxDone+0x908>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800e57a:	2101      	movs	r1, #1
 800e57c:	2007      	movs	r0, #7
 800e57e:	f005 f82d 	bl	80135dc <LoRaMacConfirmQueueSetStatus>
                }
            }

            break;
 800e582:	e2bd      	b.n	800eb00 <ProcessRadioRxDone+0x908>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800e584:	4b66      	ldr	r3, [pc, #408]	@ (800e720 <ProcessRadioRxDone+0x528>)
 800e586:	2201      	movs	r2, #1
 800e588:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e58c:	4b63      	ldr	r3, [pc, #396]	@ (800e71c <ProcessRadioRxDone+0x524>)
 800e58e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800e592:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800e596:	4b62      	ldr	r3, [pc, #392]	@ (800e720 <ProcessRadioRxDone+0x528>)
 800e598:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 800e59c:	b25b      	sxtb	r3, r3
 800e59e:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800e5a2:	230d      	movs	r3, #13
 800e5a4:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800e5a8:	4b5c      	ldr	r3, [pc, #368]	@ (800e71c <ProcessRadioRxDone+0x524>)
 800e5aa:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d002      	beq.n	800e5b8 <ProcessRadioRxDone+0x3c0>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800e5b2:	230e      	movs	r3, #14
 800e5b4:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e5b8:	4b58      	ldr	r3, [pc, #352]	@ (800e71c <ProcessRadioRxDone+0x524>)
 800e5ba:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e5be:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800e5c2:	4611      	mov	r1, r2
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f006 fb39 	bl	8014c3c <RegionGetPhyParam>
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800e5ce:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e5d2:	3b0d      	subs	r3, #13
 800e5d4:	b29b      	uxth	r3, r3
 800e5d6:	b21b      	sxth	r3, r3
 800e5d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e5dc:	b21a      	sxth	r2, r3
 800e5de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e5e0:	b21b      	sxth	r3, r3
 800e5e2:	429a      	cmp	r2, r3
 800e5e4:	dc03      	bgt.n	800e5ee <ProcessRadioRxDone+0x3f6>
 800e5e6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e5ea:	2b0b      	cmp	r3, #11
 800e5ec:	d806      	bhi.n	800e5fc <ProcessRadioRxDone+0x404>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e5ee:	4b4c      	ldr	r3, [pc, #304]	@ (800e720 <ProcessRadioRxDone+0x528>)
 800e5f0:	2201      	movs	r2, #1
 800e5f2:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800e5f6:	f7ff fdd9 	bl	800e1ac <PrepareRxDoneAbort>
                return;
 800e5fa:	e2a1      	b.n	800eb40 <ProcessRadioRxDone+0x948>
            }
            macMsgData.Buffer = payload;
 800e5fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e600:	63fb      	str	r3, [r7, #60]	@ 0x3c
            macMsgData.BufSize = size;
 800e602:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e606:	b2db      	uxtb	r3, r3
 800e608:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800e60c:	4b45      	ldr	r3, [pc, #276]	@ (800e724 <ProcessRadioRxDone+0x52c>)
 800e60e:	663b      	str	r3, [r7, #96]	@ 0x60
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800e610:	23ff      	movs	r3, #255	@ 0xff
 800e612:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800e616:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e61a:	4618      	mov	r0, r3
 800e61c:	f006 f890 	bl	8014740 <LoRaMacParserData>
 800e620:	4603      	mov	r3, r0
 800e622:	2b00      	cmp	r3, #0
 800e624:	d006      	beq.n	800e634 <ProcessRadioRxDone+0x43c>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e626:	4b3e      	ldr	r3, [pc, #248]	@ (800e720 <ProcessRadioRxDone+0x528>)
 800e628:	2201      	movs	r2, #1
 800e62a:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800e62e:	f7ff fdbd 	bl	800e1ac <PrepareRxDoneAbort>
                return;
 800e632:	e285      	b.n	800eb40 <ProcessRadioRxDone+0x948>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800e634:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e636:	4a3a      	ldr	r2, [pc, #232]	@ (800e720 <ProcessRadioRxDone+0x528>)
 800e638:	f8c2 342c 	str.w	r3, [r2, #1068]	@ 0x42c

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800e63c:	f107 020e 	add.w	r2, r7, #14
 800e640:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e644:	4611      	mov	r1, r2
 800e646:	4618      	mov	r0, r3
 800e648:	f002 fd1e 	bl	8011088 <DetermineFrameType>
 800e64c:	4603      	mov	r3, r0
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d006      	beq.n	800e660 <ProcessRadioRxDone+0x468>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e652:	4b33      	ldr	r3, [pc, #204]	@ (800e720 <ProcessRadioRxDone+0x528>)
 800e654:	2201      	movs	r2, #1
 800e656:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800e65a:	f7ff fda7 	bl	800e1ac <PrepareRxDoneAbort>
                return;
 800e65e:	e26f      	b.n	800eb40 <ProcessRadioRxDone+0x948>
            }

            //Check if it is a multicast message
            multicast = 0;
 800e660:	2300      	movs	r3, #0
 800e662:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
            downLinkCounter = 0;
 800e666:	2300      	movs	r3, #0
 800e668:	613b      	str	r3, [r7, #16]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e66a:	2300      	movs	r3, #0
 800e66c:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 800e670:	e04f      	b.n	800e712 <ProcessRadioRxDone+0x51a>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800e672:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800e676:	4929      	ldr	r1, [pc, #164]	@ (800e71c <ProcessRadioRxDone+0x524>)
 800e678:	4613      	mov	r3, r2
 800e67a:	005b      	lsls	r3, r3, #1
 800e67c:	4413      	add	r3, r2
 800e67e:	011b      	lsls	r3, r3, #4
 800e680:	440b      	add	r3, r1
 800e682:	33ec      	adds	r3, #236	@ 0xec
 800e684:	681a      	ldr	r2, [r3, #0]
 800e686:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e688:	429a      	cmp	r2, r3
 800e68a:	d13d      	bne.n	800e708 <ProcessRadioRxDone+0x510>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800e68c:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800e690:	4922      	ldr	r1, [pc, #136]	@ (800e71c <ProcessRadioRxDone+0x524>)
 800e692:	4613      	mov	r3, r2
 800e694:	005b      	lsls	r3, r3, #1
 800e696:	4413      	add	r3, r2
 800e698:	011b      	lsls	r3, r3, #4
 800e69a:	440b      	add	r3, r1
 800e69c:	33e9      	adds	r3, #233	@ 0xe9
 800e69e:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d031      	beq.n	800e708 <ProcessRadioRxDone+0x510>
                {
                    multicast = 1;
 800e6a4:	2301      	movs	r3, #1
 800e6a6:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800e6aa:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800e6ae:	491b      	ldr	r1, [pc, #108]	@ (800e71c <ProcessRadioRxDone+0x524>)
 800e6b0:	4613      	mov	r3, r2
 800e6b2:	005b      	lsls	r3, r3, #1
 800e6b4:	4413      	add	r3, r2
 800e6b6:	011b      	lsls	r3, r3, #4
 800e6b8:	440b      	add	r3, r1
 800e6ba:	33ea      	adds	r3, #234	@ 0xea
 800e6bc:	781b      	ldrb	r3, [r3, #0]
 800e6be:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800e6c2:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800e6c6:	4915      	ldr	r1, [pc, #84]	@ (800e71c <ProcessRadioRxDone+0x524>)
 800e6c8:	4613      	mov	r3, r2
 800e6ca:	005b      	lsls	r3, r3, #1
 800e6cc:	4413      	add	r3, r2
 800e6ce:	011b      	lsls	r3, r3, #4
 800e6d0:	440b      	add	r3, r1
 800e6d2:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	613b      	str	r3, [r7, #16]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800e6dc:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800e6e0:	490e      	ldr	r1, [pc, #56]	@ (800e71c <ProcessRadioRxDone+0x524>)
 800e6e2:	4613      	mov	r3, r2
 800e6e4:	005b      	lsls	r3, r3, #1
 800e6e6:	4413      	add	r3, r2
 800e6e8:	011b      	lsls	r3, r3, #4
 800e6ea:	440b      	add	r3, r1
 800e6ec:	33ec      	adds	r3, #236	@ 0xec
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800e6f4:	4b09      	ldr	r3, [pc, #36]	@ (800e71c <ProcessRadioRxDone+0x524>)
 800e6f6:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800e6fa:	2b02      	cmp	r3, #2
 800e6fc:	d114      	bne.n	800e728 <ProcessRadioRxDone+0x530>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800e6fe:	4b08      	ldr	r3, [pc, #32]	@ (800e720 <ProcessRadioRxDone+0x528>)
 800e700:	2203      	movs	r2, #3
 800e702:	f883 247f 	strb.w	r2, [r3, #1151]	@ 0x47f
                    }
                    break;
 800e706:	e00f      	b.n	800e728 <ProcessRadioRxDone+0x530>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e708:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 800e70c:	3301      	adds	r3, #1
 800e70e:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 800e712:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 800e716:	2b00      	cmp	r3, #0
 800e718:	d0ab      	beq.n	800e672 <ProcessRadioRxDone+0x47a>
 800e71a:	e006      	b.n	800e72a <ProcessRadioRxDone+0x532>
 800e71c:	20000c64 	.word	0x20000c64
 800e720:	2000075c 	.word	0x2000075c
 800e724:	20000994 	.word	0x20000994
                    break;
 800e728:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800e72a:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800e72e:	2b01      	cmp	r3, #1
 800e730:	d117      	bne.n	800e762 <ProcessRadioRxDone+0x56a>
 800e732:	7bbb      	ldrb	r3, [r7, #14]
 800e734:	2b03      	cmp	r3, #3
 800e736:	d10d      	bne.n	800e754 <ProcessRadioRxDone+0x55c>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800e738:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800e73c:	f003 0320 	and.w	r3, r3, #32
 800e740:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800e742:	2b00      	cmp	r3, #0
 800e744:	d106      	bne.n	800e754 <ProcessRadioRxDone+0x55c>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800e746:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800e74a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e74e:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800e750:	2b00      	cmp	r3, #0
 800e752:	d006      	beq.n	800e762 <ProcessRadioRxDone+0x56a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e754:	4bb3      	ldr	r3, [pc, #716]	@ (800ea24 <ProcessRadioRxDone+0x82c>)
 800e756:	2201      	movs	r2, #1
 800e758:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800e75c:	f7ff fd26 	bl	800e1ac <PrepareRxDoneAbort>
                return;
 800e760:	e1ee      	b.n	800eb40 <ProcessRadioRxDone+0x948>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800e762:	2315      	movs	r3, #21
 800e764:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e768:	4baf      	ldr	r3, [pc, #700]	@ (800ea28 <ProcessRadioRxDone+0x830>)
 800e76a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e76e:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800e772:	4611      	mov	r1, r2
 800e774:	4618      	mov	r0, r3
 800e776:	f006 fa61 	bl	8014c3c <RegionGetPhyParam>
 800e77a:	4603      	mov	r3, r0
 800e77c:	66fb      	str	r3, [r7, #108]	@ 0x6c

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800e77e:	7bb9      	ldrb	r1, [r7, #14]
 800e780:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e782:	b29b      	uxth	r3, r3
 800e784:	4da8      	ldr	r5, [pc, #672]	@ (800ea28 <ProcessRadioRxDone+0x830>)
 800e786:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800e78a:	f897 0092 	ldrb.w	r0, [r7, #146]	@ 0x92
 800e78e:	f107 0210 	add.w	r2, r7, #16
 800e792:	9202      	str	r2, [sp, #8]
 800e794:	f107 020f 	add.w	r2, r7, #15
 800e798:	9201      	str	r2, [sp, #4]
 800e79a:	9300      	str	r3, [sp, #0]
 800e79c:	f8d5 3128 	ldr.w	r3, [r5, #296]	@ 0x128
 800e7a0:	4622      	mov	r2, r4
 800e7a2:	f000 fe8d 	bl	800f4c0 <GetFCntDown>
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e7ac:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d035      	beq.n	800e820 <ProcessRadioRxDone+0x628>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800e7b4:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800e7b8:	2b07      	cmp	r3, #7
 800e7ba:	d119      	bne.n	800e7f0 <ProcessRadioRxDone+0x5f8>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800e7bc:	4b99      	ldr	r3, [pc, #612]	@ (800ea24 <ProcessRadioRxDone+0x82c>)
 800e7be:	2208      	movs	r2, #8
 800e7c0:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800e7c4:	4b98      	ldr	r3, [pc, #608]	@ (800ea28 <ProcessRadioRxDone+0x830>)
 800e7c6:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d11d      	bne.n	800e80a <ProcessRadioRxDone+0x612>
 800e7ce:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800e7d2:	f023 031f 	bic.w	r3, r3, #31
 800e7d6:	b2db      	uxtb	r3, r3
 800e7d8:	2ba0      	cmp	r3, #160	@ 0xa0
 800e7da:	d116      	bne.n	800e80a <ProcessRadioRxDone+0x612>
 800e7dc:	4b92      	ldr	r3, [pc, #584]	@ (800ea28 <ProcessRadioRxDone+0x830>)
 800e7de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e7e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d111      	bne.n	800e80a <ProcessRadioRxDone+0x612>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 800e7e6:	4b90      	ldr	r3, [pc, #576]	@ (800ea28 <ProcessRadioRxDone+0x830>)
 800e7e8:	2201      	movs	r2, #1
 800e7ea:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800e7ee:	e00c      	b.n	800e80a <ProcessRadioRxDone+0x612>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800e7f0:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800e7f4:	2b08      	cmp	r3, #8
 800e7f6:	d104      	bne.n	800e802 <ProcessRadioRxDone+0x60a>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800e7f8:	4b8a      	ldr	r3, [pc, #552]	@ (800ea24 <ProcessRadioRxDone+0x82c>)
 800e7fa:	220a      	movs	r2, #10
 800e7fc:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
 800e800:	e003      	b.n	800e80a <ProcessRadioRxDone+0x612>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e802:	4b88      	ldr	r3, [pc, #544]	@ (800ea24 <ProcessRadioRxDone+0x82c>)
 800e804:	2201      	movs	r2, #1
 800e806:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e80a:	693b      	ldr	r3, [r7, #16]
 800e80c:	4a85      	ldr	r2, [pc, #532]	@ (800ea24 <ProcessRadioRxDone+0x82c>)
 800e80e:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800e812:	693b      	ldr	r3, [r7, #16]
 800e814:	4a83      	ldr	r2, [pc, #524]	@ (800ea24 <ProcessRadioRxDone+0x82c>)
 800e816:	f8c2 3460 	str.w	r3, [r2, #1120]	@ 0x460
                PrepareRxDoneAbort( );
 800e81a:	f7ff fcc7 	bl	800e1ac <PrepareRxDoneAbort>
                return;
 800e81e:	e18f      	b.n	800eb40 <ProcessRadioRxDone+0x948>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800e820:	7bfa      	ldrb	r2, [r7, #15]
 800e822:	6939      	ldr	r1, [r7, #16]
 800e824:	f897 0092 	ldrb.w	r0, [r7, #146]	@ 0x92
 800e828:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e82c:	9300      	str	r3, [sp, #0]
 800e82e:	460b      	mov	r3, r1
 800e830:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800e834:	f005 fde6 	bl	8014404 <LoRaMacCryptoUnsecureMessage>
 800e838:	4603      	mov	r3, r0
 800e83a:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e83e:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800e842:	2b00      	cmp	r3, #0
 800e844:	d00f      	beq.n	800e866 <ProcessRadioRxDone+0x66e>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800e846:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800e84a:	2b02      	cmp	r3, #2
 800e84c:	d104      	bne.n	800e858 <ProcessRadioRxDone+0x660>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800e84e:	4b75      	ldr	r3, [pc, #468]	@ (800ea24 <ProcessRadioRxDone+0x82c>)
 800e850:	220b      	movs	r2, #11
 800e852:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
 800e856:	e003      	b.n	800e860 <ProcessRadioRxDone+0x668>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800e858:	4b72      	ldr	r3, [pc, #456]	@ (800ea24 <ProcessRadioRxDone+0x82c>)
 800e85a:	220c      	movs	r2, #12
 800e85c:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                }
                PrepareRxDoneAbort( );
 800e860:	f7ff fca4 	bl	800e1ac <PrepareRxDoneAbort>
                return;
 800e864:	e16c      	b.n	800eb40 <ProcessRadioRxDone+0x948>
                PrepareRxDoneAbort( );
                return;
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e866:	4b6f      	ldr	r3, [pc, #444]	@ (800ea24 <ProcessRadioRxDone+0x82c>)
 800e868:	2200      	movs	r2, #0
 800e86a:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
            MacCtx.McpsIndication.Multicast = multicast;
 800e86e:	4a6d      	ldr	r2, [pc, #436]	@ (800ea24 <ProcessRadioRxDone+0x82c>)
 800e870:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800e874:	f882 341a 	strb.w	r3, [r2, #1050]	@ 0x41a
            MacCtx.McpsIndication.Buffer = NULL;
 800e878:	4b6a      	ldr	r3, [pc, #424]	@ (800ea24 <ProcessRadioRxDone+0x82c>)
 800e87a:	2200      	movs	r2, #0
 800e87c:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
            MacCtx.McpsIndication.BufferSize = 0;
 800e880:	4b68      	ldr	r3, [pc, #416]	@ (800ea24 <ProcessRadioRxDone+0x82c>)
 800e882:	2200      	movs	r2, #0
 800e884:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e888:	693b      	ldr	r3, [r7, #16]
 800e88a:	4a66      	ldr	r2, [pc, #408]	@ (800ea24 <ProcessRadioRxDone+0x82c>)
 800e88c:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800e890:	693b      	ldr	r3, [r7, #16]
 800e892:	4a64      	ldr	r2, [pc, #400]	@ (800ea24 <ProcessRadioRxDone+0x82c>)
 800e894:	f8c2 3460 	str.w	r3, [r2, #1120]	@ 0x460
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e898:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800e89c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e8a0:	b2db      	uxtb	r3, r3
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	bf14      	ite	ne
 800e8a6:	2301      	movne	r3, #1
 800e8a8:	2300      	moveq	r3, #0
 800e8aa:	b2da      	uxtb	r2, r3
 800e8ac:	4b5d      	ldr	r3, [pc, #372]	@ (800ea24 <ProcessRadioRxDone+0x82c>)
 800e8ae:	f883 2426 	strb.w	r2, [r3, #1062]	@ 0x426

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e8b2:	4b5c      	ldr	r3, [pc, #368]	@ (800ea24 <ProcessRadioRxDone+0x82c>)
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e8ba:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800e8be:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e8c2:	b2db      	uxtb	r3, r3
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	bf14      	ite	ne
 800e8c8:	2301      	movne	r3, #1
 800e8ca:	2300      	moveq	r3, #0
 800e8cc:	b2da      	uxtb	r2, r3
 800e8ce:	4b55      	ldr	r3, [pc, #340]	@ (800ea24 <ProcessRadioRxDone+0x82c>)
 800e8d0:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e8d4:	4b53      	ldr	r3, [pc, #332]	@ (800ea24 <ProcessRadioRxDone+0x82c>)
 800e8d6:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d004      	beq.n	800e8e8 <ProcessRadioRxDone+0x6f0>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800e8de:	4b51      	ldr	r3, [pc, #324]	@ (800ea24 <ProcessRadioRxDone+0x82c>)
 800e8e0:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e8e4:	2b01      	cmp	r3, #1
 800e8e6:	d102      	bne.n	800e8ee <ProcessRadioRxDone+0x6f6>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800e8e8:	4b4f      	ldr	r3, [pc, #316]	@ (800ea28 <ProcessRadioRxDone+0x830>)
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	629a      	str	r2, [r3, #40]	@ 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800e8ee:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800e8f2:	2b01      	cmp	r3, #1
 800e8f4:	d104      	bne.n	800e900 <ProcessRadioRxDone+0x708>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800e8f6:	4b4b      	ldr	r3, [pc, #300]	@ (800ea24 <ProcessRadioRxDone+0x82c>)
 800e8f8:	2202      	movs	r2, #2
 800e8fa:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
 800e8fe:	e01f      	b.n	800e940 <ProcessRadioRxDone+0x748>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800e900:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800e904:	f023 031f 	bic.w	r3, r3, #31
 800e908:	b2db      	uxtb	r3, r3
 800e90a:	2ba0      	cmp	r3, #160	@ 0xa0
 800e90c:	d110      	bne.n	800e930 <ProcessRadioRxDone+0x738>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800e90e:	4b46      	ldr	r3, [pc, #280]	@ (800ea28 <ProcessRadioRxDone+0x830>)
 800e910:	2201      	movs	r2, #1
 800e912:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800e916:	4b44      	ldr	r3, [pc, #272]	@ (800ea28 <ProcessRadioRxDone+0x830>)
 800e918:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d102      	bne.n	800e926 <ProcessRadioRxDone+0x72e>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800e920:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e922:	4a41      	ldr	r2, [pc, #260]	@ (800ea28 <ProcessRadioRxDone+0x830>)
 800e924:	6353      	str	r3, [r2, #52]	@ 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800e926:	4b3f      	ldr	r3, [pc, #252]	@ (800ea24 <ProcessRadioRxDone+0x82c>)
 800e928:	2201      	movs	r2, #1
 800e92a:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
 800e92e:	e007      	b.n	800e940 <ProcessRadioRxDone+0x748>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800e930:	4b3d      	ldr	r3, [pc, #244]	@ (800ea28 <ProcessRadioRxDone+0x830>)
 800e932:	2200      	movs	r2, #0
 800e934:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e938:	4b3a      	ldr	r3, [pc, #232]	@ (800ea24 <ProcessRadioRxDone+0x82c>)
 800e93a:	2200      	movs	r2, #0
 800e93c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            }

            // Set the pending status
            /* if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) */
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 800e940:	4b39      	ldr	r3, [pc, #228]	@ (800ea28 <ProcessRadioRxDone+0x830>)
 800e942:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800e946:	2b00      	cmp	r3, #0
 800e948:	d106      	bne.n	800e958 <ProcessRadioRxDone+0x760>
 800e94a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800e94e:	f003 0310 	and.w	r3, r3, #16
 800e952:	b2db      	uxtb	r3, r3
 800e954:	2b00      	cmp	r3, #0
 800e956:	d008      	beq.n	800e96a <ProcessRadioRxDone+0x772>
 800e958:	4b33      	ldr	r3, [pc, #204]	@ (800ea28 <ProcessRadioRxDone+0x830>)
 800e95a:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d103      	bne.n	800e96a <ProcessRadioRxDone+0x772>
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 800e962:	4b30      	ldr	r3, [pc, #192]	@ (800ea24 <ProcessRadioRxDone+0x82c>)
 800e964:	2201      	movs	r2, #1
 800e966:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800e96a:	4b2e      	ldr	r3, [pc, #184]	@ (800ea24 <ProcessRadioRxDone+0x82c>)
 800e96c:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800e970:	4a2c      	ldr	r2, [pc, #176]	@ (800ea24 <ProcessRadioRxDone+0x82c>)
 800e972:	f892 2434 	ldrb.w	r2, [r2, #1076]	@ 0x434
 800e976:	f897 1048 	ldrb.w	r1, [r7, #72]	@ 0x48
 800e97a:	4618      	mov	r0, r3
 800e97c:	f001 ff02 	bl	8010784 <RemoveMacCommands>

            switch( fType )
 800e980:	7bbb      	ldrb	r3, [r7, #14]
 800e982:	2b03      	cmp	r3, #3
 800e984:	d878      	bhi.n	800ea78 <ProcessRadioRxDone+0x880>
 800e986:	a201      	add	r2, pc, #4	@ (adr r2, 800e98c <ProcessRadioRxDone+0x794>)
 800e988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e98c:	0800e99d 	.word	0x0800e99d
 800e990:	0800e9ed 	.word	0x0800e9ed
 800e994:	0800ea2d 	.word	0x0800ea2d
 800e998:	0800ea53 	.word	0x0800ea53
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800e99c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800e9a0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e9a4:	b2db      	uxtb	r3, r3
 800e9a6:	461c      	mov	r4, r3
 800e9a8:	4b1e      	ldr	r3, [pc, #120]	@ (800ea24 <ProcessRadioRxDone+0x82c>)
 800e9aa:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800e9ae:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 800e9b2:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800e9b6:	f102 0010 	add.w	r0, r2, #16
 800e9ba:	9300      	str	r3, [sp, #0]
 800e9bc:	460b      	mov	r3, r1
 800e9be:	4622      	mov	r2, r4
 800e9c0:	2100      	movs	r1, #0
 800e9c2:	f000 fef7 	bl	800f7b4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e9c6:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800e9ca:	4b16      	ldr	r3, [pc, #88]	@ (800ea24 <ProcessRadioRxDone+0x82c>)
 800e9cc:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800e9d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e9d2:	4a14      	ldr	r2, [pc, #80]	@ (800ea24 <ProcessRadioRxDone+0x82c>)
 800e9d4:	f8c2 3420 	str.w	r3, [r2, #1056]	@ 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800e9d8:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800e9dc:	4b11      	ldr	r3, [pc, #68]	@ (800ea24 <ProcessRadioRxDone+0x82c>)
 800e9de:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
                    MacCtx.McpsIndication.RxData = true;
 800e9e2:	4b10      	ldr	r3, [pc, #64]	@ (800ea24 <ProcessRadioRxDone+0x82c>)
 800e9e4:	2201      	movs	r2, #1
 800e9e6:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                    break;
 800e9ea:	e04c      	b.n	800ea86 <ProcessRadioRxDone+0x88e>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800e9ec:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800e9f0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e9f4:	b2db      	uxtb	r3, r3
 800e9f6:	461c      	mov	r4, r3
 800e9f8:	4b0a      	ldr	r3, [pc, #40]	@ (800ea24 <ProcessRadioRxDone+0x82c>)
 800e9fa:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800e9fe:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 800ea02:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800ea06:	f102 0010 	add.w	r0, r2, #16
 800ea0a:	9300      	str	r3, [sp, #0]
 800ea0c:	460b      	mov	r3, r1
 800ea0e:	4622      	mov	r2, r4
 800ea10:	2100      	movs	r1, #0
 800ea12:	f000 fecf 	bl	800f7b4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ea16:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800ea1a:	4b02      	ldr	r3, [pc, #8]	@ (800ea24 <ProcessRadioRxDone+0x82c>)
 800ea1c:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b
                    break;
 800ea20:	e031      	b.n	800ea86 <ProcessRadioRxDone+0x88e>
 800ea22:	bf00      	nop
 800ea24:	2000075c 	.word	0x2000075c
 800ea28:	20000c64 	.word	0x20000c64
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800ea2c:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800ea2e:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800ea32:	4b45      	ldr	r3, [pc, #276]	@ (800eb48 <ProcessRadioRxDone+0x950>)
 800ea34:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800ea38:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 800ea3c:	9300      	str	r3, [sp, #0]
 800ea3e:	460b      	mov	r3, r1
 800ea40:	2100      	movs	r1, #0
 800ea42:	f000 feb7 	bl	800f7b4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ea46:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800ea4a:	4b3f      	ldr	r3, [pc, #252]	@ (800eb48 <ProcessRadioRxDone+0x950>)
 800ea4c:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b
                    break;
 800ea50:	e019      	b.n	800ea86 <ProcessRadioRxDone+0x88e>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ea52:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800ea56:	4b3c      	ldr	r3, [pc, #240]	@ (800eb48 <ProcessRadioRxDone+0x950>)
 800ea58:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800ea5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ea5e:	4a3a      	ldr	r2, [pc, #232]	@ (800eb48 <ProcessRadioRxDone+0x950>)
 800ea60:	f8c2 3420 	str.w	r3, [r2, #1056]	@ 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800ea64:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800ea68:	4b37      	ldr	r3, [pc, #220]	@ (800eb48 <ProcessRadioRxDone+0x950>)
 800ea6a:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
                    MacCtx.McpsIndication.RxData = true;
 800ea6e:	4b36      	ldr	r3, [pc, #216]	@ (800eb48 <ProcessRadioRxDone+0x950>)
 800ea70:	2201      	movs	r2, #1
 800ea72:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                    break;
 800ea76:	e006      	b.n	800ea86 <ProcessRadioRxDone+0x88e>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ea78:	4b33      	ldr	r3, [pc, #204]	@ (800eb48 <ProcessRadioRxDone+0x950>)
 800ea7a:	2201      	movs	r2, #1
 800ea7c:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                    PrepareRxDoneAbort( );
 800ea80:	f7ff fb94 	bl	800e1ac <PrepareRxDoneAbort>
                    break;
 800ea84:	bf00      	nop
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800ea86:	4a30      	ldr	r2, [pc, #192]	@ (800eb48 <ProcessRadioRxDone+0x950>)
 800ea88:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800ea8c:	f043 0302 	orr.w	r3, r3, #2
 800ea90:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481

            break;
 800ea94:	e035      	b.n	800eb02 <ProcessRadioRxDone+0x90a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800ea96:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800ea9a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800ea9e:	18d1      	adds	r1, r2, r3
 800eaa0:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800eaa4:	b29b      	uxth	r3, r3
 800eaa6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800eaaa:	1ad3      	subs	r3, r2, r3
 800eaac:	b29b      	uxth	r3, r3
 800eaae:	461a      	mov	r2, r3
 800eab0:	4826      	ldr	r0, [pc, #152]	@ (800eb4c <ProcessRadioRxDone+0x954>)
 800eab2:	f009 ff96 	bl	80189e2 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800eab6:	4b24      	ldr	r3, [pc, #144]	@ (800eb48 <ProcessRadioRxDone+0x950>)
 800eab8:	2203      	movs	r2, #3
 800eaba:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800eabe:	4b22      	ldr	r3, [pc, #136]	@ (800eb48 <ProcessRadioRxDone+0x950>)
 800eac0:	2200      	movs	r2, #0
 800eac2:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800eac6:	4b20      	ldr	r3, [pc, #128]	@ (800eb48 <ProcessRadioRxDone+0x950>)
 800eac8:	4a20      	ldr	r2, [pc, #128]	@ (800eb4c <ProcessRadioRxDone+0x954>)
 800eaca:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800eace:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ead2:	b2da      	uxtb	r2, r3
 800ead4:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800ead8:	1ad3      	subs	r3, r2, r3
 800eada:	b2da      	uxtb	r2, r3
 800eadc:	4b1a      	ldr	r3, [pc, #104]	@ (800eb48 <ProcessRadioRxDone+0x950>)
 800eade:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800eae2:	4a19      	ldr	r2, [pc, #100]	@ (800eb48 <ProcessRadioRxDone+0x950>)
 800eae4:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800eae8:	f043 0302 	orr.w	r3, r3, #2
 800eaec:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
            break;
 800eaf0:	e007      	b.n	800eb02 <ProcessRadioRxDone+0x90a>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800eaf2:	4b15      	ldr	r3, [pc, #84]	@ (800eb48 <ProcessRadioRxDone+0x950>)
 800eaf4:	2201      	movs	r2, #1
 800eaf6:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
            PrepareRxDoneAbort( );
 800eafa:	f7ff fb57 	bl	800e1ac <PrepareRxDoneAbort>
            break;
 800eafe:	e000      	b.n	800eb02 <ProcessRadioRxDone+0x90a>
            break;
 800eb00:	bf00      	nop
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800eb02:	4b11      	ldr	r3, [pc, #68]	@ (800eb48 <ProcessRadioRxDone+0x950>)
 800eb04:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d008      	beq.n	800eb1e <ProcessRadioRxDone+0x926>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800eb0c:	4b0e      	ldr	r3, [pc, #56]	@ (800eb48 <ProcessRadioRxDone+0x950>)
 800eb0e:	f893 3438 	ldrb.w	r3, [r3, #1080]	@ 0x438
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d00b      	beq.n	800eb2e <ProcessRadioRxDone+0x936>
        {
            OnAckTimeoutTimerEvent( NULL );
 800eb16:	2000      	movs	r0, #0
 800eb18:	f000 fcaa 	bl	800f470 <OnAckTimeoutTimerEvent>
 800eb1c:	e007      	b.n	800eb2e <ProcessRadioRxDone+0x936>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800eb1e:	4b0c      	ldr	r3, [pc, #48]	@ (800eb50 <ProcessRadioRxDone+0x958>)
 800eb20:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800eb24:	2b02      	cmp	r3, #2
 800eb26:	d102      	bne.n	800eb2e <ProcessRadioRxDone+0x936>
        {
            OnAckTimeoutTimerEvent( NULL );
 800eb28:	2000      	movs	r0, #0
 800eb2a:	f000 fca1 	bl	800f470 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800eb2e:	4a06      	ldr	r2, [pc, #24]	@ (800eb48 <ProcessRadioRxDone+0x950>)
 800eb30:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800eb34:	f043 0310 	orr.w	r3, r3, #16
 800eb38:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800eb3c:	f7ff fa6c 	bl	800e018 <UpdateRxSlotIdleState>
}
 800eb40:	3798      	adds	r7, #152	@ 0x98
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bdb0      	pop	{r4, r5, r7, pc}
 800eb46:	bf00      	nop
 800eb48:	2000075c 	.word	0x2000075c
 800eb4c:	20000994 	.word	0x20000994
 800eb50:	20000c64 	.word	0x20000c64

0800eb54 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800eb58:	4b11      	ldr	r3, [pc, #68]	@ (800eba0 <ProcessRadioTxTimeout+0x4c>)
 800eb5a:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800eb5e:	2b02      	cmp	r3, #2
 800eb60:	d002      	beq.n	800eb68 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800eb62:	4b10      	ldr	r3, [pc, #64]	@ (800eba4 <ProcessRadioTxTimeout+0x50>)
 800eb64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb66:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800eb68:	f7ff fa56 	bl	800e018 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800eb6c:	4b0e      	ldr	r3, [pc, #56]	@ (800eba8 <ProcessRadioTxTimeout+0x54>)
 800eb6e:	2202      	movs	r2, #2
 800eb70:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800eb74:	2002      	movs	r0, #2
 800eb76:	f004 fd89 	bl	801368c <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800eb7a:	4b0b      	ldr	r3, [pc, #44]	@ (800eba8 <ProcessRadioTxTimeout+0x54>)
 800eb7c:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d003      	beq.n	800eb8c <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
 800eb84:	4b08      	ldr	r3, [pc, #32]	@ (800eba8 <ProcessRadioTxTimeout+0x54>)
 800eb86:	2201      	movs	r2, #1
 800eb88:	f883 240f 	strb.w	r2, [r3, #1039]	@ 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800eb8c:	4a06      	ldr	r2, [pc, #24]	@ (800eba8 <ProcessRadioTxTimeout+0x54>)
 800eb8e:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800eb92:	f043 0310 	orr.w	r3, r3, #16
 800eb96:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
}
 800eb9a:	bf00      	nop
 800eb9c:	bd80      	pop	{r7, pc}
 800eb9e:	bf00      	nop
 800eba0:	20000c64 	.word	0x20000c64
 800eba4:	0801da80 	.word	0x0801da80
 800eba8:	2000075c 	.word	0x2000075c

0800ebac <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b084      	sub	sp, #16
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	460a      	mov	r2, r1
 800ebb6:	71fb      	strb	r3, [r7, #7]
 800ebb8:	4613      	mov	r3, r2
 800ebba:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800ebc0:	4b40      	ldr	r3, [pc, #256]	@ (800ecc4 <HandleRadioRxErrorTimeout+0x118>)
 800ebc2:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800ebc6:	2b02      	cmp	r3, #2
 800ebc8:	d002      	beq.n	800ebd0 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800ebca:	4b3f      	ldr	r3, [pc, #252]	@ (800ecc8 <HandleRadioRxErrorTimeout+0x11c>)
 800ebcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebce:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800ebd0:	f004 f8a1 	bl	8012d16 <LoRaMacClassBIsBeaconExpected>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d007      	beq.n	800ebea <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800ebda:	2002      	movs	r0, #2
 800ebdc:	f004 f84f 	bl	8012c7e <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800ebe0:	2000      	movs	r0, #0
 800ebe2:	f004 f871 	bl	8012cc8 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800ebe6:	2301      	movs	r3, #1
 800ebe8:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800ebea:	4b36      	ldr	r3, [pc, #216]	@ (800ecc4 <HandleRadioRxErrorTimeout+0x118>)
 800ebec:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800ebf0:	2b01      	cmp	r3, #1
 800ebf2:	d119      	bne.n	800ec28 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800ebf4:	f004 f896 	bl	8012d24 <LoRaMacClassBIsPingExpected>
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d007      	beq.n	800ec0e <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ebfe:	2000      	movs	r0, #0
 800ec00:	f004 f847 	bl	8012c92 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800ec04:	2000      	movs	r0, #0
 800ec06:	f004 f868 	bl	8012cda <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800ec0a:	2301      	movs	r3, #1
 800ec0c:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800ec0e:	f004 f890 	bl	8012d32 <LoRaMacClassBIsMulticastExpected>
 800ec12:	4603      	mov	r3, r0
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d007      	beq.n	800ec28 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ec18:	2000      	movs	r0, #0
 800ec1a:	f004 f844 	bl	8012ca6 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800ec1e:	2000      	movs	r0, #0
 800ec20:	f004 f864 	bl	8012cec <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800ec24:	2301      	movs	r3, #1
 800ec26:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800ec28:	7bfb      	ldrb	r3, [r7, #15]
 800ec2a:	f083 0301 	eor.w	r3, r3, #1
 800ec2e:	b2db      	uxtb	r3, r3
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d040      	beq.n	800ecb6 <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800ec34:	4b25      	ldr	r3, [pc, #148]	@ (800eccc <HandleRadioRxErrorTimeout+0x120>)
 800ec36:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d122      	bne.n	800ec84 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800ec3e:	4b23      	ldr	r3, [pc, #140]	@ (800eccc <HandleRadioRxErrorTimeout+0x120>)
 800ec40:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d003      	beq.n	800ec50 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800ec48:	4a20      	ldr	r2, [pc, #128]	@ (800eccc <HandleRadioRxErrorTimeout+0x120>)
 800ec4a:	79fb      	ldrb	r3, [r7, #7]
 800ec4c:	f882 3435 	strb.w	r3, [r2, #1077]	@ 0x435
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800ec50:	79fb      	ldrb	r3, [r7, #7]
 800ec52:	4618      	mov	r0, r3
 800ec54:	f004 fd1a 	bl	801368c <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800ec58:	4b1a      	ldr	r3, [pc, #104]	@ (800ecc4 <HandleRadioRxErrorTimeout+0x118>)
 800ec5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	f00d fc03 	bl	801c468 <UTIL_TIMER_GetElapsedTime>
 800ec62:	4602      	mov	r2, r0
 800ec64:	4b19      	ldr	r3, [pc, #100]	@ (800eccc <HandleRadioRxErrorTimeout+0x120>)
 800ec66:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800ec6a:	429a      	cmp	r2, r3
 800ec6c:	d323      	bcc.n	800ecb6 <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800ec6e:	4818      	ldr	r0, [pc, #96]	@ (800ecd0 <HandleRadioRxErrorTimeout+0x124>)
 800ec70:	f00d face 	bl	801c210 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800ec74:	4a15      	ldr	r2, [pc, #84]	@ (800eccc <HandleRadioRxErrorTimeout+0x120>)
 800ec76:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800ec7a:	f043 0310 	orr.w	r3, r3, #16
 800ec7e:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
 800ec82:	e018      	b.n	800ecb6 <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800ec84:	4b11      	ldr	r3, [pc, #68]	@ (800eccc <HandleRadioRxErrorTimeout+0x120>)
 800ec86:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d003      	beq.n	800ec96 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800ec8e:	4a0f      	ldr	r2, [pc, #60]	@ (800eccc <HandleRadioRxErrorTimeout+0x120>)
 800ec90:	79bb      	ldrb	r3, [r7, #6]
 800ec92:	f882 3435 	strb.w	r3, [r2, #1077]	@ 0x435
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800ec96:	79bb      	ldrb	r3, [r7, #6]
 800ec98:	4618      	mov	r0, r3
 800ec9a:	f004 fcf7 	bl	801368c <LoRaMacConfirmQueueSetStatusCmn>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800ec9e:	4b09      	ldr	r3, [pc, #36]	@ (800ecc4 <HandleRadioRxErrorTimeout+0x118>)
 800eca0:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800eca4:	2b02      	cmp	r3, #2
 800eca6:	d006      	beq.n	800ecb6 <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800eca8:	4a08      	ldr	r2, [pc, #32]	@ (800eccc <HandleRadioRxErrorTimeout+0x120>)
 800ecaa:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800ecae:	f043 0310 	orr.w	r3, r3, #16
 800ecb2:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
            MacCtx.MacFlags.Bits.MacDone = 1;
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800ecb6:	f7ff f9af 	bl	800e018 <UpdateRxSlotIdleState>
}
 800ecba:	bf00      	nop
 800ecbc:	3710      	adds	r7, #16
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}
 800ecc2:	bf00      	nop
 800ecc4:	20000c64 	.word	0x20000c64
 800ecc8:	0801da80 	.word	0x0801da80
 800eccc:	2000075c 	.word	0x2000075c
 800ecd0:	20000af4 	.word	0x20000af4

0800ecd4 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800ecd8:	2106      	movs	r1, #6
 800ecda:	2005      	movs	r0, #5
 800ecdc:	f7ff ff66 	bl	800ebac <HandleRadioRxErrorTimeout>
}
 800ece0:	bf00      	nop
 800ece2:	bd80      	pop	{r7, pc}

0800ece4 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800ece8:	2104      	movs	r1, #4
 800ecea:	2003      	movs	r0, #3
 800ecec:	f7ff ff5e 	bl	800ebac <HandleRadioRxErrorTimeout>
}
 800ecf0:	bf00      	nop
 800ecf2:	bd80      	pop	{r7, pc}

0800ecf4 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b084      	sub	sp, #16
 800ecf8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ecfa:	f3ef 8310 	mrs	r3, PRIMASK
 800ecfe:	607b      	str	r3, [r7, #4]
  return(result);
 800ed00:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800ed02:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800ed04:	b672      	cpsid	i
}
 800ed06:	bf00      	nop
    events = LoRaMacRadioEvents;
 800ed08:	4b1d      	ldr	r3, [pc, #116]	@ (800ed80 <LoRaMacHandleIrqEvents+0x8c>)
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800ed0e:	4b1c      	ldr	r3, [pc, #112]	@ (800ed80 <LoRaMacHandleIrqEvents+0x8c>)
 800ed10:	2200      	movs	r2, #0
 800ed12:	601a      	str	r2, [r3, #0]
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ed18:	68bb      	ldr	r3, [r7, #8]
 800ed1a:	f383 8810 	msr	PRIMASK, r3
}
 800ed1e:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d027      	beq.n	800ed76 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800ed26:	783b      	ldrb	r3, [r7, #0]
 800ed28:	f003 0310 	and.w	r3, r3, #16
 800ed2c:	b2db      	uxtb	r3, r3
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d001      	beq.n	800ed36 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800ed32:	f7ff f989 	bl	800e048 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800ed36:	783b      	ldrb	r3, [r7, #0]
 800ed38:	f003 0308 	and.w	r3, r3, #8
 800ed3c:	b2db      	uxtb	r3, r3
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d001      	beq.n	800ed46 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800ed42:	f7ff fa59 	bl	800e1f8 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800ed46:	783b      	ldrb	r3, [r7, #0]
 800ed48:	f003 0304 	and.w	r3, r3, #4
 800ed4c:	b2db      	uxtb	r3, r3
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d001      	beq.n	800ed56 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800ed52:	f7ff feff 	bl	800eb54 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800ed56:	783b      	ldrb	r3, [r7, #0]
 800ed58:	f003 0302 	and.w	r3, r3, #2
 800ed5c:	b2db      	uxtb	r3, r3
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d001      	beq.n	800ed66 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800ed62:	f7ff ffb7 	bl	800ecd4 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800ed66:	783b      	ldrb	r3, [r7, #0]
 800ed68:	f003 0301 	and.w	r3, r3, #1
 800ed6c:	b2db      	uxtb	r3, r3
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d001      	beq.n	800ed76 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800ed72:	f7ff ffb7 	bl	800ece4 <ProcessRadioRxTimeout>
        }
    }
}
 800ed76:	bf00      	nop
 800ed78:	3710      	adds	r7, #16
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	bd80      	pop	{r7, pc}
 800ed7e:	bf00      	nop
 800ed80:	20001b54 	.word	0x20001b54

0800ed84 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800ed84:	b480      	push	{r7}
 800ed86:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800ed88:	4b0b      	ldr	r3, [pc, #44]	@ (800edb8 <LoRaMacIsBusy+0x34>)
 800ed8a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ed8e:	2b01      	cmp	r3, #1
 800ed90:	d101      	bne.n	800ed96 <LoRaMacIsBusy+0x12>
    {
        return false;
 800ed92:	2300      	movs	r3, #0
 800ed94:	e00c      	b.n	800edb0 <LoRaMacIsBusy+0x2c>
    {
        return true;
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800ed96:	4b08      	ldr	r3, [pc, #32]	@ (800edb8 <LoRaMacIsBusy+0x34>)
 800ed98:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d106      	bne.n	800edae <LoRaMacIsBusy+0x2a>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800eda0:	4b05      	ldr	r3, [pc, #20]	@ (800edb8 <LoRaMacIsBusy+0x34>)
 800eda2:	f893 3482 	ldrb.w	r3, [r3, #1154]	@ 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800eda6:	2b01      	cmp	r3, #1
 800eda8:	d101      	bne.n	800edae <LoRaMacIsBusy+0x2a>
    {
        return false;
 800edaa:	2300      	movs	r3, #0
 800edac:	e000      	b.n	800edb0 <LoRaMacIsBusy+0x2c>
    }
    return true;
 800edae:	2301      	movs	r3, #1
}
 800edb0:	4618      	mov	r0, r3
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bc80      	pop	{r7}
 800edb6:	4770      	bx	lr
 800edb8:	2000075c 	.word	0x2000075c

0800edbc <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 800edbc:	b480      	push	{r7}
 800edbe:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800edc0:	4b05      	ldr	r3, [pc, #20]	@ (800edd8 <LoRaMacIsStopped+0x1c>)
 800edc2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800edc6:	2b01      	cmp	r3, #1
 800edc8:	d101      	bne.n	800edce <LoRaMacIsStopped+0x12>
    {
        return true;
 800edca:	2301      	movs	r3, #1
 800edcc:	e000      	b.n	800edd0 <LoRaMacIsStopped+0x14>
    }
    return false;
 800edce:	2300      	movs	r3, #0
}
 800edd0:	4618      	mov	r0, r3
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bc80      	pop	{r7}
 800edd6:	4770      	bx	lr
 800edd8:	2000075c 	.word	0x2000075c

0800eddc <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800eddc:	b480      	push	{r7}
 800edde:	b083      	sub	sp, #12
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	4603      	mov	r3, r0
 800ede4:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800ede6:	4a04      	ldr	r2, [pc, #16]	@ (800edf8 <LoRaMacEnableRequests+0x1c>)
 800ede8:	79fb      	ldrb	r3, [r7, #7]
 800edea:	f882 3482 	strb.w	r3, [r2, #1154]	@ 0x482
}
 800edee:	bf00      	nop
 800edf0:	370c      	adds	r7, #12
 800edf2:	46bd      	mov	sp, r7
 800edf4:	bc80      	pop	{r7}
 800edf6:	4770      	bx	lr
 800edf8:	2000075c 	.word	0x2000075c

0800edfc <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b082      	sub	sp, #8
 800ee00:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800ee02:	4b2c      	ldr	r3, [pc, #176]	@ (800eeb4 <LoRaMacHandleRequestEvents+0xb8>)
 800ee04:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800ee08:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800ee0a:	4b2a      	ldr	r3, [pc, #168]	@ (800eeb4 <LoRaMacHandleRequestEvents+0xb8>)
 800ee0c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d14a      	bne.n	800eeaa <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800ee14:	4b27      	ldr	r3, [pc, #156]	@ (800eeb4 <LoRaMacHandleRequestEvents+0xb8>)
 800ee16:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800ee1a:	f003 0301 	and.w	r3, r3, #1
 800ee1e:	b2db      	uxtb	r3, r3
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d006      	beq.n	800ee32 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800ee24:	4a23      	ldr	r2, [pc, #140]	@ (800eeb4 <LoRaMacHandleRequestEvents+0xb8>)
 800ee26:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800ee2a:	f36f 0300 	bfc	r3, #0, #1
 800ee2e:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800ee32:	4b20      	ldr	r3, [pc, #128]	@ (800eeb4 <LoRaMacHandleRequestEvents+0xb8>)
 800ee34:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800ee38:	f003 0304 	and.w	r3, r3, #4
 800ee3c:	b2db      	uxtb	r3, r3
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d006      	beq.n	800ee50 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800ee42:	4a1c      	ldr	r2, [pc, #112]	@ (800eeb4 <LoRaMacHandleRequestEvents+0xb8>)
 800ee44:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800ee48:	f36f 0382 	bfc	r3, #2, #1
 800ee4c:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800ee50:	2001      	movs	r0, #1
 800ee52:	f7ff ffc3 	bl	800eddc <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800ee56:	793b      	ldrb	r3, [r7, #4]
 800ee58:	f003 0301 	and.w	r3, r3, #1
 800ee5c:	b2db      	uxtb	r3, r3
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d005      	beq.n	800ee6e <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800ee62:	4b14      	ldr	r3, [pc, #80]	@ (800eeb4 <LoRaMacHandleRequestEvents+0xb8>)
 800ee64:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	4813      	ldr	r0, [pc, #76]	@ (800eeb8 <LoRaMacHandleRequestEvents+0xbc>)
 800ee6c:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800ee6e:	793b      	ldrb	r3, [r7, #4]
 800ee70:	f003 0304 	and.w	r3, r3, #4
 800ee74:	b2db      	uxtb	r3, r3
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d00e      	beq.n	800ee98 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800ee7a:	4810      	ldr	r0, [pc, #64]	@ (800eebc <LoRaMacHandleRequestEvents+0xc0>)
 800ee7c:	f004 fc54 	bl	8013728 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800ee80:	f004 fca4 	bl	80137cc <LoRaMacConfirmQueueGetCnt>
 800ee84:	4603      	mov	r3, r0
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d006      	beq.n	800ee98 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800ee8a:	4a0a      	ldr	r2, [pc, #40]	@ (800eeb4 <LoRaMacHandleRequestEvents+0xb8>)
 800ee8c:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800ee90:	f043 0304 	orr.w	r3, r3, #4
 800ee94:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800ee98:	f003 ff69 	bl	8012d6e <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800ee9c:	4a05      	ldr	r2, [pc, #20]	@ (800eeb4 <LoRaMacHandleRequestEvents+0xb8>)
 800ee9e:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800eea2:	f36f 1304 	bfc	r3, #4, #1
 800eea6:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    }
}
 800eeaa:	bf00      	nop
 800eeac:	3708      	adds	r7, #8
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}
 800eeb2:	bf00      	nop
 800eeb4:	2000075c 	.word	0x2000075c
 800eeb8:	20000b90 	.word	0x20000b90
 800eebc:	20000ba4 	.word	0x20000ba4

0800eec0 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800eec4:	4b16      	ldr	r3, [pc, #88]	@ (800ef20 <LoRaMacHandleIndicationEvents+0x60>)
 800eec6:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800eeca:	f003 0308 	and.w	r3, r3, #8
 800eece:	b2db      	uxtb	r3, r3
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d00d      	beq.n	800eef0 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800eed4:	4a12      	ldr	r2, [pc, #72]	@ (800ef20 <LoRaMacHandleIndicationEvents+0x60>)
 800eed6:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800eeda:	f36f 03c3 	bfc	r3, #3, #1
 800eede:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800eee2:	4b0f      	ldr	r3, [pc, #60]	@ (800ef20 <LoRaMacHandleIndicationEvents+0x60>)
 800eee4:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800eee8:	68db      	ldr	r3, [r3, #12]
 800eeea:	490e      	ldr	r1, [pc, #56]	@ (800ef24 <LoRaMacHandleIndicationEvents+0x64>)
 800eeec:	480e      	ldr	r0, [pc, #56]	@ (800ef28 <LoRaMacHandleIndicationEvents+0x68>)
 800eeee:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800eef0:	4b0b      	ldr	r3, [pc, #44]	@ (800ef20 <LoRaMacHandleIndicationEvents+0x60>)
 800eef2:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800eef6:	f003 0302 	and.w	r3, r3, #2
 800eefa:	b2db      	uxtb	r3, r3
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d00d      	beq.n	800ef1c <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800ef00:	4a07      	ldr	r2, [pc, #28]	@ (800ef20 <LoRaMacHandleIndicationEvents+0x60>)
 800ef02:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800ef06:	f36f 0341 	bfc	r3, #1, #1
 800ef0a:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800ef0e:	4b04      	ldr	r3, [pc, #16]	@ (800ef20 <LoRaMacHandleIndicationEvents+0x60>)
 800ef10:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800ef14:	685b      	ldr	r3, [r3, #4]
 800ef16:	4903      	ldr	r1, [pc, #12]	@ (800ef24 <LoRaMacHandleIndicationEvents+0x64>)
 800ef18:	4804      	ldr	r0, [pc, #16]	@ (800ef2c <LoRaMacHandleIndicationEvents+0x6c>)
 800ef1a:	4798      	blx	r3
    }
}
 800ef1c:	bf00      	nop
 800ef1e:	bd80      	pop	{r7, pc}
 800ef20:	2000075c 	.word	0x2000075c
 800ef24:	20000bd8 	.word	0x20000bd8
 800ef28:	20000bb8 	.word	0x20000bb8
 800ef2c:	20000b74 	.word	0x20000b74

0800ef30 <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b082      	sub	sp, #8
 800ef34:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800ef36:	4b32      	ldr	r3, [pc, #200]	@ (800f000 <LoRaMacHandleMcpsRequest+0xd0>)
 800ef38:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800ef3c:	f003 0301 	and.w	r3, r3, #1
 800ef40:	b2db      	uxtb	r3, r3
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d058      	beq.n	800eff8 <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 800ef46:	2300      	movs	r3, #0
 800ef48:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800ef4e:	4b2c      	ldr	r3, [pc, #176]	@ (800f000 <LoRaMacHandleMcpsRequest+0xd0>)
 800ef50:	f893 3434 	ldrb.w	r3, [r3, #1076]	@ 0x434
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d004      	beq.n	800ef62 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800ef58:	4b29      	ldr	r3, [pc, #164]	@ (800f000 <LoRaMacHandleMcpsRequest+0xd0>)
 800ef5a:	f893 3434 	ldrb.w	r3, [r3, #1076]	@ 0x434
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800ef5e:	2b03      	cmp	r3, #3
 800ef60:	d104      	bne.n	800ef6c <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800ef62:	f002 f8df 	bl	8011124 <CheckRetransUnconfirmedUplink>
 800ef66:	4603      	mov	r3, r0
 800ef68:	71fb      	strb	r3, [r7, #7]
 800ef6a:	e020      	b.n	800efae <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800ef6c:	4b24      	ldr	r3, [pc, #144]	@ (800f000 <LoRaMacHandleMcpsRequest+0xd0>)
 800ef6e:	f893 3434 	ldrb.w	r3, [r3, #1076]	@ 0x434
 800ef72:	2b01      	cmp	r3, #1
 800ef74:	d11b      	bne.n	800efae <LoRaMacHandleMcpsRequest+0x7e>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( MacCtx.AckTimeoutRetry == true )
 800ef76:	4b22      	ldr	r3, [pc, #136]	@ (800f000 <LoRaMacHandleMcpsRequest+0xd0>)
 800ef78:	f893 340f 	ldrb.w	r3, [r3, #1039]	@ 0x40f
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d014      	beq.n	800efaa <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800ef80:	f002 f8fc 	bl	801117c <CheckRetransConfirmedUplink>
 800ef84:	4603      	mov	r3, r0
 800ef86:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800ef88:	4b1e      	ldr	r3, [pc, #120]	@ (800f004 <LoRaMacHandleMcpsRequest+0xd4>)
 800ef8a:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d10d      	bne.n	800efae <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 800ef92:	79fb      	ldrb	r3, [r7, #7]
 800ef94:	f083 0301 	eor.w	r3, r3, #1
 800ef98:	b2db      	uxtb	r3, r3
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d002      	beq.n	800efa4 <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 800ef9e:	f002 f97f 	bl	80112a0 <AckTimeoutRetriesProcess>
 800efa2:	e004      	b.n	800efae <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800efa4:	f002 f9ba 	bl	801131c <AckTimeoutRetriesFinalize>
 800efa8:	e001      	b.n	800efae <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800efaa:	2301      	movs	r3, #1
 800efac:	71bb      	strb	r3, [r7, #6]
                waitForRetransmission = true;
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 800efae:	79fb      	ldrb	r3, [r7, #7]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d00d      	beq.n	800efd0 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800efb4:	4814      	ldr	r0, [pc, #80]	@ (800f008 <LoRaMacHandleMcpsRequest+0xd8>)
 800efb6:	f00d f92b 	bl	801c210 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800efba:	4b11      	ldr	r3, [pc, #68]	@ (800f000 <LoRaMacHandleMcpsRequest+0xd0>)
 800efbc:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800efc0:	f023 0320 	bic.w	r3, r3, #32
 800efc4:	4a0e      	ldr	r2, [pc, #56]	@ (800f000 <LoRaMacHandleMcpsRequest+0xd0>)
 800efc6:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            StopRetransmission( );
 800efca:	f002 f8f9 	bl	80111c0 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800efce:	e013      	b.n	800eff8 <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 800efd0:	79bb      	ldrb	r3, [r7, #6]
 800efd2:	f083 0301 	eor.w	r3, r3, #1
 800efd6:	b2db      	uxtb	r3, r3
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d00d      	beq.n	800eff8 <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800efdc:	4a08      	ldr	r2, [pc, #32]	@ (800f000 <LoRaMacHandleMcpsRequest+0xd0>)
 800efde:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800efe2:	f36f 1304 	bfc	r3, #4, #1
 800efe6:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
            MacCtx.AckTimeoutRetry = false;
 800efea:	4b05      	ldr	r3, [pc, #20]	@ (800f000 <LoRaMacHandleMcpsRequest+0xd0>)
 800efec:	2200      	movs	r2, #0
 800efee:	f883 240f 	strb.w	r2, [r3, #1039]	@ 0x40f
            OnTxDelayedTimerEvent( NULL );
 800eff2:	2000      	movs	r0, #0
 800eff4:	f000 f992 	bl	800f31c <OnTxDelayedTimerEvent>
}
 800eff8:	bf00      	nop
 800effa:	3708      	adds	r7, #8
 800effc:	46bd      	mov	sp, r7
 800effe:	bd80      	pop	{r7, pc}
 800f000:	2000075c 	.word	0x2000075c
 800f004:	20000c64 	.word	0x20000c64
 800f008:	20000ac4 	.word	0x20000ac4

0800f00c <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f010:	4b1b      	ldr	r3, [pc, #108]	@ (800f080 <LoRaMacHandleMlmeRequest+0x74>)
 800f012:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800f016:	f003 0304 	and.w	r3, r3, #4
 800f01a:	b2db      	uxtb	r3, r3
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d02c      	beq.n	800f07a <LoRaMacHandleMlmeRequest+0x6e>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f020:	2001      	movs	r0, #1
 800f022:	f004 fb67 	bl	80136f4 <LoRaMacConfirmQueueIsCmdActive>
 800f026:	4603      	mov	r3, r0
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d012      	beq.n	800f052 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800f02c:	2001      	movs	r0, #1
 800f02e:	f004 fb03 	bl	8013638 <LoRaMacConfirmQueueGetStatus>
 800f032:	4603      	mov	r3, r0
 800f034:	2b00      	cmp	r3, #0
 800f036:	d103      	bne.n	800f040 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800f038:	4b11      	ldr	r3, [pc, #68]	@ (800f080 <LoRaMacHandleMlmeRequest+0x74>)
 800f03a:	2200      	movs	r2, #0
 800f03c:	f883 240c 	strb.w	r2, [r3, #1036]	@ 0x40c
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f040:	4b0f      	ldr	r3, [pc, #60]	@ (800f080 <LoRaMacHandleMlmeRequest+0x74>)
 800f042:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f046:	f023 0302 	bic.w	r3, r3, #2
 800f04a:	4a0d      	ldr	r2, [pc, #52]	@ (800f080 <LoRaMacHandleMlmeRequest+0x74>)
 800f04c:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 800f050:	e013      	b.n	800f07a <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800f052:	2006      	movs	r0, #6
 800f054:	f004 fb4e 	bl	80136f4 <LoRaMacConfirmQueueIsCmdActive>
 800f058:	4603      	mov	r3, r0
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d105      	bne.n	800f06a <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800f05e:	2007      	movs	r0, #7
 800f060:	f004 fb48 	bl	80136f4 <LoRaMacConfirmQueueIsCmdActive>
 800f064:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800f066:	2b00      	cmp	r3, #0
 800f068:	d007      	beq.n	800f07a <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f06a:	4b05      	ldr	r3, [pc, #20]	@ (800f080 <LoRaMacHandleMlmeRequest+0x74>)
 800f06c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f070:	f023 0302 	bic.w	r3, r3, #2
 800f074:	4a02      	ldr	r2, [pc, #8]	@ (800f080 <LoRaMacHandleMlmeRequest+0x74>)
 800f076:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 800f07a:	bf00      	nop
 800f07c:	bd80      	pop	{r7, pc}
 800f07e:	bf00      	nop
 800f080:	2000075c 	.word	0x2000075c

0800f084 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800f084:	b580      	push	{r7, lr}
 800f086:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800f088:	200c      	movs	r0, #12
 800f08a:	f004 fb33 	bl	80136f4 <LoRaMacConfirmQueueIsCmdActive>
 800f08e:	4603      	mov	r3, r0
 800f090:	2b00      	cmp	r3, #0
 800f092:	d019      	beq.n	800f0c8 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800f094:	4b0e      	ldr	r3, [pc, #56]	@ (800f0d0 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f096:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800f09a:	f003 0301 	and.w	r3, r3, #1
 800f09e:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d111      	bne.n	800f0c8 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f0a4:	4b0a      	ldr	r3, [pc, #40]	@ (800f0d0 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f0a6:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800f0aa:	f003 0304 	and.w	r3, r3, #4
 800f0ae:	b2db      	uxtb	r3, r3
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d009      	beq.n	800f0c8 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f0b4:	4b06      	ldr	r3, [pc, #24]	@ (800f0d0 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f0b6:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f0ba:	f023 0302 	bic.w	r3, r3, #2
 800f0be:	4a04      	ldr	r2, [pc, #16]	@ (800f0d0 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f0c0:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 800f0c4:	2301      	movs	r3, #1
 800f0c6:	e000      	b.n	800f0ca <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800f0c8:	2300      	movs	r3, #0
}
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	bd80      	pop	{r7, pc}
 800f0ce:	bf00      	nop
 800f0d0:	2000075c 	.word	0x2000075c

0800f0d4 <LoRaMacCheckForRxAbort>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 800f0d4:	b480      	push	{r7}
 800f0d6:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800f0d8:	4b0d      	ldr	r3, [pc, #52]	@ (800f110 <LoRaMacCheckForRxAbort+0x3c>)
 800f0da:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f0de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d00f      	beq.n	800f106 <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800f0e6:	4b0a      	ldr	r3, [pc, #40]	@ (800f110 <LoRaMacCheckForRxAbort+0x3c>)
 800f0e8:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f0ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f0f0:	4a07      	ldr	r2, [pc, #28]	@ (800f110 <LoRaMacCheckForRxAbort+0x3c>)
 800f0f2:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f0f6:	4b06      	ldr	r3, [pc, #24]	@ (800f110 <LoRaMacCheckForRxAbort+0x3c>)
 800f0f8:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f0fc:	f023 0302 	bic.w	r3, r3, #2
 800f100:	4a03      	ldr	r2, [pc, #12]	@ (800f110 <LoRaMacCheckForRxAbort+0x3c>)
 800f102:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 800f106:	bf00      	nop
 800f108:	46bd      	mov	sp, r7
 800f10a:	bc80      	pop	{r7}
 800f10c:	4770      	bx	lr
 800f10e:	bf00      	nop
 800f110:	2000075c 	.word	0x2000075c

0800f114 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800f114:	b580      	push	{r7, lr}
 800f116:	b084      	sub	sp, #16
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800f11c:	2300      	movs	r3, #0
 800f11e:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800f120:	2300      	movs	r3, #0
 800f122:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800f124:	4b50      	ldr	r3, [pc, #320]	@ (800f268 <LoRaMacHandleNvm+0x154>)
 800f126:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	f040 8098 	bne.w	800f260 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	2124      	movs	r1, #36	@ 0x24
 800f134:	4618      	mov	r0, r3
 800f136:	f009 fca9 	bl	8018a8c <Crc32>
 800f13a:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f140:	68ba      	ldr	r2, [r7, #8]
 800f142:	429a      	cmp	r2, r3
 800f144:	d006      	beq.n	800f154 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	68ba      	ldr	r2, [r7, #8]
 800f14a:	625a      	str	r2, [r3, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800f14c:	89fb      	ldrh	r3, [r7, #14]
 800f14e:	f043 0301 	orr.w	r3, r3, #1
 800f152:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	3328      	adds	r3, #40	@ 0x28
 800f158:	211c      	movs	r1, #28
 800f15a:	4618      	mov	r0, r3
 800f15c:	f009 fc96 	bl	8018a8c <Crc32>
 800f160:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f166:	68ba      	ldr	r2, [r7, #8]
 800f168:	429a      	cmp	r2, r3
 800f16a:	d006      	beq.n	800f17a <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	68ba      	ldr	r2, [r7, #8]
 800f170:	645a      	str	r2, [r3, #68]	@ 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800f172:	89fb      	ldrh	r3, [r7, #14]
 800f174:	f043 0302 	orr.w	r3, r3, #2
 800f178:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	3348      	adds	r3, #72	@ 0x48
 800f17e:	21fc      	movs	r1, #252	@ 0xfc
 800f180:	4618      	mov	r0, r3
 800f182:	f009 fc83 	bl	8018a8c <Crc32>
 800f186:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 800f18e:	68ba      	ldr	r2, [r7, #8]
 800f190:	429a      	cmp	r2, r3
 800f192:	d007      	beq.n	800f1a4 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	68ba      	ldr	r2, [r7, #8]
 800f198:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800f19c:	89fb      	ldrh	r3, [r7, #14]
 800f19e:	f043 0304 	orr.w	r3, r3, #4
 800f1a2:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800f1aa:	21d4      	movs	r1, #212	@ 0xd4
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	f009 fc6d 	bl	8018a8c <Crc32>
 800f1b2:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 800f1ba:	68ba      	ldr	r2, [r7, #8]
 800f1bc:	429a      	cmp	r2, r3
 800f1be:	d007      	beq.n	800f1d0 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	68ba      	ldr	r2, [r7, #8]
 800f1c4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800f1c8:	89fb      	ldrh	r3, [r7, #14]
 800f1ca:	f043 0308 	orr.w	r3, r3, #8
 800f1ce:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 800f1d6:	21a0      	movs	r1, #160	@ 0xa0
 800f1d8:	4618      	mov	r0, r3
 800f1da:	f009 fc57 	bl	8018a8c <Crc32>
 800f1de:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800f1e6:	68ba      	ldr	r2, [r7, #8]
 800f1e8:	429a      	cmp	r2, r3
 800f1ea:	d007      	beq.n	800f1fc <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	68ba      	ldr	r2, [r7, #8]
 800f1f0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800f1f4:	89fb      	ldrh	r3, [r7, #14]
 800f1f6:	f043 0310 	orr.w	r3, r3, #16
 800f1fa:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 800f202:	f44f 6193 	mov.w	r1, #1176	@ 0x498
 800f206:	4618      	mov	r0, r3
 800f208:	f009 fc40 	bl	8018a8c <Crc32>
 800f20c:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	f8d3 375c 	ldr.w	r3, [r3, #1884]	@ 0x75c
 800f214:	68ba      	ldr	r2, [r7, #8]
 800f216:	429a      	cmp	r2, r3
 800f218:	d007      	beq.n	800f22a <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	68ba      	ldr	r2, [r7, #8]
 800f21e:	f8c3 275c 	str.w	r2, [r3, #1884]	@ 0x75c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800f222:	89fb      	ldrh	r3, [r7, #14]
 800f224:	f043 0320 	orr.w	r3, r3, #32
 800f228:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	f503 63ec 	add.w	r3, r3, #1888	@ 0x760
 800f230:	2114      	movs	r1, #20
 800f232:	4618      	mov	r0, r3
 800f234:	f009 fc2a 	bl	8018a8c <Crc32>
 800f238:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	f8d3 3774 	ldr.w	r3, [r3, #1908]	@ 0x774
 800f240:	68ba      	ldr	r2, [r7, #8]
 800f242:	429a      	cmp	r2, r3
 800f244:	d007      	beq.n	800f256 <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	68ba      	ldr	r2, [r7, #8]
 800f24a:	f8c3 2774 	str.w	r2, [r3, #1908]	@ 0x774
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800f24e:	89fb      	ldrh	r3, [r7, #14]
 800f250:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f254:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800f256:	89fb      	ldrh	r3, [r7, #14]
 800f258:	4618      	mov	r0, r3
 800f25a:	f002 f803 	bl	8011264 <CallNvmDataChangeCallback>
 800f25e:	e000      	b.n	800f262 <LoRaMacHandleNvm+0x14e>
        return;
 800f260:	bf00      	nop
}
 800f262:	3710      	adds	r7, #16
 800f264:	46bd      	mov	sp, r7
 800f266:	bd80      	pop	{r7, pc}
 800f268:	2000075c 	.word	0x2000075c

0800f26c <LoRaMacProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b082      	sub	sp, #8
 800f270:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800f272:	2300      	movs	r3, #0
 800f274:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800f276:	f7ff fd3d 	bl	800ecf4 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800f27a:	f003 fddc 	bl	8012e36 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800f27e:	4b25      	ldr	r3, [pc, #148]	@ (800f314 <LoRaMacProcess+0xa8>)
 800f280:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800f284:	f003 0310 	and.w	r3, r3, #16
 800f288:	b2db      	uxtb	r3, r3
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d023      	beq.n	800f2d6 <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800f28e:	2000      	movs	r0, #0
 800f290:	f7ff fda4 	bl	800eddc <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800f294:	f7ff ff1e 	bl	800f0d4 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800f298:	f002 f874 	bl	8011384 <IsRequestPending>
 800f29c:	4603      	mov	r3, r0
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d006      	beq.n	800f2b0 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800f2a2:	f7ff feef 	bl	800f084 <LoRaMacCheckForBeaconAcquisition>
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	461a      	mov	r2, r3
 800f2aa:	79fb      	ldrb	r3, [r7, #7]
 800f2ac:	4313      	orrs	r3, r2
 800f2ae:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800f2b0:	79fb      	ldrb	r3, [r7, #7]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d103      	bne.n	800f2be <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800f2b6:	f7ff fea9 	bl	800f00c <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800f2ba:	f7ff fe39 	bl	800ef30 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800f2be:	f7ff fd9d 	bl	800edfc <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800f2c2:	2001      	movs	r0, #1
 800f2c4:	f7ff fd8a 	bl	800eddc <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800f2c8:	4a12      	ldr	r2, [pc, #72]	@ (800f314 <LoRaMacProcess+0xa8>)
 800f2ca:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800f2ce:	f043 0320 	orr.w	r3, r3, #32
 800f2d2:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    }
    LoRaMacHandleIndicationEvents( );
 800f2d6:	f7ff fdf3 	bl	800eec0 <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800f2da:	4b0e      	ldr	r3, [pc, #56]	@ (800f314 <LoRaMacProcess+0xa8>)
 800f2dc:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 800f2e0:	2b02      	cmp	r3, #2
 800f2e2:	d101      	bne.n	800f2e8 <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 800f2e4:	f001 fbc8 	bl	8010a78 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800f2e8:	4b0a      	ldr	r3, [pc, #40]	@ (800f314 <LoRaMacProcess+0xa8>)
 800f2ea:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800f2ee:	f003 0320 	and.w	r3, r3, #32
 800f2f2:	b2db      	uxtb	r3, r3
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d009      	beq.n	800f30c <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800f2f8:	4a06      	ldr	r2, [pc, #24]	@ (800f314 <LoRaMacProcess+0xa8>)
 800f2fa:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800f2fe:	f36f 1345 	bfc	r3, #5, #1
 800f302:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
        LoRaMacHandleNvm( &Nvm );
 800f306:	4804      	ldr	r0, [pc, #16]	@ (800f318 <LoRaMacProcess+0xac>)
 800f308:	f7ff ff04 	bl	800f114 <LoRaMacHandleNvm>
    }
}
 800f30c:	bf00      	nop
 800f30e:	3708      	adds	r7, #8
 800f310:	46bd      	mov	sp, r7
 800f312:	bd80      	pop	{r7, pc}
 800f314:	2000075c 	.word	0x2000075c
 800f318:	20000c64 	.word	0x20000c64

0800f31c <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b082      	sub	sp, #8
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800f324:	4817      	ldr	r0, [pc, #92]	@ (800f384 <OnTxDelayedTimerEvent+0x68>)
 800f326:	f00c ff73 	bl	801c210 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800f32a:	4b17      	ldr	r3, [pc, #92]	@ (800f388 <OnTxDelayedTimerEvent+0x6c>)
 800f32c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f330:	f023 0320 	bic.w	r3, r3, #32
 800f334:	4a14      	ldr	r2, [pc, #80]	@ (800f388 <OnTxDelayedTimerEvent+0x6c>)
 800f336:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800f33a:	2001      	movs	r0, #1
 800f33c:	f001 f8f4 	bl	8010528 <ScheduleTx>
 800f340:	4603      	mov	r3, r0
 800f342:	2b00      	cmp	r3, #0
 800f344:	d018      	beq.n	800f378 <OnTxDelayedTimerEvent+0x5c>
 800f346:	2b0b      	cmp	r3, #11
 800f348:	d016      	beq.n	800f378 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f34a:	4b10      	ldr	r3, [pc, #64]	@ (800f38c <OnTxDelayedTimerEvent+0x70>)
 800f34c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800f350:	b2da      	uxtb	r2, r3
 800f352:	4b0d      	ldr	r3, [pc, #52]	@ (800f388 <OnTxDelayedTimerEvent+0x6c>)
 800f354:	f883 2436 	strb.w	r2, [r3, #1078]	@ 0x436
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800f358:	4b0b      	ldr	r3, [pc, #44]	@ (800f388 <OnTxDelayedTimerEvent+0x6c>)
 800f35a:	f893 240e 	ldrb.w	r2, [r3, #1038]	@ 0x40e
 800f35e:	4b0a      	ldr	r3, [pc, #40]	@ (800f388 <OnTxDelayedTimerEvent+0x6c>)
 800f360:	f883 2439 	strb.w	r2, [r3, #1081]	@ 0x439
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800f364:	4b08      	ldr	r3, [pc, #32]	@ (800f388 <OnTxDelayedTimerEvent+0x6c>)
 800f366:	2209      	movs	r2, #9
 800f368:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800f36c:	2009      	movs	r0, #9
 800f36e:	f004 f98d 	bl	801368c <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800f372:	f001 ff25 	bl	80111c0 <StopRetransmission>
            break;
 800f376:	e000      	b.n	800f37a <OnTxDelayedTimerEvent+0x5e>
            break;
 800f378:	bf00      	nop
        }
    }
}
 800f37a:	bf00      	nop
 800f37c:	3708      	adds	r7, #8
 800f37e:	46bd      	mov	sp, r7
 800f380:	bd80      	pop	{r7, pc}
 800f382:	bf00      	nop
 800f384:	20000ac4 	.word	0x20000ac4
 800f388:	2000075c 	.word	0x2000075c
 800f38c:	20000c64 	.word	0x20000c64

0800f390 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800f390:	b580      	push	{r7, lr}
 800f392:	b082      	sub	sp, #8
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800f398:	4b14      	ldr	r3, [pc, #80]	@ (800f3ec <OnRxWindow1TimerEvent+0x5c>)
 800f39a:	f893 2411 	ldrb.w	r2, [r3, #1041]	@ 0x411
 800f39e:	4b13      	ldr	r3, [pc, #76]	@ (800f3ec <OnRxWindow1TimerEvent+0x5c>)
 800f3a0:	f883 23b8 	strb.w	r2, [r3, #952]	@ 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800f3a4:	4b12      	ldr	r3, [pc, #72]	@ (800f3f0 <OnRxWindow1TimerEvent+0x60>)
 800f3a6:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 800f3aa:	b25a      	sxtb	r2, r3
 800f3ac:	4b0f      	ldr	r3, [pc, #60]	@ (800f3ec <OnRxWindow1TimerEvent+0x5c>)
 800f3ae:	f883 23bb 	strb.w	r2, [r3, #955]	@ 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f3b2:	4b0f      	ldr	r3, [pc, #60]	@ (800f3f0 <OnRxWindow1TimerEvent+0x60>)
 800f3b4:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800f3b8:	4b0c      	ldr	r3, [pc, #48]	@ (800f3ec <OnRxWindow1TimerEvent+0x5c>)
 800f3ba:	f883 23c8 	strb.w	r2, [r3, #968]	@ 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800f3be:	4b0c      	ldr	r3, [pc, #48]	@ (800f3f0 <OnRxWindow1TimerEvent+0x60>)
 800f3c0:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800f3c4:	4b09      	ldr	r3, [pc, #36]	@ (800f3ec <OnRxWindow1TimerEvent+0x5c>)
 800f3c6:	f883 23c9 	strb.w	r2, [r3, #969]	@ 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800f3ca:	4b08      	ldr	r3, [pc, #32]	@ (800f3ec <OnRxWindow1TimerEvent+0x5c>)
 800f3cc:	2200      	movs	r2, #0
 800f3ce:	f883 23ca 	strb.w	r2, [r3, #970]	@ 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800f3d2:	4b06      	ldr	r3, [pc, #24]	@ (800f3ec <OnRxWindow1TimerEvent+0x5c>)
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	f883 23cb 	strb.w	r2, [r3, #971]	@ 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800f3da:	4906      	ldr	r1, [pc, #24]	@ (800f3f4 <OnRxWindow1TimerEvent+0x64>)
 800f3dc:	4806      	ldr	r0, [pc, #24]	@ (800f3f8 <OnRxWindow1TimerEvent+0x68>)
 800f3de:	f001 fb17 	bl	8010a10 <RxWindowSetup>
}
 800f3e2:	bf00      	nop
 800f3e4:	3708      	adds	r7, #8
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	bd80      	pop	{r7, pc}
 800f3ea:	bf00      	nop
 800f3ec:	2000075c 	.word	0x2000075c
 800f3f0:	20000c64 	.word	0x20000c64
 800f3f4:	20000b14 	.word	0x20000b14
 800f3f8:	20000adc 	.word	0x20000adc

0800f3fc <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b082      	sub	sp, #8
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800f404:	4b16      	ldr	r3, [pc, #88]	@ (800f460 <OnRxWindow2TimerEvent+0x64>)
 800f406:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d023      	beq.n	800f456 <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800f40e:	4b14      	ldr	r3, [pc, #80]	@ (800f460 <OnRxWindow2TimerEvent+0x64>)
 800f410:	f893 2411 	ldrb.w	r2, [r3, #1041]	@ 0x411
 800f414:	4b12      	ldr	r3, [pc, #72]	@ (800f460 <OnRxWindow2TimerEvent+0x64>)
 800f416:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800f41a:	4b12      	ldr	r3, [pc, #72]	@ (800f464 <OnRxWindow2TimerEvent+0x68>)
 800f41c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f41e:	4a10      	ldr	r2, [pc, #64]	@ (800f460 <OnRxWindow2TimerEvent+0x64>)
 800f420:	f8c2 33d0 	str.w	r3, [r2, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f424:	4b0f      	ldr	r3, [pc, #60]	@ (800f464 <OnRxWindow2TimerEvent+0x68>)
 800f426:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800f42a:	4b0d      	ldr	r3, [pc, #52]	@ (800f460 <OnRxWindow2TimerEvent+0x64>)
 800f42c:	f883 23dc 	strb.w	r2, [r3, #988]	@ 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800f430:	4b0c      	ldr	r3, [pc, #48]	@ (800f464 <OnRxWindow2TimerEvent+0x68>)
 800f432:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800f436:	4b0a      	ldr	r3, [pc, #40]	@ (800f460 <OnRxWindow2TimerEvent+0x64>)
 800f438:	f883 23dd 	strb.w	r2, [r3, #989]	@ 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800f43c:	4b08      	ldr	r3, [pc, #32]	@ (800f460 <OnRxWindow2TimerEvent+0x64>)
 800f43e:	2200      	movs	r2, #0
 800f440:	f883 23de 	strb.w	r2, [r3, #990]	@ 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800f444:	4b06      	ldr	r3, [pc, #24]	@ (800f460 <OnRxWindow2TimerEvent+0x64>)
 800f446:	2201      	movs	r2, #1
 800f448:	f883 23df 	strb.w	r2, [r3, #991]	@ 0x3df
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800f44c:	4906      	ldr	r1, [pc, #24]	@ (800f468 <OnRxWindow2TimerEvent+0x6c>)
 800f44e:	4807      	ldr	r0, [pc, #28]	@ (800f46c <OnRxWindow2TimerEvent+0x70>)
 800f450:	f001 fade 	bl	8010a10 <RxWindowSetup>
 800f454:	e000      	b.n	800f458 <OnRxWindow2TimerEvent+0x5c>
        return;
 800f456:	bf00      	nop
}
 800f458:	3708      	adds	r7, #8
 800f45a:	46bd      	mov	sp, r7
 800f45c:	bd80      	pop	{r7, pc}
 800f45e:	bf00      	nop
 800f460:	2000075c 	.word	0x2000075c
 800f464:	20000c64 	.word	0x20000c64
 800f468:	20000b28 	.word	0x20000b28
 800f46c:	20000af4 	.word	0x20000af4

0800f470 <OnAckTimeoutTimerEvent>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void OnAckTimeoutTimerEvent( void* context )
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b082      	sub	sp, #8
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800f478:	480e      	ldr	r0, [pc, #56]	@ (800f4b4 <OnAckTimeoutTimerEvent+0x44>)
 800f47a:	f00c fec9 	bl	801c210 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800f47e:	4b0e      	ldr	r3, [pc, #56]	@ (800f4b8 <OnAckTimeoutTimerEvent+0x48>)
 800f480:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800f484:	2b00      	cmp	r3, #0
 800f486:	d003      	beq.n	800f490 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 800f488:	4b0b      	ldr	r3, [pc, #44]	@ (800f4b8 <OnAckTimeoutTimerEvent+0x48>)
 800f48a:	2201      	movs	r2, #1
 800f48c:	f883 240f 	strb.w	r2, [r3, #1039]	@ 0x40f
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800f490:	4b0a      	ldr	r3, [pc, #40]	@ (800f4bc <OnAckTimeoutTimerEvent+0x4c>)
 800f492:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800f496:	2b02      	cmp	r3, #2
 800f498:	d106      	bne.n	800f4a8 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800f49a:	4a07      	ldr	r2, [pc, #28]	@ (800f4b8 <OnAckTimeoutTimerEvent+0x48>)
 800f49c:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800f4a0:	f043 0310 	orr.w	r3, r3, #16
 800f4a4:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    }
    OnMacProcessNotify( );
 800f4a8:	f001 fec6 	bl	8011238 <OnMacProcessNotify>
}
 800f4ac:	bf00      	nop
 800f4ae:	3708      	adds	r7, #8
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	bd80      	pop	{r7, pc}
 800f4b4:	20000b50 	.word	0x20000b50
 800f4b8:	2000075c 	.word	0x2000075c
 800f4bc:	20000c64 	.word	0x20000c64

0800f4c0 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b084      	sub	sp, #16
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	60ba      	str	r2, [r7, #8]
 800f4c8:	607b      	str	r3, [r7, #4]
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	73fb      	strb	r3, [r7, #15]
 800f4ce:	460b      	mov	r3, r1
 800f4d0:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800f4d2:	68bb      	ldr	r3, [r7, #8]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d005      	beq.n	800f4e4 <GetFCntDown+0x24>
 800f4d8:	69fb      	ldr	r3, [r7, #28]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d002      	beq.n	800f4e4 <GetFCntDown+0x24>
 800f4de:	6a3b      	ldr	r3, [r7, #32]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d101      	bne.n	800f4e8 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f4e4:	230a      	movs	r3, #10
 800f4e6:	e029      	b.n	800f53c <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800f4e8:	7bfb      	ldrb	r3, [r7, #15]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d016      	beq.n	800f51c <GetFCntDown+0x5c>
 800f4ee:	2b01      	cmp	r3, #1
 800f4f0:	d118      	bne.n	800f524 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800f4f2:	79bb      	ldrb	r3, [r7, #6]
 800f4f4:	2b01      	cmp	r3, #1
 800f4f6:	d10d      	bne.n	800f514 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800f4f8:	7bbb      	ldrb	r3, [r7, #14]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d002      	beq.n	800f504 <GetFCntDown+0x44>
 800f4fe:	7bbb      	ldrb	r3, [r7, #14]
 800f500:	2b03      	cmp	r3, #3
 800f502:	d103      	bne.n	800f50c <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800f504:	69fb      	ldr	r3, [r7, #28]
 800f506:	2202      	movs	r2, #2
 800f508:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800f50a:	e00d      	b.n	800f528 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800f50c:	69fb      	ldr	r3, [r7, #28]
 800f50e:	2201      	movs	r2, #1
 800f510:	701a      	strb	r2, [r3, #0]
            break;
 800f512:	e009      	b.n	800f528 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800f514:	69fb      	ldr	r3, [r7, #28]
 800f516:	2203      	movs	r2, #3
 800f518:	701a      	strb	r2, [r3, #0]
            break;
 800f51a:	e005      	b.n	800f528 <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800f51c:	69fb      	ldr	r3, [r7, #28]
 800f51e:	2204      	movs	r2, #4
 800f520:	701a      	strb	r2, [r3, #0]
            break;
 800f522:	e001      	b.n	800f528 <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800f524:	2305      	movs	r3, #5
 800f526:	e009      	b.n	800f53c <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800f528:	69fb      	ldr	r3, [r7, #28]
 800f52a:	7818      	ldrb	r0, [r3, #0]
 800f52c:	68bb      	ldr	r3, [r7, #8]
 800f52e:	89db      	ldrh	r3, [r3, #14]
 800f530:	461a      	mov	r2, r3
 800f532:	8b39      	ldrh	r1, [r7, #24]
 800f534:	6a3b      	ldr	r3, [r7, #32]
 800f536:	f004 fce7 	bl	8013f08 <LoRaMacCryptoGetFCntDown>
 800f53a:	4603      	mov	r3, r0
}
 800f53c:	4618      	mov	r0, r3
 800f53e:	3710      	adds	r7, #16
 800f540:	46bd      	mov	sp, r7
 800f542:	bd80      	pop	{r7, pc}

0800f544 <SwitchClass>:
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800f544:	b5b0      	push	{r4, r5, r7, lr}
 800f546:	b084      	sub	sp, #16
 800f548:	af00      	add	r7, sp, #0
 800f54a:	4603      	mov	r3, r0
 800f54c:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f54e:	2303      	movs	r3, #3
 800f550:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800f552:	4b6d      	ldr	r3, [pc, #436]	@ (800f708 <SwitchClass+0x1c4>)
 800f554:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800f558:	2b02      	cmp	r3, #2
 800f55a:	f000 80b9 	beq.w	800f6d0 <SwitchClass+0x18c>
 800f55e:	2b02      	cmp	r3, #2
 800f560:	f300 80cc 	bgt.w	800f6fc <SwitchClass+0x1b8>
 800f564:	2b00      	cmp	r3, #0
 800f566:	d003      	beq.n	800f570 <SwitchClass+0x2c>
 800f568:	2b01      	cmp	r3, #1
 800f56a:	f000 80a3 	beq.w	800f6b4 <SwitchClass+0x170>
 800f56e:	e0c5      	b.n	800f6fc <SwitchClass+0x1b8>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800f570:	79fb      	ldrb	r3, [r7, #7]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d109      	bne.n	800f58a <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800f576:	4b64      	ldr	r3, [pc, #400]	@ (800f708 <SwitchClass+0x1c4>)
 800f578:	4a63      	ldr	r2, [pc, #396]	@ (800f708 <SwitchClass+0x1c4>)
 800f57a:	3374      	adds	r3, #116	@ 0x74
 800f57c:	326c      	adds	r2, #108	@ 0x6c
 800f57e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f582:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 800f586:	2300      	movs	r3, #0
 800f588:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 800f58a:	79fb      	ldrb	r3, [r7, #7]
 800f58c:	2b01      	cmp	r3, #1
 800f58e:	d10c      	bne.n	800f5aa <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800f590:	79fb      	ldrb	r3, [r7, #7]
 800f592:	4618      	mov	r0, r3
 800f594:	f003 fbf1 	bl	8012d7a <LoRaMacClassBSwitchClass>
 800f598:	4603      	mov	r3, r0
 800f59a:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800f59c:	7bfb      	ldrb	r3, [r7, #15]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d103      	bne.n	800f5aa <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800f5a2:	4a59      	ldr	r2, [pc, #356]	@ (800f708 <SwitchClass+0x1c4>)
 800f5a4:	79fb      	ldrb	r3, [r7, #7]
 800f5a6:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
                }
            }

            if( deviceClass == CLASS_C )
 800f5aa:	79fb      	ldrb	r3, [r7, #7]
 800f5ac:	2b02      	cmp	r3, #2
 800f5ae:	f040 80a0 	bne.w	800f6f2 <SwitchClass+0x1ae>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f5b2:	4a55      	ldr	r2, [pc, #340]	@ (800f708 <SwitchClass+0x1c4>)
 800f5b4:	79fb      	ldrb	r3, [r7, #7]
 800f5b6:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800f5ba:	4a54      	ldr	r2, [pc, #336]	@ (800f70c <SwitchClass+0x1c8>)
 800f5bc:	4b53      	ldr	r3, [pc, #332]	@ (800f70c <SwitchClass+0x1c8>)
 800f5be:	f502 7478 	add.w	r4, r2, #992	@ 0x3e0
 800f5c2:	f503 7573 	add.w	r5, r3, #972	@ 0x3cc
 800f5c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f5c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f5ca:	682b      	ldr	r3, [r5, #0]
 800f5cc:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f5ce:	4b4f      	ldr	r3, [pc, #316]	@ (800f70c <SwitchClass+0x1c8>)
 800f5d0:	2202      	movs	r2, #2
 800f5d2:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	73bb      	strb	r3, [r7, #14]
 800f5da:	e05b      	b.n	800f694 <SwitchClass+0x150>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800f5dc:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800f5e0:	4949      	ldr	r1, [pc, #292]	@ (800f708 <SwitchClass+0x1c4>)
 800f5e2:	4613      	mov	r3, r2
 800f5e4:	005b      	lsls	r3, r3, #1
 800f5e6:	4413      	add	r3, r2
 800f5e8:	011b      	lsls	r3, r3, #4
 800f5ea:	440b      	add	r3, r1
 800f5ec:	33e9      	adds	r3, #233	@ 0xe9
 800f5ee:	781b      	ldrb	r3, [r3, #0]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d049      	beq.n	800f688 <SwitchClass+0x144>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 800f5f4:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800f5f8:	4943      	ldr	r1, [pc, #268]	@ (800f708 <SwitchClass+0x1c4>)
 800f5fa:	4613      	mov	r3, r2
 800f5fc:	005b      	lsls	r3, r3, #1
 800f5fe:	4413      	add	r3, r2
 800f600:	011b      	lsls	r3, r3, #4
 800f602:	440b      	add	r3, r1
 800f604:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800f608:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800f60a:	2b02      	cmp	r3, #2
 800f60c:	d13c      	bne.n	800f688 <SwitchClass+0x144>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 800f60e:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800f612:	493d      	ldr	r1, [pc, #244]	@ (800f708 <SwitchClass+0x1c4>)
 800f614:	4613      	mov	r3, r2
 800f616:	005b      	lsls	r3, r3, #1
 800f618:	4413      	add	r3, r2
 800f61a:	011b      	lsls	r3, r3, #4
 800f61c:	440b      	add	r3, r1
 800f61e:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	4a38      	ldr	r2, [pc, #224]	@ (800f708 <SwitchClass+0x1c4>)
 800f626:	6753      	str	r3, [r2, #116]	@ 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 800f628:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800f62c:	4936      	ldr	r1, [pc, #216]	@ (800f708 <SwitchClass+0x1c4>)
 800f62e:	4613      	mov	r3, r2
 800f630:	005b      	lsls	r3, r3, #1
 800f632:	4413      	add	r3, r2
 800f634:	011b      	lsls	r3, r3, #4
 800f636:	440b      	add	r3, r1
 800f638:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800f63c:	f993 3000 	ldrsb.w	r3, [r3]
 800f640:	b2da      	uxtb	r2, r3
 800f642:	4b31      	ldr	r3, [pc, #196]	@ (800f708 <SwitchClass+0x1c4>)
 800f644:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800f648:	4b30      	ldr	r3, [pc, #192]	@ (800f70c <SwitchClass+0x1c8>)
 800f64a:	f893 2411 	ldrb.w	r2, [r3, #1041]	@ 0x411
 800f64e:	4b2f      	ldr	r3, [pc, #188]	@ (800f70c <SwitchClass+0x1c8>)
 800f650:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800f654:	4b2c      	ldr	r3, [pc, #176]	@ (800f708 <SwitchClass+0x1c4>)
 800f656:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f658:	4a2c      	ldr	r2, [pc, #176]	@ (800f70c <SwitchClass+0x1c8>)
 800f65a:	f8c2 33e4 	str.w	r3, [r2, #996]	@ 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f65e:	4b2a      	ldr	r3, [pc, #168]	@ (800f708 <SwitchClass+0x1c4>)
 800f660:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800f664:	4b29      	ldr	r3, [pc, #164]	@ (800f70c <SwitchClass+0x1c8>)
 800f666:	f883 23f0 	strb.w	r2, [r3, #1008]	@ 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800f66a:	4b27      	ldr	r3, [pc, #156]	@ (800f708 <SwitchClass+0x1c4>)
 800f66c:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800f670:	4b26      	ldr	r3, [pc, #152]	@ (800f70c <SwitchClass+0x1c8>)
 800f672:	f883 23f1 	strb.w	r2, [r3, #1009]	@ 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800f676:	4b25      	ldr	r3, [pc, #148]	@ (800f70c <SwitchClass+0x1c8>)
 800f678:	2203      	movs	r2, #3
 800f67a:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800f67e:	4b23      	ldr	r3, [pc, #140]	@ (800f70c <SwitchClass+0x1c8>)
 800f680:	2201      	movs	r2, #1
 800f682:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2
                        break;
 800f686:	e009      	b.n	800f69c <SwitchClass+0x158>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f688:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f68c:	b2db      	uxtb	r3, r3
 800f68e:	3301      	adds	r3, #1
 800f690:	b2db      	uxtb	r3, r3
 800f692:	73bb      	strb	r3, [r7, #14]
 800f694:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	dd9f      	ble.n	800f5dc <SwitchClass+0x98>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800f69c:	4b1b      	ldr	r3, [pc, #108]	@ (800f70c <SwitchClass+0x1c8>)
 800f69e:	2200      	movs	r2, #0
 800f6a0:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800f6a4:	4b1a      	ldr	r3, [pc, #104]	@ (800f710 <SwitchClass+0x1cc>)
 800f6a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6a8:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800f6aa:	f001 f9e5 	bl	8010a78 <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800f6b2:	e01e      	b.n	800f6f2 <SwitchClass+0x1ae>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800f6b4:	79fb      	ldrb	r3, [r7, #7]
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	f003 fb5f 	bl	8012d7a <LoRaMacClassBSwitchClass>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800f6c0:	7bfb      	ldrb	r3, [r7, #15]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d117      	bne.n	800f6f6 <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f6c6:	4a10      	ldr	r2, [pc, #64]	@ (800f708 <SwitchClass+0x1c4>)
 800f6c8:	79fb      	ldrb	r3, [r7, #7]
 800f6ca:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
            }
            break;
 800f6ce:	e012      	b.n	800f6f6 <SwitchClass+0x1b2>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800f6d0:	79fb      	ldrb	r3, [r7, #7]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d111      	bne.n	800f6fa <SwitchClass+0x1b6>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 800f6d6:	4b0d      	ldr	r3, [pc, #52]	@ (800f70c <SwitchClass+0x1c8>)
 800f6d8:	2206      	movs	r2, #6
 800f6da:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480

                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f6de:	4a0a      	ldr	r2, [pc, #40]	@ (800f708 <SwitchClass+0x1c4>)
 800f6e0:	79fb      	ldrb	r3, [r7, #7]
 800f6e2:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800f6e6:	4b0a      	ldr	r3, [pc, #40]	@ (800f710 <SwitchClass+0x1cc>)
 800f6e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6ea:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 800f6f0:	e003      	b.n	800f6fa <SwitchClass+0x1b6>
            break;
 800f6f2:	bf00      	nop
 800f6f4:	e002      	b.n	800f6fc <SwitchClass+0x1b8>
            break;
 800f6f6:	bf00      	nop
 800f6f8:	e000      	b.n	800f6fc <SwitchClass+0x1b8>
            break;
 800f6fa:	bf00      	nop
        }
    }

    return status;
 800f6fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6fe:	4618      	mov	r0, r3
 800f700:	3710      	adds	r7, #16
 800f702:	46bd      	mov	sp, r7
 800f704:	bdb0      	pop	{r4, r5, r7, pc}
 800f706:	bf00      	nop
 800f708:	20000c64 	.word	0x20000c64
 800f70c:	2000075c 	.word	0x2000075c
 800f710:	0801da80 	.word	0x0801da80

0800f714 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800f714:	b580      	push	{r7, lr}
 800f716:	b086      	sub	sp, #24
 800f718:	af00      	add	r7, sp, #0
 800f71a:	4603      	mov	r3, r0
 800f71c:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f71e:	4b10      	ldr	r3, [pc, #64]	@ (800f760 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f720:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800f724:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800f726:	79fb      	ldrb	r3, [r7, #7]
 800f728:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800f72a:	230d      	movs	r3, #13
 800f72c:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800f72e:	4b0c      	ldr	r3, [pc, #48]	@ (800f760 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f730:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800f734:	2b00      	cmp	r3, #0
 800f736:	d001      	beq.n	800f73c <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800f738:	230e      	movs	r3, #14
 800f73a:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f73c:	4b08      	ldr	r3, [pc, #32]	@ (800f760 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f73e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f742:	f107 0210 	add.w	r2, r7, #16
 800f746:	4611      	mov	r1, r2
 800f748:	4618      	mov	r0, r3
 800f74a:	f005 fa77 	bl	8014c3c <RegionGetPhyParam>
 800f74e:	4603      	mov	r3, r0
 800f750:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	b2db      	uxtb	r3, r3
}
 800f756:	4618      	mov	r0, r3
 800f758:	3718      	adds	r7, #24
 800f75a:	46bd      	mov	sp, r7
 800f75c:	bd80      	pop	{r7, pc}
 800f75e:	bf00      	nop
 800f760:	20000c64 	.word	0x20000c64

0800f764 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b084      	sub	sp, #16
 800f768:	af00      	add	r7, sp, #0
 800f76a:	4603      	mov	r3, r0
 800f76c:	71fb      	strb	r3, [r7, #7]
 800f76e:	460b      	mov	r3, r1
 800f770:	71bb      	strb	r3, [r7, #6]
 800f772:	4613      	mov	r3, r2
 800f774:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800f776:	2300      	movs	r3, #0
 800f778:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800f77a:	2300      	movs	r3, #0
 800f77c:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800f77e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800f782:	4618      	mov	r0, r3
 800f784:	f7ff ffc6 	bl	800f714 <GetMaxAppPayloadWithoutFOptsLength>
 800f788:	4603      	mov	r3, r0
 800f78a:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800f78c:	79fb      	ldrb	r3, [r7, #7]
 800f78e:	b29a      	uxth	r2, r3
 800f790:	797b      	ldrb	r3, [r7, #5]
 800f792:	b29b      	uxth	r3, r3
 800f794:	4413      	add	r3, r2
 800f796:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800f798:	89ba      	ldrh	r2, [r7, #12]
 800f79a:	89fb      	ldrh	r3, [r7, #14]
 800f79c:	429a      	cmp	r2, r3
 800f79e:	d804      	bhi.n	800f7aa <ValidatePayloadLength+0x46>
 800f7a0:	89bb      	ldrh	r3, [r7, #12]
 800f7a2:	2bff      	cmp	r3, #255	@ 0xff
 800f7a4:	d801      	bhi.n	800f7aa <ValidatePayloadLength+0x46>
    {
        return true;
 800f7a6:	2301      	movs	r3, #1
 800f7a8:	e000      	b.n	800f7ac <ValidatePayloadLength+0x48>
    }
    return false;
 800f7aa:	2300      	movs	r3, #0
}
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	3710      	adds	r7, #16
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	bd80      	pop	{r7, pc}

0800f7b4 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800f7b4:	b590      	push	{r4, r7, lr}
 800f7b6:	b0a5      	sub	sp, #148	@ 0x94
 800f7b8:	af02      	add	r7, sp, #8
 800f7ba:	6078      	str	r0, [r7, #4]
 800f7bc:	4608      	mov	r0, r1
 800f7be:	4611      	mov	r1, r2
 800f7c0:	461a      	mov	r2, r3
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	70fb      	strb	r3, [r7, #3]
 800f7c6:	460b      	mov	r3, r1
 800f7c8:	70bb      	strb	r3, [r7, #2]
 800f7ca:	4613      	mov	r3, r2
 800f7cc:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    bool adrBlockFound = false;
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800f7da:	2300      	movs	r3, #0
 800f7dc:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 800f7e0:	f000 bc7d 	b.w	80100de <ProcessMacCommands+0x92a>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800f7e4:	78fb      	ldrb	r3, [r7, #3]
 800f7e6:	687a      	ldr	r2, [r7, #4]
 800f7e8:	4413      	add	r3, r2
 800f7ea:	781b      	ldrb	r3, [r3, #0]
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	f003 fda9 	bl	8013344 <LoRaMacCommandsGetCmdSize>
 800f7f2:	4603      	mov	r3, r0
 800f7f4:	461a      	mov	r2, r3
 800f7f6:	78fb      	ldrb	r3, [r7, #3]
 800f7f8:	441a      	add	r2, r3
 800f7fa:	78bb      	ldrb	r3, [r7, #2]
 800f7fc:	429a      	cmp	r2, r3
 800f7fe:	f300 8474 	bgt.w	80100ea <ProcessMacCommands+0x936>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800f802:	78fb      	ldrb	r3, [r7, #3]
 800f804:	1c5a      	adds	r2, r3, #1
 800f806:	70fa      	strb	r2, [r7, #3]
 800f808:	461a      	mov	r2, r3
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	4413      	add	r3, r2
 800f80e:	781b      	ldrb	r3, [r3, #0]
 800f810:	3b02      	subs	r3, #2
 800f812:	2b11      	cmp	r3, #17
 800f814:	f200 846b 	bhi.w	80100ee <ProcessMacCommands+0x93a>
 800f818:	a201      	add	r2, pc, #4	@ (adr r2, 800f820 <ProcessMacCommands+0x6c>)
 800f81a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f81e:	bf00      	nop
 800f820:	0800f869 	.word	0x0800f869
 800f824:	0800f8ab 	.word	0x0800f8ab
 800f828:	0800f9c7 	.word	0x0800f9c7
 800f82c:	0800fa05 	.word	0x0800fa05
 800f830:	0800faef 	.word	0x0800faef
 800f834:	0800fb4d 	.word	0x0800fb4d
 800f838:	0800fc09 	.word	0x0800fc09
 800f83c:	0800fc5f 	.word	0x0800fc5f
 800f840:	0800fd45 	.word	0x0800fd45
 800f844:	080100ef 	.word	0x080100ef
 800f848:	080100ef 	.word	0x080100ef
 800f84c:	0800fde9 	.word	0x0800fde9
 800f850:	080100ef 	.word	0x080100ef
 800f854:	080100ef 	.word	0x080100ef
 800f858:	0800feff 	.word	0x0800feff
 800f85c:	0800ff33 	.word	0x0800ff33
 800f860:	0800ffc3 	.word	0x0800ffc3
 800f864:	0801003b 	.word	0x0801003b
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800f868:	2005      	movs	r0, #5
 800f86a:	f003 ff43 	bl	80136f4 <LoRaMacConfirmQueueIsCmdActive>
 800f86e:	4603      	mov	r3, r0
 800f870:	2b00      	cmp	r3, #0
 800f872:	f000 8425 	beq.w	80100c0 <ProcessMacCommands+0x90c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800f876:	2105      	movs	r1, #5
 800f878:	2000      	movs	r0, #0
 800f87a:	f003 feaf 	bl	80135dc <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800f87e:	78fb      	ldrb	r3, [r7, #3]
 800f880:	1c5a      	adds	r2, r3, #1
 800f882:	70fa      	strb	r2, [r7, #3]
 800f884:	461a      	mov	r2, r3
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	4413      	add	r3, r2
 800f88a:	781a      	ldrb	r2, [r3, #0]
 800f88c:	4bac      	ldr	r3, [pc, #688]	@ (800fb40 <ProcessMacCommands+0x38c>)
 800f88e:	f883 2450 	strb.w	r2, [r3, #1104]	@ 0x450
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800f892:	78fb      	ldrb	r3, [r7, #3]
 800f894:	1c5a      	adds	r2, r3, #1
 800f896:	70fa      	strb	r2, [r7, #3]
 800f898:	461a      	mov	r2, r3
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	4413      	add	r3, r2
 800f89e:	781a      	ldrb	r2, [r3, #0]
 800f8a0:	4ba7      	ldr	r3, [pc, #668]	@ (800fb40 <ProcessMacCommands+0x38c>)
 800f8a2:	f883 2451 	strb.w	r2, [r3, #1105]	@ 0x451
                }
                break;
 800f8a6:	f000 bc0b 	b.w	80100c0 <ProcessMacCommands+0x90c>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
                uint8_t linkAdrNbRep = 0;
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800f8bc:	2300      	movs	r3, #0
 800f8be:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

                // The end node is allowed to process one block of LinkAdrRequests.
                // It must ignore subsequent blocks
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                if( adrBlockFound == false )
 800f8c2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800f8c6:	f083 0301 	eor.w	r3, r3, #1
 800f8ca:	b2db      	uxtb	r3, r3
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	f000 83f9 	beq.w	80100c4 <ProcessMacCommands+0x910>
                {
                    adrBlockFound = true;
 800f8d2:	2301      	movs	r3, #1
 800f8d4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800f8d8:	78fb      	ldrb	r3, [r7, #3]
 800f8da:	3b01      	subs	r3, #1
 800f8dc:	687a      	ldr	r2, [r7, #4]
 800f8de:	4413      	add	r3, r2
 800f8e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800f8e2:	78ba      	ldrb	r2, [r7, #2]
 800f8e4:	78fb      	ldrb	r3, [r7, #3]
 800f8e6:	1ad3      	subs	r3, r2, r3
 800f8e8:	b2db      	uxtb	r3, r3
 800f8ea:	3301      	adds	r3, #1
 800f8ec:	b2db      	uxtb	r3, r3
 800f8ee:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800f8f2:	4b94      	ldr	r3, [pc, #592]	@ (800fb44 <ProcessMacCommands+0x390>)
 800f8f4:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800f8f8:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f8fc:	4b91      	ldr	r3, [pc, #580]	@ (800fb44 <ProcessMacCommands+0x390>)
 800f8fe:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800f902:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800f906:	4b8f      	ldr	r3, [pc, #572]	@ (800fb44 <ProcessMacCommands+0x390>)
 800f908:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800f90c:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f910:	4b8c      	ldr	r3, [pc, #560]	@ (800fb44 <ProcessMacCommands+0x390>)
 800f912:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800f916:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800f91a:	4b8a      	ldr	r3, [pc, #552]	@ (800fb44 <ProcessMacCommands+0x390>)
 800f91c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800f920:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 800f924:	4b87      	ldr	r3, [pc, #540]	@ (800fb44 <ProcessMacCommands+0x390>)
 800f926:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 800f92a:	65bb      	str	r3, [r7, #88]	@ 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800f92c:	4b85      	ldr	r3, [pc, #532]	@ (800fb44 <ProcessMacCommands+0x390>)
 800f92e:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800f932:	f107 0456 	add.w	r4, r7, #86	@ 0x56
 800f936:	f107 0257 	add.w	r2, r7, #87	@ 0x57
 800f93a:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f93e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800f942:	9301      	str	r3, [sp, #4]
 800f944:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800f948:	9300      	str	r3, [sp, #0]
 800f94a:	4623      	mov	r3, r4
 800f94c:	f005 fa79 	bl	8014e42 <RegionLinkAdrReq>
 800f950:	4603      	mov	r3, r0
 800f952:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 800f956:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800f95a:	f003 0307 	and.w	r3, r3, #7
 800f95e:	2b07      	cmp	r3, #7
 800f960:	d10e      	bne.n	800f980 <ProcessMacCommands+0x1cc>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800f962:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 800f966:	4b77      	ldr	r3, [pc, #476]	@ (800fb44 <ProcessMacCommands+0x390>)
 800f968:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800f96c:	f997 2056 	ldrsb.w	r2, [r7, #86]	@ 0x56
 800f970:	4b74      	ldr	r3, [pc, #464]	@ (800fb44 <ProcessMacCommands+0x390>)
 800f972:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800f976:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800f97a:	4b72      	ldr	r3, [pc, #456]	@ (800fb44 <ProcessMacCommands+0x390>)
 800f97c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800f980:	2300      	movs	r3, #0
 800f982:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800f986:	e00b      	b.n	800f9a0 <ProcessMacCommands+0x1ec>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800f988:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 800f98c:	2201      	movs	r2, #1
 800f98e:	4619      	mov	r1, r3
 800f990:	2003      	movs	r0, #3
 800f992:	f003 fb77 	bl	8013084 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800f996:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800f99a:	3301      	adds	r3, #1
 800f99c:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800f9a0:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800f9a4:	4a68      	ldr	r2, [pc, #416]	@ (800fb48 <ProcessMacCommands+0x394>)
 800f9a6:	fba2 2303 	umull	r2, r3, r2, r3
 800f9aa:	089b      	lsrs	r3, r3, #2
 800f9ac:	b2db      	uxtb	r3, r3
 800f9ae:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 800f9b2:	429a      	cmp	r2, r3
 800f9b4:	d3e8      	bcc.n	800f988 <ProcessMacCommands+0x1d4>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 800f9b6:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800f9ba:	78fb      	ldrb	r3, [r7, #3]
 800f9bc:	4413      	add	r3, r2
 800f9be:	b2db      	uxtb	r3, r3
 800f9c0:	3b01      	subs	r3, #1
 800f9c2:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 800f9c4:	e37e      	b.n	80100c4 <ProcessMacCommands+0x910>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800f9c6:	78fb      	ldrb	r3, [r7, #3]
 800f9c8:	1c5a      	adds	r2, r3, #1
 800f9ca:	70fa      	strb	r2, [r7, #3]
 800f9cc:	461a      	mov	r2, r3
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	4413      	add	r3, r2
 800f9d2:	781b      	ldrb	r3, [r3, #0]
 800f9d4:	f003 030f 	and.w	r3, r3, #15
 800f9d8:	b2da      	uxtb	r2, r3
 800f9da:	4b5a      	ldr	r3, [pc, #360]	@ (800fb44 <ProcessMacCommands+0x390>)
 800f9dc:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800f9e0:	4b58      	ldr	r3, [pc, #352]	@ (800fb44 <ProcessMacCommands+0x390>)
 800f9e2:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 800f9e6:	461a      	mov	r2, r3
 800f9e8:	2301      	movs	r3, #1
 800f9ea:	4093      	lsls	r3, r2
 800f9ec:	b29a      	uxth	r2, r3
 800f9ee:	4b55      	ldr	r3, [pc, #340]	@ (800fb44 <ProcessMacCommands+0x390>)
 800f9f0:	f8a3 211e 	strh.w	r2, [r3, #286]	@ 0x11e
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800f9f4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	4619      	mov	r1, r3
 800f9fc:	2004      	movs	r0, #4
 800f9fe:	f003 fb41 	bl	8013084 <LoRaMacCommandsAddCmd>
                break;
 800fa02:	e36c      	b.n	80100de <ProcessMacCommands+0x92a>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800fa04:	2307      	movs	r3, #7
 800fa06:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800fa0a:	78fb      	ldrb	r3, [r7, #3]
 800fa0c:	687a      	ldr	r2, [r7, #4]
 800fa0e:	4413      	add	r3, r2
 800fa10:	781b      	ldrb	r3, [r3, #0]
 800fa12:	091b      	lsrs	r3, r3, #4
 800fa14:	b2db      	uxtb	r3, r3
 800fa16:	b25b      	sxtb	r3, r3
 800fa18:	f003 0307 	and.w	r3, r3, #7
 800fa1c:	b25b      	sxtb	r3, r3
 800fa1e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800fa22:	78fb      	ldrb	r3, [r7, #3]
 800fa24:	687a      	ldr	r2, [r7, #4]
 800fa26:	4413      	add	r3, r2
 800fa28:	781b      	ldrb	r3, [r3, #0]
 800fa2a:	b25b      	sxtb	r3, r3
 800fa2c:	f003 030f 	and.w	r3, r3, #15
 800fa30:	b25b      	sxtb	r3, r3
 800fa32:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                macIndex++;
 800fa36:	78fb      	ldrb	r3, [r7, #3]
 800fa38:	3301      	adds	r3, #1
 800fa3a:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800fa3c:	78fb      	ldrb	r3, [r7, #3]
 800fa3e:	1c5a      	adds	r2, r3, #1
 800fa40:	70fa      	strb	r2, [r7, #3]
 800fa42:	461a      	mov	r2, r3
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	4413      	add	r3, r2
 800fa48:	781b      	ldrb	r3, [r3, #0]
 800fa4a:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800fa4c:	78fb      	ldrb	r3, [r7, #3]
 800fa4e:	1c5a      	adds	r2, r3, #1
 800fa50:	70fa      	strb	r2, [r7, #3]
 800fa52:	461a      	mov	r2, r3
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	4413      	add	r3, r2
 800fa58:	781b      	ldrb	r3, [r3, #0]
 800fa5a:	021a      	lsls	r2, r3, #8
 800fa5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa5e:	4313      	orrs	r3, r2
 800fa60:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800fa62:	78fb      	ldrb	r3, [r7, #3]
 800fa64:	1c5a      	adds	r2, r3, #1
 800fa66:	70fa      	strb	r2, [r7, #3]
 800fa68:	461a      	mov	r2, r3
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	4413      	add	r3, r2
 800fa6e:	781b      	ldrb	r3, [r3, #0]
 800fa70:	041a      	lsls	r2, r3, #16
 800fa72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa74:	4313      	orrs	r3, r2
 800fa76:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency *= 100;
 800fa78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa7a:	2264      	movs	r2, #100	@ 0x64
 800fa7c:	fb02 f303 	mul.w	r3, r2, r3
 800fa80:	653b      	str	r3, [r7, #80]	@ 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800fa82:	4b30      	ldr	r3, [pc, #192]	@ (800fb44 <ProcessMacCommands+0x390>)
 800fa84:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800fa88:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800fa8c:	4611      	mov	r1, r2
 800fa8e:	4618      	mov	r0, r3
 800fa90:	f005 f9fe 	bl	8014e90 <RegionRxParamSetupReq>
 800fa94:	4603      	mov	r3, r0
 800fa96:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800fa9a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800fa9e:	f003 0307 	and.w	r3, r3, #7
 800faa2:	2b07      	cmp	r3, #7
 800faa4:	d117      	bne.n	800fad6 <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800faa6:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800faaa:	b2da      	uxtb	r2, r3
 800faac:	4b25      	ldr	r3, [pc, #148]	@ (800fb44 <ProcessMacCommands+0x390>)
 800faae:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800fab2:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800fab6:	b2da      	uxtb	r2, r3
 800fab8:	4b22      	ldr	r3, [pc, #136]	@ (800fb44 <ProcessMacCommands+0x390>)
 800faba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800fabe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fac0:	4a20      	ldr	r2, [pc, #128]	@ (800fb44 <ProcessMacCommands+0x390>)
 800fac2:	66d3      	str	r3, [r2, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800fac4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fac6:	4a1f      	ldr	r2, [pc, #124]	@ (800fb44 <ProcessMacCommands+0x390>)
 800fac8:	6753      	str	r3, [r2, #116]	@ 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800faca:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 800face:	b2da      	uxtb	r2, r3
 800fad0:	4b1c      	ldr	r3, [pc, #112]	@ (800fb44 <ProcessMacCommands+0x390>)
 800fad2:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
                }
                macCmdPayload[0] = status;
 800fad6:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800fada:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800fade:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fae2:	2201      	movs	r2, #1
 800fae4:	4619      	mov	r1, r3
 800fae6:	2005      	movs	r0, #5
 800fae8:	f003 facc 	bl	8013084 <LoRaMacCommandsAddCmd>
                break;
 800faec:	e2f7      	b.n	80100de <ProcessMacCommands+0x92a>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800faee:	23ff      	movs	r3, #255	@ 0xff
 800faf0:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800faf4:	4b12      	ldr	r3, [pc, #72]	@ (800fb40 <ProcessMacCommands+0x38c>)
 800faf6:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d00d      	beq.n	800fb1a <ProcessMacCommands+0x366>
 800fafe:	4b10      	ldr	r3, [pc, #64]	@ (800fb40 <ProcessMacCommands+0x38c>)
 800fb00:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d007      	beq.n	800fb1a <ProcessMacCommands+0x366>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800fb0a:	4b0d      	ldr	r3, [pc, #52]	@ (800fb40 <ProcessMacCommands+0x38c>)
 800fb0c:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	4798      	blx	r3
 800fb14:	4603      	mov	r3, r0
 800fb16:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800fb1a:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800fb1e:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800fb22:	787b      	ldrb	r3, [r7, #1]
 800fb24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fb28:	b2db      	uxtb	r3, r3
 800fb2a:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800fb2e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fb32:	2202      	movs	r2, #2
 800fb34:	4619      	mov	r1, r3
 800fb36:	2006      	movs	r0, #6
 800fb38:	f003 faa4 	bl	8013084 <LoRaMacCommandsAddCmd>
                break;
 800fb3c:	e2cf      	b.n	80100de <ProcessMacCommands+0x92a>
 800fb3e:	bf00      	nop
 800fb40:	2000075c 	.word	0x2000075c
 800fb44:	20000c64 	.word	0x20000c64
 800fb48:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800fb4c:	2303      	movs	r3, #3
 800fb4e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800fb52:	78fb      	ldrb	r3, [r7, #3]
 800fb54:	1c5a      	adds	r2, r3, #1
 800fb56:	70fa      	strb	r2, [r7, #3]
 800fb58:	461a      	mov	r2, r3
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	4413      	add	r3, r2
 800fb5e:	781b      	ldrb	r3, [r3, #0]
 800fb60:	b25b      	sxtb	r3, r3
 800fb62:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
                newChannelReq.NewChannel = &chParam;
 800fb66:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800fb6a:	647b      	str	r3, [r7, #68]	@ 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800fb6c:	78fb      	ldrb	r3, [r7, #3]
 800fb6e:	1c5a      	adds	r2, r3, #1
 800fb70:	70fa      	strb	r2, [r7, #3]
 800fb72:	461a      	mov	r2, r3
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	4413      	add	r3, r2
 800fb78:	781b      	ldrb	r3, [r3, #0]
 800fb7a:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800fb7c:	78fb      	ldrb	r3, [r7, #3]
 800fb7e:	1c5a      	adds	r2, r3, #1
 800fb80:	70fa      	strb	r2, [r7, #3]
 800fb82:	461a      	mov	r2, r3
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	4413      	add	r3, r2
 800fb88:	781b      	ldrb	r3, [r3, #0]
 800fb8a:	021a      	lsls	r2, r3, #8
 800fb8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb8e:	4313      	orrs	r3, r2
 800fb90:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800fb92:	78fb      	ldrb	r3, [r7, #3]
 800fb94:	1c5a      	adds	r2, r3, #1
 800fb96:	70fa      	strb	r2, [r7, #3]
 800fb98:	461a      	mov	r2, r3
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	4413      	add	r3, r2
 800fb9e:	781b      	ldrb	r3, [r3, #0]
 800fba0:	041a      	lsls	r2, r3, #16
 800fba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fba4:	4313      	orrs	r3, r2
 800fba6:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency *= 100;
 800fba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbaa:	2264      	movs	r2, #100	@ 0x64
 800fbac:	fb02 f303 	mul.w	r3, r2, r3
 800fbb0:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Rx1Frequency = 0;
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800fbb6:	78fb      	ldrb	r3, [r7, #3]
 800fbb8:	1c5a      	adds	r2, r3, #1
 800fbba:	70fa      	strb	r2, [r7, #3]
 800fbbc:	461a      	mov	r2, r3
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	4413      	add	r3, r2
 800fbc2:	781b      	ldrb	r3, [r3, #0]
 800fbc4:	b25b      	sxtb	r3, r3
 800fbc6:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800fbca:	4b85      	ldr	r3, [pc, #532]	@ (800fde0 <ProcessMacCommands+0x62c>)
 800fbcc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800fbd0:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800fbd4:	4611      	mov	r1, r2
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f005 f975 	bl	8014ec6 <RegionNewChannelReq>
 800fbdc:	4603      	mov	r3, r0
 800fbde:	b2db      	uxtb	r3, r3
 800fbe0:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 800fbe4:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800fbe8:	b25b      	sxtb	r3, r3
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	f2c0 826c 	blt.w	80100c8 <ProcessMacCommands+0x914>
                {
                    macCmdPayload[0] = status;
 800fbf0:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800fbf4:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800fbf8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fbfc:	2201      	movs	r2, #1
 800fbfe:	4619      	mov	r1, r3
 800fc00:	2007      	movs	r0, #7
 800fc02:	f003 fa3f 	bl	8013084 <LoRaMacCommandsAddCmd>
                }
                break;
 800fc06:	e25f      	b.n	80100c8 <ProcessMacCommands+0x914>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800fc08:	78fb      	ldrb	r3, [r7, #3]
 800fc0a:	1c5a      	adds	r2, r3, #1
 800fc0c:	70fa      	strb	r2, [r7, #3]
 800fc0e:	461a      	mov	r2, r3
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	4413      	add	r3, r2
 800fc14:	781b      	ldrb	r3, [r3, #0]
 800fc16:	f003 030f 	and.w	r3, r3, #15
 800fc1a:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

                if( delay == 0 )
 800fc1e:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d104      	bne.n	800fc30 <ProcessMacCommands+0x47c>
                {
                    delay++;
 800fc26:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800fc2a:	3301      	adds	r3, #1
 800fc2c:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800fc30:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800fc34:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800fc38:	fb02 f303 	mul.w	r3, r2, r3
 800fc3c:	461a      	mov	r2, r3
 800fc3e:	4b68      	ldr	r3, [pc, #416]	@ (800fde0 <ProcessMacCommands+0x62c>)
 800fc40:	659a      	str	r2, [r3, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800fc42:	4b67      	ldr	r3, [pc, #412]	@ (800fde0 <ProcessMacCommands+0x62c>)
 800fc44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fc46:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800fc4a:	4a65      	ldr	r2, [pc, #404]	@ (800fde0 <ProcessMacCommands+0x62c>)
 800fc4c:	65d3      	str	r3, [r2, #92]	@ 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800fc4e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fc52:	2200      	movs	r2, #0
 800fc54:	4619      	mov	r1, r3
 800fc56:	2008      	movs	r0, #8
 800fc58:	f003 fa14 	bl	8013084 <LoRaMacCommandsAddCmd>
                break;
 800fc5c:	e23f      	b.n	80100de <ProcessMacCommands+0x92a>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800fc5e:	78fb      	ldrb	r3, [r7, #3]
 800fc60:	1c5a      	adds	r2, r3, #1
 800fc62:	70fa      	strb	r2, [r7, #3]
 800fc64:	461a      	mov	r2, r3
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	4413      	add	r3, r2
 800fc6a:	781b      	ldrb	r3, [r3, #0]
 800fc6c:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800fc70:	2300      	movs	r3, #0
 800fc72:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800fc76:	2300      	movs	r3, #0
 800fc78:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800fc7c:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800fc80:	f003 0320 	and.w	r3, r3, #32
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d002      	beq.n	800fc8e <ProcessMacCommands+0x4da>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800fc88:	2301      	movs	r3, #1
 800fc8a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800fc8e:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800fc92:	f003 0310 	and.w	r3, r3, #16
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d002      	beq.n	800fca0 <ProcessMacCommands+0x4ec>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800fc9a:	2301      	movs	r3, #1
 800fc9c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800fca0:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800fca4:	f003 030f 	and.w	r3, r3, #15
 800fca8:	b2db      	uxtb	r3, r3
 800fcaa:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800fcae:	4b4c      	ldr	r3, [pc, #304]	@ (800fde0 <ProcessMacCommands+0x62c>)
 800fcb0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800fcb4:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800fcb8:	4611      	mov	r1, r2
 800fcba:	4618      	mov	r0, r3
 800fcbc:	f005 f91e 	bl	8014efc <RegionTxParamSetupReq>
 800fcc0:	4603      	mov	r3, r0
 800fcc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcc6:	f000 8201 	beq.w	80100cc <ProcessMacCommands+0x918>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800fcca:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800fcce:	4b44      	ldr	r3, [pc, #272]	@ (800fde0 <ProcessMacCommands+0x62c>)
 800fcd0:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800fcd4:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800fcd8:	4b41      	ldr	r3, [pc, #260]	@ (800fde0 <ProcessMacCommands+0x62c>)
 800fcda:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800fcde:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800fce2:	461a      	mov	r2, r3
 800fce4:	4b3f      	ldr	r3, [pc, #252]	@ (800fde4 <ProcessMacCommands+0x630>)
 800fce6:	5c9b      	ldrb	r3, [r3, r2]
 800fce8:	4618      	mov	r0, r3
 800fcea:	f7f0 fd6f 	bl	80007cc <__aeabi_ui2f>
 800fcee:	4603      	mov	r3, r0
 800fcf0:	4a3b      	ldr	r2, [pc, #236]	@ (800fde0 <ProcessMacCommands+0x62c>)
 800fcf2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800fcf6:	2302      	movs	r3, #2
 800fcf8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800fcfc:	4b38      	ldr	r3, [pc, #224]	@ (800fde0 <ProcessMacCommands+0x62c>)
 800fcfe:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800fd02:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fd06:	4b36      	ldr	r3, [pc, #216]	@ (800fde0 <ProcessMacCommands+0x62c>)
 800fd08:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800fd0c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800fd10:	4611      	mov	r1, r2
 800fd12:	4618      	mov	r0, r3
 800fd14:	f004 ff92 	bl	8014c3c <RegionGetPhyParam>
 800fd18:	4603      	mov	r3, r0
 800fd1a:	62bb      	str	r3, [r7, #40]	@ 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800fd1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd1e:	b25a      	sxtb	r2, r3
 800fd20:	4b2f      	ldr	r3, [pc, #188]	@ (800fde0 <ProcessMacCommands+0x62c>)
 800fd22:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800fd26:	4293      	cmp	r3, r2
 800fd28:	bfb8      	it	lt
 800fd2a:	4613      	movlt	r3, r2
 800fd2c:	b25a      	sxtb	r2, r3
 800fd2e:	4b2c      	ldr	r3, [pc, #176]	@ (800fde0 <ProcessMacCommands+0x62c>)
 800fd30:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800fd34:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fd38:	2200      	movs	r2, #0
 800fd3a:	4619      	mov	r1, r3
 800fd3c:	2009      	movs	r0, #9
 800fd3e:	f003 f9a1 	bl	8013084 <LoRaMacCommandsAddCmd>
                }
                break;
 800fd42:	e1c3      	b.n	80100cc <ProcessMacCommands+0x918>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800fd44:	2303      	movs	r3, #3
 800fd46:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800fd4a:	78fb      	ldrb	r3, [r7, #3]
 800fd4c:	1c5a      	adds	r2, r3, #1
 800fd4e:	70fa      	strb	r2, [r7, #3]
 800fd50:	461a      	mov	r2, r3
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	4413      	add	r3, r2
 800fd56:	781b      	ldrb	r3, [r3, #0]
 800fd58:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800fd5c:	78fb      	ldrb	r3, [r7, #3]
 800fd5e:	1c5a      	adds	r2, r3, #1
 800fd60:	70fa      	strb	r2, [r7, #3]
 800fd62:	461a      	mov	r2, r3
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	4413      	add	r3, r2
 800fd68:	781b      	ldrb	r3, [r3, #0]
 800fd6a:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800fd6c:	78fb      	ldrb	r3, [r7, #3]
 800fd6e:	1c5a      	adds	r2, r3, #1
 800fd70:	70fa      	strb	r2, [r7, #3]
 800fd72:	461a      	mov	r2, r3
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	4413      	add	r3, r2
 800fd78:	781b      	ldrb	r3, [r3, #0]
 800fd7a:	021a      	lsls	r2, r3, #8
 800fd7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd7e:	4313      	orrs	r3, r2
 800fd80:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800fd82:	78fb      	ldrb	r3, [r7, #3]
 800fd84:	1c5a      	adds	r2, r3, #1
 800fd86:	70fa      	strb	r2, [r7, #3]
 800fd88:	461a      	mov	r2, r3
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	4413      	add	r3, r2
 800fd8e:	781b      	ldrb	r3, [r3, #0]
 800fd90:	041a      	lsls	r2, r3, #16
 800fd92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd94:	4313      	orrs	r3, r2
 800fd96:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800fd98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd9a:	2264      	movs	r2, #100	@ 0x64
 800fd9c:	fb02 f303 	mul.w	r3, r2, r3
 800fda0:	627b      	str	r3, [r7, #36]	@ 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800fda2:	4b0f      	ldr	r3, [pc, #60]	@ (800fde0 <ProcessMacCommands+0x62c>)
 800fda4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800fda8:	f107 0220 	add.w	r2, r7, #32
 800fdac:	4611      	mov	r1, r2
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f005 f8bf 	bl	8014f32 <RegionDlChannelReq>
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	b2db      	uxtb	r3, r3
 800fdb8:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 800fdbc:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800fdc0:	b25b      	sxtb	r3, r3
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	f2c0 8184 	blt.w	80100d0 <ProcessMacCommands+0x91c>
                {
                    macCmdPayload[0] = status;
 800fdc8:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800fdcc:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800fdd0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fdd4:	2201      	movs	r2, #1
 800fdd6:	4619      	mov	r1, r3
 800fdd8:	200a      	movs	r0, #10
 800fdda:	f003 f953 	bl	8013084 <LoRaMacCommandsAddCmd>
                }
                break;
 800fdde:	e177      	b.n	80100d0 <ProcessMacCommands+0x91c>
 800fde0:	20000c64 	.word	0x20000c64
 800fde4:	0801d9b4 	.word	0x0801d9b4
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800fde8:	200a      	movs	r0, #10
 800fdea:	f003 fc83 	bl	80136f4 <LoRaMacConfirmQueueIsCmdActive>
 800fdee:	4603      	mov	r3, r0
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	f000 816f 	beq.w	80100d4 <ProcessMacCommands+0x920>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800fdf6:	210a      	movs	r1, #10
 800fdf8:	2000      	movs	r0, #0
 800fdfa:	f003 fbef 	bl	80135dc <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 800fdfe:	f107 0318 	add.w	r3, r7, #24
 800fe02:	2200      	movs	r2, #0
 800fe04:	601a      	str	r2, [r3, #0]
 800fe06:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800fe08:	f107 0310 	add.w	r3, r7, #16
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	601a      	str	r2, [r3, #0]
 800fe10:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800fe12:	f107 0308 	add.w	r3, r7, #8
 800fe16:	2200      	movs	r2, #0
 800fe18:	601a      	str	r2, [r3, #0]
 800fe1a:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800fe1c:	78fb      	ldrb	r3, [r7, #3]
 800fe1e:	1c5a      	adds	r2, r3, #1
 800fe20:	70fa      	strb	r2, [r7, #3]
 800fe22:	461a      	mov	r2, r3
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	4413      	add	r3, r2
 800fe28:	781b      	ldrb	r3, [r3, #0]
 800fe2a:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800fe2c:	78fb      	ldrb	r3, [r7, #3]
 800fe2e:	1c5a      	adds	r2, r3, #1
 800fe30:	70fa      	strb	r2, [r7, #3]
 800fe32:	461a      	mov	r2, r3
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	4413      	add	r3, r2
 800fe38:	781b      	ldrb	r3, [r3, #0]
 800fe3a:	021a      	lsls	r2, r3, #8
 800fe3c:	69bb      	ldr	r3, [r7, #24]
 800fe3e:	4313      	orrs	r3, r2
 800fe40:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800fe42:	78fb      	ldrb	r3, [r7, #3]
 800fe44:	1c5a      	adds	r2, r3, #1
 800fe46:	70fa      	strb	r2, [r7, #3]
 800fe48:	461a      	mov	r2, r3
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	4413      	add	r3, r2
 800fe4e:	781b      	ldrb	r3, [r3, #0]
 800fe50:	041a      	lsls	r2, r3, #16
 800fe52:	69bb      	ldr	r3, [r7, #24]
 800fe54:	4313      	orrs	r3, r2
 800fe56:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800fe58:	78fb      	ldrb	r3, [r7, #3]
 800fe5a:	1c5a      	adds	r2, r3, #1
 800fe5c:	70fa      	strb	r2, [r7, #3]
 800fe5e:	461a      	mov	r2, r3
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	4413      	add	r3, r2
 800fe64:	781b      	ldrb	r3, [r3, #0]
 800fe66:	061a      	lsls	r2, r3, #24
 800fe68:	69bb      	ldr	r3, [r7, #24]
 800fe6a:	4313      	orrs	r3, r2
 800fe6c:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800fe6e:	78fb      	ldrb	r3, [r7, #3]
 800fe70:	1c5a      	adds	r2, r3, #1
 800fe72:	70fa      	strb	r2, [r7, #3]
 800fe74:	461a      	mov	r2, r3
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	4413      	add	r3, r2
 800fe7a:	781b      	ldrb	r3, [r3, #0]
 800fe7c:	b21b      	sxth	r3, r3
 800fe7e:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800fe80:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800fe84:	461a      	mov	r2, r3
 800fe86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fe8a:	fb02 f303 	mul.w	r3, r2, r3
 800fe8e:	121b      	asrs	r3, r3, #8
 800fe90:	b21b      	sxth	r3, r3
 800fe92:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800fe94:	f107 0310 	add.w	r3, r7, #16
 800fe98:	f107 0218 	add.w	r2, r7, #24
 800fe9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fea0:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800fea4:	693a      	ldr	r2, [r7, #16]
 800fea6:	4b94      	ldr	r3, [pc, #592]	@ (80100f8 <ProcessMacCommands+0x944>)
 800fea8:	4413      	add	r3, r2
 800feaa:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800feac:	f107 0308 	add.w	r3, r7, #8
 800feb0:	4618      	mov	r0, r3
 800feb2:	f00b fc47 	bl	801b744 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800feb6:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 800feba:	4b90      	ldr	r3, [pc, #576]	@ (80100fc <ProcessMacCommands+0x948>)
 800febc:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 800fec0:	9200      	str	r2, [sp, #0]
 800fec2:	f8d3 3338 	ldr.w	r3, [r3, #824]	@ 0x338
 800fec6:	f107 0210 	add.w	r2, r7, #16
 800feca:	ca06      	ldmia	r2, {r1, r2}
 800fecc:	f00b fbd3 	bl	801b676 <SysTimeSub>
 800fed0:	f107 0010 	add.w	r0, r7, #16
 800fed4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fed6:	9300      	str	r3, [sp, #0]
 800fed8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800feda:	f107 0208 	add.w	r2, r7, #8
 800fede:	ca06      	ldmia	r2, {r1, r2}
 800fee0:	f00b fb90 	bl	801b604 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800fee4:	f107 0310 	add.w	r3, r7, #16
 800fee8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800feec:	f00b fbfc 	bl	801b6e8 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800fef0:	f002 ff81 	bl	8012df6 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800fef4:	4b81      	ldr	r3, [pc, #516]	@ (80100fc <ProcessMacCommands+0x948>)
 800fef6:	2201      	movs	r2, #1
 800fef8:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 800fefc:	e0ea      	b.n	80100d4 <ProcessMacCommands+0x920>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800fefe:	200d      	movs	r0, #13
 800ff00:	f003 fbf8 	bl	80136f4 <LoRaMacConfirmQueueIsCmdActive>
 800ff04:	4603      	mov	r3, r0
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	f000 80e6 	beq.w	80100d8 <ProcessMacCommands+0x924>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800ff0c:	210d      	movs	r1, #13
 800ff0e:	2000      	movs	r0, #0
 800ff10:	f003 fb64 	bl	80135dc <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800ff14:	4b79      	ldr	r3, [pc, #484]	@ (80100fc <ProcessMacCommands+0x948>)
 800ff16:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 800ff1a:	2b04      	cmp	r3, #4
 800ff1c:	f000 80dc 	beq.w	80100d8 <ProcessMacCommands+0x924>
 800ff20:	4b76      	ldr	r3, [pc, #472]	@ (80100fc <ProcessMacCommands+0x948>)
 800ff22:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 800ff26:	2b05      	cmp	r3, #5
 800ff28:	f000 80d6 	beq.w	80100d8 <ProcessMacCommands+0x924>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 800ff2c:	f002 ff44 	bl	8012db8 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 800ff30:	e0d2      	b.n	80100d8 <ProcessMacCommands+0x924>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800ff32:	2303      	movs	r3, #3
 800ff34:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                uint32_t frequency = 0;
 800ff38:	2300      	movs	r3, #0
 800ff3a:	67bb      	str	r3, [r7, #120]	@ 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800ff3c:	78fb      	ldrb	r3, [r7, #3]
 800ff3e:	1c5a      	adds	r2, r3, #1
 800ff40:	70fa      	strb	r2, [r7, #3]
 800ff42:	461a      	mov	r2, r3
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	4413      	add	r3, r2
 800ff48:	781b      	ldrb	r3, [r3, #0]
 800ff4a:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800ff4c:	78fb      	ldrb	r3, [r7, #3]
 800ff4e:	1c5a      	adds	r2, r3, #1
 800ff50:	70fa      	strb	r2, [r7, #3]
 800ff52:	461a      	mov	r2, r3
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	4413      	add	r3, r2
 800ff58:	781b      	ldrb	r3, [r3, #0]
 800ff5a:	021b      	lsls	r3, r3, #8
 800ff5c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800ff5e:	4313      	orrs	r3, r2
 800ff60:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800ff62:	78fb      	ldrb	r3, [r7, #3]
 800ff64:	1c5a      	adds	r2, r3, #1
 800ff66:	70fa      	strb	r2, [r7, #3]
 800ff68:	461a      	mov	r2, r3
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	4413      	add	r3, r2
 800ff6e:	781b      	ldrb	r3, [r3, #0]
 800ff70:	041b      	lsls	r3, r3, #16
 800ff72:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800ff74:	4313      	orrs	r3, r2
 800ff76:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency *= 100;
 800ff78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ff7a:	2264      	movs	r2, #100	@ 0x64
 800ff7c:	fb02 f303 	mul.w	r3, r2, r3
 800ff80:	67bb      	str	r3, [r7, #120]	@ 0x78
                datarate = payload[macIndex++] & 0x0F;
 800ff82:	78fb      	ldrb	r3, [r7, #3]
 800ff84:	1c5a      	adds	r2, r3, #1
 800ff86:	70fa      	strb	r2, [r7, #3]
 800ff88:	461a      	mov	r2, r3
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	4413      	add	r3, r2
 800ff8e:	781b      	ldrb	r3, [r3, #0]
 800ff90:	f003 030f 	and.w	r3, r3, #15
 800ff94:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800ff98:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800ff9c:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	f002 ff10 	bl	8012dc4 <LoRaMacClassBPingSlotChannelReq>
 800ffa4:	4603      	mov	r3, r0
 800ffa6:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                macCmdPayload[0] = status;
 800ffaa:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800ffae:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800ffb2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800ffb6:	2201      	movs	r2, #1
 800ffb8:	4619      	mov	r1, r3
 800ffba:	2011      	movs	r0, #17
 800ffbc:	f003 f862 	bl	8013084 <LoRaMacCommandsAddCmd>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
#endif /* LORAMAC_VERSION */
                break;
 800ffc0:	e08d      	b.n	80100de <ProcessMacCommands+0x92a>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800ffc2:	200e      	movs	r0, #14
 800ffc4:	f003 fb96 	bl	80136f4 <LoRaMacConfirmQueueIsCmdActive>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	f000 8086 	beq.w	80100dc <ProcessMacCommands+0x928>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800ffd0:	210e      	movs	r1, #14
 800ffd2:	2000      	movs	r0, #0
 800ffd4:	f003 fb02 	bl	80135dc <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 800ffd8:	2300      	movs	r3, #0
 800ffda:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    uint8_t beaconTimingChannel = 0;
 800ffde:	2300      	movs	r3, #0
 800ffe0:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800ffe4:	78fb      	ldrb	r3, [r7, #3]
 800ffe6:	1c5a      	adds	r2, r3, #1
 800ffe8:	70fa      	strb	r2, [r7, #3]
 800ffea:	461a      	mov	r2, r3
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	4413      	add	r3, r2
 800fff0:	781b      	ldrb	r3, [r3, #0]
 800fff2:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800fff6:	78fb      	ldrb	r3, [r7, #3]
 800fff8:	1c5a      	adds	r2, r3, #1
 800fffa:	70fa      	strb	r2, [r7, #3]
 800fffc:	461a      	mov	r2, r3
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	4413      	add	r3, r2
 8010002:	781b      	ldrb	r3, [r3, #0]
 8010004:	021b      	lsls	r3, r3, #8
 8010006:	b21a      	sxth	r2, r3
 8010008:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 801000c:	4313      	orrs	r3, r2
 801000e:	b21b      	sxth	r3, r3
 8010010:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingChannel = payload[macIndex++];
 8010014:	78fb      	ldrb	r3, [r7, #3]
 8010016:	1c5a      	adds	r2, r3, #1
 8010018:	70fa      	strb	r2, [r7, #3]
 801001a:	461a      	mov	r2, r3
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	4413      	add	r3, r2
 8010020:	781b      	ldrb	r3, [r3, #0]
 8010022:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8010026:	4b36      	ldr	r3, [pc, #216]	@ (8010100 <ProcessMacCommands+0x94c>)
 8010028:	681a      	ldr	r2, [r3, #0]
 801002a:	f897 107d 	ldrb.w	r1, [r7, #125]	@ 0x7d
 801002e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8010032:	4618      	mov	r0, r3
 8010034:	f002 fed2 	bl	8012ddc <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8010038:	e050      	b.n	80100dc <ProcessMacCommands+0x928>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 801003a:	2300      	movs	r3, #0
 801003c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 8010040:	78fb      	ldrb	r3, [r7, #3]
 8010042:	1c5a      	adds	r2, r3, #1
 8010044:	70fa      	strb	r2, [r7, #3]
 8010046:	461a      	mov	r2, r3
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	4413      	add	r3, r2
 801004c:	781b      	ldrb	r3, [r3, #0]
 801004e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8010052:	78fb      	ldrb	r3, [r7, #3]
 8010054:	1c5a      	adds	r2, r3, #1
 8010056:	70fa      	strb	r2, [r7, #3]
 8010058:	461a      	mov	r2, r3
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	4413      	add	r3, r2
 801005e:	781b      	ldrb	r3, [r3, #0]
 8010060:	021b      	lsls	r3, r3, #8
 8010062:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010066:	4313      	orrs	r3, r2
 8010068:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 801006c:	78fb      	ldrb	r3, [r7, #3]
 801006e:	1c5a      	adds	r2, r3, #1
 8010070:	70fa      	strb	r2, [r7, #3]
 8010072:	461a      	mov	r2, r3
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	4413      	add	r3, r2
 8010078:	781b      	ldrb	r3, [r3, #0]
 801007a:	041b      	lsls	r3, r3, #16
 801007c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010080:	4313      	orrs	r3, r2
 8010082:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency *= 100;
 8010086:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801008a:	2264      	movs	r2, #100	@ 0x64
 801008c:	fb02 f303 	mul.w	r3, r2, r3
 8010090:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8010094:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8010098:	f002 feb3 	bl	8012e02 <LoRaMacClassBBeaconFreqReq>
 801009c:	4603      	mov	r3, r0
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d003      	beq.n	80100aa <ProcessMacCommands+0x8f6>
                    {
                        macCmdPayload[0] = 1;
 80100a2:	2301      	movs	r3, #1
 80100a4:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 80100a8:	e002      	b.n	80100b0 <ProcessMacCommands+0x8fc>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 80100aa:	2300      	movs	r3, #0
 80100ac:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80100b0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80100b4:	2201      	movs	r2, #1
 80100b6:	4619      	mov	r1, r3
 80100b8:	2013      	movs	r0, #19
 80100ba:	f002 ffe3 	bl	8013084 <LoRaMacCommandsAddCmd>
                }
                break;
 80100be:	e00e      	b.n	80100de <ProcessMacCommands+0x92a>
                break;
 80100c0:	bf00      	nop
 80100c2:	e00c      	b.n	80100de <ProcessMacCommands+0x92a>
                break;
 80100c4:	bf00      	nop
 80100c6:	e00a      	b.n	80100de <ProcessMacCommands+0x92a>
                break;
 80100c8:	bf00      	nop
 80100ca:	e008      	b.n	80100de <ProcessMacCommands+0x92a>
                break;
 80100cc:	bf00      	nop
 80100ce:	e006      	b.n	80100de <ProcessMacCommands+0x92a>
                break;
 80100d0:	bf00      	nop
 80100d2:	e004      	b.n	80100de <ProcessMacCommands+0x92a>
                break;
 80100d4:	bf00      	nop
 80100d6:	e002      	b.n	80100de <ProcessMacCommands+0x92a>
                break;
 80100d8:	bf00      	nop
 80100da:	e000      	b.n	80100de <ProcessMacCommands+0x92a>
                break;
 80100dc:	bf00      	nop
    while( macIndex < commandsSize )
 80100de:	78fa      	ldrb	r2, [r7, #3]
 80100e0:	78bb      	ldrb	r3, [r7, #2]
 80100e2:	429a      	cmp	r2, r3
 80100e4:	f4ff ab7e 	bcc.w	800f7e4 <ProcessMacCommands+0x30>
 80100e8:	e002      	b.n	80100f0 <ProcessMacCommands+0x93c>
            return;
 80100ea:	bf00      	nop
 80100ec:	e000      	b.n	80100f0 <ProcessMacCommands+0x93c>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 80100ee:	bf00      	nop
        }
    }
}
 80100f0:	378c      	adds	r7, #140	@ 0x8c
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd90      	pop	{r4, r7, pc}
 80100f6:	bf00      	nop
 80100f8:	12d53d80 	.word	0x12d53d80
 80100fc:	2000075c 	.word	0x2000075c
 8010100:	20001b5c 	.word	0x20001b5c

08010104 <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b08e      	sub	sp, #56	@ 0x38
 8010108:	af02      	add	r7, sp, #8
 801010a:	60f8      	str	r0, [r7, #12]
 801010c:	607a      	str	r2, [r7, #4]
 801010e:	461a      	mov	r2, r3
 8010110:	460b      	mov	r3, r1
 8010112:	72fb      	strb	r3, [r7, #11]
 8010114:	4613      	mov	r3, r2
 8010116:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010118:	2303      	movs	r3, #3
 801011a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 801011e:	4b65      	ldr	r3, [pc, #404]	@ (80102b4 <Send+0x1b0>)
 8010120:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8010124:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8010128:	4b62      	ldr	r3, [pc, #392]	@ (80102b4 <Send+0x1b0>)
 801012a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801012e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010132:	4b60      	ldr	r3, [pc, #384]	@ (80102b4 <Send+0x1b0>)
 8010134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010136:	62bb      	str	r3, [r7, #40]	@ 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010138:	4b5e      	ldr	r3, [pc, #376]	@ (80102b4 <Send+0x1b0>)
 801013a:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 801013e:	2b00      	cmp	r3, #0
 8010140:	d101      	bne.n	8010146 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8010142:	2307      	movs	r3, #7
 8010144:	e0b1      	b.n	80102aa <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8010146:	4b5b      	ldr	r3, [pc, #364]	@ (80102b4 <Send+0x1b0>)
 8010148:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 801014c:	2b00      	cmp	r3, #0
 801014e:	d102      	bne.n	8010156 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8010150:	4b58      	ldr	r3, [pc, #352]	@ (80102b4 <Send+0x1b0>)
 8010152:	2200      	movs	r2, #0
 8010154:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    fCtrl.Value = 0;
 8010156:	2300      	movs	r3, #0
 8010158:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 801015c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010160:	f36f 0303 	bfc	r3, #0, #4
 8010164:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8010168:	4b52      	ldr	r3, [pc, #328]	@ (80102b4 <Send+0x1b0>)
 801016a:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 801016e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010172:	f362 13c7 	bfi	r3, r2, #7, #1
 8010176:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801017a:	4b4e      	ldr	r3, [pc, #312]	@ (80102b4 <Send+0x1b0>)
 801017c:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8010180:	2b01      	cmp	r3, #1
 8010182:	d106      	bne.n	8010192 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8010184:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010188:	f043 0310 	orr.w	r3, r3, #16
 801018c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8010190:	e005      	b.n	801019e <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8010192:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010196:	f36f 1304 	bfc	r3, #4, #1
 801019a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 801019e:	4b45      	ldr	r3, [pc, #276]	@ (80102b4 <Send+0x1b0>)
 80101a0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d005      	beq.n	80101b4 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 80101a8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80101ac:	f043 0320 	orr.w	r3, r3, #32
 80101b0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 80101b4:	2301      	movs	r3, #1
 80101b6:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 80101b8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80101bc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80101c0:	b2db      	uxtb	r3, r3
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	bf14      	ite	ne
 80101c6:	2301      	movne	r3, #1
 80101c8:	2300      	moveq	r3, #0
 80101ca:	b2db      	uxtb	r3, r3
 80101cc:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80101ce:	4b39      	ldr	r3, [pc, #228]	@ (80102b4 <Send+0x1b0>)
 80101d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101d2:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 80101d4:	4b37      	ldr	r3, [pc, #220]	@ (80102b4 <Send+0x1b0>)
 80101d6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 80101da:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 80101dc:	4b35      	ldr	r3, [pc, #212]	@ (80102b4 <Send+0x1b0>)
 80101de:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 80101e2:	847b      	strh	r3, [r7, #34]	@ 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80101e4:	4b33      	ldr	r3, [pc, #204]	@ (80102b4 <Send+0x1b0>)
 80101e6:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80101ea:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80101ee:	4b31      	ldr	r3, [pc, #196]	@ (80102b4 <Send+0x1b0>)
 80101f0:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 80101f4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80101f8:	4b2e      	ldr	r3, [pc, #184]	@ (80102b4 <Send+0x1b0>)
 80101fa:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80101fe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8010202:	4b2c      	ldr	r3, [pc, #176]	@ (80102b4 <Send+0x1b0>)
 8010204:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010208:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 801020c:	4b29      	ldr	r3, [pc, #164]	@ (80102b4 <Send+0x1b0>)
 801020e:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8010212:	617b      	str	r3, [r7, #20]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8010214:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010218:	f107 0014 	add.w	r0, r7, #20
 801021c:	4a26      	ldr	r2, [pc, #152]	@ (80102b8 <Send+0x1b4>)
 801021e:	4927      	ldr	r1, [pc, #156]	@ (80102bc <Send+0x1b8>)
 8010220:	f002 fd0a 	bl	8012c38 <LoRaMacAdrCalcNext>
 8010224:	4603      	mov	r3, r0
 8010226:	461a      	mov	r2, r3
 8010228:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801022c:	f362 1386 	bfi	r3, r2, #6, #1
 8010230:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8010234:	7afa      	ldrb	r2, [r7, #11]
 8010236:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 801023a:	893b      	ldrh	r3, [r7, #8]
 801023c:	9300      	str	r3, [sp, #0]
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	68f8      	ldr	r0, [r7, #12]
 8010242:	f000 fc5d 	bl	8010b00 <PrepareFrame>
 8010246:	4603      	mov	r3, r0
 8010248:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 801024c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010250:	2b00      	cmp	r3, #0
 8010252:	d003      	beq.n	801025c <Send+0x158>
 8010254:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010258:	2b0a      	cmp	r3, #10
 801025a:	d107      	bne.n	801026c <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 801025c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8010260:	4618      	mov	r0, r3
 8010262:	f000 f961 	bl	8010528 <ScheduleTx>
 8010266:	4603      	mov	r3, r0
 8010268:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 801026c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010270:	2b00      	cmp	r3, #0
 8010272:	d00a      	beq.n	801028a <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8010274:	4a0f      	ldr	r2, [pc, #60]	@ (80102b4 <Send+0x1b0>)
 8010276:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801027a:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 801027e:	4a0d      	ldr	r2, [pc, #52]	@ (80102b4 <Send+0x1b0>)
 8010280:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8010284:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
 8010288:	e00d      	b.n	80102a6 <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 801028a:	4b0a      	ldr	r3, [pc, #40]	@ (80102b4 <Send+0x1b0>)
 801028c:	2200      	movs	r2, #0
 801028e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8010292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010294:	4a07      	ldr	r2, [pc, #28]	@ (80102b4 <Send+0x1b0>)
 8010296:	6293      	str	r3, [r2, #40]	@ 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8010298:	f002 ff9a 	bl	80131d0 <LoRaMacCommandsRemoveNoneStickyCmds>
 801029c:	4603      	mov	r3, r0
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d001      	beq.n	80102a6 <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80102a2:	2313      	movs	r3, #19
 80102a4:	e001      	b.n	80102aa <Send+0x1a6>
        }
    }
    return status;
 80102a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80102aa:	4618      	mov	r0, r3
 80102ac:	3730      	adds	r7, #48	@ 0x30
 80102ae:	46bd      	mov	sp, r7
 80102b0:	bd80      	pop	{r7, pc}
 80102b2:	bf00      	nop
 80102b4:	20000c64 	.word	0x20000c64
 80102b8:	20000c9c 	.word	0x20000c9c
 80102bc:	20000c9d 	.word	0x20000c9d

080102c0 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b084      	sub	sp, #16
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	4603      	mov	r3, r0
 80102c8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80102ca:	2300      	movs	r3, #0
 80102cc:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 80102ce:	2300      	movs	r3, #0
 80102d0:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 80102d2:	2301      	movs	r3, #1
 80102d4:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 80102d6:	79fb      	ldrb	r3, [r7, #7]
 80102d8:	2bff      	cmp	r3, #255	@ 0xff
 80102da:	d11f      	bne.n	801031c <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 80102dc:	2000      	movs	r0, #0
 80102de:	f7ff f931 	bl	800f544 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 80102e2:	4b15      	ldr	r3, [pc, #84]	@ (8010338 <SendReJoinReq+0x78>)
 80102e4:	2200      	movs	r2, #0
 80102e6:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 80102ea:	4b13      	ldr	r3, [pc, #76]	@ (8010338 <SendReJoinReq+0x78>)
 80102ec:	4a13      	ldr	r2, [pc, #76]	@ (801033c <SendReJoinReq+0x7c>)
 80102ee:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80102f2:	4b11      	ldr	r3, [pc, #68]	@ (8010338 <SendReJoinReq+0x78>)
 80102f4:	22ff      	movs	r2, #255	@ 0xff
 80102f6:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 80102fa:	7b3b      	ldrb	r3, [r7, #12]
 80102fc:	f36f 1347 	bfc	r3, #5, #3
 8010300:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8010302:	7b3a      	ldrb	r2, [r7, #12]
 8010304:	4b0c      	ldr	r3, [pc, #48]	@ (8010338 <SendReJoinReq+0x78>)
 8010306:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 801030a:	480d      	ldr	r0, [pc, #52]	@ (8010340 <SendReJoinReq+0x80>)
 801030c:	f7fc f9fc 	bl	800c708 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 8010310:	480c      	ldr	r0, [pc, #48]	@ (8010344 <SendReJoinReq+0x84>)
 8010312:	f7fc f9c9 	bl	800c6a8 <SecureElementGetDevEui>

            allowDelayedTx = false;
 8010316:	2300      	movs	r3, #0
 8010318:	73fb      	strb	r3, [r7, #15]

            break;
 801031a:	e002      	b.n	8010322 <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 801031c:	2302      	movs	r3, #2
 801031e:	73bb      	strb	r3, [r7, #14]
            break;
 8010320:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8010322:	7bfb      	ldrb	r3, [r7, #15]
 8010324:	4618      	mov	r0, r3
 8010326:	f000 f8ff 	bl	8010528 <ScheduleTx>
 801032a:	4603      	mov	r3, r0
 801032c:	73bb      	strb	r3, [r7, #14]
    return status;
 801032e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010330:	4618      	mov	r0, r3
 8010332:	3710      	adds	r7, #16
 8010334:	46bd      	mov	sp, r7
 8010336:	bd80      	pop	{r7, pc}
 8010338:	2000075c 	.word	0x2000075c
 801033c:	2000075e 	.word	0x2000075e
 8010340:	2000086a 	.word	0x2000086a
 8010344:	20000872 	.word	0x20000872

08010348 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8010348:	b580      	push	{r7, lr}
 801034a:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 801034c:	f002 fce3 	bl	8012d16 <LoRaMacClassBIsBeaconExpected>
 8010350:	4603      	mov	r3, r0
 8010352:	2b00      	cmp	r3, #0
 8010354:	d001      	beq.n	801035a <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8010356:	230e      	movs	r3, #14
 8010358:	e013      	b.n	8010382 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801035a:	4b0b      	ldr	r3, [pc, #44]	@ (8010388 <CheckForClassBCollision+0x40>)
 801035c:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8010360:	2b01      	cmp	r3, #1
 8010362:	d10d      	bne.n	8010380 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8010364:	f002 fcde 	bl	8012d24 <LoRaMacClassBIsPingExpected>
 8010368:	4603      	mov	r3, r0
 801036a:	2b00      	cmp	r3, #0
 801036c:	d001      	beq.n	8010372 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 801036e:	230f      	movs	r3, #15
 8010370:	e007      	b.n	8010382 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8010372:	f002 fcde 	bl	8012d32 <LoRaMacClassBIsMulticastExpected>
 8010376:	4603      	mov	r3, r0
 8010378:	2b00      	cmp	r3, #0
 801037a:	d001      	beq.n	8010380 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 801037c:	230f      	movs	r3, #15
 801037e:	e000      	b.n	8010382 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8010380:	2300      	movs	r3, #0
}
 8010382:	4618      	mov	r0, r3
 8010384:	bd80      	pop	{r7, pc}
 8010386:	bf00      	nop
 8010388:	20000c64 	.word	0x20000c64

0801038c <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 801038c:	b590      	push	{r4, r7, lr}
 801038e:	b083      	sub	sp, #12
 8010390:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010392:	4b2d      	ldr	r3, [pc, #180]	@ (8010448 <ComputeRxWindowParameters+0xbc>)
 8010394:	f893 4048 	ldrb.w	r4, [r3, #72]	@ 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8010398:	4b2b      	ldr	r3, [pc, #172]	@ (8010448 <ComputeRxWindowParameters+0xbc>)
 801039a:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 801039e:	4b2a      	ldr	r3, [pc, #168]	@ (8010448 <ComputeRxWindowParameters+0xbc>)
 80103a0:	f893 107d 	ldrb.w	r1, [r3, #125]	@ 0x7d
 80103a4:	4b28      	ldr	r3, [pc, #160]	@ (8010448 <ComputeRxWindowParameters+0xbc>)
 80103a6:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 80103aa:	4b27      	ldr	r3, [pc, #156]	@ (8010448 <ComputeRxWindowParameters+0xbc>)
 80103ac:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80103b0:	b25b      	sxtb	r3, r3
 80103b2:	f004 fe39 	bl	8015028 <RegionApplyDrOffset>
 80103b6:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80103b8:	b259      	sxtb	r1, r3
 80103ba:	4b23      	ldr	r3, [pc, #140]	@ (8010448 <ComputeRxWindowParameters+0xbc>)
 80103bc:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 80103c0:	4b21      	ldr	r3, [pc, #132]	@ (8010448 <ComputeRxWindowParameters+0xbc>)
 80103c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80103c4:	4821      	ldr	r0, [pc, #132]	@ (801044c <ComputeRxWindowParameters+0xc0>)
 80103c6:	9000      	str	r0, [sp, #0]
 80103c8:	4620      	mov	r0, r4
 80103ca:	f004 fcd8 	bl	8014d7e <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80103ce:	4b1e      	ldr	r3, [pc, #120]	@ (8010448 <ComputeRxWindowParameters+0xbc>)
 80103d0:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 80103d4:	4b1c      	ldr	r3, [pc, #112]	@ (8010448 <ComputeRxWindowParameters+0xbc>)
 80103d6:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80103da:	b259      	sxtb	r1, r3
 80103dc:	4b1a      	ldr	r3, [pc, #104]	@ (8010448 <ComputeRxWindowParameters+0xbc>)
 80103de:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 80103e2:	4b19      	ldr	r3, [pc, #100]	@ (8010448 <ComputeRxWindowParameters+0xbc>)
 80103e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80103e6:	4c1a      	ldr	r4, [pc, #104]	@ (8010450 <ComputeRxWindowParameters+0xc4>)
 80103e8:	9400      	str	r4, [sp, #0]
 80103ea:	f004 fcc8 	bl	8014d7e <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80103ee:	4b16      	ldr	r3, [pc, #88]	@ (8010448 <ComputeRxWindowParameters+0xbc>)
 80103f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80103f2:	4a18      	ldr	r2, [pc, #96]	@ (8010454 <ComputeRxWindowParameters+0xc8>)
 80103f4:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 80103f8:	4413      	add	r3, r2
 80103fa:	4a16      	ldr	r2, [pc, #88]	@ (8010454 <ComputeRxWindowParameters+0xc8>)
 80103fc:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8010400:	4b11      	ldr	r3, [pc, #68]	@ (8010448 <ComputeRxWindowParameters+0xbc>)
 8010402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010404:	4a13      	ldr	r2, [pc, #76]	@ (8010454 <ComputeRxWindowParameters+0xc8>)
 8010406:	f8d2 23d8 	ldr.w	r2, [r2, #984]	@ 0x3d8
 801040a:	4413      	add	r3, r2
 801040c:	4a11      	ldr	r2, [pc, #68]	@ (8010454 <ComputeRxWindowParameters+0xc8>)
 801040e:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 8010412:	4b10      	ldr	r3, [pc, #64]	@ (8010454 <ComputeRxWindowParameters+0xc8>)
 8010414:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8010418:	2b04      	cmp	r3, #4
 801041a:	d011      	beq.n	8010440 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 801041c:	4b0a      	ldr	r3, [pc, #40]	@ (8010448 <ComputeRxWindowParameters+0xbc>)
 801041e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010420:	4a0c      	ldr	r2, [pc, #48]	@ (8010454 <ComputeRxWindowParameters+0xc8>)
 8010422:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 8010426:	4413      	add	r3, r2
 8010428:	4a0a      	ldr	r2, [pc, #40]	@ (8010454 <ComputeRxWindowParameters+0xc8>)
 801042a:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 801042e:	4b06      	ldr	r3, [pc, #24]	@ (8010448 <ComputeRxWindowParameters+0xbc>)
 8010430:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010432:	4a08      	ldr	r2, [pc, #32]	@ (8010454 <ComputeRxWindowParameters+0xc8>)
 8010434:	f8d2 23d8 	ldr.w	r2, [r2, #984]	@ 0x3d8
 8010438:	4413      	add	r3, r2
 801043a:	4a06      	ldr	r2, [pc, #24]	@ (8010454 <ComputeRxWindowParameters+0xc8>)
 801043c:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
    }
}
 8010440:	bf00      	nop
 8010442:	3704      	adds	r7, #4
 8010444:	46bd      	mov	sp, r7
 8010446:	bd90      	pop	{r4, r7, pc}
 8010448:	20000c64 	.word	0x20000c64
 801044c:	20000b14 	.word	0x20000b14
 8010450:	20000b28 	.word	0x20000b28
 8010454:	2000075c 	.word	0x2000075c

08010458 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8010458:	b580      	push	{r7, lr}
 801045a:	b082      	sub	sp, #8
 801045c:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 801045e:	2300      	movs	r3, #0
 8010460:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8010462:	4b13      	ldr	r3, [pc, #76]	@ (80104b0 <VerifyTxFrame+0x58>)
 8010464:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 8010468:	2b00      	cmp	r3, #0
 801046a:	d01b      	beq.n	80104a4 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801046c:	1d3b      	adds	r3, r7, #4
 801046e:	4618      	mov	r0, r3
 8010470:	f002 fefe 	bl	8013270 <LoRaMacCommandsGetSizeSerializedCmds>
 8010474:	4603      	mov	r3, r0
 8010476:	2b00      	cmp	r3, #0
 8010478:	d001      	beq.n	801047e <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801047a:	2313      	movs	r3, #19
 801047c:	e013      	b.n	80104a6 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 801047e:	4b0d      	ldr	r3, [pc, #52]	@ (80104b4 <VerifyTxFrame+0x5c>)
 8010480:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010484:	4a0a      	ldr	r2, [pc, #40]	@ (80104b0 <VerifyTxFrame+0x58>)
 8010486:	f992 1039 	ldrsb.w	r1, [r2, #57]	@ 0x39
 801048a:	687a      	ldr	r2, [r7, #4]
 801048c:	b2d2      	uxtb	r2, r2
 801048e:	4618      	mov	r0, r3
 8010490:	f7ff f968 	bl	800f764 <ValidatePayloadLength>
 8010494:	4603      	mov	r3, r0
 8010496:	f083 0301 	eor.w	r3, r3, #1
 801049a:	b2db      	uxtb	r3, r3
 801049c:	2b00      	cmp	r3, #0
 801049e:	d001      	beq.n	80104a4 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 80104a0:	2308      	movs	r3, #8
 80104a2:	e000      	b.n	80104a6 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 80104a4:	2300      	movs	r3, #0
}
 80104a6:	4618      	mov	r0, r3
 80104a8:	3708      	adds	r7, #8
 80104aa:	46bd      	mov	sp, r7
 80104ac:	bd80      	pop	{r7, pc}
 80104ae:	bf00      	nop
 80104b0:	20000c64 	.word	0x20000c64
 80104b4:	2000075c 	.word	0x2000075c

080104b8 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b082      	sub	sp, #8
 80104bc:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 80104be:	4b18      	ldr	r3, [pc, #96]	@ (8010520 <SerializeTxFrame+0x68>)
 80104c0:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d002      	beq.n	80104ce <SerializeTxFrame+0x16>
 80104c8:	2b04      	cmp	r3, #4
 80104ca:	d011      	beq.n	80104f0 <SerializeTxFrame+0x38>
 80104cc:	e021      	b.n	8010512 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80104ce:	4815      	ldr	r0, [pc, #84]	@ (8010524 <SerializeTxFrame+0x6c>)
 80104d0:	f004 fa28 	bl	8014924 <LoRaMacSerializerJoinRequest>
 80104d4:	4603      	mov	r3, r0
 80104d6:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80104d8:	79fb      	ldrb	r3, [r7, #7]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d001      	beq.n	80104e2 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80104de:	2311      	movs	r3, #17
 80104e0:	e01a      	b.n	8010518 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80104e2:	4b0f      	ldr	r3, [pc, #60]	@ (8010520 <SerializeTxFrame+0x68>)
 80104e4:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80104e8:	461a      	mov	r2, r3
 80104ea:	4b0d      	ldr	r3, [pc, #52]	@ (8010520 <SerializeTxFrame+0x68>)
 80104ec:	801a      	strh	r2, [r3, #0]
            break;
 80104ee:	e012      	b.n	8010516 <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 80104f0:	480c      	ldr	r0, [pc, #48]	@ (8010524 <SerializeTxFrame+0x6c>)
 80104f2:	f004 fa99 	bl	8014a28 <LoRaMacSerializerData>
 80104f6:	4603      	mov	r3, r0
 80104f8:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80104fa:	79fb      	ldrb	r3, [r7, #7]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d001      	beq.n	8010504 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010500:	2311      	movs	r3, #17
 8010502:	e009      	b.n	8010518 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8010504:	4b06      	ldr	r3, [pc, #24]	@ (8010520 <SerializeTxFrame+0x68>)
 8010506:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 801050a:	461a      	mov	r2, r3
 801050c:	4b04      	ldr	r3, [pc, #16]	@ (8010520 <SerializeTxFrame+0x68>)
 801050e:	801a      	strh	r2, [r3, #0]
            break;
 8010510:	e001      	b.n	8010516 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8010512:	2303      	movs	r3, #3
 8010514:	e000      	b.n	8010518 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8010516:	2300      	movs	r3, #0
}
 8010518:	4618      	mov	r0, r3
 801051a:	3708      	adds	r7, #8
 801051c:	46bd      	mov	sp, r7
 801051e:	bd80      	pop	{r7, pc}
 8010520:	2000075c 	.word	0x2000075c
 8010524:	20000864 	.word	0x20000864

08010528 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8010528:	b580      	push	{r7, lr}
 801052a:	b090      	sub	sp, #64	@ 0x40
 801052c:	af02      	add	r7, sp, #8
 801052e:	4603      	mov	r3, r0
 8010530:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010532:	2303      	movs	r3, #3
 8010534:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8010538:	f7ff ff06 	bl	8010348 <CheckForClassBCollision>
 801053c:	4603      	mov	r3, r0
 801053e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8010542:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010546:	2b00      	cmp	r3, #0
 8010548:	d002      	beq.n	8010550 <ScheduleTx+0x28>
    {
        return status;
 801054a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801054e:	e092      	b.n	8010676 <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 8010550:	f000 f8fe 	bl	8010750 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8010554:	f7ff ffb0 	bl	80104b8 <SerializeTxFrame>
 8010558:	4603      	mov	r3, r0
 801055a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 801055e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010562:	2b00      	cmp	r3, #0
 8010564:	d002      	beq.n	801056c <ScheduleTx+0x44>
    {
        return status;
 8010566:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801056a:	e084      	b.n	8010676 <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 801056c:	4b44      	ldr	r3, [pc, #272]	@ (8010680 <ScheduleTx+0x158>)
 801056e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010570:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010572:	4b43      	ldr	r3, [pc, #268]	@ (8010680 <ScheduleTx+0x158>)
 8010574:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010578:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 801057a:	4b41      	ldr	r3, [pc, #260]	@ (8010680 <ScheduleTx+0x158>)
 801057c:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8010580:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8010582:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010586:	4618      	mov	r0, r3
 8010588:	f00b f914 	bl	801b7b4 <SysTimeGetMcuTime>
 801058c:	4638      	mov	r0, r7
 801058e:	4b3c      	ldr	r3, [pc, #240]	@ (8010680 <ScheduleTx+0x158>)
 8010590:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
 8010594:	9200      	str	r2, [sp, #0]
 8010596:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 801059a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801059e:	ca06      	ldmia	r2, {r1, r2}
 80105a0:	f00b f869 	bl	801b676 <SysTimeSub>
 80105a4:	f107 0320 	add.w	r3, r7, #32
 80105a8:	463a      	mov	r2, r7
 80105aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80105ae:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 80105b2:	4b33      	ldr	r3, [pc, #204]	@ (8010680 <ScheduleTx+0x158>)
 80105b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105b6:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 80105b8:	2300      	movs	r3, #0
 80105ba:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    nextChan.Joined = true;
 80105be:	2301      	movs	r3, #1
 80105c0:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 80105c2:	4b30      	ldr	r3, [pc, #192]	@ (8010684 <ScheduleTx+0x15c>)
 80105c4:	881b      	ldrh	r3, [r3, #0]
 80105c6:	857b      	strh	r3, [r7, #42]	@ 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80105c8:	4b2d      	ldr	r3, [pc, #180]	@ (8010680 <ScheduleTx+0x158>)
 80105ca:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d104      	bne.n	80105dc <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 80105d2:	2301      	movs	r3, #1
 80105d4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        nextChan.Joined = false;
 80105d8:	2300      	movs	r3, #0
 80105da:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 80105dc:	4b28      	ldr	r3, [pc, #160]	@ (8010680 <ScheduleTx+0x158>)
 80105de:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 80105e2:	f107 0114 	add.w	r1, r7, #20
 80105e6:	4b28      	ldr	r3, [pc, #160]	@ (8010688 <ScheduleTx+0x160>)
 80105e8:	9300      	str	r3, [sp, #0]
 80105ea:	4b28      	ldr	r3, [pc, #160]	@ (801068c <ScheduleTx+0x164>)
 80105ec:	4a28      	ldr	r2, [pc, #160]	@ (8010690 <ScheduleTx+0x168>)
 80105ee:	f004 fce1 	bl	8014fb4 <RegionNextChannel>
 80105f2:	4603      	mov	r3, r0
 80105f4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( status != LORAMAC_STATUS_OK )
 80105f8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d025      	beq.n	801064c <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 8010600:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010604:	2b0b      	cmp	r3, #11
 8010606:	d11e      	bne.n	8010646 <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 8010608:	4b1e      	ldr	r3, [pc, #120]	@ (8010684 <ScheduleTx+0x15c>)
 801060a:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 801060e:	2b00      	cmp	r3, #0
 8010610:	d01c      	beq.n	801064c <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 8010612:	7bfb      	ldrb	r3, [r7, #15]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d013      	beq.n	8010640 <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8010618:	4b1a      	ldr	r3, [pc, #104]	@ (8010684 <ScheduleTx+0x15c>)
 801061a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801061e:	f043 0320 	orr.w	r3, r3, #32
 8010622:	4a18      	ldr	r2, [pc, #96]	@ (8010684 <ScheduleTx+0x15c>)
 8010624:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8010628:	4b16      	ldr	r3, [pc, #88]	@ (8010684 <ScheduleTx+0x15c>)
 801062a:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 801062e:	4619      	mov	r1, r3
 8010630:	4818      	ldr	r0, [pc, #96]	@ (8010694 <ScheduleTx+0x16c>)
 8010632:	f00b fe5d 	bl	801c2f0 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 8010636:	4817      	ldr	r0, [pc, #92]	@ (8010694 <ScheduleTx+0x16c>)
 8010638:	f00b fd7c 	bl	801c134 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 801063c:	2300      	movs	r3, #0
 801063e:	e01a      	b.n	8010676 <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 8010640:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010644:	e017      	b.n	8010676 <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8010646:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801064a:	e014      	b.n	8010676 <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 801064c:	f7ff fe9e 	bl	801038c <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8010650:	f7ff ff02 	bl	8010458 <VerifyTxFrame>
 8010654:	4603      	mov	r3, r0
 8010656:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 801065a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801065e:	2b00      	cmp	r3, #0
 8010660:	d002      	beq.n	8010668 <ScheduleTx+0x140>
    {
        return status;
 8010662:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010666:	e006      	b.n	8010676 <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8010668:	4b06      	ldr	r3, [pc, #24]	@ (8010684 <ScheduleTx+0x15c>)
 801066a:	f893 3411 	ldrb.w	r3, [r3, #1041]	@ 0x411
 801066e:	4618      	mov	r0, r3
 8010670:	f000 fb60 	bl	8010d34 <SendFrameOnChannel>
 8010674:	4603      	mov	r3, r0
}
 8010676:	4618      	mov	r0, r3
 8010678:	3738      	adds	r7, #56	@ 0x38
 801067a:	46bd      	mov	sp, r7
 801067c:	bd80      	pop	{r7, pc}
 801067e:	bf00      	nop
 8010680:	20000c64 	.word	0x20000c64
 8010684:	2000075c 	.word	0x2000075c
 8010688:	20000c94 	.word	0x20000c94
 801068c:	20000be0 	.word	0x20000be0
 8010690:	20000b6d 	.word	0x20000b6d
 8010694:	20000ac4 	.word	0x20000ac4

08010698 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8010698:	b580      	push	{r7, lr}
 801069a:	b084      	sub	sp, #16
 801069c:	af00      	add	r7, sp, #0
 801069e:	4603      	mov	r3, r0
 80106a0:	460a      	mov	r2, r1
 80106a2:	71fb      	strb	r3, [r7, #7]
 80106a4:	4613      	mov	r3, r2
 80106a6:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 80106a8:	2313      	movs	r3, #19
 80106aa:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 80106ac:	2300      	movs	r3, #0
 80106ae:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 80106b0:	4b25      	ldr	r3, [pc, #148]	@ (8010748 <SecureFrame+0xb0>)
 80106b2:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d002      	beq.n	80106c0 <SecureFrame+0x28>
 80106ba:	2b04      	cmp	r3, #4
 80106bc:	d011      	beq.n	80106e2 <SecureFrame+0x4a>
 80106be:	e03b      	b.n	8010738 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80106c0:	4822      	ldr	r0, [pc, #136]	@ (801074c <SecureFrame+0xb4>)
 80106c2:	f003 fcf9 	bl	80140b8 <LoRaMacCryptoPrepareJoinRequest>
 80106c6:	4603      	mov	r3, r0
 80106c8:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80106ca:	7bfb      	ldrb	r3, [r7, #15]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d001      	beq.n	80106d4 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80106d0:	2311      	movs	r3, #17
 80106d2:	e034      	b.n	801073e <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80106d4:	4b1c      	ldr	r3, [pc, #112]	@ (8010748 <SecureFrame+0xb0>)
 80106d6:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80106da:	461a      	mov	r2, r3
 80106dc:	4b1a      	ldr	r3, [pc, #104]	@ (8010748 <SecureFrame+0xb0>)
 80106de:	801a      	strh	r2, [r3, #0]
            break;
 80106e0:	e02c      	b.n	801073c <SecureFrame+0xa4>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80106e2:	f107 0308 	add.w	r3, r7, #8
 80106e6:	4618      	mov	r0, r3
 80106e8:	f003 fbf6 	bl	8013ed8 <LoRaMacCryptoGetFCntUp>
 80106ec:	4603      	mov	r3, r0
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d001      	beq.n	80106f6 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80106f2:	2312      	movs	r3, #18
 80106f4:	e023      	b.n	801073e <SecureFrame+0xa6>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 80106f6:	4b14      	ldr	r3, [pc, #80]	@ (8010748 <SecureFrame+0xb0>)
 80106f8:	f893 340c 	ldrb.w	r3, [r3, #1036]	@ 0x40c
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d104      	bne.n	801070a <SecureFrame+0x72>
 8010700:	4b11      	ldr	r3, [pc, #68]	@ (8010748 <SecureFrame+0xb0>)
 8010702:	f893 340e 	ldrb.w	r3, [r3, #1038]	@ 0x40e
 8010706:	2b01      	cmp	r3, #1
 8010708:	d902      	bls.n	8010710 <SecureFrame+0x78>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 801070a:	68bb      	ldr	r3, [r7, #8]
 801070c:	3b01      	subs	r3, #1
 801070e:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8010710:	68b8      	ldr	r0, [r7, #8]
 8010712:	79ba      	ldrb	r2, [r7, #6]
 8010714:	79f9      	ldrb	r1, [r7, #7]
 8010716:	4b0d      	ldr	r3, [pc, #52]	@ (801074c <SecureFrame+0xb4>)
 8010718:	f003 fdfc 	bl	8014314 <LoRaMacCryptoSecureMessage>
 801071c:	4603      	mov	r3, r0
 801071e:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8010720:	7bfb      	ldrb	r3, [r7, #15]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d001      	beq.n	801072a <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010726:	2311      	movs	r3, #17
 8010728:	e009      	b.n	801073e <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 801072a:	4b07      	ldr	r3, [pc, #28]	@ (8010748 <SecureFrame+0xb0>)
 801072c:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8010730:	461a      	mov	r2, r3
 8010732:	4b05      	ldr	r3, [pc, #20]	@ (8010748 <SecureFrame+0xb0>)
 8010734:	801a      	strh	r2, [r3, #0]
            break;
 8010736:	e001      	b.n	801073c <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8010738:	2303      	movs	r3, #3
 801073a:	e000      	b.n	801073e <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 801073c:	2300      	movs	r3, #0
}
 801073e:	4618      	mov	r0, r3
 8010740:	3710      	adds	r7, #16
 8010742:	46bd      	mov	sp, r7
 8010744:	bd80      	pop	{r7, pc}
 8010746:	bf00      	nop
 8010748:	2000075c 	.word	0x2000075c
 801074c:	20000864 	.word	0x20000864

08010750 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8010750:	b480      	push	{r7}
 8010752:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8010754:	4b09      	ldr	r3, [pc, #36]	@ (801077c <CalculateBackOff+0x2c>)
 8010756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010758:	2b00      	cmp	r3, #0
 801075a:	d10a      	bne.n	8010772 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 801075c:	4b07      	ldr	r3, [pc, #28]	@ (801077c <CalculateBackOff+0x2c>)
 801075e:	f8b3 311e 	ldrh.w	r3, [r3, #286]	@ 0x11e
 8010762:	3b01      	subs	r3, #1
 8010764:	4a06      	ldr	r2, [pc, #24]	@ (8010780 <CalculateBackOff+0x30>)
 8010766:	f8d2 2414 	ldr.w	r2, [r2, #1044]	@ 0x414
 801076a:	fb02 f303 	mul.w	r3, r2, r3
 801076e:	4a03      	ldr	r2, [pc, #12]	@ (801077c <CalculateBackOff+0x2c>)
 8010770:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 8010772:	bf00      	nop
 8010774:	46bd      	mov	sp, r7
 8010776:	bc80      	pop	{r7}
 8010778:	4770      	bx	lr
 801077a:	bf00      	nop
 801077c:	20000c64 	.word	0x20000c64
 8010780:	2000075c 	.word	0x2000075c

08010784 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b082      	sub	sp, #8
 8010788:	af00      	add	r7, sp, #0
 801078a:	4603      	mov	r3, r0
 801078c:	7139      	strb	r1, [r7, #4]
 801078e:	71fb      	strb	r3, [r7, #7]
 8010790:	4613      	mov	r3, r2
 8010792:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8010794:	79fb      	ldrb	r3, [r7, #7]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d002      	beq.n	80107a0 <RemoveMacCommands+0x1c>
 801079a:	79fb      	ldrb	r3, [r7, #7]
 801079c:	2b01      	cmp	r3, #1
 801079e:	d10d      	bne.n	80107bc <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 80107a0:	79bb      	ldrb	r3, [r7, #6]
 80107a2:	2b01      	cmp	r3, #1
 80107a4:	d108      	bne.n	80107b8 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 80107a6:	793b      	ldrb	r3, [r7, #4]
 80107a8:	f003 0320 	and.w	r3, r3, #32
 80107ac:	b2db      	uxtb	r3, r3
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d004      	beq.n	80107bc <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 80107b2:	f002 fd31 	bl	8013218 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 80107b6:	e001      	b.n	80107bc <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 80107b8:	f002 fd2e 	bl	8013218 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 80107bc:	bf00      	nop
 80107be:	3708      	adds	r7, #8
 80107c0:	46bd      	mov	sp, r7
 80107c2:	bd80      	pop	{r7, pc}

080107c4 <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 80107c4:	b5b0      	push	{r4, r5, r7, lr}
 80107c6:	b090      	sub	sp, #64	@ 0x40
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	4603      	mov	r3, r0
 80107cc:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 80107ce:	79fb      	ldrb	r3, [r7, #7]
 80107d0:	f083 0301 	eor.w	r3, r3, #1
 80107d4:	b2db      	uxtb	r3, r3
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d003      	beq.n	80107e2 <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 80107da:	4b80      	ldr	r3, [pc, #512]	@ (80109dc <ResetMacParameters+0x218>)
 80107dc:	2200      	movs	r2, #0
 80107de:	f883 212c 	strb.w	r2, [r3, #300]	@ 0x12c
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 80107e2:	4b7e      	ldr	r3, [pc, #504]	@ (80109dc <ResetMacParameters+0x218>)
 80107e4:	2200      	movs	r2, #0
 80107e6:	629a      	str	r2, [r3, #40]	@ 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 80107e8:	4b7d      	ldr	r3, [pc, #500]	@ (80109e0 <ResetMacParameters+0x21c>)
 80107ea:	2200      	movs	r2, #0
 80107ec:	f883 240c 	strb.w	r2, [r3, #1036]	@ 0x40c
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
 80107f0:	4b7b      	ldr	r3, [pc, #492]	@ (80109e0 <ResetMacParameters+0x21c>)
 80107f2:	2201      	movs	r2, #1
 80107f4:	f883 240d 	strb.w	r2, [r3, #1037]	@ 0x40d
    MacCtx.AckTimeoutRetriesCounter = 1;
 80107f8:	4b79      	ldr	r3, [pc, #484]	@ (80109e0 <ResetMacParameters+0x21c>)
 80107fa:	2201      	movs	r2, #1
 80107fc:	f883 240e 	strb.w	r2, [r3, #1038]	@ 0x40e
    MacCtx.AckTimeoutRetry = false;
 8010800:	4b77      	ldr	r3, [pc, #476]	@ (80109e0 <ResetMacParameters+0x21c>)
 8010802:	2200      	movs	r2, #0
 8010804:	f883 240f 	strb.w	r2, [r3, #1039]	@ 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8010808:	4b74      	ldr	r3, [pc, #464]	@ (80109dc <ResetMacParameters+0x218>)
 801080a:	2200      	movs	r2, #0
 801080c:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8010810:	4b72      	ldr	r3, [pc, #456]	@ (80109dc <ResetMacParameters+0x218>)
 8010812:	2201      	movs	r2, #1
 8010814:	f8a3 211e 	strh.w	r2, [r3, #286]	@ 0x11e

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8010818:	4b70      	ldr	r3, [pc, #448]	@ (80109dc <ResetMacParameters+0x218>)
 801081a:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 801081e:	4b6f      	ldr	r3, [pc, #444]	@ (80109dc <ResetMacParameters+0x218>)
 8010820:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8010824:	4b6d      	ldr	r3, [pc, #436]	@ (80109dc <ResetMacParameters+0x218>)
 8010826:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 801082a:	4b6c      	ldr	r3, [pc, #432]	@ (80109dc <ResetMacParameters+0x218>)
 801082c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8010830:	4b6a      	ldr	r3, [pc, #424]	@ (80109dc <ResetMacParameters+0x218>)
 8010832:	f893 20b1 	ldrb.w	r2, [r3, #177]	@ 0xb1
 8010836:	4b69      	ldr	r3, [pc, #420]	@ (80109dc <ResetMacParameters+0x218>)
 8010838:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 801083c:	4b67      	ldr	r3, [pc, #412]	@ (80109dc <ResetMacParameters+0x218>)
 801083e:	4a67      	ldr	r2, [pc, #412]	@ (80109dc <ResetMacParameters+0x218>)
 8010840:	336c      	adds	r3, #108	@ 0x6c
 8010842:	32b4      	adds	r2, #180	@ 0xb4
 8010844:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010848:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 801084c:	4b63      	ldr	r3, [pc, #396]	@ (80109dc <ResetMacParameters+0x218>)
 801084e:	4a63      	ldr	r2, [pc, #396]	@ (80109dc <ResetMacParameters+0x218>)
 8010850:	3374      	adds	r3, #116	@ 0x74
 8010852:	32bc      	adds	r2, #188	@ 0xbc
 8010854:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010858:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 801085c:	4b5f      	ldr	r3, [pc, #380]	@ (80109dc <ResetMacParameters+0x218>)
 801085e:	f893 20c4 	ldrb.w	r2, [r3, #196]	@ 0xc4
 8010862:	4b5e      	ldr	r3, [pc, #376]	@ (80109dc <ResetMacParameters+0x218>)
 8010864:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8010868:	4b5c      	ldr	r3, [pc, #368]	@ (80109dc <ResetMacParameters+0x218>)
 801086a:	f893 20c5 	ldrb.w	r2, [r3, #197]	@ 0xc5
 801086e:	4b5b      	ldr	r3, [pc, #364]	@ (80109dc <ResetMacParameters+0x218>)
 8010870:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8010874:	4b59      	ldr	r3, [pc, #356]	@ (80109dc <ResetMacParameters+0x218>)
 8010876:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 801087a:	4a58      	ldr	r2, [pc, #352]	@ (80109dc <ResetMacParameters+0x218>)
 801087c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8010880:	4b56      	ldr	r3, [pc, #344]	@ (80109dc <ResetMacParameters+0x218>)
 8010882:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8010886:	4a55      	ldr	r2, [pc, #340]	@ (80109dc <ResetMacParameters+0x218>)
 8010888:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 801088c:	4b53      	ldr	r3, [pc, #332]	@ (80109dc <ResetMacParameters+0x218>)
 801088e:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 8010892:	4b52      	ldr	r3, [pc, #328]	@ (80109dc <ResetMacParameters+0x218>)
 8010894:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8010898:	4b50      	ldr	r3, [pc, #320]	@ (80109dc <ResetMacParameters+0x218>)
 801089a:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 801089e:	4b4f      	ldr	r3, [pc, #316]	@ (80109dc <ResetMacParameters+0x218>)
 80108a0:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a

    MacCtx.NodeAckRequested = false;
 80108a4:	4b4e      	ldr	r3, [pc, #312]	@ (80109e0 <ResetMacParameters+0x21c>)
 80108a6:	2200      	movs	r2, #0
 80108a8:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    Nvm.MacGroup1.SrvAckRequested = false;
 80108ac:	4b4b      	ldr	r3, [pc, #300]	@ (80109dc <ResetMacParameters+0x218>)
 80108ae:	2200      	movs	r2, #0
 80108b0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
    Nvm.MacGroup2.DownlinkReceived = false;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 80108b4:	4b49      	ldr	r3, [pc, #292]	@ (80109dc <ResetMacParameters+0x218>)
 80108b6:	2200      	movs	r2, #0
 80108b8:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 80108bc:	4b47      	ldr	r3, [pc, #284]	@ (80109dc <ResetMacParameters+0x218>)
 80108be:	2200      	movs	r2, #0
 80108c0:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
    Nvm.MacGroup2.ForceRejoinType = 0;
 80108c4:	4b45      	ldr	r3, [pc, #276]	@ (80109dc <ResetMacParameters+0x218>)
 80108c6:	2200      	movs	r2, #0
 80108c8:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 80108cc:	4b43      	ldr	r3, [pc, #268]	@ (80109dc <ResetMacParameters+0x218>)
 80108ce:	2200      	movs	r2, #0
 80108d0:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 80108d4:	4b41      	ldr	r3, [pc, #260]	@ (80109dc <ResetMacParameters+0x218>)
 80108d6:	2200      	movs	r2, #0
 80108d8:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 80108dc:	4b3f      	ldr	r3, [pc, #252]	@ (80109dc <ResetMacParameters+0x218>)
 80108de:	2200      	movs	r2, #0
 80108e0:	f883 2141 	strb.w	r2, [r3, #321]	@ 0x141
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 80108e4:	4b3d      	ldr	r3, [pc, #244]	@ (80109dc <ResetMacParameters+0x218>)
 80108e6:	2200      	movs	r2, #0
 80108e8:	f883 2142 	strb.w	r2, [r3, #322]	@ 0x142
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 80108ec:	4b3b      	ldr	r3, [pc, #236]	@ (80109dc <ResetMacParameters+0x218>)
 80108ee:	2200      	movs	r2, #0
 80108f0:	f883 2143 	strb.w	r2, [r3, #323]	@ 0x143

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 80108f4:	2301      	movs	r3, #1
 80108f6:	753b      	strb	r3, [r7, #20]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80108f8:	4b3a      	ldr	r3, [pc, #232]	@ (80109e4 <ResetMacParameters+0x220>)
 80108fa:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80108fc:	4b3a      	ldr	r3, [pc, #232]	@ (80109e8 <ResetMacParameters+0x224>)
 80108fe:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010900:	4b36      	ldr	r3, [pc, #216]	@ (80109dc <ResetMacParameters+0x218>)
 8010902:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010906:	f107 020c 	add.w	r2, r7, #12
 801090a:	4611      	mov	r1, r2
 801090c:	4618      	mov	r0, r3
 801090e:	f004 f9cc 	bl	8014caa <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8010912:	4b33      	ldr	r3, [pc, #204]	@ (80109e0 <ResetMacParameters+0x21c>)
 8010914:	2200      	movs	r2, #0
 8010916:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 801091a:	4b31      	ldr	r3, [pc, #196]	@ (80109e0 <ResetMacParameters+0x21c>)
 801091c:	f893 2411 	ldrb.w	r2, [r3, #1041]	@ 0x411
 8010920:	4b2f      	ldr	r3, [pc, #188]	@ (80109e0 <ResetMacParameters+0x21c>)
 8010922:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8010926:	4b2d      	ldr	r3, [pc, #180]	@ (80109dc <ResetMacParameters+0x218>)
 8010928:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801092a:	4a2d      	ldr	r2, [pc, #180]	@ (80109e0 <ResetMacParameters+0x21c>)
 801092c:	f8c2 33d0 	str.w	r3, [r2, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010930:	4b2a      	ldr	r3, [pc, #168]	@ (80109dc <ResetMacParameters+0x218>)
 8010932:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8010936:	4b2a      	ldr	r3, [pc, #168]	@ (80109e0 <ResetMacParameters+0x21c>)
 8010938:	f883 23dc 	strb.w	r2, [r3, #988]	@ 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 801093c:	4b27      	ldr	r3, [pc, #156]	@ (80109dc <ResetMacParameters+0x218>)
 801093e:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8010942:	4b27      	ldr	r3, [pc, #156]	@ (80109e0 <ResetMacParameters+0x21c>)
 8010944:	f883 23dd 	strb.w	r2, [r3, #989]	@ 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8010948:	4b25      	ldr	r3, [pc, #148]	@ (80109e0 <ResetMacParameters+0x21c>)
 801094a:	2200      	movs	r2, #0
 801094c:	f883 23de 	strb.w	r2, [r3, #990]	@ 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8010950:	4b23      	ldr	r3, [pc, #140]	@ (80109e0 <ResetMacParameters+0x21c>)
 8010952:	2201      	movs	r2, #1
 8010954:	f883 23df 	strb.w	r2, [r3, #991]	@ 0x3df
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8010958:	4a21      	ldr	r2, [pc, #132]	@ (80109e0 <ResetMacParameters+0x21c>)
 801095a:	4b21      	ldr	r3, [pc, #132]	@ (80109e0 <ResetMacParameters+0x21c>)
 801095c:	f502 7478 	add.w	r4, r2, #992	@ 0x3e0
 8010960:	f503 7573 	add.w	r5, r3, #972	@ 0x3cc
 8010964:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010966:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010968:	682b      	ldr	r3, [r5, #0]
 801096a:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801096c:	4b1c      	ldr	r3, [pc, #112]	@ (80109e0 <ResetMacParameters+0x21c>)
 801096e:	2201      	movs	r2, #1
 8010970:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010974:	4b1a      	ldr	r3, [pc, #104]	@ (80109e0 <ResetMacParameters+0x21c>)
 8010976:	2202      	movs	r2, #2
 8010978:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 801097c:	2300      	movs	r3, #0
 801097e:	63bb      	str	r3, [r7, #56]	@ 0x38
    classBCallbacks.MacProcessNotify = NULL;
 8010980:	2300      	movs	r3, #0
 8010982:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if( MacCtx.MacCallbacks != NULL )
 8010984:	4b16      	ldr	r3, [pc, #88]	@ (80109e0 <ResetMacParameters+0x21c>)
 8010986:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 801098a:	2b00      	cmp	r3, #0
 801098c:	d009      	beq.n	80109a2 <ResetMacParameters+0x1de>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 801098e:	4b14      	ldr	r3, [pc, #80]	@ (80109e0 <ResetMacParameters+0x21c>)
 8010990:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010994:	685b      	ldr	r3, [r3, #4]
 8010996:	63bb      	str	r3, [r7, #56]	@ 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8010998:	4b11      	ldr	r3, [pc, #68]	@ (80109e0 <ResetMacParameters+0x21c>)
 801099a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 801099e:	695b      	ldr	r3, [r3, #20]
 80109a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 80109a2:	4b12      	ldr	r3, [pc, #72]	@ (80109ec <ResetMacParameters+0x228>)
 80109a4:	61bb      	str	r3, [r7, #24]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 80109a6:	4b12      	ldr	r3, [pc, #72]	@ (80109f0 <ResetMacParameters+0x22c>)
 80109a8:	61fb      	str	r3, [r7, #28]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 80109aa:	4b12      	ldr	r3, [pc, #72]	@ (80109f4 <ResetMacParameters+0x230>)
 80109ac:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 80109ae:	4b12      	ldr	r3, [pc, #72]	@ (80109f8 <ResetMacParameters+0x234>)
 80109b0:	627b      	str	r3, [r7, #36]	@ 0x24
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 80109b2:	4b12      	ldr	r3, [pc, #72]	@ (80109fc <ResetMacParameters+0x238>)
 80109b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 80109b6:	4b12      	ldr	r3, [pc, #72]	@ (8010a00 <ResetMacParameters+0x23c>)
 80109b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 80109ba:	4b12      	ldr	r3, [pc, #72]	@ (8010a04 <ResetMacParameters+0x240>)
 80109bc:	633b      	str	r3, [r7, #48]	@ 0x30
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 80109be:	4b12      	ldr	r3, [pc, #72]	@ (8010a08 <ResetMacParameters+0x244>)
 80109c0:	637b      	str	r3, [r7, #52]	@ 0x34
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 80109c2:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80109c6:	f107 0318 	add.w	r3, r7, #24
 80109ca:	4a10      	ldr	r2, [pc, #64]	@ (8010a0c <ResetMacParameters+0x248>)
 80109cc:	4618      	mov	r0, r3
 80109ce:	f002 f94b 	bl	8012c68 <LoRaMacClassBInit>
}
 80109d2:	bf00      	nop
 80109d4:	3740      	adds	r7, #64	@ 0x40
 80109d6:	46bd      	mov	sp, r7
 80109d8:	bdb0      	pop	{r4, r5, r7, pc}
 80109da:	bf00      	nop
 80109dc:	20000c64 	.word	0x20000c64
 80109e0:	2000075c 	.word	0x2000075c
 80109e4:	20000e84 	.word	0x20000e84
 80109e8:	20000f28 	.word	0x20000f28
 80109ec:	20000bb8 	.word	0x20000bb8
 80109f0:	20000b74 	.word	0x20000b74
 80109f4:	20000ba4 	.word	0x20000ba4
 80109f8:	20000bdd 	.word	0x20000bdd
 80109fc:	20000d48 	.word	0x20000d48
 8010a00:	20000cac 	.word	0x20000cac
 8010a04:	20000cb0 	.word	0x20000cb0
 8010a08:	20000d4c 	.word	0x20000d4c
 8010a0c:	200013c4 	.word	0x200013c4

08010a10 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b082      	sub	sp, #8
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6078      	str	r0, [r7, #4]
 8010a18:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8010a1a:	6878      	ldr	r0, [r7, #4]
 8010a1c:	f00b fbf8 	bl	801c210 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8010a20:	4b11      	ldr	r3, [pc, #68]	@ (8010a68 <RxWindowSetup+0x58>)
 8010a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010a24:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8010a26:	4b11      	ldr	r3, [pc, #68]	@ (8010a6c <RxWindowSetup+0x5c>)
 8010a28:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010a2c:	4a10      	ldr	r2, [pc, #64]	@ (8010a70 <RxWindowSetup+0x60>)
 8010a2e:	6839      	ldr	r1, [r7, #0]
 8010a30:	4618      	mov	r0, r3
 8010a32:	f004 f9c7 	bl	8014dc4 <RegionRxConfig>
 8010a36:	4603      	mov	r3, r0
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d010      	beq.n	8010a5e <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8010a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8010a74 <RxWindowSetup+0x64>)
 8010a3e:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8010a42:	4b0c      	ldr	r3, [pc, #48]	@ (8010a74 <RxWindowSetup+0x64>)
 8010a44:	f883 245e 	strb.w	r2, [r3, #1118]	@ 0x45e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8010a48:	4b07      	ldr	r3, [pc, #28]	@ (8010a68 <RxWindowSetup+0x58>)
 8010a4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a4c:	4a07      	ldr	r2, [pc, #28]	@ (8010a6c <RxWindowSetup+0x5c>)
 8010a4e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8010a50:	4610      	mov	r0, r2
 8010a52:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8010a54:	683b      	ldr	r3, [r7, #0]
 8010a56:	7cda      	ldrb	r2, [r3, #19]
 8010a58:	4b06      	ldr	r3, [pc, #24]	@ (8010a74 <RxWindowSetup+0x64>)
 8010a5a:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480
    }
}
 8010a5e:	bf00      	nop
 8010a60:	3708      	adds	r7, #8
 8010a62:	46bd      	mov	sp, r7
 8010a64:	bd80      	pop	{r7, pc}
 8010a66:	bf00      	nop
 8010a68:	0801da80 	.word	0x0801da80
 8010a6c:	20000c64 	.word	0x20000c64
 8010a70:	20000b78 	.word	0x20000b78
 8010a74:	2000075c 	.word	0x2000075c

08010a78 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8010a78:	b590      	push	{r4, r7, lr}
 8010a7a:	b083      	sub	sp, #12
 8010a7c:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8010aec <OpenContinuousRxCWindow+0x74>)
 8010a80:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8010a84:	4b19      	ldr	r3, [pc, #100]	@ (8010aec <OpenContinuousRxCWindow+0x74>)
 8010a86:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010a8a:	b259      	sxtb	r1, r3
 8010a8c:	4b17      	ldr	r3, [pc, #92]	@ (8010aec <OpenContinuousRxCWindow+0x74>)
 8010a8e:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 8010a92:	4b16      	ldr	r3, [pc, #88]	@ (8010aec <OpenContinuousRxCWindow+0x74>)
 8010a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010a96:	4c16      	ldr	r4, [pc, #88]	@ (8010af0 <OpenContinuousRxCWindow+0x78>)
 8010a98:	9400      	str	r4, [sp, #0]
 8010a9a:	f004 f970 	bl	8014d7e <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010a9e:	4b15      	ldr	r3, [pc, #84]	@ (8010af4 <OpenContinuousRxCWindow+0x7c>)
 8010aa0:	2202      	movs	r2, #2
 8010aa2:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8010aa6:	4b13      	ldr	r3, [pc, #76]	@ (8010af4 <OpenContinuousRxCWindow+0x7c>)
 8010aa8:	2201      	movs	r2, #1
 8010aaa:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8010aae:	4b0f      	ldr	r3, [pc, #60]	@ (8010aec <OpenContinuousRxCWindow+0x74>)
 8010ab0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010ab4:	4a10      	ldr	r2, [pc, #64]	@ (8010af8 <OpenContinuousRxCWindow+0x80>)
 8010ab6:	490e      	ldr	r1, [pc, #56]	@ (8010af0 <OpenContinuousRxCWindow+0x78>)
 8010ab8:	4618      	mov	r0, r3
 8010aba:	f004 f983 	bl	8014dc4 <RegionRxConfig>
 8010abe:	4603      	mov	r3, r0
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d00f      	beq.n	8010ae4 <OpenContinuousRxCWindow+0x6c>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8010ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8010af4 <OpenContinuousRxCWindow+0x7c>)
 8010ac6:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8010aca:	4b0a      	ldr	r3, [pc, #40]	@ (8010af4 <OpenContinuousRxCWindow+0x7c>)
 8010acc:	f883 245e 	strb.w	r2, [r3, #1118]	@ 0x45e
        Radio.Rx( 0 ); // Continuous mode
 8010ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8010afc <OpenContinuousRxCWindow+0x84>)
 8010ad2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010ad4:	2000      	movs	r0, #0
 8010ad6:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8010ad8:	4b06      	ldr	r3, [pc, #24]	@ (8010af4 <OpenContinuousRxCWindow+0x7c>)
 8010ada:	f893 23f3 	ldrb.w	r2, [r3, #1011]	@ 0x3f3
 8010ade:	4b05      	ldr	r3, [pc, #20]	@ (8010af4 <OpenContinuousRxCWindow+0x7c>)
 8010ae0:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480
    }
}
 8010ae4:	bf00      	nop
 8010ae6:	3704      	adds	r7, #4
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	bd90      	pop	{r4, r7, pc}
 8010aec:	20000c64 	.word	0x20000c64
 8010af0:	20000b3c 	.word	0x20000b3c
 8010af4:	2000075c 	.word	0x2000075c
 8010af8:	20000b78 	.word	0x20000b78
 8010afc:	0801da80 	.word	0x0801da80

08010b00 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8010b00:	b580      	push	{r7, lr}
 8010b02:	b088      	sub	sp, #32
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	60f8      	str	r0, [r7, #12]
 8010b08:	60b9      	str	r1, [r7, #8]
 8010b0a:	603b      	str	r3, [r7, #0]
 8010b0c:	4613      	mov	r3, r2
 8010b0e:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8010b10:	4b81      	ldr	r3, [pc, #516]	@ (8010d18 <PrepareFrame+0x218>)
 8010b12:	2200      	movs	r2, #0
 8010b14:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8010b16:	4b80      	ldr	r3, [pc, #512]	@ (8010d18 <PrepareFrame+0x218>)
 8010b18:	2200      	movs	r2, #0
 8010b1a:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    uint32_t fCntUp = 0;
 8010b1e:	2300      	movs	r3, #0
 8010b20:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8010b22:	2300      	movs	r3, #0
 8010b24:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8010b26:	2300      	movs	r3, #0
 8010b28:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 8010b2a:	683b      	ldr	r3, [r7, #0]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d101      	bne.n	8010b34 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8010b30:	2300      	movs	r3, #0
 8010b32:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8010b34:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010b36:	461a      	mov	r2, r3
 8010b38:	6839      	ldr	r1, [r7, #0]
 8010b3a:	4878      	ldr	r0, [pc, #480]	@ (8010d1c <PrepareFrame+0x21c>)
 8010b3c:	f007 ff51 	bl	80189e2 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8010b40:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010b42:	b2da      	uxtb	r2, r3
 8010b44:	4b74      	ldr	r3, [pc, #464]	@ (8010d18 <PrepareFrame+0x218>)
 8010b46:	f883 2237 	strb.w	r2, [r3, #567]	@ 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	781a      	ldrb	r2, [r3, #0]
 8010b4e:	4b72      	ldr	r3, [pc, #456]	@ (8010d18 <PrepareFrame+0x218>)
 8010b50:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	781b      	ldrb	r3, [r3, #0]
 8010b56:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8010b5a:	b2db      	uxtb	r3, r3
 8010b5c:	2b07      	cmp	r3, #7
 8010b5e:	f000 80b9 	beq.w	8010cd4 <PrepareFrame+0x1d4>
 8010b62:	2b07      	cmp	r3, #7
 8010b64:	f300 80ce 	bgt.w	8010d04 <PrepareFrame+0x204>
 8010b68:	2b02      	cmp	r3, #2
 8010b6a:	d006      	beq.n	8010b7a <PrepareFrame+0x7a>
 8010b6c:	2b04      	cmp	r3, #4
 8010b6e:	f040 80c9 	bne.w	8010d04 <PrepareFrame+0x204>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8010b72:	4b69      	ldr	r3, [pc, #420]	@ (8010d18 <PrepareFrame+0x218>)
 8010b74:	2201      	movs	r2, #1
 8010b76:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8010b7a:	4b67      	ldr	r3, [pc, #412]	@ (8010d18 <PrepareFrame+0x218>)
 8010b7c:	2204      	movs	r2, #4
 8010b7e:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8010b82:	4b65      	ldr	r3, [pc, #404]	@ (8010d18 <PrepareFrame+0x218>)
 8010b84:	4a66      	ldr	r2, [pc, #408]	@ (8010d20 <PrepareFrame+0x220>)
 8010b86:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8010b8a:	4b63      	ldr	r3, [pc, #396]	@ (8010d18 <PrepareFrame+0x218>)
 8010b8c:	22ff      	movs	r2, #255	@ 0xff
 8010b8e:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	781a      	ldrb	r2, [r3, #0]
 8010b96:	4b60      	ldr	r3, [pc, #384]	@ (8010d18 <PrepareFrame+0x218>)
 8010b98:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8010b9c:	4a5e      	ldr	r2, [pc, #376]	@ (8010d18 <PrepareFrame+0x218>)
 8010b9e:	79fb      	ldrb	r3, [r7, #7]
 8010ba0:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8010ba4:	4b5f      	ldr	r3, [pc, #380]	@ (8010d24 <PrepareFrame+0x224>)
 8010ba6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8010baa:	4a5b      	ldr	r2, [pc, #364]	@ (8010d18 <PrepareFrame+0x218>)
 8010bac:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010bb0:	68bb      	ldr	r3, [r7, #8]
 8010bb2:	781a      	ldrb	r2, [r3, #0]
 8010bb4:	4b58      	ldr	r3, [pc, #352]	@ (8010d18 <PrepareFrame+0x218>)
 8010bb6:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8010bba:	4b57      	ldr	r3, [pc, #348]	@ (8010d18 <PrepareFrame+0x218>)
 8010bbc:	f893 2237 	ldrb.w	r2, [r3, #567]	@ 0x237
 8010bc0:	4b55      	ldr	r3, [pc, #340]	@ (8010d18 <PrepareFrame+0x218>)
 8010bc2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8010bc6:	4b54      	ldr	r3, [pc, #336]	@ (8010d18 <PrepareFrame+0x218>)
 8010bc8:	4a54      	ldr	r2, [pc, #336]	@ (8010d1c <PrepareFrame+0x21c>)
 8010bca:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8010bce:	f107 0318 	add.w	r3, r7, #24
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	f003 f980 	bl	8013ed8 <LoRaMacCryptoGetFCntUp>
 8010bd8:	4603      	mov	r3, r0
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d001      	beq.n	8010be2 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8010bde:	2312      	movs	r3, #18
 8010be0:	e096      	b.n	8010d10 <PrepareFrame+0x210>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8010be2:	69bb      	ldr	r3, [r7, #24]
 8010be4:	b29a      	uxth	r2, r3
 8010be6:	4b4c      	ldr	r3, [pc, #304]	@ (8010d18 <PrepareFrame+0x218>)
 8010be8:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
 8010bec:	4b4a      	ldr	r3, [pc, #296]	@ (8010d18 <PrepareFrame+0x218>)
 8010bee:	2200      	movs	r2, #0
 8010bf0:	f883 2439 	strb.w	r2, [r3, #1081]	@ 0x439
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8010bf4:	4b48      	ldr	r3, [pc, #288]	@ (8010d18 <PrepareFrame+0x218>)
 8010bf6:	2200      	movs	r2, #0
 8010bf8:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8010bfc:	69bb      	ldr	r3, [r7, #24]
 8010bfe:	4a46      	ldr	r2, [pc, #280]	@ (8010d18 <PrepareFrame+0x218>)
 8010c00:	f8c2 3440 	str.w	r3, [r2, #1088]	@ 0x440

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010c04:	f107 0314 	add.w	r3, r7, #20
 8010c08:	4618      	mov	r0, r3
 8010c0a:	f002 fb31 	bl	8013270 <LoRaMacCommandsGetSizeSerializedCmds>
 8010c0e:	4603      	mov	r3, r0
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d001      	beq.n	8010c18 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010c14:	2313      	movs	r3, #19
 8010c16:	e07b      	b.n	8010d10 <PrepareFrame+0x210>
            }

            if( macCmdsSize > 0 )
 8010c18:	697b      	ldr	r3, [r7, #20]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d074      	beq.n	8010d08 <PrepareFrame+0x208>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8010c1e:	4b41      	ldr	r3, [pc, #260]	@ (8010d24 <PrepareFrame+0x224>)
 8010c20:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010c24:	4618      	mov	r0, r3
 8010c26:	f7fe fd75 	bl	800f714 <GetMaxAppPayloadWithoutFOptsLength>
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8010c2e:	4b3a      	ldr	r3, [pc, #232]	@ (8010d18 <PrepareFrame+0x218>)
 8010c30:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d01d      	beq.n	8010c74 <PrepareFrame+0x174>
 8010c38:	697b      	ldr	r3, [r7, #20]
 8010c3a:	2b0f      	cmp	r3, #15
 8010c3c:	d81a      	bhi.n	8010c74 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8010c3e:	f107 0314 	add.w	r3, r7, #20
 8010c42:	4a39      	ldr	r2, [pc, #228]	@ (8010d28 <PrepareFrame+0x228>)
 8010c44:	4619      	mov	r1, r3
 8010c46:	200f      	movs	r0, #15
 8010c48:	f002 fb28 	bl	801329c <LoRaMacCommandsSerializeCmds>
 8010c4c:	4603      	mov	r3, r0
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d001      	beq.n	8010c56 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010c52:	2313      	movs	r3, #19
 8010c54:	e05c      	b.n	8010d10 <PrepareFrame+0x210>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8010c56:	697b      	ldr	r3, [r7, #20]
 8010c58:	f003 030f 	and.w	r3, r3, #15
 8010c5c:	b2d9      	uxtb	r1, r3
 8010c5e:	68ba      	ldr	r2, [r7, #8]
 8010c60:	7813      	ldrb	r3, [r2, #0]
 8010c62:	f361 0303 	bfi	r3, r1, #0, #4
 8010c66:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010c68:	68bb      	ldr	r3, [r7, #8]
 8010c6a:	781a      	ldrb	r2, [r3, #0]
 8010c6c:	4b2a      	ldr	r3, [pc, #168]	@ (8010d18 <PrepareFrame+0x218>)
 8010c6e:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8010c72:	e049      	b.n	8010d08 <PrepareFrame+0x208>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8010c74:	4b28      	ldr	r3, [pc, #160]	@ (8010d18 <PrepareFrame+0x218>)
 8010c76:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d010      	beq.n	8010ca0 <PrepareFrame+0x1a0>
 8010c7e:	697b      	ldr	r3, [r7, #20]
 8010c80:	2b0f      	cmp	r3, #15
 8010c82:	d90d      	bls.n	8010ca0 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010c84:	7ffb      	ldrb	r3, [r7, #31]
 8010c86:	f107 0114 	add.w	r1, r7, #20
 8010c8a:	4a28      	ldr	r2, [pc, #160]	@ (8010d2c <PrepareFrame+0x22c>)
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	f002 fb05 	bl	801329c <LoRaMacCommandsSerializeCmds>
 8010c92:	4603      	mov	r3, r0
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d001      	beq.n	8010c9c <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010c98:	2313      	movs	r3, #19
 8010c9a:	e039      	b.n	8010d10 <PrepareFrame+0x210>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8010c9c:	230a      	movs	r3, #10
 8010c9e:	e037      	b.n	8010d10 <PrepareFrame+0x210>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010ca0:	7ffb      	ldrb	r3, [r7, #31]
 8010ca2:	f107 0114 	add.w	r1, r7, #20
 8010ca6:	4a21      	ldr	r2, [pc, #132]	@ (8010d2c <PrepareFrame+0x22c>)
 8010ca8:	4618      	mov	r0, r3
 8010caa:	f002 faf7 	bl	801329c <LoRaMacCommandsSerializeCmds>
 8010cae:	4603      	mov	r3, r0
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d001      	beq.n	8010cb8 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010cb4:	2313      	movs	r3, #19
 8010cb6:	e02b      	b.n	8010d10 <PrepareFrame+0x210>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8010cb8:	4b17      	ldr	r3, [pc, #92]	@ (8010d18 <PrepareFrame+0x218>)
 8010cba:	2200      	movs	r2, #0
 8010cbc:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8010cc0:	4b15      	ldr	r3, [pc, #84]	@ (8010d18 <PrepareFrame+0x218>)
 8010cc2:	4a1a      	ldr	r2, [pc, #104]	@ (8010d2c <PrepareFrame+0x22c>)
 8010cc4:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8010cc8:	697b      	ldr	r3, [r7, #20]
 8010cca:	b2da      	uxtb	r2, r3
 8010ccc:	4b12      	ldr	r3, [pc, #72]	@ (8010d18 <PrepareFrame+0x218>)
 8010cce:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            break;
 8010cd2:	e019      	b.n	8010d08 <PrepareFrame+0x208>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8010cd4:	683b      	ldr	r3, [r7, #0]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d018      	beq.n	8010d0c <PrepareFrame+0x20c>
 8010cda:	4b0f      	ldr	r3, [pc, #60]	@ (8010d18 <PrepareFrame+0x218>)
 8010cdc:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d013      	beq.n	8010d0c <PrepareFrame+0x20c>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8010ce4:	4812      	ldr	r0, [pc, #72]	@ (8010d30 <PrepareFrame+0x230>)
 8010ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8010d18 <PrepareFrame+0x218>)
 8010ce8:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010cec:	461a      	mov	r2, r3
 8010cee:	6839      	ldr	r1, [r7, #0]
 8010cf0:	f007 fe77 	bl	80189e2 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8010cf4:	4b08      	ldr	r3, [pc, #32]	@ (8010d18 <PrepareFrame+0x218>)
 8010cf6:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010cfa:	3301      	adds	r3, #1
 8010cfc:	b29a      	uxth	r2, r3
 8010cfe:	4b06      	ldr	r3, [pc, #24]	@ (8010d18 <PrepareFrame+0x218>)
 8010d00:	801a      	strh	r2, [r3, #0]
            }
            break;
 8010d02:	e003      	b.n	8010d0c <PrepareFrame+0x20c>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010d04:	2302      	movs	r3, #2
 8010d06:	e003      	b.n	8010d10 <PrepareFrame+0x210>
            break;
 8010d08:	bf00      	nop
 8010d0a:	e000      	b.n	8010d0e <PrepareFrame+0x20e>
            break;
 8010d0c:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8010d0e:	2300      	movs	r3, #0
}
 8010d10:	4618      	mov	r0, r3
 8010d12:	3720      	adds	r7, #32
 8010d14:	46bd      	mov	sp, r7
 8010d16:	bd80      	pop	{r7, pc}
 8010d18:	2000075c 	.word	0x2000075c
 8010d1c:	20000894 	.word	0x20000894
 8010d20:	2000075e 	.word	0x2000075e
 8010d24:	20000c64 	.word	0x20000c64
 8010d28:	20000874 	.word	0x20000874
 8010d2c:	20000be4 	.word	0x20000be4
 8010d30:	2000075f 	.word	0x2000075f

08010d34 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b08a      	sub	sp, #40	@ 0x28
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010d3e:	2303      	movs	r3, #3
 8010d40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8010d44:	2300      	movs	r3, #0
 8010d46:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8010d48:	79fb      	ldrb	r3, [r7, #7]
 8010d4a:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010d4c:	4b48      	ldr	r3, [pc, #288]	@ (8010e70 <SendFrameOnChannel+0x13c>)
 8010d4e:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010d52:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010d54:	4b46      	ldr	r3, [pc, #280]	@ (8010e70 <SendFrameOnChannel+0x13c>)
 8010d56:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8010d5a:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8010d5c:	4b44      	ldr	r3, [pc, #272]	@ (8010e70 <SendFrameOnChannel+0x13c>)
 8010d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010d62:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8010d64:	4b42      	ldr	r3, [pc, #264]	@ (8010e70 <SendFrameOnChannel+0x13c>)
 8010d66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010d6a:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8010d6c:	4b41      	ldr	r3, [pc, #260]	@ (8010e74 <SendFrameOnChannel+0x140>)
 8010d6e:	881b      	ldrh	r3, [r3, #0]
 8010d70:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8010d72:	4b3f      	ldr	r3, [pc, #252]	@ (8010e70 <SendFrameOnChannel+0x13c>)
 8010d74:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8010d78:	f107 020f 	add.w	r2, r7, #15
 8010d7c:	f107 0110 	add.w	r1, r7, #16
 8010d80:	4b3d      	ldr	r3, [pc, #244]	@ (8010e78 <SendFrameOnChannel+0x144>)
 8010d82:	f004 f83d 	bl	8014e00 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010d86:	4b3b      	ldr	r3, [pc, #236]	@ (8010e74 <SendFrameOnChannel+0x140>)
 8010d88:	2201      	movs	r2, #1
 8010d8a:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010d8e:	4b38      	ldr	r3, [pc, #224]	@ (8010e70 <SendFrameOnChannel+0x13c>)
 8010d90:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010d94:	b2da      	uxtb	r2, r3
 8010d96:	4b37      	ldr	r3, [pc, #220]	@ (8010e74 <SendFrameOnChannel+0x140>)
 8010d98:	f883 2436 	strb.w	r2, [r3, #1078]	@ 0x436
    MacCtx.McpsConfirm.TxPower = txPower;
 8010d9c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8010da0:	4b34      	ldr	r3, [pc, #208]	@ (8010e74 <SendFrameOnChannel+0x140>)
 8010da2:	f883 2437 	strb.w	r2, [r3, #1079]	@ 0x437
    MacCtx.McpsConfirm.Channel = channel;
 8010da6:	79fb      	ldrb	r3, [r7, #7]
 8010da8:	4a32      	ldr	r2, [pc, #200]	@ (8010e74 <SendFrameOnChannel+0x140>)
 8010daa:	f8c2 3444 	str.w	r3, [r2, #1092]	@ 0x444

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8010dae:	4b31      	ldr	r3, [pc, #196]	@ (8010e74 <SendFrameOnChannel+0x140>)
 8010db0:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8010db4:	4a2f      	ldr	r2, [pc, #188]	@ (8010e74 <SendFrameOnChannel+0x140>)
 8010db6:	f8c2 343c 	str.w	r3, [r2, #1084]	@ 0x43c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8010dba:	4b2e      	ldr	r3, [pc, #184]	@ (8010e74 <SendFrameOnChannel+0x140>)
 8010dbc:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8010dc0:	4a2c      	ldr	r2, [pc, #176]	@ (8010e74 <SendFrameOnChannel+0x140>)
 8010dc2:	f8c2 344c 	str.w	r3, [r2, #1100]	@ 0x44c

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8010dc6:	f001 ffbb 	bl	8012d40 <LoRaMacClassBIsBeaconModeActive>
 8010dca:	4603      	mov	r3, r0
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d00b      	beq.n	8010de8 <SendFrameOnChannel+0xb4>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8010dd0:	4b28      	ldr	r3, [pc, #160]	@ (8010e74 <SendFrameOnChannel+0x140>)
 8010dd2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	f002 f81d 	bl	8012e16 <LoRaMacClassBIsUplinkCollision>
 8010ddc:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8010dde:	6a3b      	ldr	r3, [r7, #32]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d001      	beq.n	8010de8 <SendFrameOnChannel+0xb4>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8010de4:	2310      	movs	r3, #16
 8010de6:	e03e      	b.n	8010e66 <SendFrameOnChannel+0x132>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010de8:	4b21      	ldr	r3, [pc, #132]	@ (8010e70 <SendFrameOnChannel+0x13c>)
 8010dea:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8010dee:	2b01      	cmp	r3, #1
 8010df0:	d101      	bne.n	8010df6 <SendFrameOnChannel+0xc2>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8010df2:	f002 f81a 	bl	8012e2a <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8010df6:	f001 ffb4 	bl	8012d62 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8010dfa:	4b1d      	ldr	r3, [pc, #116]	@ (8010e70 <SendFrameOnChannel+0x13c>)
 8010dfc:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010e00:	b2db      	uxtb	r3, r3
 8010e02:	4a1c      	ldr	r2, [pc, #112]	@ (8010e74 <SendFrameOnChannel+0x140>)
 8010e04:	f892 2411 	ldrb.w	r2, [r2, #1041]	@ 0x411
 8010e08:	4611      	mov	r1, r2
 8010e0a:	4618      	mov	r0, r3
 8010e0c:	f7ff fc44 	bl	8010698 <SecureFrame>
 8010e10:	4603      	mov	r3, r0
 8010e12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( status != LORAMAC_STATUS_OK )
 8010e16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d002      	beq.n	8010e24 <SendFrameOnChannel+0xf0>
    {
        return status;
 8010e1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010e22:	e020      	b.n	8010e66 <SendFrameOnChannel+0x132>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8010e24:	4b13      	ldr	r3, [pc, #76]	@ (8010e74 <SendFrameOnChannel+0x140>)
 8010e26:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010e2a:	f043 0302 	orr.w	r3, r3, #2
 8010e2e:	4a11      	ldr	r2, [pc, #68]	@ (8010e74 <SendFrameOnChannel+0x140>)
 8010e30:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 8010e34:	4b0f      	ldr	r3, [pc, #60]	@ (8010e74 <SendFrameOnChannel+0x140>)
 8010e36:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 8010e3a:	f083 0301 	eor.w	r3, r3, #1
 8010e3e:	b2db      	uxtb	r3, r3
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d007      	beq.n	8010e54 <SendFrameOnChannel+0x120>
    {
        MacCtx.ChannelsNbTransCounter++;
 8010e44:	4b0b      	ldr	r3, [pc, #44]	@ (8010e74 <SendFrameOnChannel+0x140>)
 8010e46:	f893 340c 	ldrb.w	r3, [r3, #1036]	@ 0x40c
 8010e4a:	3301      	adds	r3, #1
 8010e4c:	b2da      	uxtb	r2, r3
 8010e4e:	4b09      	ldr	r3, [pc, #36]	@ (8010e74 <SendFrameOnChannel+0x140>)
 8010e50:	f883 240c 	strb.w	r2, [r3, #1036]	@ 0x40c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8010e54:	4b09      	ldr	r3, [pc, #36]	@ (8010e7c <SendFrameOnChannel+0x148>)
 8010e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e58:	4a06      	ldr	r2, [pc, #24]	@ (8010e74 <SendFrameOnChannel+0x140>)
 8010e5a:	8812      	ldrh	r2, [r2, #0]
 8010e5c:	b2d2      	uxtb	r2, r2
 8010e5e:	4611      	mov	r1, r2
 8010e60:	4807      	ldr	r0, [pc, #28]	@ (8010e80 <SendFrameOnChannel+0x14c>)
 8010e62:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8010e64:	2300      	movs	r3, #0
}
 8010e66:	4618      	mov	r0, r3
 8010e68:	3728      	adds	r7, #40	@ 0x28
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	bd80      	pop	{r7, pc}
 8010e6e:	bf00      	nop
 8010e70:	20000c64 	.word	0x20000c64
 8010e74:	2000075c 	.word	0x2000075c
 8010e78:	20000b70 	.word	0x20000b70
 8010e7c:	0801da80 	.word	0x0801da80
 8010e80:	2000075e 	.word	0x2000075e

08010e84 <SetTxContinuousWave>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b086      	sub	sp, #24
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	4603      	mov	r3, r0
 8010e8c:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 8010e8e:	4b16      	ldr	r3, [pc, #88]	@ (8010ee8 <SetTxContinuousWave+0x64>)
 8010e90:	f893 3411 	ldrb.w	r3, [r3, #1041]	@ 0x411
 8010e94:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010e96:	4b15      	ldr	r3, [pc, #84]	@ (8010eec <SetTxContinuousWave+0x68>)
 8010e98:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010e9c:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010e9e:	4b13      	ldr	r3, [pc, #76]	@ (8010eec <SetTxContinuousWave+0x68>)
 8010ea0:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8010ea4:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8010ea6:	4b11      	ldr	r3, [pc, #68]	@ (8010eec <SetTxContinuousWave+0x68>)
 8010ea8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010eac:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8010eae:	4b0f      	ldr	r3, [pc, #60]	@ (8010eec <SetTxContinuousWave+0x68>)
 8010eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010eb4:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 8010eb6:	88fb      	ldrh	r3, [r7, #6]
 8010eb8:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 8010eba:	4b0c      	ldr	r3, [pc, #48]	@ (8010eec <SetTxContinuousWave+0x68>)
 8010ebc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010ec0:	f107 0208 	add.w	r2, r7, #8
 8010ec4:	4611      	mov	r1, r2
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	f004 f897 	bl	8014ffa <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8010ecc:	4b06      	ldr	r3, [pc, #24]	@ (8010ee8 <SetTxContinuousWave+0x64>)
 8010ece:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010ed2:	f043 0302 	orr.w	r3, r3, #2
 8010ed6:	4a04      	ldr	r2, [pc, #16]	@ (8010ee8 <SetTxContinuousWave+0x64>)
 8010ed8:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 8010edc:	2300      	movs	r3, #0
}
 8010ede:	4618      	mov	r0, r3
 8010ee0:	3718      	adds	r7, #24
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	bd80      	pop	{r7, pc}
 8010ee6:	bf00      	nop
 8010ee8:	2000075c 	.word	0x2000075c
 8010eec:	20000c64 	.word	0x20000c64

08010ef0 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b082      	sub	sp, #8
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	4603      	mov	r3, r0
 8010ef8:	6039      	str	r1, [r7, #0]
 8010efa:	80fb      	strh	r3, [r7, #6]
 8010efc:	4613      	mov	r3, r2
 8010efe:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8010f00:	4b09      	ldr	r3, [pc, #36]	@ (8010f28 <SetTxContinuousWave1+0x38>)
 8010f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010f04:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8010f08:	88fa      	ldrh	r2, [r7, #6]
 8010f0a:	6838      	ldr	r0, [r7, #0]
 8010f0c:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8010f0e:	4b07      	ldr	r3, [pc, #28]	@ (8010f2c <SetTxContinuousWave1+0x3c>)
 8010f10:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010f14:	f043 0302 	orr.w	r3, r3, #2
 8010f18:	4a04      	ldr	r2, [pc, #16]	@ (8010f2c <SetTxContinuousWave1+0x3c>)
 8010f1a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 8010f1e:	2300      	movs	r3, #0
}
 8010f20:	4618      	mov	r0, r3
 8010f22:	3708      	adds	r7, #8
 8010f24:	46bd      	mov	sp, r7
 8010f26:	bd80      	pop	{r7, pc}
 8010f28:	0801da80 	.word	0x0801da80
 8010f2c:	2000075c 	.word	0x2000075c

08010f30 <RestoreNvmData>:
    return LORAMAC_STATUS_OK;
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8010f30:	b580      	push	{r7, lr}
 8010f32:	b082      	sub	sp, #8
 8010f34:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    uint32_t crc = 0;
 8010f36:	2300      	movs	r3, #0
 8010f38:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8010f3a:	4b49      	ldr	r3, [pc, #292]	@ (8011060 <RestoreNvmData+0x130>)
 8010f3c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010f40:	2b01      	cmp	r3, #1
 8010f42:	d001      	beq.n	8010f48 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 8010f44:	2301      	movs	r3, #1
 8010f46:	e086      	b.n	8011056 <RestoreNvmData+0x126>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8010f48:	2124      	movs	r1, #36	@ 0x24
 8010f4a:	4846      	ldr	r0, [pc, #280]	@ (8011064 <RestoreNvmData+0x134>)
 8010f4c:	f007 fd9e 	bl	8018a8c <Crc32>
 8010f50:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 8010f52:	4b44      	ldr	r3, [pc, #272]	@ (8011064 <RestoreNvmData+0x134>)
 8010f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f56:	687a      	ldr	r2, [r7, #4]
 8010f58:	429a      	cmp	r2, r3
 8010f5a:	d001      	beq.n	8010f60 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010f5c:	2317      	movs	r3, #23
 8010f5e:	e07a      	b.n	8011056 <RestoreNvmData+0x126>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8010f60:	211c      	movs	r1, #28
 8010f62:	4841      	ldr	r0, [pc, #260]	@ (8011068 <RestoreNvmData+0x138>)
 8010f64:	f007 fd92 	bl	8018a8c <Crc32>
 8010f68:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8010f6a:	4b3e      	ldr	r3, [pc, #248]	@ (8011064 <RestoreNvmData+0x134>)
 8010f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010f6e:	687a      	ldr	r2, [r7, #4]
 8010f70:	429a      	cmp	r2, r3
 8010f72:	d001      	beq.n	8010f78 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010f74:	2317      	movs	r3, #23
 8010f76:	e06e      	b.n	8011056 <RestoreNvmData+0x126>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8010f78:	21fc      	movs	r1, #252	@ 0xfc
 8010f7a:	483c      	ldr	r0, [pc, #240]	@ (801106c <RestoreNvmData+0x13c>)
 8010f7c:	f007 fd86 	bl	8018a8c <Crc32>
 8010f80:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 8010f82:	4b38      	ldr	r3, [pc, #224]	@ (8011064 <RestoreNvmData+0x134>)
 8010f84:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8010f88:	687a      	ldr	r2, [r7, #4]
 8010f8a:	429a      	cmp	r2, r3
 8010f8c:	d001      	beq.n	8010f92 <RestoreNvmData+0x62>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010f8e:	2317      	movs	r3, #23
 8010f90:	e061      	b.n	8011056 <RestoreNvmData+0x126>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8010f92:	21d4      	movs	r1, #212	@ 0xd4
 8010f94:	4836      	ldr	r0, [pc, #216]	@ (8011070 <RestoreNvmData+0x140>)
 8010f96:	f007 fd79 	bl	8018a8c <Crc32>
 8010f9a:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 8010f9c:	4b31      	ldr	r3, [pc, #196]	@ (8011064 <RestoreNvmData+0x134>)
 8010f9e:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8010fa2:	687a      	ldr	r2, [r7, #4]
 8010fa4:	429a      	cmp	r2, r3
 8010fa6:	d001      	beq.n	8010fac <RestoreNvmData+0x7c>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010fa8:	2317      	movs	r3, #23
 8010faa:	e054      	b.n	8011056 <RestoreNvmData+0x126>
    }

    // RegionGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 8010fac:	21a0      	movs	r1, #160	@ 0xa0
 8010fae:	4831      	ldr	r0, [pc, #196]	@ (8011074 <RestoreNvmData+0x144>)
 8010fb0:	f007 fd6c 	bl	8018a8c <Crc32>
 8010fb4:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 8010fb6:	4b2b      	ldr	r3, [pc, #172]	@ (8011064 <RestoreNvmData+0x134>)
 8010fb8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8010fbc:	687a      	ldr	r2, [r7, #4]
 8010fbe:	429a      	cmp	r2, r3
 8010fc0:	d001      	beq.n	8010fc6 <RestoreNvmData+0x96>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010fc2:	2317      	movs	r3, #23
 8010fc4:	e047      	b.n	8011056 <RestoreNvmData+0x126>
    }

    // RegionGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 8010fc6:	f44f 6193 	mov.w	r1, #1176	@ 0x498
 8010fca:	482b      	ldr	r0, [pc, #172]	@ (8011078 <RestoreNvmData+0x148>)
 8010fcc:	f007 fd5e 	bl	8018a8c <Crc32>
 8010fd0:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup2.Crc32 ) );
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 8010fd2:	4b24      	ldr	r3, [pc, #144]	@ (8011064 <RestoreNvmData+0x134>)
 8010fd4:	f8d3 375c 	ldr.w	r3, [r3, #1884]	@ 0x75c
 8010fd8:	687a      	ldr	r2, [r7, #4]
 8010fda:	429a      	cmp	r2, r3
 8010fdc:	d001      	beq.n	8010fe2 <RestoreNvmData+0xb2>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010fde:	2317      	movs	r3, #23
 8010fe0:	e039      	b.n	8011056 <RestoreNvmData+0x126>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 8010fe2:	2114      	movs	r1, #20
 8010fe4:	4825      	ldr	r0, [pc, #148]	@ (801107c <RestoreNvmData+0x14c>)
 8010fe6:	f007 fd51 	bl	8018a8c <Crc32>
 8010fea:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 8010fec:	4b1d      	ldr	r3, [pc, #116]	@ (8011064 <RestoreNvmData+0x134>)
 8010fee:	f8d3 3774 	ldr.w	r3, [r3, #1908]	@ 0x774
 8010ff2:	687a      	ldr	r2, [r7, #4]
 8010ff4:	429a      	cmp	r2, r3
 8010ff6:	d001      	beq.n	8010ffc <RestoreNvmData+0xcc>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010ff8:	2317      	movs	r3, #23
 8010ffa:	e02c      	b.n	8011056 <RestoreNvmData+0x126>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8010ffc:	f44f 62ef 	mov.w	r2, #1912	@ 0x778
 8011000:	4918      	ldr	r1, [pc, #96]	@ (8011064 <RestoreNvmData+0x134>)
 8011002:	481f      	ldr	r0, [pc, #124]	@ (8011080 <RestoreNvmData+0x150>)
 8011004:	f007 fced 	bl	80189e2 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8011008:	f44f 62ef 	mov.w	r2, #1912	@ 0x778
 801100c:	2100      	movs	r1, #0
 801100e:	4815      	ldr	r0, [pc, #84]	@ (8011064 <RestoreNvmData+0x134>)
 8011010:	f007 fd22 	bl	8018a58 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8011014:	4b12      	ldr	r3, [pc, #72]	@ (8011060 <RestoreNvmData+0x130>)
 8011016:	f893 2411 	ldrb.w	r2, [r3, #1041]	@ 0x411
 801101a:	4b11      	ldr	r3, [pc, #68]	@ (8011060 <RestoreNvmData+0x130>)
 801101c:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8011020:	4b17      	ldr	r3, [pc, #92]	@ (8011080 <RestoreNvmData+0x150>)
 8011022:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011024:	4a0e      	ldr	r2, [pc, #56]	@ (8011060 <RestoreNvmData+0x130>)
 8011026:	f8c2 33e4 	str.w	r3, [r2, #996]	@ 0x3e4
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801102a:	4b15      	ldr	r3, [pc, #84]	@ (8011080 <RestoreNvmData+0x150>)
 801102c:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8011030:	4b0b      	ldr	r3, [pc, #44]	@ (8011060 <RestoreNvmData+0x130>)
 8011032:	f883 23f0 	strb.w	r2, [r3, #1008]	@ 0x3f0
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8011036:	4b0a      	ldr	r3, [pc, #40]	@ (8011060 <RestoreNvmData+0x130>)
 8011038:	2201      	movs	r2, #1
 801103a:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801103e:	4b08      	ldr	r3, [pc, #32]	@ (8011060 <RestoreNvmData+0x130>)
 8011040:	2202      	movs	r2, #2
 8011042:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3

    // The public/private network flag may change upon reloading MacGroup2
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8011046:	4b0f      	ldr	r3, [pc, #60]	@ (8011084 <RestoreNvmData+0x154>)
 8011048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801104a:	4a0d      	ldr	r2, [pc, #52]	@ (8011080 <RestoreNvmData+0x150>)
 801104c:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 8011050:	4610      	mov	r0, r2
 8011052:	4798      	blx	r3
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 8011054:	2300      	movs	r3, #0
}
 8011056:	4618      	mov	r0, r3
 8011058:	3708      	adds	r7, #8
 801105a:	46bd      	mov	sp, r7
 801105c:	bd80      	pop	{r7, pc}
 801105e:	bf00      	nop
 8011060:	2000075c 	.word	0x2000075c
 8011064:	200013dc 	.word	0x200013dc
 8011068:	20001404 	.word	0x20001404
 801106c:	20001424 	.word	0x20001424
 8011070:	20001524 	.word	0x20001524
 8011074:	200015fc 	.word	0x200015fc
 8011078:	200016a0 	.word	0x200016a0
 801107c:	20001b3c 	.word	0x20001b3c
 8011080:	20000c64 	.word	0x20000c64
 8011084:	0801da80 	.word	0x0801da80

08011088 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8011088:	b480      	push	{r7}
 801108a:	b083      	sub	sp, #12
 801108c:	af00      	add	r7, sp, #0
 801108e:	6078      	str	r0, [r7, #4]
 8011090:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d002      	beq.n	801109e <DetermineFrameType+0x16>
 8011098:	683b      	ldr	r3, [r7, #0]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d101      	bne.n	80110a2 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801109e:	2303      	movs	r3, #3
 80110a0:	e03b      	b.n	801111a <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	7b1b      	ldrb	r3, [r3, #12]
 80110a6:	f003 030f 	and.w	r3, r3, #15
 80110aa:	b2db      	uxtb	r3, r3
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d008      	beq.n	80110c2 <DetermineFrameType+0x3a>
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d003      	beq.n	80110c2 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 80110ba:	683b      	ldr	r3, [r7, #0]
 80110bc:	2200      	movs	r2, #0
 80110be:	701a      	strb	r2, [r3, #0]
 80110c0:	e02a      	b.n	8011118 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d103      	bne.n	80110d4 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 80110cc:	683b      	ldr	r3, [r7, #0]
 80110ce:	2201      	movs	r2, #1
 80110d0:	701a      	strb	r2, [r3, #0]
 80110d2:	e021      	b.n	8011118 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	7b1b      	ldrb	r3, [r3, #12]
 80110d8:	f003 030f 	and.w	r3, r3, #15
 80110dc:	b2db      	uxtb	r3, r3
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d108      	bne.n	80110f4 <DetermineFrameType+0x6c>
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d103      	bne.n	80110f4 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 80110ec:	683b      	ldr	r3, [r7, #0]
 80110ee:	2202      	movs	r2, #2
 80110f0:	701a      	strb	r2, [r3, #0]
 80110f2:	e011      	b.n	8011118 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	7b1b      	ldrb	r3, [r3, #12]
 80110f8:	f003 030f 	and.w	r3, r3, #15
 80110fc:	b2db      	uxtb	r3, r3
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d108      	bne.n	8011114 <DetermineFrameType+0x8c>
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011108:	2b00      	cmp	r3, #0
 801110a:	d003      	beq.n	8011114 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 801110c:	683b      	ldr	r3, [r7, #0]
 801110e:	2203      	movs	r2, #3
 8011110:	701a      	strb	r2, [r3, #0]
 8011112:	e001      	b.n	8011118 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8011114:	2318      	movs	r3, #24
 8011116:	e000      	b.n	801111a <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8011118:	2300      	movs	r3, #0
}
 801111a:	4618      	mov	r0, r3
 801111c:	370c      	adds	r7, #12
 801111e:	46bd      	mov	sp, r7
 8011120:	bc80      	pop	{r7}
 8011122:	4770      	bx	lr

08011124 <CheckRetransUnconfirmedUplink>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CheckRetransUnconfirmedUplink( void )
{
 8011124:	b480      	push	{r7}
 8011126:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8011128:	4b12      	ldr	r3, [pc, #72]	@ (8011174 <CheckRetransUnconfirmedUplink+0x50>)
 801112a:	f893 240c 	ldrb.w	r2, [r3, #1036]	@ 0x40c
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 801112e:	4b12      	ldr	r3, [pc, #72]	@ (8011178 <CheckRetransUnconfirmedUplink+0x54>)
 8011130:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    if( MacCtx.ChannelsNbTransCounter >=
 8011134:	429a      	cmp	r2, r3
 8011136:	d301      	bcc.n	801113c <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 8011138:	2301      	movs	r3, #1
 801113a:	e016      	b.n	801116a <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 801113c:	4b0d      	ldr	r3, [pc, #52]	@ (8011174 <CheckRetransUnconfirmedUplink+0x50>)
 801113e:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 8011142:	f003 0302 	and.w	r3, r3, #2
 8011146:	b2db      	uxtb	r3, r3
 8011148:	2b00      	cmp	r3, #0
 801114a:	d00d      	beq.n	8011168 <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 801114c:	4b0a      	ldr	r3, [pc, #40]	@ (8011178 <CheckRetransUnconfirmedUplink+0x54>)
 801114e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8011152:	2b00      	cmp	r3, #0
 8011154:	d101      	bne.n	801115a <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 8011156:	2301      	movs	r3, #1
 8011158:	e007      	b.n	801116a <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 801115a:	4b06      	ldr	r3, [pc, #24]	@ (8011174 <CheckRetransUnconfirmedUplink+0x50>)
 801115c:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 8011160:	2b00      	cmp	r3, #0
 8011162:	d101      	bne.n	8011168 <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 8011164:	2301      	movs	r3, #1
 8011166:	e000      	b.n	801116a <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 8011168:	2300      	movs	r3, #0
}
 801116a:	4618      	mov	r0, r3
 801116c:	46bd      	mov	sp, r7
 801116e:	bc80      	pop	{r7}
 8011170:	4770      	bx	lr
 8011172:	bf00      	nop
 8011174:	2000075c 	.word	0x2000075c
 8011178:	20000c64 	.word	0x20000c64

0801117c <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 801117c:	b480      	push	{r7}
 801117e:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8011180:	4b0e      	ldr	r3, [pc, #56]	@ (80111bc <CheckRetransConfirmedUplink+0x40>)
 8011182:	f893 240e 	ldrb.w	r2, [r3, #1038]	@ 0x40e
        MacCtx.AckTimeoutRetries )
 8011186:	4b0d      	ldr	r3, [pc, #52]	@ (80111bc <CheckRetransConfirmedUplink+0x40>)
 8011188:	f893 340d 	ldrb.w	r3, [r3, #1037]	@ 0x40d
    if( MacCtx.AckTimeoutRetriesCounter >=
 801118c:	429a      	cmp	r2, r3
 801118e:	d301      	bcc.n	8011194 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 8011190:	2301      	movs	r3, #1
 8011192:	e00f      	b.n	80111b4 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8011194:	4b09      	ldr	r3, [pc, #36]	@ (80111bc <CheckRetransConfirmedUplink+0x40>)
 8011196:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 801119a:	f003 0302 	and.w	r3, r3, #2
 801119e:	b2db      	uxtb	r3, r3
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d006      	beq.n	80111b2 <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 80111a4:	4b05      	ldr	r3, [pc, #20]	@ (80111bc <CheckRetransConfirmedUplink+0x40>)
 80111a6:	f893 3438 	ldrb.w	r3, [r3, #1080]	@ 0x438
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d001      	beq.n	80111b2 <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 80111ae:	2301      	movs	r3, #1
 80111b0:	e000      	b.n	80111b4 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 80111b2:	2300      	movs	r3, #0
}
 80111b4:	4618      	mov	r0, r3
 80111b6:	46bd      	mov	sp, r7
 80111b8:	bc80      	pop	{r7}
 80111ba:	4770      	bx	lr
 80111bc:	2000075c 	.word	0x2000075c

080111c0 <StopRetransmission>:
    return counter;
}
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 80111c0:	b480      	push	{r7}
 80111c2:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80111c4:	4b1a      	ldr	r3, [pc, #104]	@ (8011230 <StopRetransmission+0x70>)
 80111c6:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 80111ca:	f003 0302 	and.w	r3, r3, #2
 80111ce:	b2db      	uxtb	r3, r3
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d009      	beq.n	80111e8 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80111d4:	4b16      	ldr	r3, [pc, #88]	@ (8011230 <StopRetransmission+0x70>)
 80111d6:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d00e      	beq.n	80111fc <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 80111de:	4b14      	ldr	r3, [pc, #80]	@ (8011230 <StopRetransmission+0x70>)
 80111e0:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80111e4:	2b01      	cmp	r3, #1
 80111e6:	d009      	beq.n	80111fc <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80111e8:	4b12      	ldr	r3, [pc, #72]	@ (8011234 <StopRetransmission+0x74>)
 80111ea:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d004      	beq.n	80111fc <StopRetransmission+0x3c>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
 80111f2:	4b10      	ldr	r3, [pc, #64]	@ (8011234 <StopRetransmission+0x74>)
 80111f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80111f6:	3301      	adds	r3, #1
 80111f8:	4a0e      	ldr	r2, [pc, #56]	@ (8011234 <StopRetransmission+0x74>)
 80111fa:	6293      	str	r3, [r2, #40]	@ 0x28
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 80111fc:	4b0c      	ldr	r3, [pc, #48]	@ (8011230 <StopRetransmission+0x70>)
 80111fe:	2200      	movs	r2, #0
 8011200:	f883 240c 	strb.w	r2, [r3, #1036]	@ 0x40c
    MacCtx.NodeAckRequested = false;
 8011204:	4b0a      	ldr	r3, [pc, #40]	@ (8011230 <StopRetransmission+0x70>)
 8011206:	2200      	movs	r2, #0
 8011208:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
 801120c:	4b08      	ldr	r3, [pc, #32]	@ (8011230 <StopRetransmission+0x70>)
 801120e:	2200      	movs	r2, #0
 8011210:	f883 240f 	strb.w	r2, [r3, #1039]	@ 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011214:	4b06      	ldr	r3, [pc, #24]	@ (8011230 <StopRetransmission+0x70>)
 8011216:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801121a:	f023 0302 	bic.w	r3, r3, #2
 801121e:	4a04      	ldr	r2, [pc, #16]	@ (8011230 <StopRetransmission+0x70>)
 8011220:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return true;
 8011224:	2301      	movs	r3, #1
}
 8011226:	4618      	mov	r0, r3
 8011228:	46bd      	mov	sp, r7
 801122a:	bc80      	pop	{r7}
 801122c:	4770      	bx	lr
 801122e:	bf00      	nop
 8011230:	2000075c 	.word	0x2000075c
 8011234:	20000c64 	.word	0x20000c64

08011238 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 8011238:	b580      	push	{r7, lr}
 801123a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 801123c:	4b08      	ldr	r3, [pc, #32]	@ (8011260 <OnMacProcessNotify+0x28>)
 801123e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011242:	2b00      	cmp	r3, #0
 8011244:	d00a      	beq.n	801125c <OnMacProcessNotify+0x24>
 8011246:	4b06      	ldr	r3, [pc, #24]	@ (8011260 <OnMacProcessNotify+0x28>)
 8011248:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 801124c:	695b      	ldr	r3, [r3, #20]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d004      	beq.n	801125c <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8011252:	4b03      	ldr	r3, [pc, #12]	@ (8011260 <OnMacProcessNotify+0x28>)
 8011254:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011258:	695b      	ldr	r3, [r3, #20]
 801125a:	4798      	blx	r3
    }
}
 801125c:	bf00      	nop
 801125e:	bd80      	pop	{r7, pc}
 8011260:	2000075c 	.word	0x2000075c

08011264 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8011264:	b580      	push	{r7, lr}
 8011266:	b082      	sub	sp, #8
 8011268:	af00      	add	r7, sp, #0
 801126a:	4603      	mov	r3, r0
 801126c:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 801126e:	4b0b      	ldr	r3, [pc, #44]	@ (801129c <CallNvmDataChangeCallback+0x38>)
 8011270:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011274:	2b00      	cmp	r3, #0
 8011276:	d00c      	beq.n	8011292 <CallNvmDataChangeCallback+0x2e>
 8011278:	4b08      	ldr	r3, [pc, #32]	@ (801129c <CallNvmDataChangeCallback+0x38>)
 801127a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 801127e:	691b      	ldr	r3, [r3, #16]
 8011280:	2b00      	cmp	r3, #0
 8011282:	d006      	beq.n	8011292 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8011284:	4b05      	ldr	r3, [pc, #20]	@ (801129c <CallNvmDataChangeCallback+0x38>)
 8011286:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 801128a:	691b      	ldr	r3, [r3, #16]
 801128c:	88fa      	ldrh	r2, [r7, #6]
 801128e:	4610      	mov	r0, r2
 8011290:	4798      	blx	r3
    }
}
 8011292:	bf00      	nop
 8011294:	3708      	adds	r7, #8
 8011296:	46bd      	mov	sp, r7
 8011298:	bd80      	pop	{r7, pc}
 801129a:	bf00      	nop
 801129c:	2000075c 	.word	0x2000075c

080112a0 <AckTimeoutRetriesProcess>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void AckTimeoutRetriesProcess( void )
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b084      	sub	sp, #16
 80112a4:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 80112a6:	4b1b      	ldr	r3, [pc, #108]	@ (8011314 <AckTimeoutRetriesProcess+0x74>)
 80112a8:	f893 240e 	ldrb.w	r2, [r3, #1038]	@ 0x40e
 80112ac:	4b19      	ldr	r3, [pc, #100]	@ (8011314 <AckTimeoutRetriesProcess+0x74>)
 80112ae:	f893 340d 	ldrb.w	r3, [r3, #1037]	@ 0x40d
 80112b2:	429a      	cmp	r2, r3
 80112b4:	d229      	bcs.n	801130a <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 80112b6:	4b17      	ldr	r3, [pc, #92]	@ (8011314 <AckTimeoutRetriesProcess+0x74>)
 80112b8:	f893 340e 	ldrb.w	r3, [r3, #1038]	@ 0x40e
 80112bc:	3301      	adds	r3, #1
 80112be:	b2da      	uxtb	r2, r3
 80112c0:	4b14      	ldr	r3, [pc, #80]	@ (8011314 <AckTimeoutRetriesProcess+0x74>)
 80112c2:	f883 240e 	strb.w	r2, [r3, #1038]	@ 0x40e
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 80112c6:	4b13      	ldr	r3, [pc, #76]	@ (8011314 <AckTimeoutRetriesProcess+0x74>)
 80112c8:	f893 340e 	ldrb.w	r3, [r3, #1038]	@ 0x40e
 80112cc:	f003 0301 	and.w	r3, r3, #1
 80112d0:	b2db      	uxtb	r3, r3
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d019      	beq.n	801130a <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80112d6:	2322      	movs	r3, #34	@ 0x22
 80112d8:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80112da:	4b0f      	ldr	r3, [pc, #60]	@ (8011318 <AckTimeoutRetriesProcess+0x78>)
 80112dc:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80112e0:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80112e2:	4b0d      	ldr	r3, [pc, #52]	@ (8011318 <AckTimeoutRetriesProcess+0x78>)
 80112e4:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80112e8:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80112ea:	4b0b      	ldr	r3, [pc, #44]	@ (8011318 <AckTimeoutRetriesProcess+0x78>)
 80112ec:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80112f0:	f107 0208 	add.w	r2, r7, #8
 80112f4:	4611      	mov	r1, r2
 80112f6:	4618      	mov	r0, r3
 80112f8:	f003 fca0 	bl	8014c3c <RegionGetPhyParam>
 80112fc:	4603      	mov	r3, r0
 80112fe:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	b25a      	sxtb	r2, r3
 8011304:	4b04      	ldr	r3, [pc, #16]	@ (8011318 <AckTimeoutRetriesProcess+0x78>)
 8011306:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        }
    }
}
 801130a:	bf00      	nop
 801130c:	3710      	adds	r7, #16
 801130e:	46bd      	mov	sp, r7
 8011310:	bd80      	pop	{r7, pc}
 8011312:	bf00      	nop
 8011314:	2000075c 	.word	0x2000075c
 8011318:	20000c64 	.word	0x20000c64

0801131c <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 801131c:	b580      	push	{r7, lr}
 801131e:	b084      	sub	sp, #16
 8011320:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 8011322:	4b14      	ldr	r3, [pc, #80]	@ (8011374 <AckTimeoutRetriesFinalize+0x58>)
 8011324:	f893 3438 	ldrb.w	r3, [r3, #1080]	@ 0x438
 8011328:	f083 0301 	eor.w	r3, r3, #1
 801132c:	b2db      	uxtb	r3, r3
 801132e:	2b00      	cmp	r3, #0
 8011330:	d015      	beq.n	801135e <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8011332:	2302      	movs	r3, #2
 8011334:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8011336:	4b10      	ldr	r3, [pc, #64]	@ (8011378 <AckTimeoutRetriesFinalize+0x5c>)
 8011338:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 801133a:	4b10      	ldr	r3, [pc, #64]	@ (801137c <AckTimeoutRetriesFinalize+0x60>)
 801133c:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 801133e:	4b10      	ldr	r3, [pc, #64]	@ (8011380 <AckTimeoutRetriesFinalize+0x64>)
 8011340:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011344:	1d3a      	adds	r2, r7, #4
 8011346:	4611      	mov	r1, r2
 8011348:	4618      	mov	r0, r3
 801134a:	f003 fcae 	bl	8014caa <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 801134e:	4b09      	ldr	r3, [pc, #36]	@ (8011374 <AckTimeoutRetriesFinalize+0x58>)
 8011350:	2200      	movs	r2, #0
 8011352:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
        MacCtx.McpsConfirm.AckReceived = false;
 8011356:	4b07      	ldr	r3, [pc, #28]	@ (8011374 <AckTimeoutRetriesFinalize+0x58>)
 8011358:	2200      	movs	r2, #0
 801135a:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 801135e:	4b05      	ldr	r3, [pc, #20]	@ (8011374 <AckTimeoutRetriesFinalize+0x58>)
 8011360:	f893 240e 	ldrb.w	r2, [r3, #1038]	@ 0x40e
 8011364:	4b03      	ldr	r3, [pc, #12]	@ (8011374 <AckTimeoutRetriesFinalize+0x58>)
 8011366:	f883 2439 	strb.w	r2, [r3, #1081]	@ 0x439
}
 801136a:	bf00      	nop
 801136c:	3710      	adds	r7, #16
 801136e:	46bd      	mov	sp, r7
 8011370:	bd80      	pop	{r7, pc}
 8011372:	bf00      	nop
 8011374:	2000075c 	.word	0x2000075c
 8011378:	20000e84 	.word	0x20000e84
 801137c:	20000f28 	.word	0x20000f28
 8011380:	20000c64 	.word	0x20000c64

08011384 <IsRequestPending>:
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8011384:	b480      	push	{r7}
 8011386:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8011388:	4b0b      	ldr	r3, [pc, #44]	@ (80113b8 <IsRequestPending+0x34>)
 801138a:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 801138e:	f003 0304 	and.w	r3, r3, #4
 8011392:	b2db      	uxtb	r3, r3
 8011394:	2b00      	cmp	r3, #0
 8011396:	d107      	bne.n	80113a8 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8011398:	4b07      	ldr	r3, [pc, #28]	@ (80113b8 <IsRequestPending+0x34>)
 801139a:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 801139e:	f003 0301 	and.w	r3, r3, #1
 80113a2:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d001      	beq.n	80113ac <IsRequestPending+0x28>
    {
        return 1;
 80113a8:	2301      	movs	r3, #1
 80113aa:	e000      	b.n	80113ae <IsRequestPending+0x2a>
    }
    return 0;
 80113ac:	2300      	movs	r3, #0
}
 80113ae:	4618      	mov	r0, r3
 80113b0:	46bd      	mov	sp, r7
 80113b2:	bc80      	pop	{r7}
 80113b4:	4770      	bx	lr
 80113b6:	bf00      	nop
 80113b8:	2000075c 	.word	0x2000075c

080113bc <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 80113bc:	b590      	push	{r4, r7, lr}
 80113be:	b08f      	sub	sp, #60	@ 0x3c
 80113c0:	af02      	add	r7, sp, #8
 80113c2:	6178      	str	r0, [r7, #20]
 80113c4:	6139      	str	r1, [r7, #16]
 80113c6:	4613      	mov	r3, r2
 80113c8:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 80113ca:	697b      	ldr	r3, [r7, #20]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d002      	beq.n	80113d6 <LoRaMacInitialization+0x1a>
 80113d0:	693b      	ldr	r3, [r7, #16]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d101      	bne.n	80113da <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80113d6:	2303      	movs	r3, #3
 80113d8:	e273      	b.n	80118c2 <LoRaMacInitialization+0x506>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80113da:	697b      	ldr	r3, [r7, #20]
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d00b      	beq.n	80113fa <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 80113e2:	697b      	ldr	r3, [r7, #20]
 80113e4:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d007      	beq.n	80113fa <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 80113ea:	697b      	ldr	r3, [r7, #20]
 80113ec:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d003      	beq.n	80113fa <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 80113f2:	697b      	ldr	r3, [r7, #20]
 80113f4:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d101      	bne.n	80113fe <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80113fa:	2303      	movs	r3, #3
 80113fc:	e261      	b.n	80118c2 <LoRaMacInitialization+0x506>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 80113fe:	7bfb      	ldrb	r3, [r7, #15]
 8011400:	4618      	mov	r0, r3
 8011402:	f003 fc06 	bl	8014c12 <RegionIsActive>
 8011406:	4603      	mov	r3, r0
 8011408:	f083 0301 	eor.w	r3, r3, #1
 801140c:	b2db      	uxtb	r3, r3
 801140e:	2b00      	cmp	r3, #0
 8011410:	d001      	beq.n	8011416 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8011412:	2309      	movs	r3, #9
 8011414:	e255      	b.n	80118c2 <LoRaMacInitialization+0x506>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8011416:	6978      	ldr	r0, [r7, #20]
 8011418:	f002 f862 	bl	80134e0 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 801141c:	f44f 62ef 	mov.w	r2, #1912	@ 0x778
 8011420:	2100      	movs	r1, #0
 8011422:	48c7      	ldr	r0, [pc, #796]	@ (8011740 <LoRaMacInitialization+0x384>)
 8011424:	f007 fb18 	bl	8018a58 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8011428:	f44f 62a1 	mov.w	r2, #1288	@ 0x508
 801142c:	2100      	movs	r1, #0
 801142e:	48c5      	ldr	r0, [pc, #788]	@ (8011744 <LoRaMacInitialization+0x388>)
 8011430:	f007 fb12 	bl	8018a58 <memset1>

    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
 8011434:	4bc3      	ldr	r3, [pc, #780]	@ (8011744 <LoRaMacInitialization+0x388>)
 8011436:	2201      	movs	r2, #1
 8011438:	f883 240e 	strb.w	r2, [r3, #1038]	@ 0x40e
    MacCtx.AckTimeoutRetries = 1;
 801143c:	4bc1      	ldr	r3, [pc, #772]	@ (8011744 <LoRaMacInitialization+0x388>)
 801143e:	2201      	movs	r2, #1
 8011440:	f883 240d 	strb.w	r2, [r3, #1037]	@ 0x40d
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8011444:	4abe      	ldr	r2, [pc, #760]	@ (8011740 <LoRaMacInitialization+0x384>)
 8011446:	7bfb      	ldrb	r3, [r7, #15]
 8011448:	f882 3048 	strb.w	r3, [r2, #72]	@ 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 801144c:	4bbc      	ldr	r3, [pc, #752]	@ (8011740 <LoRaMacInitialization+0x384>)
 801144e:	2200      	movs	r2, #0
 8011450:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 8011454:	4bba      	ldr	r3, [pc, #744]	@ (8011740 <LoRaMacInitialization+0x384>)
 8011456:	2200      	movs	r2, #0
 8011458:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 801145c:	4bb8      	ldr	r3, [pc, #736]	@ (8011740 <LoRaMacInitialization+0x384>)
 801145e:	4aba      	ldr	r2, [pc, #744]	@ (8011748 <LoRaMacInitialization+0x38c>)
 8011460:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8011464:	230f      	movs	r3, #15
 8011466:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801146a:	4bb5      	ldr	r3, [pc, #724]	@ (8011740 <LoRaMacInitialization+0x384>)
 801146c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011470:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8011474:	4611      	mov	r1, r2
 8011476:	4618      	mov	r0, r3
 8011478:	f003 fbe0 	bl	8014c3c <RegionGetPhyParam>
 801147c:	4603      	mov	r3, r0
 801147e:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8011480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011482:	2b00      	cmp	r3, #0
 8011484:	bf14      	ite	ne
 8011486:	2301      	movne	r3, #1
 8011488:	2300      	moveq	r3, #0
 801148a:	b2da      	uxtb	r2, r3
 801148c:	4bac      	ldr	r3, [pc, #688]	@ (8011740 <LoRaMacInitialization+0x384>)
 801148e:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8011492:	230a      	movs	r3, #10
 8011494:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011498:	4ba9      	ldr	r3, [pc, #676]	@ (8011740 <LoRaMacInitialization+0x384>)
 801149a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801149e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80114a2:	4611      	mov	r1, r2
 80114a4:	4618      	mov	r0, r3
 80114a6:	f003 fbc9 	bl	8014c3c <RegionGetPhyParam>
 80114aa:	4603      	mov	r3, r0
 80114ac:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 80114ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114b0:	b25a      	sxtb	r2, r3
 80114b2:	4ba3      	ldr	r3, [pc, #652]	@ (8011740 <LoRaMacInitialization+0x384>)
 80114b4:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 80114b8:	2306      	movs	r3, #6
 80114ba:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80114be:	4ba0      	ldr	r3, [pc, #640]	@ (8011740 <LoRaMacInitialization+0x384>)
 80114c0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80114c4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80114c8:	4611      	mov	r1, r2
 80114ca:	4618      	mov	r0, r3
 80114cc:	f003 fbb6 	bl	8014c3c <RegionGetPhyParam>
 80114d0:	4603      	mov	r3, r0
 80114d2:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 80114d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114d6:	b25a      	sxtb	r2, r3
 80114d8:	4b99      	ldr	r3, [pc, #612]	@ (8011740 <LoRaMacInitialization+0x384>)
 80114da:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 80114de:	2310      	movs	r3, #16
 80114e0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80114e4:	4b96      	ldr	r3, [pc, #600]	@ (8011740 <LoRaMacInitialization+0x384>)
 80114e6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80114ea:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80114ee:	4611      	mov	r1, r2
 80114f0:	4618      	mov	r0, r3
 80114f2:	f003 fba3 	bl	8014c3c <RegionGetPhyParam>
 80114f6:	4603      	mov	r3, r0
 80114f8:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 80114fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114fc:	4a90      	ldr	r2, [pc, #576]	@ (8011740 <LoRaMacInitialization+0x384>)
 80114fe:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8011502:	2311      	movs	r3, #17
 8011504:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011508:	4b8d      	ldr	r3, [pc, #564]	@ (8011740 <LoRaMacInitialization+0x384>)
 801150a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801150e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8011512:	4611      	mov	r1, r2
 8011514:	4618      	mov	r0, r3
 8011516:	f003 fb91 	bl	8014c3c <RegionGetPhyParam>
 801151a:	4603      	mov	r3, r0
 801151c:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 801151e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011520:	4a87      	ldr	r2, [pc, #540]	@ (8011740 <LoRaMacInitialization+0x384>)
 8011522:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8011526:	2312      	movs	r3, #18
 8011528:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801152c:	4b84      	ldr	r3, [pc, #528]	@ (8011740 <LoRaMacInitialization+0x384>)
 801152e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011532:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8011536:	4611      	mov	r1, r2
 8011538:	4618      	mov	r0, r3
 801153a:	f003 fb7f 	bl	8014c3c <RegionGetPhyParam>
 801153e:	4603      	mov	r3, r0
 8011540:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8011542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011544:	4a7e      	ldr	r2, [pc, #504]	@ (8011740 <LoRaMacInitialization+0x384>)
 8011546:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 801154a:	2313      	movs	r3, #19
 801154c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011550:	4b7b      	ldr	r3, [pc, #492]	@ (8011740 <LoRaMacInitialization+0x384>)
 8011552:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011556:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 801155a:	4611      	mov	r1, r2
 801155c:	4618      	mov	r0, r3
 801155e:	f003 fb6d 	bl	8014c3c <RegionGetPhyParam>
 8011562:	4603      	mov	r3, r0
 8011564:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8011566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011568:	4a75      	ldr	r2, [pc, #468]	@ (8011740 <LoRaMacInitialization+0x384>)
 801156a:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 801156e:	2314      	movs	r3, #20
 8011570:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011574:	4b72      	ldr	r3, [pc, #456]	@ (8011740 <LoRaMacInitialization+0x384>)
 8011576:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801157a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 801157e:	4611      	mov	r1, r2
 8011580:	4618      	mov	r0, r3
 8011582:	f003 fb5b 	bl	8014c3c <RegionGetPhyParam>
 8011586:	4603      	mov	r3, r0
 8011588:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 801158a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801158c:	4a6c      	ldr	r2, [pc, #432]	@ (8011740 <LoRaMacInitialization+0x384>)
 801158e:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8011592:	2317      	movs	r3, #23
 8011594:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011598:	4b69      	ldr	r3, [pc, #420]	@ (8011740 <LoRaMacInitialization+0x384>)
 801159a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801159e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80115a2:	4611      	mov	r1, r2
 80115a4:	4618      	mov	r0, r3
 80115a6:	f003 fb49 	bl	8014c3c <RegionGetPhyParam>
 80115aa:	4603      	mov	r3, r0
 80115ac:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 80115ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115b0:	b2da      	uxtb	r2, r3
 80115b2:	4b63      	ldr	r3, [pc, #396]	@ (8011740 <LoRaMacInitialization+0x384>)
 80115b4:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 80115b8:	2318      	movs	r3, #24
 80115ba:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80115be:	4b60      	ldr	r3, [pc, #384]	@ (8011740 <LoRaMacInitialization+0x384>)
 80115c0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80115c4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80115c8:	4611      	mov	r1, r2
 80115ca:	4618      	mov	r0, r3
 80115cc:	f003 fb36 	bl	8014c3c <RegionGetPhyParam>
 80115d0:	4603      	mov	r3, r0
 80115d2:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 80115d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115d6:	4a5a      	ldr	r2, [pc, #360]	@ (8011740 <LoRaMacInitialization+0x384>)
 80115d8:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 80115dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115de:	4a58      	ldr	r2, [pc, #352]	@ (8011740 <LoRaMacInitialization+0x384>)
 80115e0:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 80115e4:	2319      	movs	r3, #25
 80115e6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80115ea:	4b55      	ldr	r3, [pc, #340]	@ (8011740 <LoRaMacInitialization+0x384>)
 80115ec:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80115f0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80115f4:	4611      	mov	r1, r2
 80115f6:	4618      	mov	r0, r3
 80115f8:	f003 fb20 	bl	8014c3c <RegionGetPhyParam>
 80115fc:	4603      	mov	r3, r0
 80115fe:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8011600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011602:	b2da      	uxtb	r2, r3
 8011604:	4b4e      	ldr	r3, [pc, #312]	@ (8011740 <LoRaMacInitialization+0x384>)
 8011606:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 801160a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801160c:	b2da      	uxtb	r2, r3
 801160e:	4b4c      	ldr	r3, [pc, #304]	@ (8011740 <LoRaMacInitialization+0x384>)
 8011610:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8011614:	231e      	movs	r3, #30
 8011616:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801161a:	4b49      	ldr	r3, [pc, #292]	@ (8011740 <LoRaMacInitialization+0x384>)
 801161c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011620:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8011624:	4611      	mov	r1, r2
 8011626:	4618      	mov	r0, r3
 8011628:	f003 fb08 	bl	8014c3c <RegionGetPhyParam>
 801162c:	4603      	mov	r3, r0
 801162e:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8011630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011632:	b2da      	uxtb	r2, r3
 8011634:	4b42      	ldr	r3, [pc, #264]	@ (8011740 <LoRaMacInitialization+0x384>)
 8011636:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 801163a:	231f      	movs	r3, #31
 801163c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011640:	4b3f      	ldr	r3, [pc, #252]	@ (8011740 <LoRaMacInitialization+0x384>)
 8011642:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011646:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 801164a:	4611      	mov	r1, r2
 801164c:	4618      	mov	r0, r3
 801164e:	f003 faf5 	bl	8014c3c <RegionGetPhyParam>
 8011652:	4603      	mov	r3, r0
 8011654:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8011656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011658:	b2da      	uxtb	r2, r3
 801165a:	4b39      	ldr	r3, [pc, #228]	@ (8011740 <LoRaMacInitialization+0x384>)
 801165c:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8011660:	2320      	movs	r3, #32
 8011662:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011666:	4b36      	ldr	r3, [pc, #216]	@ (8011740 <LoRaMacInitialization+0x384>)
 8011668:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801166c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8011670:	4611      	mov	r1, r2
 8011672:	4618      	mov	r0, r3
 8011674:	f003 fae2 	bl	8014c3c <RegionGetPhyParam>
 8011678:	4603      	mov	r3, r0
 801167a:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 801167c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801167e:	4a30      	ldr	r2, [pc, #192]	@ (8011740 <LoRaMacInitialization+0x384>)
 8011680:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8011684:	2321      	movs	r3, #33	@ 0x21
 8011686:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801168a:	4b2d      	ldr	r3, [pc, #180]	@ (8011740 <LoRaMacInitialization+0x384>)
 801168c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011690:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8011694:	4611      	mov	r1, r2
 8011696:	4618      	mov	r0, r3
 8011698:	f003 fad0 	bl	8014c3c <RegionGetPhyParam>
 801169c:	4603      	mov	r3, r0
 801169e:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 80116a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116a2:	4a27      	ldr	r2, [pc, #156]	@ (8011740 <LoRaMacInitialization+0x384>)
 80116a4:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 80116a8:	230b      	movs	r3, #11
 80116aa:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80116ae:	4b24      	ldr	r3, [pc, #144]	@ (8011740 <LoRaMacInitialization+0x384>)
 80116b0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80116b4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80116b8:	4611      	mov	r1, r2
 80116ba:	4618      	mov	r0, r3
 80116bc:	f003 fabe 	bl	8014c3c <RegionGetPhyParam>
 80116c0:	4603      	mov	r3, r0
 80116c2:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 80116c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116c6:	b29a      	uxth	r2, r3
 80116c8:	4b1d      	ldr	r3, [pc, #116]	@ (8011740 <LoRaMacInitialization+0x384>)
 80116ca:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 80116ce:	230c      	movs	r3, #12
 80116d0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80116d4:	4b1a      	ldr	r3, [pc, #104]	@ (8011740 <LoRaMacInitialization+0x384>)
 80116d6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80116da:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80116de:	4611      	mov	r1, r2
 80116e0:	4618      	mov	r0, r3
 80116e2:	f003 faab 	bl	8014c3c <RegionGetPhyParam>
 80116e6:	4603      	mov	r3, r0
 80116e8:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 80116ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116ec:	b29a      	uxth	r2, r3
 80116ee:	4b14      	ldr	r3, [pc, #80]	@ (8011740 <LoRaMacInitialization+0x384>)
 80116f0:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 80116f4:	4b12      	ldr	r3, [pc, #72]	@ (8011740 <LoRaMacInitialization+0x384>)
 80116f6:	2201      	movs	r2, #1
 80116f8:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 80116fc:	4b10      	ldr	r3, [pc, #64]	@ (8011740 <LoRaMacInitialization+0x384>)
 80116fe:	220a      	movs	r2, #10
 8011700:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8011704:	4b0e      	ldr	r3, [pc, #56]	@ (8011740 <LoRaMacInitialization+0x384>)
 8011706:	2206      	movs	r2, #6
 8011708:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 801170c:	4b0c      	ldr	r3, [pc, #48]	@ (8011740 <LoRaMacInitialization+0x384>)
 801170e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8011712:	4a0b      	ldr	r2, [pc, #44]	@ (8011740 <LoRaMacInitialization+0x384>)
 8011714:	64d3      	str	r3, [r2, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8011716:	4b0a      	ldr	r3, [pc, #40]	@ (8011740 <LoRaMacInitialization+0x384>)
 8011718:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 801171c:	4b08      	ldr	r3, [pc, #32]	@ (8011740 <LoRaMacInitialization+0x384>)
 801171e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8011722:	4b07      	ldr	r3, [pc, #28]	@ (8011740 <LoRaMacInitialization+0x384>)
 8011724:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8011728:	4a05      	ldr	r2, [pc, #20]	@ (8011740 <LoRaMacInitialization+0x384>)
 801172a:	6553      	str	r3, [r2, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 801172c:	4b04      	ldr	r3, [pc, #16]	@ (8011740 <LoRaMacInitialization+0x384>)
 801172e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011732:	4a03      	ldr	r2, [pc, #12]	@ (8011740 <LoRaMacInitialization+0x384>)
 8011734:	6593      	str	r3, [r2, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8011736:	4b02      	ldr	r3, [pc, #8]	@ (8011740 <LoRaMacInitialization+0x384>)
 8011738:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801173c:	e006      	b.n	801174c <LoRaMacInitialization+0x390>
 801173e:	bf00      	nop
 8011740:	20000c64 	.word	0x20000c64
 8011744:	2000075c 	.word	0x2000075c
 8011748:	01000300 	.word	0x01000300
 801174c:	4a5f      	ldr	r2, [pc, #380]	@ (80118cc <LoRaMacInitialization+0x510>)
 801174e:	65d3      	str	r3, [r2, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8011750:	4b5e      	ldr	r3, [pc, #376]	@ (80118cc <LoRaMacInitialization+0x510>)
 8011752:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011756:	4a5d      	ldr	r2, [pc, #372]	@ (80118cc <LoRaMacInitialization+0x510>)
 8011758:	6613      	str	r3, [r2, #96]	@ 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 801175a:	4b5c      	ldr	r3, [pc, #368]	@ (80118cc <LoRaMacInitialization+0x510>)
 801175c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8011760:	4a5a      	ldr	r2, [pc, #360]	@ (80118cc <LoRaMacInitialization+0x510>)
 8011762:	6653      	str	r3, [r2, #100]	@ 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8011764:	4b59      	ldr	r3, [pc, #356]	@ (80118cc <LoRaMacInitialization+0x510>)
 8011766:	f893 20b0 	ldrb.w	r2, [r3, #176]	@ 0xb0
 801176a:	4b58      	ldr	r3, [pc, #352]	@ (80118cc <LoRaMacInitialization+0x510>)
 801176c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8011770:	2300      	movs	r3, #0
 8011772:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8011776:	4b56      	ldr	r3, [pc, #344]	@ (80118d0 <LoRaMacInitialization+0x514>)
 8011778:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 801177a:	4b56      	ldr	r3, [pc, #344]	@ (80118d4 <LoRaMacInitialization+0x518>)
 801177c:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 801177e:	4b53      	ldr	r3, [pc, #332]	@ (80118cc <LoRaMacInitialization+0x510>)
 8011780:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011784:	f107 0218 	add.w	r2, r7, #24
 8011788:	4611      	mov	r1, r2
 801178a:	4618      	mov	r0, r3
 801178c:	f003 fa8d 	bl	8014caa <RegionInitDefaults>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8011790:	4a51      	ldr	r2, [pc, #324]	@ (80118d8 <LoRaMacInitialization+0x51c>)
 8011792:	693b      	ldr	r3, [r7, #16]
 8011794:	f8c2 3348 	str.w	r3, [r2, #840]	@ 0x348
    ResetMacParameters( false );
 8011798:	2000      	movs	r0, #0
 801179a:	f7ff f813 	bl	80107c4 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 801179e:	4b4b      	ldr	r3, [pc, #300]	@ (80118cc <LoRaMacInitialization+0x510>)
 80117a0:	2201      	movs	r2, #1
 80117a2:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119

    MacCtx.MacPrimitives = primitives;
 80117a6:	4a4c      	ldr	r2, [pc, #304]	@ (80118d8 <LoRaMacInitialization+0x51c>)
 80117a8:	697b      	ldr	r3, [r7, #20]
 80117aa:	f8c2 3344 	str.w	r3, [r2, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 80117ae:	4b4a      	ldr	r3, [pc, #296]	@ (80118d8 <LoRaMacInitialization+0x51c>)
 80117b0:	2200      	movs	r2, #0
 80117b2:	f883 2481 	strb.w	r2, [r3, #1153]	@ 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 80117b6:	4b48      	ldr	r3, [pc, #288]	@ (80118d8 <LoRaMacInitialization+0x51c>)
 80117b8:	2201      	movs	r2, #1
 80117ba:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 80117be:	4b43      	ldr	r3, [pc, #268]	@ (80118cc <LoRaMacInitialization+0x510>)
 80117c0:	2200      	movs	r2, #0
 80117c2:	62da      	str	r2, [r3, #44]	@ 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 80117c4:	4b41      	ldr	r3, [pc, #260]	@ (80118cc <LoRaMacInitialization+0x510>)
 80117c6:	2200      	movs	r2, #0
 80117c8:	631a      	str	r2, [r3, #48]	@ 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 80117ca:	2300      	movs	r3, #0
 80117cc:	9300      	str	r3, [sp, #0]
 80117ce:	4b43      	ldr	r3, [pc, #268]	@ (80118dc <LoRaMacInitialization+0x520>)
 80117d0:	2200      	movs	r2, #0
 80117d2:	f04f 31ff 	mov.w	r1, #4294967295
 80117d6:	4842      	ldr	r0, [pc, #264]	@ (80118e0 <LoRaMacInitialization+0x524>)
 80117d8:	f00a fc76 	bl	801c0c8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 80117dc:	2300      	movs	r3, #0
 80117de:	9300      	str	r3, [sp, #0]
 80117e0:	4b40      	ldr	r3, [pc, #256]	@ (80118e4 <LoRaMacInitialization+0x528>)
 80117e2:	2200      	movs	r2, #0
 80117e4:	f04f 31ff 	mov.w	r1, #4294967295
 80117e8:	483f      	ldr	r0, [pc, #252]	@ (80118e8 <LoRaMacInitialization+0x52c>)
 80117ea:	f00a fc6d 	bl	801c0c8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 80117ee:	2300      	movs	r3, #0
 80117f0:	9300      	str	r3, [sp, #0]
 80117f2:	4b3e      	ldr	r3, [pc, #248]	@ (80118ec <LoRaMacInitialization+0x530>)
 80117f4:	2200      	movs	r2, #0
 80117f6:	f04f 31ff 	mov.w	r1, #4294967295
 80117fa:	483d      	ldr	r0, [pc, #244]	@ (80118f0 <LoRaMacInitialization+0x534>)
 80117fc:	f00a fc64 	bl	801c0c8 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8011800:	2300      	movs	r3, #0
 8011802:	9300      	str	r3, [sp, #0]
 8011804:	4b3b      	ldr	r3, [pc, #236]	@ (80118f4 <LoRaMacInitialization+0x538>)
 8011806:	2200      	movs	r2, #0
 8011808:	f04f 31ff 	mov.w	r1, #4294967295
 801180c:	483a      	ldr	r0, [pc, #232]	@ (80118f8 <LoRaMacInitialization+0x53c>)
 801180e:	f00a fc5b 	bl	801c0c8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8011812:	4c2e      	ldr	r4, [pc, #184]	@ (80118cc <LoRaMacInitialization+0x510>)
 8011814:	463b      	mov	r3, r7
 8011816:	4618      	mov	r0, r3
 8011818:	f009 ffcc 	bl	801b7b4 <SysTimeGetMcuTime>
 801181c:	f504 7390 	add.w	r3, r4, #288	@ 0x120
 8011820:	463a      	mov	r2, r7
 8011822:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011826:	e883 0003 	stmia.w	r3, {r0, r1}
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 801182a:	4b2b      	ldr	r3, [pc, #172]	@ (80118d8 <LoRaMacInitialization+0x51c>)
 801182c:	4a33      	ldr	r2, [pc, #204]	@ (80118fc <LoRaMacInitialization+0x540>)
 801182e:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8011832:	4b29      	ldr	r3, [pc, #164]	@ (80118d8 <LoRaMacInitialization+0x51c>)
 8011834:	4a32      	ldr	r2, [pc, #200]	@ (8011900 <LoRaMacInitialization+0x544>)
 8011836:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 801183a:	4b27      	ldr	r3, [pc, #156]	@ (80118d8 <LoRaMacInitialization+0x51c>)
 801183c:	4a31      	ldr	r2, [pc, #196]	@ (8011904 <LoRaMacInitialization+0x548>)
 801183e:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8011842:	4b25      	ldr	r3, [pc, #148]	@ (80118d8 <LoRaMacInitialization+0x51c>)
 8011844:	4a30      	ldr	r2, [pc, #192]	@ (8011908 <LoRaMacInitialization+0x54c>)
 8011846:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 801184a:	4b23      	ldr	r3, [pc, #140]	@ (80118d8 <LoRaMacInitialization+0x51c>)
 801184c:	4a2f      	ldr	r2, [pc, #188]	@ (801190c <LoRaMacInitialization+0x550>)
 801184e:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8011852:	4b2f      	ldr	r3, [pc, #188]	@ (8011910 <LoRaMacInitialization+0x554>)
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	482f      	ldr	r0, [pc, #188]	@ (8011914 <LoRaMacInitialization+0x558>)
 8011858:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 801185a:	482f      	ldr	r0, [pc, #188]	@ (8011918 <LoRaMacInitialization+0x55c>)
 801185c:	f7fa fc4e 	bl	800c0fc <SecureElementInit>
 8011860:	4603      	mov	r3, r0
 8011862:	2b00      	cmp	r3, #0
 8011864:	d001      	beq.n	801186a <LoRaMacInitialization+0x4ae>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011866:	2311      	movs	r3, #17
 8011868:	e02b      	b.n	80118c2 <LoRaMacInitialization+0x506>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 801186a:	4818      	ldr	r0, [pc, #96]	@ (80118cc <LoRaMacInitialization+0x510>)
 801186c:	f002 faf8 	bl	8013e60 <LoRaMacCryptoInit>
 8011870:	4603      	mov	r3, r0
 8011872:	2b00      	cmp	r3, #0
 8011874:	d001      	beq.n	801187a <LoRaMacInitialization+0x4be>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011876:	2311      	movs	r3, #17
 8011878:	e023      	b.n	80118c2 <LoRaMacInitialization+0x506>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 801187a:	f001 fbf3 	bl	8013064 <LoRaMacCommandsInit>
 801187e:	4603      	mov	r3, r0
 8011880:	2b00      	cmp	r3, #0
 8011882:	d001      	beq.n	8011888 <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011884:	2313      	movs	r3, #19
 8011886:	e01c      	b.n	80118c2 <LoRaMacInitialization+0x506>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8011888:	4824      	ldr	r0, [pc, #144]	@ (801191c <LoRaMacInitialization+0x560>)
 801188a:	f002 fbb3 	bl	8013ff4 <LoRaMacCryptoSetMulticastReference>
 801188e:	4603      	mov	r3, r0
 8011890:	2b00      	cmp	r3, #0
 8011892:	d001      	beq.n	8011898 <LoRaMacInitialization+0x4dc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011894:	2311      	movs	r3, #17
 8011896:	e014      	b.n	80118c2 <LoRaMacInitialization+0x506>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8011898:	4b1d      	ldr	r3, [pc, #116]	@ (8011910 <LoRaMacInitialization+0x554>)
 801189a:	695b      	ldr	r3, [r3, #20]
 801189c:	4798      	blx	r3
 801189e:	4603      	mov	r3, r0
 80118a0:	4618      	mov	r0, r3
 80118a2:	f007 f879 	bl	8018998 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80118a6:	4b1a      	ldr	r3, [pc, #104]	@ (8011910 <LoRaMacInitialization+0x554>)
 80118a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80118aa:	4a08      	ldr	r2, [pc, #32]	@ (80118cc <LoRaMacInitialization+0x510>)
 80118ac:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 80118b0:	4610      	mov	r0, r2
 80118b2:	4798      	blx	r3
    Radio.Sleep( );
 80118b4:	4b16      	ldr	r3, [pc, #88]	@ (8011910 <LoRaMacInitialization+0x554>)
 80118b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118b8:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80118ba:	2001      	movs	r0, #1
 80118bc:	f7fd fa8e 	bl	800eddc <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 80118c0:	2300      	movs	r3, #0
}
 80118c2:	4618      	mov	r0, r3
 80118c4:	3734      	adds	r7, #52	@ 0x34
 80118c6:	46bd      	mov	sp, r7
 80118c8:	bd90      	pop	{r4, r7, pc}
 80118ca:	bf00      	nop
 80118cc:	20000c64 	.word	0x20000c64
 80118d0:	20000e84 	.word	0x20000e84
 80118d4:	20000f28 	.word	0x20000f28
 80118d8:	2000075c 	.word	0x2000075c
 80118dc:	0800f31d 	.word	0x0800f31d
 80118e0:	20000ac4 	.word	0x20000ac4
 80118e4:	0800f391 	.word	0x0800f391
 80118e8:	20000adc 	.word	0x20000adc
 80118ec:	0800f3fd 	.word	0x0800f3fd
 80118f0:	20000af4 	.word	0x20000af4
 80118f4:	0800f471 	.word	0x0800f471
 80118f8:	20000b50 	.word	0x20000b50
 80118fc:	0800dedd 	.word	0x0800dedd
 8011900:	0800df39 	.word	0x0800df39
 8011904:	0800dfd1 	.word	0x0800dfd1
 8011908:	0800dfa5 	.word	0x0800dfa5
 801190c:	0800dfed 	.word	0x0800dfed
 8011910:	0801da80 	.word	0x0801da80
 8011914:	20000aa8 	.word	0x20000aa8
 8011918:	20000dac 	.word	0x20000dac
 801191c:	20000d4c 	.word	0x20000d4c

08011920 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8011920:	b580      	push	{r7, lr}
 8011922:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8011924:	4b04      	ldr	r3, [pc, #16]	@ (8011938 <LoRaMacStart+0x18>)
 8011926:	2200      	movs	r2, #0
 8011928:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    UpdateRxSlotIdleState();
 801192c:	f7fc fb74 	bl	800e018 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 8011930:	2300      	movs	r3, #0
}
 8011932:	4618      	mov	r0, r3
 8011934:	bd80      	pop	{r7, pc}
 8011936:	bf00      	nop
 8011938:	2000075c 	.word	0x2000075c

0801193c <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 801193c:	b580      	push	{r7, lr}
 801193e:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8011940:	f7fd fa20 	bl	800ed84 <LoRaMacIsBusy>
 8011944:	4603      	mov	r3, r0
 8011946:	f083 0301 	eor.w	r3, r3, #1
 801194a:	b2db      	uxtb	r3, r3
 801194c:	2b00      	cmp	r3, #0
 801194e:	d00d      	beq.n	801196c <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8011950:	4b0b      	ldr	r3, [pc, #44]	@ (8011980 <LoRaMacStop+0x44>)
 8011952:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8011956:	2b02      	cmp	r3, #2
 8011958:	d102      	bne.n	8011960 <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 801195a:	4b0a      	ldr	r3, [pc, #40]	@ (8011984 <LoRaMacStop+0x48>)
 801195c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801195e:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 8011960:	4b09      	ldr	r3, [pc, #36]	@ (8011988 <LoRaMacStop+0x4c>)
 8011962:	2201      	movs	r2, #1
 8011964:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
        return LORAMAC_STATUS_OK;
 8011968:	2300      	movs	r3, #0
 801196a:	e007      	b.n	801197c <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 801196c:	4b06      	ldr	r3, [pc, #24]	@ (8011988 <LoRaMacStop+0x4c>)
 801196e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011972:	2b01      	cmp	r3, #1
 8011974:	d101      	bne.n	801197a <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 8011976:	2300      	movs	r3, #0
 8011978:	e000      	b.n	801197c <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 801197a:	2301      	movs	r3, #1
}
 801197c:	4618      	mov	r0, r3
 801197e:	bd80      	pop	{r7, pc}
 8011980:	20000c64 	.word	0x20000c64
 8011984:	0801da80 	.word	0x0801da80
 8011988:	2000075c 	.word	0x2000075c

0801198c <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 801198c:	b580      	push	{r7, lr}
 801198e:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8011990:	4812      	ldr	r0, [pc, #72]	@ (80119dc <LoRaMacHalt+0x50>)
 8011992:	f00a fc3d 	bl	801c210 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 8011996:	4812      	ldr	r0, [pc, #72]	@ (80119e0 <LoRaMacHalt+0x54>)
 8011998:	f00a fc3a 	bl	801c210 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 801199c:	4811      	ldr	r0, [pc, #68]	@ (80119e4 <LoRaMacHalt+0x58>)
 801199e:	f00a fc37 	bl	801c210 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
 80119a2:	4811      	ldr	r0, [pc, #68]	@ (80119e8 <LoRaMacHalt+0x5c>)
 80119a4:	f00a fc34 	bl	801c210 <UTIL_TIMER_Stop>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 80119a8:	f001 f9db 	bl	8012d62 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 80119ac:	4b0f      	ldr	r3, [pc, #60]	@ (80119ec <LoRaMacHalt+0x60>)
 80119ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119b0:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 80119b2:	4b0f      	ldr	r3, [pc, #60]	@ (80119f0 <LoRaMacHalt+0x64>)
 80119b4:	2200      	movs	r2, #0
 80119b6:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 80119ba:	480e      	ldr	r0, [pc, #56]	@ (80119f4 <LoRaMacHalt+0x68>)
 80119bc:	f7fd fbaa 	bl	800f114 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 80119c0:	f44f 62ef 	mov.w	r2, #1912	@ 0x778
 80119c4:	490b      	ldr	r1, [pc, #44]	@ (80119f4 <LoRaMacHalt+0x68>)
 80119c6:	480c      	ldr	r0, [pc, #48]	@ (80119f8 <LoRaMacHalt+0x6c>)
 80119c8:	f007 f80b 	bl	80189e2 <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 80119cc:	4b08      	ldr	r3, [pc, #32]	@ (80119f0 <LoRaMacHalt+0x64>)
 80119ce:	2201      	movs	r2, #1
 80119d0:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 80119d4:	2300      	movs	r3, #0
}
 80119d6:	4618      	mov	r0, r3
 80119d8:	bd80      	pop	{r7, pc}
 80119da:	bf00      	nop
 80119dc:	20000ac4 	.word	0x20000ac4
 80119e0:	20000adc 	.word	0x20000adc
 80119e4:	20000af4 	.word	0x20000af4
 80119e8:	20000b50 	.word	0x20000b50
 80119ec:	0801da80 	.word	0x0801da80
 80119f0:	2000075c 	.word	0x2000075c
 80119f4:	20000c64 	.word	0x20000c64
 80119f8:	200013dc 	.word	0x200013dc

080119fc <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b08a      	sub	sp, #40	@ 0x28
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	4603      	mov	r3, r0
 8011a04:	6039      	str	r1, [r7, #0]
 8011a06:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011a08:	4b3e      	ldr	r3, [pc, #248]	@ (8011b04 <LoRaMacQueryTxPossible+0x108>)
 8011a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a0c:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011a0e:	4b3d      	ldr	r3, [pc, #244]	@ (8011b04 <LoRaMacQueryTxPossible+0x108>)
 8011a10:	f993 30dd 	ldrsb.w	r3, [r3, #221]	@ 0xdd
 8011a14:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011a16:	4b3b      	ldr	r3, [pc, #236]	@ (8011b04 <LoRaMacQueryTxPossible+0x108>)
 8011a18:	f993 30dc 	ldrsb.w	r3, [r3, #220]	@ 0xdc
 8011a1c:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 8011a1e:	2300      	movs	r3, #0
 8011a20:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8011a22:	683b      	ldr	r3, [r7, #0]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d101      	bne.n	8011a2c <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011a28:	2303      	movs	r3, #3
 8011a2a:	e066      	b.n	8011afa <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 8011a2c:	4b35      	ldr	r3, [pc, #212]	@ (8011b04 <LoRaMacQueryTxPossible+0x108>)
 8011a2e:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8011a32:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8011a34:	2300      	movs	r3, #0
 8011a36:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8011a38:	4b32      	ldr	r3, [pc, #200]	@ (8011b04 <LoRaMacQueryTxPossible+0x108>)
 8011a3a:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8011a3e:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011a40:	4b30      	ldr	r3, [pc, #192]	@ (8011b04 <LoRaMacQueryTxPossible+0x108>)
 8011a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a44:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8011a46:	4b2f      	ldr	r3, [pc, #188]	@ (8011b04 <LoRaMacQueryTxPossible+0x108>)
 8011a48:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8011a4c:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8011a4e:	4b2d      	ldr	r3, [pc, #180]	@ (8011b04 <LoRaMacQueryTxPossible+0x108>)
 8011a50:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8011a54:	847b      	strh	r3, [r7, #34]	@ 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011a56:	4b2b      	ldr	r3, [pc, #172]	@ (8011b04 <LoRaMacQueryTxPossible+0x108>)
 8011a58:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011a5c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011a60:	4b28      	ldr	r3, [pc, #160]	@ (8011b04 <LoRaMacQueryTxPossible+0x108>)
 8011a62:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8011a66:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011a6a:	4b26      	ldr	r3, [pc, #152]	@ (8011b04 <LoRaMacQueryTxPossible+0x108>)
 8011a6c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8011a70:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8011a74:	4b23      	ldr	r3, [pc, #140]	@ (8011b04 <LoRaMacQueryTxPossible+0x108>)
 8011a76:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011a7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8011a7e:	f107 0310 	add.w	r3, r7, #16
 8011a82:	f107 020e 	add.w	r2, r7, #14
 8011a86:	f107 010f 	add.w	r1, r7, #15
 8011a8a:	f107 0014 	add.w	r0, r7, #20
 8011a8e:	f001 f8d3 	bl	8012c38 <LoRaMacAdrCalcNext>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8011a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a96:	4618      	mov	r0, r3
 8011a98:	f7fd fe3c 	bl	800f714 <GetMaxAppPayloadWithoutFOptsLength>
 8011a9c:	4603      	mov	r3, r0
 8011a9e:	461a      	mov	r2, r3
 8011aa0:	683b      	ldr	r3, [r7, #0]
 8011aa2:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8011aa4:	f107 0308 	add.w	r3, r7, #8
 8011aa8:	4618      	mov	r0, r3
 8011aaa:	f001 fbe1 	bl	8013270 <LoRaMacCommandsGetSizeSerializedCmds>
 8011aae:	4603      	mov	r3, r0
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d001      	beq.n	8011ab8 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011ab4:	2313      	movs	r3, #19
 8011ab6:	e020      	b.n	8011afa <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8011ab8:	68bb      	ldr	r3, [r7, #8]
 8011aba:	2b0f      	cmp	r3, #15
 8011abc:	d819      	bhi.n	8011af2 <LoRaMacQueryTxPossible+0xf6>
 8011abe:	683b      	ldr	r3, [r7, #0]
 8011ac0:	785b      	ldrb	r3, [r3, #1]
 8011ac2:	461a      	mov	r2, r3
 8011ac4:	68bb      	ldr	r3, [r7, #8]
 8011ac6:	429a      	cmp	r2, r3
 8011ac8:	d313      	bcc.n	8011af2 <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8011aca:	683b      	ldr	r3, [r7, #0]
 8011acc:	785a      	ldrb	r2, [r3, #1]
 8011ace:	68bb      	ldr	r3, [r7, #8]
 8011ad0:	b2db      	uxtb	r3, r3
 8011ad2:	1ad3      	subs	r3, r2, r3
 8011ad4:	b2da      	uxtb	r2, r3
 8011ad6:	683b      	ldr	r3, [r7, #0]
 8011ad8:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8011ada:	683b      	ldr	r3, [r7, #0]
 8011adc:	785b      	ldrb	r3, [r3, #1]
 8011ade:	4619      	mov	r1, r3
 8011ae0:	79fa      	ldrb	r2, [r7, #7]
 8011ae2:	68bb      	ldr	r3, [r7, #8]
 8011ae4:	4413      	add	r3, r2
 8011ae6:	4299      	cmp	r1, r3
 8011ae8:	d301      	bcc.n	8011aee <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 8011aea:	2300      	movs	r3, #0
 8011aec:	e005      	b.n	8011afa <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8011aee:	2308      	movs	r3, #8
 8011af0:	e003      	b.n	8011afa <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8011af2:	683b      	ldr	r3, [r7, #0]
 8011af4:	2200      	movs	r2, #0
 8011af6:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8011af8:	2308      	movs	r3, #8
    }
}
 8011afa:	4618      	mov	r0, r3
 8011afc:	3728      	adds	r7, #40	@ 0x28
 8011afe:	46bd      	mov	sp, r7
 8011b00:	bd80      	pop	{r7, pc}
 8011b02:	bf00      	nop
 8011b04:	20000c64 	.word	0x20000c64

08011b08 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8011b08:	b590      	push	{r4, r7, lr}
 8011b0a:	b087      	sub	sp, #28
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011b10:	2300      	movs	r3, #0
 8011b12:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d101      	bne.n	8011b1e <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011b1a:	2303      	movs	r3, #3
 8011b1c:	e1a4      	b.n	8011e68 <LoRaMacMibGetRequestConfirm+0x360>
    }

    switch( mibGet->Type )
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	781b      	ldrb	r3, [r3, #0]
 8011b22:	2b3f      	cmp	r3, #63	@ 0x3f
 8011b24:	f200 8199 	bhi.w	8011e5a <LoRaMacMibGetRequestConfirm+0x352>
 8011b28:	a201      	add	r2, pc, #4	@ (adr r2, 8011b30 <LoRaMacMibGetRequestConfirm+0x28>)
 8011b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b2e:	bf00      	nop
 8011b30:	08011c31 	.word	0x08011c31
 8011b34:	08011c3d 	.word	0x08011c3d
 8011b38:	08011c49 	.word	0x08011c49
 8011b3c:	08011c55 	.word	0x08011c55
 8011b40:	08011c61 	.word	0x08011c61
 8011b44:	08011c6d 	.word	0x08011c6d
 8011b48:	08011c79 	.word	0x08011c79
 8011b4c:	08011e5b 	.word	0x08011e5b
 8011b50:	08011e5b 	.word	0x08011e5b
 8011b54:	08011e5b 	.word	0x08011e5b
 8011b58:	08011e5b 	.word	0x08011e5b
 8011b5c:	08011e5b 	.word	0x08011e5b
 8011b60:	08011e5b 	.word	0x08011e5b
 8011b64:	08011e5b 	.word	0x08011e5b
 8011b68:	08011e5b 	.word	0x08011e5b
 8011b6c:	08011c8d 	.word	0x08011c8d
 8011b70:	08011c99 	.word	0x08011c99
 8011b74:	08011ca5 	.word	0x08011ca5
 8011b78:	08011cc7 	.word	0x08011cc7
 8011b7c:	08011cd9 	.word	0x08011cd9
 8011b80:	08011ceb 	.word	0x08011ceb
 8011b84:	08011cfd 	.word	0x08011cfd
 8011b88:	08011d31 	.word	0x08011d31
 8011b8c:	08011d0f 	.word	0x08011d0f
 8011b90:	08011d53 	.word	0x08011d53
 8011b94:	08011d5f 	.word	0x08011d5f
 8011b98:	08011d69 	.word	0x08011d69
 8011b9c:	08011d73 	.word	0x08011d73
 8011ba0:	08011d7d 	.word	0x08011d7d
 8011ba4:	08011d87 	.word	0x08011d87
 8011ba8:	08011d91 	.word	0x08011d91
 8011bac:	08011d9d 	.word	0x08011d9d
 8011bb0:	08011db5 	.word	0x08011db5
 8011bb4:	08011da9 	.word	0x08011da9
 8011bb8:	08011dc1 	.word	0x08011dc1
 8011bbc:	08011dcb 	.word	0x08011dcb
 8011bc0:	08011dd7 	.word	0x08011dd7
 8011bc4:	08011df3 	.word	0x08011df3
 8011bc8:	08011de3 	.word	0x08011de3
 8011bcc:	08011deb 	.word	0x08011deb
 8011bd0:	08011e5b 	.word	0x08011e5b
 8011bd4:	08011dff 	.word	0x08011dff
 8011bd8:	08011e5b 	.word	0x08011e5b
 8011bdc:	08011e5b 	.word	0x08011e5b
 8011be0:	08011e5b 	.word	0x08011e5b
 8011be4:	08011e5b 	.word	0x08011e5b
 8011be8:	08011e5b 	.word	0x08011e5b
 8011bec:	08011e5b 	.word	0x08011e5b
 8011bf0:	08011e5b 	.word	0x08011e5b
 8011bf4:	08011e5b 	.word	0x08011e5b
 8011bf8:	08011e5b 	.word	0x08011e5b
 8011bfc:	08011e5b 	.word	0x08011e5b
 8011c00:	08011e5b 	.word	0x08011e5b
 8011c04:	08011e5b 	.word	0x08011e5b
 8011c08:	08011e5b 	.word	0x08011e5b
 8011c0c:	08011e5b 	.word	0x08011e5b
 8011c10:	08011e5b 	.word	0x08011e5b
 8011c14:	08011e13 	.word	0x08011e13
 8011c18:	08011e1f 	.word	0x08011e1f
 8011c1c:	08011e2b 	.word	0x08011e2b
 8011c20:	08011e37 	.word	0x08011e37
 8011c24:	08011e43 	.word	0x08011e43
 8011c28:	08011e4f 	.word	0x08011e4f
 8011c2c:	08011e55 	.word	0x08011e55
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8011c30:	4b8f      	ldr	r3, [pc, #572]	@ (8011e70 <LoRaMacMibGetRequestConfirm+0x368>)
 8011c32:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	711a      	strb	r2, [r3, #4]
            break;
 8011c3a:	e114      	b.n	8011e66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011c3c:	4b8c      	ldr	r3, [pc, #560]	@ (8011e70 <LoRaMacMibGetRequestConfirm+0x368>)
 8011c3e:	f893 212c 	ldrb.w	r2, [r3, #300]	@ 0x12c
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	711a      	strb	r2, [r3, #4]
            break;
 8011c46:	e10e      	b.n	8011e66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	685b      	ldr	r3, [r3, #4]
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	f7fa fd2b 	bl	800c6a8 <SecureElementGetDevEui>
            break;
 8011c52:	e108      	b.n	8011e66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	685b      	ldr	r3, [r3, #4]
 8011c58:	4618      	mov	r0, r3
 8011c5a:	f7fa fd55 	bl	800c708 <SecureElementGetJoinEui>
            break;
 8011c5e:	e102      	b.n	8011e66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8011c60:	4b83      	ldr	r3, [pc, #524]	@ (8011e70 <LoRaMacMibGetRequestConfirm+0x368>)
 8011c62:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	711a      	strb	r2, [r3, #4]
            break;
 8011c6a:	e0fc      	b.n	8011e66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8011c6c:	4b80      	ldr	r3, [pc, #512]	@ (8011e70 <LoRaMacMibGetRequestConfirm+0x368>)
 8011c6e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	605a      	str	r2, [r3, #4]
            break;
 8011c76:	e0f6      	b.n	8011e66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 8011c78:	4b7d      	ldr	r3, [pc, #500]	@ (8011e70 <LoRaMacMibGetRequestConfirm+0x368>)
 8011c7a:	f893 212c 	ldrb.w	r2, [r3, #300]	@ 0x12c
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	3304      	adds	r3, #4
 8011c82:	4619      	mov	r1, r3
 8011c84:	4610      	mov	r0, r2
 8011c86:	f7fa fd71 	bl	800c76c <SecureElementGetDevAddr>
            break;
 8011c8a:	e0ec      	b.n	8011e66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8011c8c:	4b78      	ldr	r3, [pc, #480]	@ (8011e70 <LoRaMacMibGetRequestConfirm+0x368>)
 8011c8e:	f893 2119 	ldrb.w	r2, [r3, #281]	@ 0x119
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	711a      	strb	r2, [r3, #4]
            break;
 8011c96:	e0e6      	b.n	8011e66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8011c98:	4b75      	ldr	r3, [pc, #468]	@ (8011e70 <LoRaMacMibGetRequestConfirm+0x368>)
 8011c9a:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	711a      	strb	r2, [r3, #4]
            break;
 8011ca2:	e0e0      	b.n	8011e66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8011ca4:	231d      	movs	r3, #29
 8011ca6:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011ca8:	4b71      	ldr	r3, [pc, #452]	@ (8011e70 <LoRaMacMibGetRequestConfirm+0x368>)
 8011caa:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011cae:	f107 0210 	add.w	r2, r7, #16
 8011cb2:	4611      	mov	r1, r2
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	f002 ffc1 	bl	8014c3c <RegionGetPhyParam>
 8011cba:	4603      	mov	r3, r0
 8011cbc:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8011cbe:	68fa      	ldr	r2, [r7, #12]
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	605a      	str	r2, [r3, #4]
            break;
 8011cc4:	e0cf      	b.n	8011e66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	4a69      	ldr	r2, [pc, #420]	@ (8011e70 <LoRaMacMibGetRequestConfirm+0x368>)
 8011cca:	3304      	adds	r3, #4
 8011ccc:	326c      	adds	r2, #108	@ 0x6c
 8011cce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011cd2:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011cd6:	e0c6      	b.n	8011e66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	4a65      	ldr	r2, [pc, #404]	@ (8011e70 <LoRaMacMibGetRequestConfirm+0x368>)
 8011cdc:	3304      	adds	r3, #4
 8011cde:	32b4      	adds	r2, #180	@ 0xb4
 8011ce0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011ce4:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011ce8:	e0bd      	b.n	8011e66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	4a60      	ldr	r2, [pc, #384]	@ (8011e70 <LoRaMacMibGetRequestConfirm+0x368>)
 8011cee:	3304      	adds	r3, #4
 8011cf0:	3274      	adds	r2, #116	@ 0x74
 8011cf2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011cf6:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011cfa:	e0b4      	b.n	8011e66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	4a5c      	ldr	r2, [pc, #368]	@ (8011e70 <LoRaMacMibGetRequestConfirm+0x368>)
 8011d00:	3304      	adds	r3, #4
 8011d02:	32bc      	adds	r2, #188	@ 0xbc
 8011d04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011d08:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011d0c:	e0ab      	b.n	8011e66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8011d0e:	231b      	movs	r3, #27
 8011d10:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011d12:	4b57      	ldr	r3, [pc, #348]	@ (8011e70 <LoRaMacMibGetRequestConfirm+0x368>)
 8011d14:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011d18:	f107 0210 	add.w	r2, r7, #16
 8011d1c:	4611      	mov	r1, r2
 8011d1e:	4618      	mov	r0, r3
 8011d20:	f002 ff8c 	bl	8014c3c <RegionGetPhyParam>
 8011d24:	4603      	mov	r3, r0
 8011d26:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8011d28:	68fa      	ldr	r2, [r7, #12]
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	605a      	str	r2, [r3, #4]
            break;
 8011d2e:	e09a      	b.n	8011e66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8011d30:	231a      	movs	r3, #26
 8011d32:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011d34:	4b4e      	ldr	r3, [pc, #312]	@ (8011e70 <LoRaMacMibGetRequestConfirm+0x368>)
 8011d36:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011d3a:	f107 0210 	add.w	r2, r7, #16
 8011d3e:	4611      	mov	r1, r2
 8011d40:	4618      	mov	r0, r3
 8011d42:	f002 ff7b 	bl	8014c3c <RegionGetPhyParam>
 8011d46:	4603      	mov	r3, r0
 8011d48:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8011d4a:	68fa      	ldr	r2, [r7, #12]
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	605a      	str	r2, [r3, #4]
            break;
 8011d50:	e089      	b.n	8011e66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8011d52:	4b47      	ldr	r3, [pc, #284]	@ (8011e70 <LoRaMacMibGetRequestConfirm+0x368>)
 8011d54:	f893 2068 	ldrb.w	r2, [r3, #104]	@ 0x68
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	711a      	strb	r2, [r3, #4]
            break;
 8011d5c:	e083      	b.n	8011e66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8011d5e:	4b44      	ldr	r3, [pc, #272]	@ (8011e70 <LoRaMacMibGetRequestConfirm+0x368>)
 8011d60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	605a      	str	r2, [r3, #4]
            break;
 8011d66:	e07e      	b.n	8011e66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8011d68:	4b41      	ldr	r3, [pc, #260]	@ (8011e70 <LoRaMacMibGetRequestConfirm+0x368>)
 8011d6a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	605a      	str	r2, [r3, #4]
            break;
 8011d70:	e079      	b.n	8011e66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8011d72:	4b3f      	ldr	r3, [pc, #252]	@ (8011e70 <LoRaMacMibGetRequestConfirm+0x368>)
 8011d74:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	605a      	str	r2, [r3, #4]
            break;
 8011d7a:	e074      	b.n	8011e66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8011d7c:	4b3c      	ldr	r3, [pc, #240]	@ (8011e70 <LoRaMacMibGetRequestConfirm+0x368>)
 8011d7e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	605a      	str	r2, [r3, #4]
            break;
 8011d84:	e06f      	b.n	8011e66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8011d86:	4b3a      	ldr	r3, [pc, #232]	@ (8011e70 <LoRaMacMibGetRequestConfirm+0x368>)
 8011d88:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	605a      	str	r2, [r3, #4]
            break;
 8011d8e:	e06a      	b.n	8011e66 <LoRaMacMibGetRequestConfirm+0x35e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011d90:	4b37      	ldr	r3, [pc, #220]	@ (8011e70 <LoRaMacMibGetRequestConfirm+0x368>)
 8011d92:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	711a      	strb	r2, [r3, #4]
            break;
 8011d9a:	e064      	b.n	8011e66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8011d9c:	4b34      	ldr	r3, [pc, #208]	@ (8011e70 <LoRaMacMibGetRequestConfirm+0x368>)
 8011d9e:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	711a      	strb	r2, [r3, #4]
            break;
 8011da6:	e05e      	b.n	8011e66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011da8:	4b31      	ldr	r3, [pc, #196]	@ (8011e70 <LoRaMacMibGetRequestConfirm+0x368>)
 8011daa:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	711a      	strb	r2, [r3, #4]
            break;
 8011db2:	e058      	b.n	8011e66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011db4:	4b2e      	ldr	r3, [pc, #184]	@ (8011e70 <LoRaMacMibGetRequestConfirm+0x368>)
 8011db6:	f993 2038 	ldrsb.w	r2, [r3, #56]	@ 0x38
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	711a      	strb	r2, [r3, #4]
            break;
 8011dbe:	e052      	b.n	8011e66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8011dc0:	4b2b      	ldr	r3, [pc, #172]	@ (8011e70 <LoRaMacMibGetRequestConfirm+0x368>)
 8011dc2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	605a      	str	r2, [r3, #4]
            break;
 8011dc8:	e04d      	b.n	8011e66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8011dca:	4b29      	ldr	r3, [pc, #164]	@ (8011e70 <LoRaMacMibGetRequestConfirm+0x368>)
 8011dcc:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	711a      	strb	r2, [r3, #4]
            break;
 8011dd4:	e047      	b.n	8011e66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8011dd6:	4b26      	ldr	r3, [pc, #152]	@ (8011e70 <LoRaMacMibGetRequestConfirm+0x368>)
 8011dd8:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	605a      	str	r2, [r3, #4]
            break;
 8011de0:	e041      	b.n	8011e66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	4a22      	ldr	r2, [pc, #136]	@ (8011e70 <LoRaMacMibGetRequestConfirm+0x368>)
 8011de6:	605a      	str	r2, [r3, #4]
            break;
 8011de8:	e03d      	b.n	8011e66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	4a21      	ldr	r2, [pc, #132]	@ (8011e74 <LoRaMacMibGetRequestConfirm+0x36c>)
 8011dee:	605a      	str	r2, [r3, #4]
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 8011df0:	e039      	b.n	8011e66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8011df2:	4b1f      	ldr	r3, [pc, #124]	@ (8011e70 <LoRaMacMibGetRequestConfirm+0x368>)
 8011df4:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	605a      	str	r2, [r3, #4]
            break;
 8011dfc:	e033      	b.n	8011e66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	4a1b      	ldr	r2, [pc, #108]	@ (8011e70 <LoRaMacMibGetRequestConfirm+0x368>)
 8011e02:	f8d2 2128 	ldr.w	r2, [r2, #296]	@ 0x128
 8011e06:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8011e08:	687c      	ldr	r4, [r7, #4]
 8011e0a:	f003 f93b 	bl	8015084 <RegionGetVersion>
 8011e0e:	60a0      	str	r0, [r4, #8]
            break;
 8011e10:	e029      	b.n	8011e66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8011e12:	4b17      	ldr	r3, [pc, #92]	@ (8011e70 <LoRaMacMibGetRequestConfirm+0x368>)
 8011e14:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	605a      	str	r2, [r3, #4]
            break;
 8011e1c:	e023      	b.n	8011e66 <LoRaMacMibGetRequestConfirm+0x35e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8011e1e:	4b14      	ldr	r3, [pc, #80]	@ (8011e70 <LoRaMacMibGetRequestConfirm+0x368>)
 8011e20:	f8b3 2088 	ldrh.w	r2, [r3, #136]	@ 0x88
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	809a      	strh	r2, [r3, #4]
            break;
 8011e28:	e01d      	b.n	8011e66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8011e2a:	4b11      	ldr	r3, [pc, #68]	@ (8011e70 <LoRaMacMibGetRequestConfirm+0x368>)
 8011e2c:	f8b3 208a 	ldrh.w	r2, [r3, #138]	@ 0x8a
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	809a      	strh	r2, [r3, #4]
            break;
 8011e34:	e017      	b.n	8011e66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8011e36:	4b0e      	ldr	r3, [pc, #56]	@ (8011e70 <LoRaMacMibGetRequestConfirm+0x368>)
 8011e38:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	809a      	strh	r2, [r3, #4]
            break;
 8011e40:	e011      	b.n	8011e66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8011e42:	4b0b      	ldr	r3, [pc, #44]	@ (8011e70 <LoRaMacMibGetRequestConfirm+0x368>)
 8011e44:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	809a      	strh	r2, [r3, #4]
            break;
 8011e4c:	e00b      	b.n	8011e66 <LoRaMacMibGetRequestConfirm+0x35e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8011e4e:	2318      	movs	r3, #24
 8011e50:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8011e52:	e008      	b.n	8011e66 <LoRaMacMibGetRequestConfirm+0x35e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8011e54:	2318      	movs	r3, #24
 8011e56:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8011e58:	e005      	b.n	8011e66 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8011e5a:	6878      	ldr	r0, [r7, #4]
 8011e5c:	f000 ff98 	bl	8012d90 <LoRaMacClassBMibGetRequestConfirm>
 8011e60:	4603      	mov	r3, r0
 8011e62:	75fb      	strb	r3, [r7, #23]
            break;
 8011e64:	bf00      	nop
        }
    }
    return status;
 8011e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e68:	4618      	mov	r0, r3
 8011e6a:	371c      	adds	r7, #28
 8011e6c:	46bd      	mov	sp, r7
 8011e6e:	bd90      	pop	{r4, r7, pc}
 8011e70:	20000c64 	.word	0x20000c64
 8011e74:	200013dc 	.word	0x200013dc

08011e78 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8011e78:	b580      	push	{r7, lr}
 8011e7a:	b086      	sub	sp, #24
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011e80:	2300      	movs	r3, #0
 8011e82:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d101      	bne.n	8011e8e <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011e8a:	2303      	movs	r3, #3
 8011e8c:	e382      	b.n	8012594 <LoRaMacMibSetRequestConfirm+0x71c>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8011e8e:	4bbb      	ldr	r3, [pc, #748]	@ (801217c <LoRaMacMibSetRequestConfirm+0x304>)
 8011e90:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011e94:	f003 0302 	and.w	r3, r3, #2
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d001      	beq.n	8011ea0 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8011e9c:	2301      	movs	r3, #1
 8011e9e:	e379      	b.n	8012594 <LoRaMacMibSetRequestConfirm+0x71c>
    }

    switch( mibSet->Type )
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	781b      	ldrb	r3, [r3, #0]
 8011ea4:	2b3f      	cmp	r3, #63	@ 0x3f
 8011ea6:	f200 8353 	bhi.w	8012550 <LoRaMacMibSetRequestConfirm+0x6d8>
 8011eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8011eb0 <LoRaMacMibSetRequestConfirm+0x38>)
 8011eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011eb0:	08011fb1 	.word	0x08011fb1
 8011eb4:	08011fc1 	.word	0x08011fc1
 8011eb8:	08011fdb 	.word	0x08011fdb
 8011ebc:	08011ff3 	.word	0x08011ff3
 8011ec0:	0801200b 	.word	0x0801200b
 8011ec4:	08012017 	.word	0x08012017
 8011ec8:	08012023 	.word	0x08012023
 8011ecc:	0801204d 	.word	0x0801204d
 8011ed0:	08012073 	.word	0x08012073
 8011ed4:	08012099 	.word	0x08012099
 8011ed8:	080120bf 	.word	0x080120bf
 8011edc:	080120e5 	.word	0x080120e5
 8011ee0:	0801210b 	.word	0x0801210b
 8011ee4:	08012131 	.word	0x08012131
 8011ee8:	08012157 	.word	0x08012157
 8011eec:	08012185 	.word	0x08012185
 8011ef0:	080121a5 	.word	0x080121a5
 8011ef4:	08012551 	.word	0x08012551
 8011ef8:	080121b1 	.word	0x080121b1
 8011efc:	08012221 	.word	0x08012221
 8011f00:	08012261 	.word	0x08012261
 8011f04:	080122c3 	.word	0x080122c3
 8011f08:	08012333 	.word	0x08012333
 8011f0c:	08012303 	.word	0x08012303
 8011f10:	08012363 	.word	0x08012363
 8011f14:	08012385 	.word	0x08012385
 8011f18:	0801238f 	.word	0x0801238f
 8011f1c:	08012399 	.word	0x08012399
 8011f20:	080123a3 	.word	0x080123a3
 8011f24:	080123ad 	.word	0x080123ad
 8011f28:	080123b7 	.word	0x080123b7
 8011f2c:	080123e9 	.word	0x080123e9
 8011f30:	0801245d 	.word	0x0801245d
 8011f34:	08012423 	.word	0x08012423
 8011f38:	0801248f 	.word	0x0801248f
 8011f3c:	080124a5 	.word	0x080124a5
 8011f40:	080124bd 	.word	0x080124bd
 8011f44:	080124c9 	.word	0x080124c9
 8011f48:	080124d5 	.word	0x080124d5
 8011f4c:	08012551 	.word	0x08012551
 8011f50:	080124df 	.word	0x080124df
 8011f54:	08012551 	.word	0x08012551
 8011f58:	08012551 	.word	0x08012551
 8011f5c:	08012551 	.word	0x08012551
 8011f60:	08012551 	.word	0x08012551
 8011f64:	08012551 	.word	0x08012551
 8011f68:	08012551 	.word	0x08012551
 8011f6c:	08012551 	.word	0x08012551
 8011f70:	08012551 	.word	0x08012551
 8011f74:	08012551 	.word	0x08012551
 8011f78:	08012551 	.word	0x08012551
 8011f7c:	08012551 	.word	0x08012551
 8011f80:	08012551 	.word	0x08012551
 8011f84:	08012551 	.word	0x08012551
 8011f88:	08012551 	.word	0x08012551
 8011f8c:	08012551 	.word	0x08012551
 8011f90:	08012551 	.word	0x08012551
 8011f94:	08012509 	.word	0x08012509
 8011f98:	08012515 	.word	0x08012515
 8011f9c:	08012521 	.word	0x08012521
 8011fa0:	0801252d 	.word	0x0801252d
 8011fa4:	08012539 	.word	0x08012539
 8011fa8:	08012545 	.word	0x08012545
 8011fac:	0801254b 	.word	0x0801254b
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	791b      	ldrb	r3, [r3, #4]
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	f7fd fac5 	bl	800f544 <SwitchClass>
 8011fba:	4603      	mov	r3, r0
 8011fbc:	75fb      	strb	r3, [r7, #23]
            break;
 8011fbe:	e2e8      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	791b      	ldrb	r3, [r3, #4]
 8011fc4:	2b02      	cmp	r3, #2
 8011fc6:	d005      	beq.n	8011fd4 <LoRaMacMibSetRequestConfirm+0x15c>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	791a      	ldrb	r2, [r3, #4]
 8011fcc:	4b6c      	ldr	r3, [pc, #432]	@ (8012180 <LoRaMacMibSetRequestConfirm+0x308>)
 8011fce:	f883 212c 	strb.w	r2, [r3, #300]	@ 0x12c
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011fd2:	e2de      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011fd4:	2303      	movs	r3, #3
 8011fd6:	75fb      	strb	r3, [r7, #23]
            break;
 8011fd8:	e2db      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	685b      	ldr	r3, [r3, #4]
 8011fde:	4618      	mov	r0, r3
 8011fe0:	f7fa fb4a 	bl	800c678 <SecureElementSetDevEui>
 8011fe4:	4603      	mov	r3, r0
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	f000 82b8 	beq.w	801255c <LoRaMacMibSetRequestConfirm+0x6e4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011fec:	2303      	movs	r3, #3
 8011fee:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011ff0:	e2b4      	b.n	801255c <LoRaMacMibSetRequestConfirm+0x6e4>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	685b      	ldr	r3, [r3, #4]
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	f7fa fb6e 	bl	800c6d8 <SecureElementSetJoinEui>
 8011ffc:	4603      	mov	r3, r0
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	f000 82ae 	beq.w	8012560 <LoRaMacMibSetRequestConfirm+0x6e8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012004:	2303      	movs	r3, #3
 8012006:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012008:	e2aa      	b.n	8012560 <LoRaMacMibSetRequestConfirm+0x6e8>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	791a      	ldrb	r2, [r3, #4]
 801200e:	4b5c      	ldr	r3, [pc, #368]	@ (8012180 <LoRaMacMibSetRequestConfirm+0x308>)
 8012010:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
            break;
 8012014:	e2bd      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	685b      	ldr	r3, [r3, #4]
 801201a:	4a59      	ldr	r2, [pc, #356]	@ (8012180 <LoRaMacMibSetRequestConfirm+0x308>)
 801201c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
            break;
 8012020:	e2b7      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 8012022:	4b57      	ldr	r3, [pc, #348]	@ (8012180 <LoRaMacMibSetRequestConfirm+0x308>)
 8012024:	f893 212c 	ldrb.w	r2, [r3, #300]	@ 0x12c
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	685b      	ldr	r3, [r3, #4]
 801202c:	4619      	mov	r1, r3
 801202e:	4610      	mov	r0, r2
 8012030:	f7fa fb82 	bl	800c738 <SecureElementSetDevAddr>
 8012034:	4603      	mov	r3, r0
 8012036:	2b00      	cmp	r3, #0
 8012038:	d002      	beq.n	8012040 <LoRaMacMibSetRequestConfirm+0x1c8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801203a:	2303      	movs	r3, #3
 801203c:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 801203e:	e2a8      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	685b      	ldr	r3, [r3, #4]
 8012044:	4a4e      	ldr	r2, [pc, #312]	@ (8012180 <LoRaMacMibSetRequestConfirm+0x308>)
 8012046:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
            break;
 801204a:	e2a2      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	685b      	ldr	r3, [r3, #4]
 8012050:	2b00      	cmp	r3, #0
 8012052:	d00b      	beq.n	801206c <LoRaMacMibSetRequestConfirm+0x1f4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	685b      	ldr	r3, [r3, #4]
 8012058:	4619      	mov	r1, r3
 801205a:	2000      	movs	r0, #0
 801205c:	f001 fff4 	bl	8014048 <LoRaMacCryptoSetKey>
 8012060:	4603      	mov	r3, r0
 8012062:	2b00      	cmp	r3, #0
 8012064:	f000 827e 	beq.w	8012564 <LoRaMacMibSetRequestConfirm+0x6ec>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012068:	2311      	movs	r3, #17
 801206a:	e293      	b.n	8012594 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801206c:	2303      	movs	r3, #3
 801206e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012070:	e278      	b.n	8012564 <LoRaMacMibSetRequestConfirm+0x6ec>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	685b      	ldr	r3, [r3, #4]
 8012076:	2b00      	cmp	r3, #0
 8012078:	d00b      	beq.n	8012092 <LoRaMacMibSetRequestConfirm+0x21a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	685b      	ldr	r3, [r3, #4]
 801207e:	4619      	mov	r1, r3
 8012080:	2001      	movs	r0, #1
 8012082:	f001 ffe1 	bl	8014048 <LoRaMacCryptoSetKey>
 8012086:	4603      	mov	r3, r0
 8012088:	2b00      	cmp	r3, #0
 801208a:	f000 826d 	beq.w	8012568 <LoRaMacMibSetRequestConfirm+0x6f0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801208e:	2311      	movs	r3, #17
 8012090:	e280      	b.n	8012594 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012092:	2303      	movs	r3, #3
 8012094:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012096:	e267      	b.n	8012568 <LoRaMacMibSetRequestConfirm+0x6f0>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	685b      	ldr	r3, [r3, #4]
 801209c:	2b00      	cmp	r3, #0
 801209e:	d00b      	beq.n	80120b8 <LoRaMacMibSetRequestConfirm+0x240>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	685b      	ldr	r3, [r3, #4]
 80120a4:	4619      	mov	r1, r3
 80120a6:	2008      	movs	r0, #8
 80120a8:	f001 ffce 	bl	8014048 <LoRaMacCryptoSetKey>
 80120ac:	4603      	mov	r3, r0
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	f000 825c 	beq.w	801256c <LoRaMacMibSetRequestConfirm+0x6f4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80120b4:	2311      	movs	r3, #17
 80120b6:	e26d      	b.n	8012594 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80120b8:	2303      	movs	r3, #3
 80120ba:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80120bc:	e256      	b.n	801256c <LoRaMacMibSetRequestConfirm+0x6f4>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	685b      	ldr	r3, [r3, #4]
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d00b      	beq.n	80120de <LoRaMacMibSetRequestConfirm+0x266>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	685b      	ldr	r3, [r3, #4]
 80120ca:	4619      	mov	r1, r3
 80120cc:	2009      	movs	r0, #9
 80120ce:	f001 ffbb 	bl	8014048 <LoRaMacCryptoSetKey>
 80120d2:	4603      	mov	r3, r0
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	f000 824b 	beq.w	8012570 <LoRaMacMibSetRequestConfirm+0x6f8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80120da:	2311      	movs	r3, #17
 80120dc:	e25a      	b.n	8012594 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80120de:	2303      	movs	r3, #3
 80120e0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80120e2:	e245      	b.n	8012570 <LoRaMacMibSetRequestConfirm+0x6f8>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	685b      	ldr	r3, [r3, #4]
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d00b      	beq.n	8012104 <LoRaMacMibSetRequestConfirm+0x28c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	685b      	ldr	r3, [r3, #4]
 80120f0:	4619      	mov	r1, r3
 80120f2:	200c      	movs	r0, #12
 80120f4:	f001 ffa8 	bl	8014048 <LoRaMacCryptoSetKey>
 80120f8:	4603      	mov	r3, r0
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	f000 823a 	beq.w	8012574 <LoRaMacMibSetRequestConfirm+0x6fc>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012100:	2311      	movs	r3, #17
 8012102:	e247      	b.n	8012594 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012104:	2303      	movs	r3, #3
 8012106:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012108:	e234      	b.n	8012574 <LoRaMacMibSetRequestConfirm+0x6fc>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	685b      	ldr	r3, [r3, #4]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d00b      	beq.n	801212a <LoRaMacMibSetRequestConfirm+0x2b2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	685b      	ldr	r3, [r3, #4]
 8012116:	4619      	mov	r1, r3
 8012118:	200d      	movs	r0, #13
 801211a:	f001 ff95 	bl	8014048 <LoRaMacCryptoSetKey>
 801211e:	4603      	mov	r3, r0
 8012120:	2b00      	cmp	r3, #0
 8012122:	f000 8229 	beq.w	8012578 <LoRaMacMibSetRequestConfirm+0x700>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012126:	2311      	movs	r3, #17
 8012128:	e234      	b.n	8012594 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801212a:	2303      	movs	r3, #3
 801212c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801212e:	e223      	b.n	8012578 <LoRaMacMibSetRequestConfirm+0x700>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	685b      	ldr	r3, [r3, #4]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d00b      	beq.n	8012150 <LoRaMacMibSetRequestConfirm+0x2d8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	685b      	ldr	r3, [r3, #4]
 801213c:	4619      	mov	r1, r3
 801213e:	200e      	movs	r0, #14
 8012140:	f001 ff82 	bl	8014048 <LoRaMacCryptoSetKey>
 8012144:	4603      	mov	r3, r0
 8012146:	2b00      	cmp	r3, #0
 8012148:	f000 8218 	beq.w	801257c <LoRaMacMibSetRequestConfirm+0x704>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801214c:	2311      	movs	r3, #17
 801214e:	e221      	b.n	8012594 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012150:	2303      	movs	r3, #3
 8012152:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012154:	e212      	b.n	801257c <LoRaMacMibSetRequestConfirm+0x704>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	685b      	ldr	r3, [r3, #4]
 801215a:	2b00      	cmp	r3, #0
 801215c:	d00b      	beq.n	8012176 <LoRaMacMibSetRequestConfirm+0x2fe>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	685b      	ldr	r3, [r3, #4]
 8012162:	4619      	mov	r1, r3
 8012164:	200f      	movs	r0, #15
 8012166:	f001 ff6f 	bl	8014048 <LoRaMacCryptoSetKey>
 801216a:	4603      	mov	r3, r0
 801216c:	2b00      	cmp	r3, #0
 801216e:	f000 8207 	beq.w	8012580 <LoRaMacMibSetRequestConfirm+0x708>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012172:	2311      	movs	r3, #17
 8012174:	e20e      	b.n	8012594 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012176:	2303      	movs	r3, #3
 8012178:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801217a:	e201      	b.n	8012580 <LoRaMacMibSetRequestConfirm+0x708>
 801217c:	2000075c 	.word	0x2000075c
 8012180:	20000c64 	.word	0x20000c64
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	791a      	ldrb	r2, [r3, #4]
 8012188:	4bb2      	ldr	r3, [pc, #712]	@ (8012454 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801218a:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 801218e:	4bb2      	ldr	r3, [pc, #712]	@ (8012458 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012192:	4ab0      	ldr	r2, [pc, #704]	@ (8012454 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8012194:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 8012198:	4610      	mov	r0, r2
 801219a:	4798      	blx	r3
            Radio.Sleep( );
 801219c:	4bae      	ldr	r3, [pc, #696]	@ (8012458 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801219e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121a0:	4798      	blx	r3
            break;
 80121a2:	e1f6      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	791a      	ldrb	r2, [r3, #4]
 80121a8:	4baa      	ldr	r3, [pc, #680]	@ (8012454 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80121aa:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
            break;
 80121ae:	e1f0      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	7a1b      	ldrb	r3, [r3, #8]
 80121b4:	b25b      	sxtb	r3, r3
 80121b6:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80121b8:	4ba6      	ldr	r3, [pc, #664]	@ (8012454 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80121ba:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80121be:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 80121c0:	4ba4      	ldr	r3, [pc, #656]	@ (8012454 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80121c2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80121c6:	f107 0108 	add.w	r1, r7, #8
 80121ca:	2207      	movs	r2, #7
 80121cc:	4618      	mov	r0, r3
 80121ce:	f002 fd83 	bl	8014cd8 <RegionVerify>
 80121d2:	4603      	mov	r3, r0
 80121d4:	f083 0301 	eor.w	r3, r3, #1
 80121d8:	b2db      	uxtb	r3, r3
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d002      	beq.n	80121e4 <LoRaMacMibSetRequestConfirm+0x36c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80121de:	2303      	movs	r3, #3
 80121e0:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 80121e2:	e1d6      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	685b      	ldr	r3, [r3, #4]
 80121e8:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 80121ea:	4b9a      	ldr	r3, [pc, #616]	@ (8012454 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80121ec:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80121f0:	f107 0108 	add.w	r1, r7, #8
 80121f4:	2200      	movs	r2, #0
 80121f6:	4618      	mov	r0, r3
 80121f8:	f002 fd6e 	bl	8014cd8 <RegionVerify>
 80121fc:	4603      	mov	r3, r0
 80121fe:	f083 0301 	eor.w	r3, r3, #1
 8012202:	b2db      	uxtb	r3, r3
 8012204:	2b00      	cmp	r3, #0
 8012206:	d002      	beq.n	801220e <LoRaMacMibSetRequestConfirm+0x396>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012208:	2303      	movs	r3, #3
 801220a:	75fb      	strb	r3, [r7, #23]
            break;
 801220c:	e1c1      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 801220e:	4b91      	ldr	r3, [pc, #580]	@ (8012454 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8012210:	687a      	ldr	r2, [r7, #4]
 8012212:	336c      	adds	r3, #108	@ 0x6c
 8012214:	3204      	adds	r2, #4
 8012216:	e892 0003 	ldmia.w	r2, {r0, r1}
 801221a:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801221e:	e1b8      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	7a1b      	ldrb	r3, [r3, #8]
 8012224:	b25b      	sxtb	r3, r3
 8012226:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012228:	4b8a      	ldr	r3, [pc, #552]	@ (8012454 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801222a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 801222e:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8012230:	4b88      	ldr	r3, [pc, #544]	@ (8012454 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8012232:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012236:	f107 0108 	add.w	r1, r7, #8
 801223a:	2207      	movs	r2, #7
 801223c:	4618      	mov	r0, r3
 801223e:	f002 fd4b 	bl	8014cd8 <RegionVerify>
 8012242:	4603      	mov	r3, r0
 8012244:	2b00      	cmp	r3, #0
 8012246:	d008      	beq.n	801225a <LoRaMacMibSetRequestConfirm+0x3e2>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8012248:	4b82      	ldr	r3, [pc, #520]	@ (8012454 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801224a:	687a      	ldr	r2, [r7, #4]
 801224c:	33b4      	adds	r3, #180	@ 0xb4
 801224e:	3204      	adds	r2, #4
 8012250:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012254:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012258:	e19b      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801225a:	2303      	movs	r3, #3
 801225c:	75fb      	strb	r3, [r7, #23]
            break;
 801225e:	e198      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	7a1b      	ldrb	r3, [r3, #8]
 8012264:	b25b      	sxtb	r3, r3
 8012266:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012268:	4b7a      	ldr	r3, [pc, #488]	@ (8012454 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801226a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 801226e:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8012270:	4b78      	ldr	r3, [pc, #480]	@ (8012454 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8012272:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012276:	f107 0108 	add.w	r1, r7, #8
 801227a:	2207      	movs	r2, #7
 801227c:	4618      	mov	r0, r3
 801227e:	f002 fd2b 	bl	8014cd8 <RegionVerify>
 8012282:	4603      	mov	r3, r0
 8012284:	2b00      	cmp	r3, #0
 8012286:	d019      	beq.n	80122bc <LoRaMacMibSetRequestConfirm+0x444>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8012288:	4b72      	ldr	r3, [pc, #456]	@ (8012454 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801228a:	687a      	ldr	r2, [r7, #4]
 801228c:	3374      	adds	r3, #116	@ 0x74
 801228e:	3204      	adds	r2, #4
 8012290:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012294:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8012298:	4b6e      	ldr	r3, [pc, #440]	@ (8012454 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801229a:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 801229e:	2b02      	cmp	r3, #2
 80122a0:	f040 8170 	bne.w	8012584 <LoRaMacMibSetRequestConfirm+0x70c>
 80122a4:	4b6b      	ldr	r3, [pc, #428]	@ (8012454 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80122a6:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	f000 816a 	beq.w	8012584 <LoRaMacMibSetRequestConfirm+0x70c>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 80122b0:	4b69      	ldr	r3, [pc, #420]	@ (8012458 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80122b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122b4:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 80122b6:	f7fe fbdf 	bl	8010a78 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80122ba:	e163      	b.n	8012584 <LoRaMacMibSetRequestConfirm+0x70c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80122bc:	2303      	movs	r3, #3
 80122be:	75fb      	strb	r3, [r7, #23]
            break;
 80122c0:	e160      	b.n	8012584 <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	7a1b      	ldrb	r3, [r3, #8]
 80122c6:	b25b      	sxtb	r3, r3
 80122c8:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80122ca:	4b62      	ldr	r3, [pc, #392]	@ (8012454 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80122cc:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80122d0:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80122d2:	4b60      	ldr	r3, [pc, #384]	@ (8012454 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80122d4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80122d8:	f107 0108 	add.w	r1, r7, #8
 80122dc:	2207      	movs	r2, #7
 80122de:	4618      	mov	r0, r3
 80122e0:	f002 fcfa 	bl	8014cd8 <RegionVerify>
 80122e4:	4603      	mov	r3, r0
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d008      	beq.n	80122fc <LoRaMacMibSetRequestConfirm+0x484>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 80122ea:	4b5a      	ldr	r3, [pc, #360]	@ (8012454 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80122ec:	687a      	ldr	r2, [r7, #4]
 80122ee:	33bc      	adds	r3, #188	@ 0xbc
 80122f0:	3204      	adds	r2, #4
 80122f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80122f6:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80122fa:	e14a      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80122fc:	2303      	movs	r3, #3
 80122fe:	75fb      	strb	r3, [r7, #23]
            break;
 8012300:	e147      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	685b      	ldr	r3, [r3, #4]
 8012306:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8012308:	2301      	movs	r3, #1
 801230a:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 801230c:	4b51      	ldr	r3, [pc, #324]	@ (8012454 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801230e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012312:	f107 020c 	add.w	r2, r7, #12
 8012316:	4611      	mov	r1, r2
 8012318:	4618      	mov	r0, r3
 801231a:	f002 fd15 	bl	8014d48 <RegionChanMaskSet>
 801231e:	4603      	mov	r3, r0
 8012320:	f083 0301 	eor.w	r3, r3, #1
 8012324:	b2db      	uxtb	r3, r3
 8012326:	2b00      	cmp	r3, #0
 8012328:	f000 812e 	beq.w	8012588 <LoRaMacMibSetRequestConfirm+0x710>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801232c:	2303      	movs	r3, #3
 801232e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012330:	e12a      	b.n	8012588 <LoRaMacMibSetRequestConfirm+0x710>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	685b      	ldr	r3, [r3, #4]
 8012336:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8012338:	2300      	movs	r3, #0
 801233a:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 801233c:	4b45      	ldr	r3, [pc, #276]	@ (8012454 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801233e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012342:	f107 020c 	add.w	r2, r7, #12
 8012346:	4611      	mov	r1, r2
 8012348:	4618      	mov	r0, r3
 801234a:	f002 fcfd 	bl	8014d48 <RegionChanMaskSet>
 801234e:	4603      	mov	r3, r0
 8012350:	f083 0301 	eor.w	r3, r3, #1
 8012354:	b2db      	uxtb	r3, r3
 8012356:	2b00      	cmp	r3, #0
 8012358:	f000 8118 	beq.w	801258c <LoRaMacMibSetRequestConfirm+0x714>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801235c:	2303      	movs	r3, #3
 801235e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012360:	e114      	b.n	801258c <LoRaMacMibSetRequestConfirm+0x714>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	791b      	ldrb	r3, [r3, #4]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d009      	beq.n	801237e <LoRaMacMibSetRequestConfirm+0x506>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 801236e:	2b0f      	cmp	r3, #15
 8012370:	d805      	bhi.n	801237e <LoRaMacMibSetRequestConfirm+0x506>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	791a      	ldrb	r2, [r3, #4]
 8012376:	4b37      	ldr	r3, [pc, #220]	@ (8012454 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8012378:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801237c:	e109      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801237e:	2303      	movs	r3, #3
 8012380:	75fb      	strb	r3, [r7, #23]
            break;
 8012382:	e106      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	685b      	ldr	r3, [r3, #4]
 8012388:	4a32      	ldr	r2, [pc, #200]	@ (8012454 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801238a:	6553      	str	r3, [r2, #84]	@ 0x54
            break;
 801238c:	e101      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	685b      	ldr	r3, [r3, #4]
 8012392:	4a30      	ldr	r2, [pc, #192]	@ (8012454 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8012394:	6593      	str	r3, [r2, #88]	@ 0x58
            break;
 8012396:	e0fc      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	685b      	ldr	r3, [r3, #4]
 801239c:	4a2d      	ldr	r2, [pc, #180]	@ (8012454 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801239e:	65d3      	str	r3, [r2, #92]	@ 0x5c
            break;
 80123a0:	e0f7      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	685b      	ldr	r3, [r3, #4]
 80123a6:	4a2b      	ldr	r2, [pc, #172]	@ (8012454 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80123a8:	6613      	str	r3, [r2, #96]	@ 0x60
            break;
 80123aa:	e0f2      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	685b      	ldr	r3, [r3, #4]
 80123b0:	4a28      	ldr	r2, [pc, #160]	@ (8012454 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80123b2:	6653      	str	r3, [r2, #100]	@ 0x64
            break;
 80123b4:	e0ed      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80123bc:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 80123be:	4b25      	ldr	r3, [pc, #148]	@ (8012454 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80123c0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80123c4:	f107 0108 	add.w	r1, r7, #8
 80123c8:	2206      	movs	r2, #6
 80123ca:	4618      	mov	r0, r3
 80123cc:	f002 fc84 	bl	8014cd8 <RegionVerify>
 80123d0:	4603      	mov	r3, r0
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d005      	beq.n	80123e2 <LoRaMacMibSetRequestConfirm+0x56a>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 80123d6:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80123da:	4b1e      	ldr	r3, [pc, #120]	@ (8012454 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80123dc:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80123e0:	e0d7      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80123e2:	2303      	movs	r3, #3
 80123e4:	75fb      	strb	r3, [r7, #23]
            break;
 80123e6:	e0d4      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80123ee:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80123f0:	4b18      	ldr	r3, [pc, #96]	@ (8012454 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80123f2:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80123f6:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80123f8:	4b16      	ldr	r3, [pc, #88]	@ (8012454 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80123fa:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80123fe:	f107 0108 	add.w	r1, r7, #8
 8012402:	2205      	movs	r2, #5
 8012404:	4618      	mov	r0, r3
 8012406:	f002 fc67 	bl	8014cd8 <RegionVerify>
 801240a:	4603      	mov	r3, r0
 801240c:	2b00      	cmp	r3, #0
 801240e:	d005      	beq.n	801241c <LoRaMacMibSetRequestConfirm+0x5a4>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8012410:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012414:	4b0f      	ldr	r3, [pc, #60]	@ (8012454 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8012416:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801241a:	e0ba      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801241c:	2303      	movs	r3, #3
 801241e:	75fb      	strb	r3, [r7, #23]
            break;
 8012420:	e0b7      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012428:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 801242a:	4b0a      	ldr	r3, [pc, #40]	@ (8012454 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801242c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012430:	f107 0108 	add.w	r1, r7, #8
 8012434:	220a      	movs	r2, #10
 8012436:	4618      	mov	r0, r3
 8012438:	f002 fc4e 	bl	8014cd8 <RegionVerify>
 801243c:	4603      	mov	r3, r0
 801243e:	2b00      	cmp	r3, #0
 8012440:	d005      	beq.n	801244e <LoRaMacMibSetRequestConfirm+0x5d6>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8012442:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012446:	4b03      	ldr	r3, [pc, #12]	@ (8012454 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8012448:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801244c:	e0a1      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801244e:	2303      	movs	r3, #3
 8012450:	75fb      	strb	r3, [r7, #23]
            break;
 8012452:	e09e      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
 8012454:	20000c64 	.word	0x20000c64
 8012458:	0801da80 	.word	0x0801da80
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012462:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8012464:	4b4d      	ldr	r3, [pc, #308]	@ (801259c <LoRaMacMibSetRequestConfirm+0x724>)
 8012466:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801246a:	f107 0108 	add.w	r1, r7, #8
 801246e:	2209      	movs	r2, #9
 8012470:	4618      	mov	r0, r3
 8012472:	f002 fc31 	bl	8014cd8 <RegionVerify>
 8012476:	4603      	mov	r3, r0
 8012478:	2b00      	cmp	r3, #0
 801247a:	d005      	beq.n	8012488 <LoRaMacMibSetRequestConfirm+0x610>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 801247c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012480:	4b46      	ldr	r3, [pc, #280]	@ (801259c <LoRaMacMibSetRequestConfirm+0x724>)
 8012482:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012486:	e084      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012488:	2303      	movs	r3, #3
 801248a:	75fb      	strb	r3, [r7, #23]
            break;
 801248c:	e081      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	685b      	ldr	r3, [r3, #4]
 8012492:	4a42      	ldr	r2, [pc, #264]	@ (801259c <LoRaMacMibSetRequestConfirm+0x724>)
 8012494:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8012498:	4b40      	ldr	r3, [pc, #256]	@ (801259c <LoRaMacMibSetRequestConfirm+0x724>)
 801249a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801249e:	4a3f      	ldr	r2, [pc, #252]	@ (801259c <LoRaMacMibSetRequestConfirm+0x724>)
 80124a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
            break;
 80124a2:	e076      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	791a      	ldrb	r2, [r3, #4]
 80124a8:	4b3c      	ldr	r3, [pc, #240]	@ (801259c <LoRaMacMibSetRequestConfirm+0x724>)
 80124aa:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
 80124ae:	4b3b      	ldr	r3, [pc, #236]	@ (801259c <LoRaMacMibSetRequestConfirm+0x724>)
 80124b0:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 80124b4:	4b39      	ldr	r3, [pc, #228]	@ (801259c <LoRaMacMibSetRequestConfirm+0x724>)
 80124b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            break;
 80124ba:	e06a      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	685b      	ldr	r3, [r3, #4]
 80124c0:	4a36      	ldr	r2, [pc, #216]	@ (801259c <LoRaMacMibSetRequestConfirm+0x724>)
 80124c2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            break;
 80124c6:	e064      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	685b      	ldr	r3, [r3, #4]
 80124cc:	4a33      	ldr	r2, [pc, #204]	@ (801259c <LoRaMacMibSetRequestConfirm+0x724>)
 80124ce:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
            break;
 80124d2:	e05e      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 80124d4:	f7fe fd2c 	bl	8010f30 <RestoreNvmData>
 80124d8:	4603      	mov	r3, r0
 80124da:	75fb      	strb	r3, [r7, #23]
            break;
 80124dc:	e059      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	799b      	ldrb	r3, [r3, #6]
 80124e2:	2b01      	cmp	r3, #1
 80124e4:	d80d      	bhi.n	8012502 <LoRaMacMibSetRequestConfirm+0x68a>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 80124e6:	4a2d      	ldr	r2, [pc, #180]	@ (801259c <LoRaMacMibSetRequestConfirm+0x724>)
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	685b      	ldr	r3, [r3, #4]
 80124ec:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	6858      	ldr	r0, [r3, #4]
 80124f4:	f001 fce0 	bl	8013eb8 <LoRaMacCryptoSetLrWanVersion>
 80124f8:	4603      	mov	r3, r0
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d048      	beq.n	8012590 <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80124fe:	2311      	movs	r3, #17
 8012500:	e048      	b.n	8012594 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012502:	2303      	movs	r3, #3
 8012504:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012506:	e043      	b.n	8012590 <LoRaMacMibSetRequestConfirm+0x718>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	685b      	ldr	r3, [r3, #4]
 801250c:	4a23      	ldr	r2, [pc, #140]	@ (801259c <LoRaMacMibSetRequestConfirm+0x724>)
 801250e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
            break;
 8012512:	e03e      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	889a      	ldrh	r2, [r3, #4]
 8012518:	4b20      	ldr	r3, [pc, #128]	@ (801259c <LoRaMacMibSetRequestConfirm+0x724>)
 801251a:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
            break;
 801251e:	e038      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	889a      	ldrh	r2, [r3, #4]
 8012524:	4b1d      	ldr	r3, [pc, #116]	@ (801259c <LoRaMacMibSetRequestConfirm+0x724>)
 8012526:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
            break;
 801252a:	e032      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	889a      	ldrh	r2, [r3, #4]
 8012530:	4b1a      	ldr	r3, [pc, #104]	@ (801259c <LoRaMacMibSetRequestConfirm+0x724>)
 8012532:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
            break;
 8012536:	e02c      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	889a      	ldrh	r2, [r3, #4]
 801253c:	4b17      	ldr	r3, [pc, #92]	@ (801259c <LoRaMacMibSetRequestConfirm+0x724>)
 801253e:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
            break;
 8012542:	e026      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8012544:	2318      	movs	r3, #24
 8012546:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8012548:	e023      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 801254a:	2318      	movs	r3, #24
 801254c:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 801254e:	e020      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8012550:	6878      	ldr	r0, [r7, #4]
 8012552:	f000 fc27 	bl	8012da4 <LoRaMacMibClassBSetRequestConfirm>
 8012556:	4603      	mov	r3, r0
 8012558:	75fb      	strb	r3, [r7, #23]
            break;
 801255a:	e01a      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 801255c:	bf00      	nop
 801255e:	e018      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8012560:	bf00      	nop
 8012562:	e016      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8012564:	bf00      	nop
 8012566:	e014      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8012568:	bf00      	nop
 801256a:	e012      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 801256c:	bf00      	nop
 801256e:	e010      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8012570:	bf00      	nop
 8012572:	e00e      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8012574:	bf00      	nop
 8012576:	e00c      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8012578:	bf00      	nop
 801257a:	e00a      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 801257c:	bf00      	nop
 801257e:	e008      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8012580:	bf00      	nop
 8012582:	e006      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8012584:	bf00      	nop
 8012586:	e004      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8012588:	bf00      	nop
 801258a:	e002      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 801258c:	bf00      	nop
 801258e:	e000      	b.n	8012592 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8012590:	bf00      	nop
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
 8012592:	7dfb      	ldrb	r3, [r7, #23]
}
 8012594:	4618      	mov	r0, r3
 8012596:	3718      	adds	r7, #24
 8012598:	46bd      	mov	sp, r7
 801259a:	bd80      	pop	{r7, pc}
 801259c:	20000c64 	.word	0x20000c64

080125a0 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 80125a0:	b580      	push	{r7, lr}
 80125a2:	b086      	sub	sp, #24
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80125a8:	2302      	movs	r3, #2
 80125aa:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80125ac:	2300      	movs	r3, #0
 80125ae:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d101      	bne.n	80125ba <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80125b6:	2303      	movs	r3, #3
 80125b8:	e13a      	b.n	8012830 <LoRaMacMlmeRequest+0x290>
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 80125ba:	f7fc fbe3 	bl	800ed84 <LoRaMacIsBusy>
 80125be:	4603      	mov	r3, r0
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d001      	beq.n	80125c8 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 80125c4:	2301      	movs	r3, #1
 80125c6:	e133      	b.n	8012830 <LoRaMacMlmeRequest+0x290>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 80125c8:	f001 f90c 	bl	80137e4 <LoRaMacConfirmQueueIsFull>
 80125cc:	4603      	mov	r3, r0
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d001      	beq.n	80125d6 <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 80125d2:	2301      	movs	r3, #1
 80125d4:	e12c      	b.n	8012830 <LoRaMacMlmeRequest+0x290>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80125d6:	f001 f8f9 	bl	80137cc <LoRaMacConfirmQueueGetCnt>
 80125da:	4603      	mov	r3, r0
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d104      	bne.n	80125ea <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 80125e0:	2214      	movs	r2, #20
 80125e2:	2100      	movs	r1, #0
 80125e4:	4894      	ldr	r0, [pc, #592]	@ (8012838 <LoRaMacMlmeRequest+0x298>)
 80125e6:	f006 fa37 	bl	8018a58 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80125ea:	4b94      	ldr	r3, [pc, #592]	@ (801283c <LoRaMacMlmeRequest+0x29c>)
 80125ec:	2201      	movs	r2, #1
 80125ee:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 80125f2:	4a92      	ldr	r2, [pc, #584]	@ (801283c <LoRaMacMlmeRequest+0x29c>)
 80125f4:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 80125f8:	f043 0304 	orr.w	r3, r3, #4
 80125fc:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    queueElement.Request = mlmeRequest->Type;
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	781b      	ldrb	r3, [r3, #0]
 8012604:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012606:	2301      	movs	r3, #1
 8012608:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 801260a:	2300      	movs	r3, #0
 801260c:	74fb      	strb	r3, [r7, #19]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	781b      	ldrb	r3, [r3, #0]
 8012612:	3b01      	subs	r3, #1
 8012614:	2b0d      	cmp	r3, #13
 8012616:	f200 80e1 	bhi.w	80127dc <LoRaMacMlmeRequest+0x23c>
 801261a:	a201      	add	r2, pc, #4	@ (adr r2, 8012620 <LoRaMacMlmeRequest+0x80>)
 801261c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012620:	08012659 	.word	0x08012659
 8012624:	080127dd 	.word	0x080127dd
 8012628:	080127dd 	.word	0x080127dd
 801262c:	080127dd 	.word	0x080127dd
 8012630:	080126d1 	.word	0x080126d1
 8012634:	080126ef 	.word	0x080126ef
 8012638:	080126ff 	.word	0x080126ff
 801263c:	080127dd 	.word	0x080127dd
 8012640:	080127dd 	.word	0x080127dd
 8012644:	0801271b 	.word	0x0801271b
 8012648:	080127dd 	.word	0x080127dd
 801264c:	080127b1 	.word	0x080127b1
 8012650:	08012751 	.word	0x08012751
 8012654:	08012793 	.word	0x08012793
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8012658:	4b78      	ldr	r3, [pc, #480]	@ (801283c <LoRaMacMlmeRequest+0x29c>)
 801265a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801265e:	f003 0320 	and.w	r3, r3, #32
 8012662:	2b00      	cmp	r3, #0
 8012664:	d001      	beq.n	801266a <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 8012666:	2301      	movs	r3, #1
 8012668:	e0e2      	b.n	8012830 <LoRaMacMlmeRequest+0x290>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            ResetMacParameters( false );
 801266a:	2000      	movs	r0, #0
 801266c:	f7fe f8aa 	bl	80107c4 <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8012670:	4b73      	ldr	r3, [pc, #460]	@ (8012840 <LoRaMacMlmeRequest+0x2a0>)
 8012672:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	795b      	ldrb	r3, [r3, #5]
 801267a:	b25b      	sxtb	r3, r3
 801267c:	2200      	movs	r2, #0
 801267e:	4619      	mov	r1, r3
 8012680:	f002 fc72 	bl	8014f68 <RegionAlternateDr>
 8012684:	4603      	mov	r3, r0
 8012686:	461a      	mov	r2, r3
 8012688:	4b6d      	ldr	r3, [pc, #436]	@ (8012840 <LoRaMacMlmeRequest+0x2a0>)
 801268a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8012694:	4b6a      	ldr	r3, [pc, #424]	@ (8012840 <LoRaMacMlmeRequest+0x2a0>)
 8012696:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 801269a:	2307      	movs	r3, #7
 801269c:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 801269e:	20ff      	movs	r0, #255	@ 0xff
 80126a0:	f7fd fe0e 	bl	80102c0 <SendReJoinReq>
 80126a4:	4603      	mov	r3, r0
 80126a6:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 80126a8:	7dfb      	ldrb	r3, [r7, #23]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	f000 8098 	beq.w	80127e0 <LoRaMacMlmeRequest+0x240>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 80126b0:	4b63      	ldr	r3, [pc, #396]	@ (8012840 <LoRaMacMlmeRequest+0x2a0>)
 80126b2:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	795b      	ldrb	r3, [r3, #5]
 80126ba:	b25b      	sxtb	r3, r3
 80126bc:	2201      	movs	r2, #1
 80126be:	4619      	mov	r1, r3
 80126c0:	f002 fc52 	bl	8014f68 <RegionAlternateDr>
 80126c4:	4603      	mov	r3, r0
 80126c6:	461a      	mov	r2, r3
 80126c8:	4b5d      	ldr	r3, [pc, #372]	@ (8012840 <LoRaMacMlmeRequest+0x2a0>)
 80126ca:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                OnMacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 80126ce:	e087      	b.n	80127e0 <LoRaMacMlmeRequest+0x240>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80126d0:	2300      	movs	r3, #0
 80126d2:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80126d4:	f107 030c 	add.w	r3, r7, #12
 80126d8:	2200      	movs	r2, #0
 80126da:	4619      	mov	r1, r3
 80126dc:	2002      	movs	r0, #2
 80126de:	f000 fcd1 	bl	8013084 <LoRaMacCommandsAddCmd>
 80126e2:	4603      	mov	r3, r0
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d07d      	beq.n	80127e4 <LoRaMacMlmeRequest+0x244>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80126e8:	2313      	movs	r3, #19
 80126ea:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80126ec:	e07a      	b.n	80127e4 <LoRaMacMlmeRequest+0x244>
        }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	889b      	ldrh	r3, [r3, #4]
 80126f2:	4618      	mov	r0, r3
 80126f4:	f7fe fbc6 	bl	8010e84 <SetTxContinuousWave>
 80126f8:	4603      	mov	r3, r0
 80126fa:	75fb      	strb	r3, [r7, #23]
            break;
 80126fc:	e079      	b.n	80127f2 <LoRaMacMlmeRequest+0x252>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	8898      	ldrh	r0, [r3, #4]
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	6899      	ldr	r1, [r3, #8]
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801270c:	b2db      	uxtb	r3, r3
 801270e:	461a      	mov	r2, r3
 8012710:	f7fe fbee 	bl	8010ef0 <SetTxContinuousWave1>
 8012714:	4603      	mov	r3, r0
 8012716:	75fb      	strb	r3, [r7, #23]
            break;
 8012718:	e06b      	b.n	80127f2 <LoRaMacMlmeRequest+0x252>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801271a:	2300      	movs	r3, #0
 801271c:	75fb      	strb	r3, [r7, #23]
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 801271e:	f107 0308 	add.w	r3, r7, #8
 8012722:	4619      	mov	r1, r3
 8012724:	200d      	movs	r0, #13
 8012726:	f000 fd2d 	bl	8013184 <LoRaMacCommandsGetCmd>
 801272a:	4603      	mov	r3, r0
 801272c:	2b00      	cmp	r3, #0
 801272e:	d102      	bne.n	8012736 <LoRaMacMlmeRequest+0x196>
            {
                status = LORAMAC_STATUS_OK;
 8012730:	2300      	movs	r3, #0
 8012732:	75fb      	strb	r3, [r7, #23]
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 8012734:	e058      	b.n	80127e8 <LoRaMacMlmeRequest+0x248>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012736:	f107 030c 	add.w	r3, r7, #12
 801273a:	2200      	movs	r2, #0
 801273c:	4619      	mov	r1, r3
 801273e:	200d      	movs	r0, #13
 8012740:	f000 fca0 	bl	8013084 <LoRaMacCommandsAddCmd>
 8012744:	4603      	mov	r3, r0
 8012746:	2b00      	cmp	r3, #0
 8012748:	d04e      	beq.n	80127e8 <LoRaMacMlmeRequest+0x248>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801274a:	2313      	movs	r3, #19
 801274c:	75fb      	strb	r3, [r7, #23]
            break;
 801274e:	e04b      	b.n	80127e8 <LoRaMacMlmeRequest+0x248>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8012750:	4b3b      	ldr	r3, [pc, #236]	@ (8012840 <LoRaMacMlmeRequest+0x2a0>)
 8012752:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8012756:	2b00      	cmp	r3, #0
 8012758:	d148      	bne.n	80127ec <LoRaMacMlmeRequest+0x24c>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	791b      	ldrb	r3, [r3, #4]
 801275e:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	791b      	ldrb	r3, [r3, #4]
 8012764:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8012768:	b2db      	uxtb	r3, r3
 801276a:	4618      	mov	r0, r3
 801276c:	f000 faef 	bl	8012d4e <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8012770:	7dbb      	ldrb	r3, [r7, #22]
 8012772:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8012774:	2300      	movs	r3, #0
 8012776:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8012778:	f107 030c 	add.w	r3, r7, #12
 801277c:	2201      	movs	r2, #1
 801277e:	4619      	mov	r1, r3
 8012780:	2010      	movs	r0, #16
 8012782:	f000 fc7f 	bl	8013084 <LoRaMacCommandsAddCmd>
 8012786:	4603      	mov	r3, r0
 8012788:	2b00      	cmp	r3, #0
 801278a:	d02f      	beq.n	80127ec <LoRaMacMlmeRequest+0x24c>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801278c:	2313      	movs	r3, #19
 801278e:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 8012790:	e02c      	b.n	80127ec <LoRaMacMlmeRequest+0x24c>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012792:	2300      	movs	r3, #0
 8012794:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012796:	f107 030c 	add.w	r3, r7, #12
 801279a:	2200      	movs	r2, #0
 801279c:	4619      	mov	r1, r3
 801279e:	2012      	movs	r0, #18
 80127a0:	f000 fc70 	bl	8013084 <LoRaMacCommandsAddCmd>
 80127a4:	4603      	mov	r3, r0
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d022      	beq.n	80127f0 <LoRaMacMlmeRequest+0x250>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80127aa:	2313      	movs	r3, #19
 80127ac:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80127ae:	e01f      	b.n	80127f0 <LoRaMacMlmeRequest+0x250>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 80127b0:	2301      	movs	r3, #1
 80127b2:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 80127b4:	f000 fa81 	bl	8012cba <LoRaMacClassBIsAcquisitionInProgress>
 80127b8:	4603      	mov	r3, r0
 80127ba:	f083 0301 	eor.w	r3, r3, #1
 80127be:	b2db      	uxtb	r3, r3
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d008      	beq.n	80127d6 <LoRaMacMlmeRequest+0x236>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 80127c4:	2000      	movs	r0, #0
 80127c6:	f000 fa5a 	bl	8012c7e <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 80127ca:	2000      	movs	r0, #0
 80127cc:	f000 fa7c 	bl	8012cc8 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 80127d0:	2300      	movs	r3, #0
 80127d2:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 80127d4:	e00d      	b.n	80127f2 <LoRaMacMlmeRequest+0x252>
                status = LORAMAC_STATUS_BUSY;
 80127d6:	2301      	movs	r3, #1
 80127d8:	75fb      	strb	r3, [r7, #23]
            break;
 80127da:	e00a      	b.n	80127f2 <LoRaMacMlmeRequest+0x252>
        }
        default:
            break;
 80127dc:	bf00      	nop
 80127de:	e008      	b.n	80127f2 <LoRaMacMlmeRequest+0x252>
            break;
 80127e0:	bf00      	nop
 80127e2:	e006      	b.n	80127f2 <LoRaMacMlmeRequest+0x252>
            break;
 80127e4:	bf00      	nop
 80127e6:	e004      	b.n	80127f2 <LoRaMacMlmeRequest+0x252>
            break;
 80127e8:	bf00      	nop
 80127ea:	e002      	b.n	80127f2 <LoRaMacMlmeRequest+0x252>
            break;
 80127ec:	bf00      	nop
 80127ee:	e000      	b.n	80127f2 <LoRaMacMlmeRequest+0x252>
            break;
 80127f0:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80127f2:	4b12      	ldr	r3, [pc, #72]	@ (801283c <LoRaMacMlmeRequest+0x29c>)
 80127f4:	f8d3 2484 	ldr.w	r2, [r3, #1156]	@ 0x484
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 80127fc:	7dfb      	ldrb	r3, [r7, #23]
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d010      	beq.n	8012824 <LoRaMacMlmeRequest+0x284>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8012802:	f000 ffe3 	bl	80137cc <LoRaMacConfirmQueueGetCnt>
 8012806:	4603      	mov	r3, r0
 8012808:	2b00      	cmp	r3, #0
 801280a:	d110      	bne.n	801282e <LoRaMacMlmeRequest+0x28e>
        {
            MacCtx.NodeAckRequested = false;
 801280c:	4b0b      	ldr	r3, [pc, #44]	@ (801283c <LoRaMacMlmeRequest+0x29c>)
 801280e:	2200      	movs	r2, #0
 8012810:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8012814:	4a09      	ldr	r2, [pc, #36]	@ (801283c <LoRaMacMlmeRequest+0x29c>)
 8012816:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 801281a:	f36f 0382 	bfc	r3, #2, #1
 801281e:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
 8012822:	e004      	b.n	801282e <LoRaMacMlmeRequest+0x28e>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8012824:	f107 0310 	add.w	r3, r7, #16
 8012828:	4618      	mov	r0, r3
 801282a:	f000 fe7b 	bl	8013524 <LoRaMacConfirmQueueAdd>
    }
    return status;
 801282e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012830:	4618      	mov	r0, r3
 8012832:	3718      	adds	r7, #24
 8012834:	46bd      	mov	sp, r7
 8012836:	bd80      	pop	{r7, pc}
 8012838:	20000ba4 	.word	0x20000ba4
 801283c:	2000075c 	.word	0x2000075c
 8012840:	20000c64 	.word	0x20000c64

08012844 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8012844:	b580      	push	{r7, lr}
 8012846:	b08c      	sub	sp, #48	@ 0x30
 8012848:	af02      	add	r7, sp, #8
 801284a:	6078      	str	r0, [r7, #4]
 801284c:	460b      	mov	r3, r1
 801284e:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012850:	2302      	movs	r3, #2
 8012852:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8012856:	2300      	movs	r3, #0
 8012858:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    void* fBuffer = NULL;
 801285c:	2300      	movs	r3, #0
 801285e:	623b      	str	r3, [r7, #32]
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8012860:	2300      	movs	r3, #0
 8012862:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8012864:	2300      	movs	r3, #0
 8012866:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d101      	bne.n	8012872 <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801286e:	2303      	movs	r3, #3
 8012870:	e0d4      	b.n	8012a1c <LoRaMacMcpsRequest+0x1d8>
    }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 8012872:	f7fc fa87 	bl	800ed84 <LoRaMacIsBusy>
 8012876:	4603      	mov	r3, r0
 8012878:	2b00      	cmp	r3, #0
 801287a:	d001      	beq.n	8012880 <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 801287c:	2301      	movs	r3, #1
 801287e:	e0cd      	b.n	8012a1c <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 8012880:	2300      	movs	r3, #0
 8012882:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8012884:	2214      	movs	r2, #20
 8012886:	2100      	movs	r1, #0
 8012888:	4866      	ldr	r0, [pc, #408]	@ (8012a24 <LoRaMacMcpsRequest+0x1e0>)
 801288a:	f006 f8e5 	bl	8018a58 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801288e:	4b66      	ldr	r3, [pc, #408]	@ (8012a28 <LoRaMacMcpsRequest+0x1e4>)
 8012890:	2201      	movs	r2, #1
 8012892:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8012896:	4b64      	ldr	r3, [pc, #400]	@ (8012a28 <LoRaMacMcpsRequest+0x1e4>)
 8012898:	2201      	movs	r2, #1
 801289a:	f883 240e 	strb.w	r2, [r3, #1038]	@ 0x40e

    switch( mcpsRequest->Type )
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	781b      	ldrb	r3, [r3, #0]
 80128a2:	2b03      	cmp	r3, #3
 80128a4:	d03d      	beq.n	8012922 <LoRaMacMcpsRequest+0xde>
 80128a6:	2b03      	cmp	r3, #3
 80128a8:	dc4f      	bgt.n	801294a <LoRaMacMcpsRequest+0x106>
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d002      	beq.n	80128b4 <LoRaMacMcpsRequest+0x70>
 80128ae:	2b01      	cmp	r3, #1
 80128b0:	d019      	beq.n	80128e6 <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 80128b2:	e04a      	b.n	801294a <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 80128b4:	2301      	movs	r3, #1
 80128b6:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 80128b8:	4b5b      	ldr	r3, [pc, #364]	@ (8012a28 <LoRaMacMcpsRequest+0x1e4>)
 80128ba:	2201      	movs	r2, #1
 80128bc:	f883 240d 	strb.w	r2, [r3, #1037]	@ 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 80128c0:	7b3b      	ldrb	r3, [r7, #12]
 80128c2:	2202      	movs	r2, #2
 80128c4:	f362 1347 	bfi	r3, r2, #5, #3
 80128c8:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	791b      	ldrb	r3, [r3, #4]
 80128ce:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	689b      	ldr	r3, [r3, #8]
 80128d6:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	899b      	ldrh	r3, [r3, #12]
 80128dc:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	7b9b      	ldrb	r3, [r3, #14]
 80128e2:	777b      	strb	r3, [r7, #29]
            break;
 80128e4:	e032      	b.n	801294c <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 80128e6:	2301      	movs	r3, #1
 80128e8:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	7bdb      	ldrb	r3, [r3, #15]
 80128ee:	2b08      	cmp	r3, #8
 80128f0:	bf28      	it	cs
 80128f2:	2308      	movcs	r3, #8
 80128f4:	b2da      	uxtb	r2, r3
 80128f6:	4b4c      	ldr	r3, [pc, #304]	@ (8012a28 <LoRaMacMcpsRequest+0x1e4>)
 80128f8:	f883 240d 	strb.w	r2, [r3, #1037]	@ 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 80128fc:	7b3b      	ldrb	r3, [r7, #12]
 80128fe:	2204      	movs	r2, #4
 8012900:	f362 1347 	bfi	r3, r2, #5, #3
 8012904:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	791b      	ldrb	r3, [r3, #4]
 801290a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	689b      	ldr	r3, [r3, #8]
 8012912:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	899b      	ldrh	r3, [r3, #12]
 8012918:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	7b9b      	ldrb	r3, [r3, #14]
 801291e:	777b      	strb	r3, [r7, #29]
            break;
 8012920:	e014      	b.n	801294c <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8012922:	2301      	movs	r3, #1
 8012924:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8012926:	4b40      	ldr	r3, [pc, #256]	@ (8012a28 <LoRaMacMcpsRequest+0x1e4>)
 8012928:	2201      	movs	r2, #1
 801292a:	f883 240d 	strb.w	r2, [r3, #1037]	@ 0x40d
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 801292e:	7b3b      	ldrb	r3, [r7, #12]
 8012930:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8012934:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	685b      	ldr	r3, [r3, #4]
 801293a:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	891b      	ldrh	r3, [r3, #8]
 8012940:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	7a9b      	ldrb	r3, [r3, #10]
 8012946:	777b      	strb	r3, [r7, #29]
            break;
 8012948:	e000      	b.n	801294c <LoRaMacMcpsRequest+0x108>
            break;
 801294a:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801294c:	2302      	movs	r3, #2
 801294e:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012950:	4b36      	ldr	r3, [pc, #216]	@ (8012a2c <LoRaMacMcpsRequest+0x1e8>)
 8012952:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8012956:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012958:	4b34      	ldr	r3, [pc, #208]	@ (8012a2c <LoRaMacMcpsRequest+0x1e8>)
 801295a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801295e:	f107 0214 	add.w	r2, r7, #20
 8012962:	4611      	mov	r1, r2
 8012964:	4618      	mov	r0, r3
 8012966:	f002 f969 	bl	8014c3c <RegionGetPhyParam>
 801296a:	4603      	mov	r3, r0
 801296c:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 801296e:	693b      	ldr	r3, [r7, #16]
 8012970:	b25b      	sxtb	r3, r3
 8012972:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8012976:	4293      	cmp	r3, r2
 8012978:	bfb8      	it	lt
 801297a:	4613      	movlt	r3, r2
 801297c:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 801297e:	7f3b      	ldrb	r3, [r7, #28]
 8012980:	2b00      	cmp	r3, #0
 8012982:	d044      	beq.n	8012a0e <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8012984:	4b29      	ldr	r3, [pc, #164]	@ (8012a2c <LoRaMacMcpsRequest+0x1e8>)
 8012986:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 801298a:	f083 0301 	eor.w	r3, r3, #1
 801298e:	b2db      	uxtb	r3, r3
 8012990:	2b00      	cmp	r3, #0
 8012992:	d019      	beq.n	80129c8 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 8012994:	7f7b      	ldrb	r3, [r7, #29]
 8012996:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012998:	4b24      	ldr	r3, [pc, #144]	@ (8012a2c <LoRaMacMcpsRequest+0x1e8>)
 801299a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801299e:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80129a0:	4b22      	ldr	r3, [pc, #136]	@ (8012a2c <LoRaMacMcpsRequest+0x1e8>)
 80129a2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80129a6:	f107 0108 	add.w	r1, r7, #8
 80129aa:	2205      	movs	r2, #5
 80129ac:	4618      	mov	r0, r3
 80129ae:	f002 f993 	bl	8014cd8 <RegionVerify>
 80129b2:	4603      	mov	r3, r0
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d005      	beq.n	80129c4 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80129b8:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80129bc:	4b1b      	ldr	r3, [pc, #108]	@ (8012a2c <LoRaMacMcpsRequest+0x1e8>)
 80129be:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 80129c2:	e001      	b.n	80129c8 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 80129c4:	2303      	movs	r3, #3
 80129c6:	e029      	b.n	8012a1c <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 80129c8:	8bfa      	ldrh	r2, [r7, #30]
 80129ca:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 80129ce:	f107 000c 	add.w	r0, r7, #12
 80129d2:	78fb      	ldrb	r3, [r7, #3]
 80129d4:	9300      	str	r3, [sp, #0]
 80129d6:	4613      	mov	r3, r2
 80129d8:	6a3a      	ldr	r2, [r7, #32]
 80129da:	f7fd fb93 	bl	8010104 <Send>
 80129de:	4603      	mov	r3, r0
 80129e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if( status == LORAMAC_STATUS_OK )
 80129e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d10c      	bne.n	8012a06 <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	781a      	ldrb	r2, [r3, #0]
 80129f0:	4b0d      	ldr	r3, [pc, #52]	@ (8012a28 <LoRaMacMcpsRequest+0x1e4>)
 80129f2:	f883 2434 	strb.w	r2, [r3, #1076]	@ 0x434
            MacCtx.MacFlags.Bits.McpsReq = 1;
 80129f6:	4a0c      	ldr	r2, [pc, #48]	@ (8012a28 <LoRaMacMcpsRequest+0x1e4>)
 80129f8:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 80129fc:	f043 0301 	orr.w	r3, r3, #1
 8012a00:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
 8012a04:	e003      	b.n	8012a0e <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8012a06:	4b08      	ldr	r3, [pc, #32]	@ (8012a28 <LoRaMacMcpsRequest+0x1e4>)
 8012a08:	2200      	movs	r2, #0
 8012a0a:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8012a0e:	4b06      	ldr	r3, [pc, #24]	@ (8012a28 <LoRaMacMcpsRequest+0x1e4>)
 8012a10:	f8d3 2484 	ldr.w	r2, [r3, #1156]	@ 0x484
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	611a      	str	r2, [r3, #16]

    return status;
 8012a18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	3728      	adds	r7, #40	@ 0x28
 8012a20:	46bd      	mov	sp, r7
 8012a22:	bd80      	pop	{r7, pc}
 8012a24:	20000b90 	.word	0x20000b90
 8012a28:	2000075c 	.word	0x2000075c
 8012a2c:	20000c64 	.word	0x20000c64

08012a30 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8012a30:	b580      	push	{r7, lr}
 8012a32:	b084      	sub	sp, #16
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	4603      	mov	r3, r0
 8012a38:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8012a3a:	79fb      	ldrb	r3, [r7, #7]
 8012a3c:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8012a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8012a74 <LoRaMacTestSetDutyCycleOn+0x44>)
 8012a40:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012a44:	f107 010c 	add.w	r1, r7, #12
 8012a48:	220f      	movs	r2, #15
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	f002 f944 	bl	8014cd8 <RegionVerify>
 8012a50:	4603      	mov	r3, r0
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d00a      	beq.n	8012a6c <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8012a56:	4a07      	ldr	r2, [pc, #28]	@ (8012a74 <LoRaMacTestSetDutyCycleOn+0x44>)
 8012a58:	79fb      	ldrb	r3, [r7, #7]
 8012a5a:	f882 311c 	strb.w	r3, [r2, #284]	@ 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8012a5e:	4a06      	ldr	r2, [pc, #24]	@ (8012a78 <LoRaMacTestSetDutyCycleOn+0x48>)
 8012a60:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 8012a64:	f043 0320 	orr.w	r3, r3, #32
 8012a68:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    }
}
 8012a6c:	bf00      	nop
 8012a6e:	3710      	adds	r7, #16
 8012a70:	46bd      	mov	sp, r7
 8012a72:	bd80      	pop	{r7, pc}
 8012a74:	20000c64 	.word	0x20000c64
 8012a78:	2000075c 	.word	0x2000075c

08012a7c <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8012a7c:	b580      	push	{r7, lr}
 8012a7e:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8012a80:	f7fe ff5c 	bl	801193c <LoRaMacStop>
 8012a84:	4603      	mov	r3, r0
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d115      	bne.n	8012ab6 <LoRaMacDeInitialization+0x3a>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 8012a8a:	480c      	ldr	r0, [pc, #48]	@ (8012abc <LoRaMacDeInitialization+0x40>)
 8012a8c:	f009 fbc0 	bl	801c210 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8012a90:	480b      	ldr	r0, [pc, #44]	@ (8012ac0 <LoRaMacDeInitialization+0x44>)
 8012a92:	f009 fbbd 	bl	801c210 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8012a96:	480b      	ldr	r0, [pc, #44]	@ (8012ac4 <LoRaMacDeInitialization+0x48>)
 8012a98:	f009 fbba 	bl	801c210 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
 8012a9c:	480a      	ldr	r0, [pc, #40]	@ (8012ac8 <LoRaMacDeInitialization+0x4c>)
 8012a9e:	f009 fbb7 	bl	801c210 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8012aa2:	f000 f95e 	bl	8012d62 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 8012aa6:	2000      	movs	r0, #0
 8012aa8:	f7fd fe8c 	bl	80107c4 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8012aac:	4b07      	ldr	r3, [pc, #28]	@ (8012acc <LoRaMacDeInitialization+0x50>)
 8012aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ab0:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8012ab2:	2300      	movs	r3, #0
 8012ab4:	e000      	b.n	8012ab8 <LoRaMacDeInitialization+0x3c>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8012ab6:	2301      	movs	r3, #1
    }
}
 8012ab8:	4618      	mov	r0, r3
 8012aba:	bd80      	pop	{r7, pc}
 8012abc:	20000ac4 	.word	0x20000ac4
 8012ac0:	20000adc 	.word	0x20000adc
 8012ac4:	20000af4 	.word	0x20000af4
 8012ac8:	20000b50 	.word	0x20000b50
 8012acc:	0801da80 	.word	0x0801da80

08012ad0 <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8012ad0:	b580      	push	{r7, lr}
 8012ad2:	b08c      	sub	sp, #48	@ 0x30
 8012ad4:	af00      	add	r7, sp, #0
 8012ad6:	60f8      	str	r0, [r7, #12]
 8012ad8:	60b9      	str	r1, [r7, #8]
 8012ada:	607a      	str	r2, [r7, #4]
 8012adc:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8012ade:	2300      	movs	r3, #0
 8012ae0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = adrNext->Datarate;
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	7c1b      	ldrb	r3, [r3, #16]
 8012ae8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = adrNext->TxPower;
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	7c5b      	ldrb	r3, [r3, #17]
 8012af0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	689a      	ldr	r2, [r3, #8]
 8012af8:	683b      	ldr	r3, [r7, #0]
 8012afa:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	795b      	ldrb	r3, [r3, #5]
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	f000 808b 	beq.w	8012c1c <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8012b06:	2302      	movs	r3, #2
 8012b08:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	7c9b      	ldrb	r3, [r3, #18]
 8012b10:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	7cdb      	ldrb	r3, [r3, #19]
 8012b18:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8012b1c:	4611      	mov	r1, r2
 8012b1e:	4618      	mov	r0, r3
 8012b20:	f002 f88c 	bl	8014c3c <RegionGetPhyParam>
 8012b24:	4603      	mov	r3, r0
 8012b26:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8012b28:	6a3b      	ldr	r3, [r7, #32]
 8012b2a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        datarate = MAX( datarate, minTxDatarate );
 8012b2e:	f997 202c 	ldrsb.w	r2, [r7, #44]	@ 0x2c
 8012b32:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8012b36:	4293      	cmp	r3, r2
 8012b38:	bfb8      	it	lt
 8012b3a:	4613      	movlt	r3, r2
 8012b3c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

        if( datarate == minTxDatarate )
 8012b40:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 8012b44:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 8012b48:	429a      	cmp	r2, r3
 8012b4a:	d106      	bne.n	8012b5a <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 8012b4c:	683b      	ldr	r3, [r7, #0]
 8012b4e:	2200      	movs	r2, #0
 8012b50:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 8012b52:	2300      	movs	r3, #0
 8012b54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8012b58:	e060      	b.n	8012c1c <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	689b      	ldr	r3, [r3, #8]
 8012b5e:	68fa      	ldr	r2, [r7, #12]
 8012b60:	8992      	ldrh	r2, [r2, #12]
 8012b62:	4293      	cmp	r3, r2
 8012b64:	d303      	bcc.n	8012b6e <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 8012b66:	2301      	movs	r3, #1
 8012b68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8012b6c:	e002      	b.n	8012b74 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 8012b6e:	2300      	movs	r3, #0
 8012b70:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	689b      	ldr	r3, [r3, #8]
 8012b78:	68fa      	ldr	r2, [r7, #12]
 8012b7a:	8992      	ldrh	r2, [r2, #12]
 8012b7c:	4611      	mov	r1, r2
 8012b7e:	68fa      	ldr	r2, [r7, #12]
 8012b80:	89d2      	ldrh	r2, [r2, #14]
 8012b82:	440a      	add	r2, r1
 8012b84:	4293      	cmp	r3, r2
 8012b86:	d349      	bcc.n	8012c1c <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8012b88:	2308      	movs	r3, #8
 8012b8a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	7cdb      	ldrb	r3, [r3, #19]
 8012b92:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8012b96:	4611      	mov	r1, r2
 8012b98:	4618      	mov	r0, r3
 8012b9a:	f002 f84f 	bl	8014c3c <RegionGetPhyParam>
 8012b9e:	4603      	mov	r3, r0
 8012ba0:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 8012ba2:	6a3b      	ldr	r3, [r7, #32]
 8012ba4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	689b      	ldr	r3, [r3, #8]
 8012bac:	68fa      	ldr	r2, [r7, #12]
 8012bae:	89d2      	ldrh	r2, [r2, #14]
 8012bb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8012bb4:	fb01 f202 	mul.w	r2, r1, r2
 8012bb8:	1a9b      	subs	r3, r3, r2
 8012bba:	2b01      	cmp	r3, #1
 8012bbc:	d12e      	bne.n	8012c1c <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8012bbe:	2322      	movs	r3, #34	@ 0x22
 8012bc0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                    getPhy.Datarate = datarate;
 8012bc4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8012bc8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	7c9b      	ldrb	r3, [r3, #18]
 8012bd0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	7cdb      	ldrb	r3, [r3, #19]
 8012bd8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8012bdc:	4611      	mov	r1, r2
 8012bde:	4618      	mov	r0, r3
 8012be0:	f002 f82c 	bl	8014c3c <RegionGetPhyParam>
 8012be4:	4603      	mov	r3, r0
 8012be6:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 8012be8:	6a3b      	ldr	r3, [r7, #32]
 8012bea:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

                    if( datarate == minTxDatarate )
 8012bee:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 8012bf2:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 8012bf6:	429a      	cmp	r2, r3
 8012bf8:	d110      	bne.n	8012c1c <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 8012bfa:	2300      	movs	r3, #0
 8012bfc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                        if( adrNext->UpdateChanMask == true )
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	791b      	ldrb	r3, [r3, #4]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d009      	beq.n	8012c1c <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8012c08:	2302      	movs	r3, #2
 8012c0a:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	7cdb      	ldrb	r3, [r3, #19]
 8012c10:	f107 0214 	add.w	r2, r7, #20
 8012c14:	4611      	mov	r1, r2
 8012c16:	4618      	mov	r0, r3
 8012c18:	f002 f847 	bl	8014caa <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8012c1c:	68bb      	ldr	r3, [r7, #8]
 8012c1e:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8012c22:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8012c2a:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8012c2c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8012c30:	4618      	mov	r0, r3
 8012c32:	3730      	adds	r7, #48	@ 0x30
 8012c34:	46bd      	mov	sp, r7
 8012c36:	bd80      	pop	{r7, pc}

08012c38 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8012c38:	b580      	push	{r7, lr}
 8012c3a:	b084      	sub	sp, #16
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	60f8      	str	r0, [r7, #12]
 8012c40:	60b9      	str	r1, [r7, #8]
 8012c42:	607a      	str	r2, [r7, #4]
 8012c44:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	789b      	ldrb	r3, [r3, #2]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d107      	bne.n	8012c5e <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 8012c4e:	683b      	ldr	r3, [r7, #0]
 8012c50:	687a      	ldr	r2, [r7, #4]
 8012c52:	68b9      	ldr	r1, [r7, #8]
 8012c54:	68f8      	ldr	r0, [r7, #12]
 8012c56:	f7ff ff3b 	bl	8012ad0 <CalcNextV10X>
 8012c5a:	4603      	mov	r3, r0
 8012c5c:	e000      	b.n	8012c60 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 8012c5e:	2300      	movs	r3, #0
}
 8012c60:	4618      	mov	r0, r3
 8012c62:	3710      	adds	r7, #16
 8012c64:	46bd      	mov	sp, r7
 8012c66:	bd80      	pop	{r7, pc}

08012c68 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8012c68:	b480      	push	{r7}
 8012c6a:	b085      	sub	sp, #20
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	60f8      	str	r0, [r7, #12]
 8012c70:	60b9      	str	r1, [r7, #8]
 8012c72:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c74:	bf00      	nop
 8012c76:	3714      	adds	r7, #20
 8012c78:	46bd      	mov	sp, r7
 8012c7a:	bc80      	pop	{r7}
 8012c7c:	4770      	bx	lr

08012c7e <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8012c7e:	b480      	push	{r7}
 8012c80:	b083      	sub	sp, #12
 8012c82:	af00      	add	r7, sp, #0
 8012c84:	4603      	mov	r3, r0
 8012c86:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c88:	bf00      	nop
 8012c8a:	370c      	adds	r7, #12
 8012c8c:	46bd      	mov	sp, r7
 8012c8e:	bc80      	pop	{r7}
 8012c90:	4770      	bx	lr

08012c92 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8012c92:	b480      	push	{r7}
 8012c94:	b083      	sub	sp, #12
 8012c96:	af00      	add	r7, sp, #0
 8012c98:	4603      	mov	r3, r0
 8012c9a:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c9c:	bf00      	nop
 8012c9e:	370c      	adds	r7, #12
 8012ca0:	46bd      	mov	sp, r7
 8012ca2:	bc80      	pop	{r7}
 8012ca4:	4770      	bx	lr

08012ca6 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8012ca6:	b480      	push	{r7}
 8012ca8:	b083      	sub	sp, #12
 8012caa:	af00      	add	r7, sp, #0
 8012cac:	4603      	mov	r3, r0
 8012cae:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012cb0:	bf00      	nop
 8012cb2:	370c      	adds	r7, #12
 8012cb4:	46bd      	mov	sp, r7
 8012cb6:	bc80      	pop	{r7}
 8012cb8:	4770      	bx	lr

08012cba <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8012cba:	b480      	push	{r7}
 8012cbc:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8012cbe:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	46bd      	mov	sp, r7
 8012cc4:	bc80      	pop	{r7}
 8012cc6:	4770      	bx	lr

08012cc8 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8012cc8:	b480      	push	{r7}
 8012cca:	b083      	sub	sp, #12
 8012ccc:	af00      	add	r7, sp, #0
 8012cce:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012cd0:	bf00      	nop
 8012cd2:	370c      	adds	r7, #12
 8012cd4:	46bd      	mov	sp, r7
 8012cd6:	bc80      	pop	{r7}
 8012cd8:	4770      	bx	lr

08012cda <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8012cda:	b480      	push	{r7}
 8012cdc:	b083      	sub	sp, #12
 8012cde:	af00      	add	r7, sp, #0
 8012ce0:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012ce2:	bf00      	nop
 8012ce4:	370c      	adds	r7, #12
 8012ce6:	46bd      	mov	sp, r7
 8012ce8:	bc80      	pop	{r7}
 8012cea:	4770      	bx	lr

08012cec <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8012cec:	b480      	push	{r7}
 8012cee:	b083      	sub	sp, #12
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012cf4:	bf00      	nop
 8012cf6:	370c      	adds	r7, #12
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	bc80      	pop	{r7}
 8012cfc:	4770      	bx	lr

08012cfe <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8012cfe:	b480      	push	{r7}
 8012d00:	b083      	sub	sp, #12
 8012d02:	af00      	add	r7, sp, #0
 8012d04:	6078      	str	r0, [r7, #4]
 8012d06:	460b      	mov	r3, r1
 8012d08:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8012d0a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	370c      	adds	r7, #12
 8012d10:	46bd      	mov	sp, r7
 8012d12:	bc80      	pop	{r7}
 8012d14:	4770      	bx	lr

08012d16 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8012d16:	b480      	push	{r7}
 8012d18:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012d1a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d1c:	4618      	mov	r0, r3
 8012d1e:	46bd      	mov	sp, r7
 8012d20:	bc80      	pop	{r7}
 8012d22:	4770      	bx	lr

08012d24 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8012d24:	b480      	push	{r7}
 8012d26:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012d28:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	46bd      	mov	sp, r7
 8012d2e:	bc80      	pop	{r7}
 8012d30:	4770      	bx	lr

08012d32 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8012d32:	b480      	push	{r7}
 8012d34:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012d36:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d38:	4618      	mov	r0, r3
 8012d3a:	46bd      	mov	sp, r7
 8012d3c:	bc80      	pop	{r7}
 8012d3e:	4770      	bx	lr

08012d40 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8012d40:	b480      	push	{r7}
 8012d42:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012d44:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d46:	4618      	mov	r0, r3
 8012d48:	46bd      	mov	sp, r7
 8012d4a:	bc80      	pop	{r7}
 8012d4c:	4770      	bx	lr

08012d4e <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8012d4e:	b480      	push	{r7}
 8012d50:	b083      	sub	sp, #12
 8012d52:	af00      	add	r7, sp, #0
 8012d54:	4603      	mov	r3, r0
 8012d56:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d58:	bf00      	nop
 8012d5a:	370c      	adds	r7, #12
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	bc80      	pop	{r7}
 8012d60:	4770      	bx	lr

08012d62 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8012d62:	b480      	push	{r7}
 8012d64:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d66:	bf00      	nop
 8012d68:	46bd      	mov	sp, r7
 8012d6a:	bc80      	pop	{r7}
 8012d6c:	4770      	bx	lr

08012d6e <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8012d6e:	b480      	push	{r7}
 8012d70:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d72:	bf00      	nop
 8012d74:	46bd      	mov	sp, r7
 8012d76:	bc80      	pop	{r7}
 8012d78:	4770      	bx	lr

08012d7a <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8012d7a:	b480      	push	{r7}
 8012d7c:	b083      	sub	sp, #12
 8012d7e:	af00      	add	r7, sp, #0
 8012d80:	4603      	mov	r3, r0
 8012d82:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012d84:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d86:	4618      	mov	r0, r3
 8012d88:	370c      	adds	r7, #12
 8012d8a:	46bd      	mov	sp, r7
 8012d8c:	bc80      	pop	{r7}
 8012d8e:	4770      	bx	lr

08012d90 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8012d90:	b480      	push	{r7}
 8012d92:	b083      	sub	sp, #12
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012d98:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	370c      	adds	r7, #12
 8012d9e:	46bd      	mov	sp, r7
 8012da0:	bc80      	pop	{r7}
 8012da2:	4770      	bx	lr

08012da4 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8012da4:	b480      	push	{r7}
 8012da6:	b083      	sub	sp, #12
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012dac:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012dae:	4618      	mov	r0, r3
 8012db0:	370c      	adds	r7, #12
 8012db2:	46bd      	mov	sp, r7
 8012db4:	bc80      	pop	{r7}
 8012db6:	4770      	bx	lr

08012db8 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8012db8:	b480      	push	{r7}
 8012dba:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012dbc:	bf00      	nop
 8012dbe:	46bd      	mov	sp, r7
 8012dc0:	bc80      	pop	{r7}
 8012dc2:	4770      	bx	lr

08012dc4 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8012dc4:	b480      	push	{r7}
 8012dc6:	b083      	sub	sp, #12
 8012dc8:	af00      	add	r7, sp, #0
 8012dca:	4603      	mov	r3, r0
 8012dcc:	6039      	str	r1, [r7, #0]
 8012dce:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8012dd0:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	370c      	adds	r7, #12
 8012dd6:	46bd      	mov	sp, r7
 8012dd8:	bc80      	pop	{r7}
 8012dda:	4770      	bx	lr

08012ddc <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8012ddc:	b480      	push	{r7}
 8012dde:	b083      	sub	sp, #12
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	4603      	mov	r3, r0
 8012de4:	603a      	str	r2, [r7, #0]
 8012de6:	80fb      	strh	r3, [r7, #6]
 8012de8:	460b      	mov	r3, r1
 8012dea:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012dec:	bf00      	nop
 8012dee:	370c      	adds	r7, #12
 8012df0:	46bd      	mov	sp, r7
 8012df2:	bc80      	pop	{r7}
 8012df4:	4770      	bx	lr

08012df6 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8012df6:	b480      	push	{r7}
 8012df8:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012dfa:	bf00      	nop
 8012dfc:	46bd      	mov	sp, r7
 8012dfe:	bc80      	pop	{r7}
 8012e00:	4770      	bx	lr

08012e02 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8012e02:	b480      	push	{r7}
 8012e04:	b083      	sub	sp, #12
 8012e06:	af00      	add	r7, sp, #0
 8012e08:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8012e0a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012e0c:	4618      	mov	r0, r3
 8012e0e:	370c      	adds	r7, #12
 8012e10:	46bd      	mov	sp, r7
 8012e12:	bc80      	pop	{r7}
 8012e14:	4770      	bx	lr

08012e16 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8012e16:	b480      	push	{r7}
 8012e18:	b083      	sub	sp, #12
 8012e1a:	af00      	add	r7, sp, #0
 8012e1c:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8012e1e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012e20:	4618      	mov	r0, r3
 8012e22:	370c      	adds	r7, #12
 8012e24:	46bd      	mov	sp, r7
 8012e26:	bc80      	pop	{r7}
 8012e28:	4770      	bx	lr

08012e2a <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8012e2a:	b480      	push	{r7}
 8012e2c:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012e2e:	bf00      	nop
 8012e30:	46bd      	mov	sp, r7
 8012e32:	bc80      	pop	{r7}
 8012e34:	4770      	bx	lr

08012e36 <LoRaMacClassBProcess>:
#endif /* LORAMAC_CLASSB_ENABLED */
}
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 8012e36:	b480      	push	{r7}
 8012e38:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012e3a:	bf00      	nop
 8012e3c:	46bd      	mov	sp, r7
 8012e3e:	bc80      	pop	{r7}
 8012e40:	4770      	bx	lr

08012e42 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8012e42:	b480      	push	{r7}
 8012e44:	b085      	sub	sp, #20
 8012e46:	af00      	add	r7, sp, #0
 8012e48:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8012e4e:	2300      	movs	r3, #0
 8012e50:	81fb      	strh	r3, [r7, #14]
 8012e52:	e00a      	b.n	8012e6a <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8012e54:	89fb      	ldrh	r3, [r7, #14]
 8012e56:	68ba      	ldr	r2, [r7, #8]
 8012e58:	4413      	add	r3, r2
 8012e5a:	781b      	ldrb	r3, [r3, #0]
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d001      	beq.n	8012e64 <IsSlotFree+0x22>
        {
            return false;
 8012e60:	2300      	movs	r3, #0
 8012e62:	e006      	b.n	8012e72 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8012e64:	89fb      	ldrh	r3, [r7, #14]
 8012e66:	3301      	adds	r3, #1
 8012e68:	81fb      	strh	r3, [r7, #14]
 8012e6a:	89fb      	ldrh	r3, [r7, #14]
 8012e6c:	2b0f      	cmp	r3, #15
 8012e6e:	d9f1      	bls.n	8012e54 <IsSlotFree+0x12>
        }
    }
    return true;
 8012e70:	2301      	movs	r3, #1
}
 8012e72:	4618      	mov	r0, r3
 8012e74:	3714      	adds	r7, #20
 8012e76:	46bd      	mov	sp, r7
 8012e78:	bc80      	pop	{r7}
 8012e7a:	4770      	bx	lr

08012e7c <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b082      	sub	sp, #8
 8012e80:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8012e82:	2300      	movs	r3, #0
 8012e84:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8012e86:	e007      	b.n	8012e98 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8012e88:	79fb      	ldrb	r3, [r7, #7]
 8012e8a:	3301      	adds	r3, #1
 8012e8c:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8012e8e:	79fb      	ldrb	r3, [r7, #7]
 8012e90:	2b0f      	cmp	r3, #15
 8012e92:	d101      	bne.n	8012e98 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8012e94:	2300      	movs	r3, #0
 8012e96:	e012      	b.n	8012ebe <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8012e98:	79fb      	ldrb	r3, [r7, #7]
 8012e9a:	011b      	lsls	r3, r3, #4
 8012e9c:	3308      	adds	r3, #8
 8012e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8012ec8 <MallocNewMacCommandSlot+0x4c>)
 8012ea0:	4413      	add	r3, r2
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	f7ff ffcd 	bl	8012e42 <IsSlotFree>
 8012ea8:	4603      	mov	r3, r0
 8012eaa:	f083 0301 	eor.w	r3, r3, #1
 8012eae:	b2db      	uxtb	r3, r3
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d1e9      	bne.n	8012e88 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8012eb4:	79fb      	ldrb	r3, [r7, #7]
 8012eb6:	011b      	lsls	r3, r3, #4
 8012eb8:	3308      	adds	r3, #8
 8012eba:	4a03      	ldr	r2, [pc, #12]	@ (8012ec8 <MallocNewMacCommandSlot+0x4c>)
 8012ebc:	4413      	add	r3, r2
}
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	3708      	adds	r7, #8
 8012ec2:	46bd      	mov	sp, r7
 8012ec4:	bd80      	pop	{r7, pc}
 8012ec6:	bf00      	nop
 8012ec8:	20001b6c 	.word	0x20001b6c

08012ecc <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8012ecc:	b580      	push	{r7, lr}
 8012ece:	b082      	sub	sp, #8
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d101      	bne.n	8012ede <FreeMacCommandSlot+0x12>
    {
        return false;
 8012eda:	2300      	movs	r3, #0
 8012edc:	e005      	b.n	8012eea <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8012ede:	2210      	movs	r2, #16
 8012ee0:	2100      	movs	r1, #0
 8012ee2:	6878      	ldr	r0, [r7, #4]
 8012ee4:	f005 fdb8 	bl	8018a58 <memset1>

    return true;
 8012ee8:	2301      	movs	r3, #1
}
 8012eea:	4618      	mov	r0, r3
 8012eec:	3708      	adds	r7, #8
 8012eee:	46bd      	mov	sp, r7
 8012ef0:	bd80      	pop	{r7, pc}

08012ef2 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8012ef2:	b480      	push	{r7}
 8012ef4:	b083      	sub	sp, #12
 8012ef6:	af00      	add	r7, sp, #0
 8012ef8:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d101      	bne.n	8012f04 <LinkedListInit+0x12>
    {
        return false;
 8012f00:	2300      	movs	r3, #0
 8012f02:	e006      	b.n	8012f12 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	2200      	movs	r2, #0
 8012f08:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	2200      	movs	r2, #0
 8012f0e:	605a      	str	r2, [r3, #4]

    return true;
 8012f10:	2301      	movs	r3, #1
}
 8012f12:	4618      	mov	r0, r3
 8012f14:	370c      	adds	r7, #12
 8012f16:	46bd      	mov	sp, r7
 8012f18:	bc80      	pop	{r7}
 8012f1a:	4770      	bx	lr

08012f1c <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8012f1c:	b480      	push	{r7}
 8012f1e:	b083      	sub	sp, #12
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	6078      	str	r0, [r7, #4]
 8012f24:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d002      	beq.n	8012f32 <LinkedListAdd+0x16>
 8012f2c:	683b      	ldr	r3, [r7, #0]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d101      	bne.n	8012f36 <LinkedListAdd+0x1a>
    {
        return false;
 8012f32:	2300      	movs	r3, #0
 8012f34:	e015      	b.n	8012f62 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d102      	bne.n	8012f44 <LinkedListAdd+0x28>
    {
        list->First = element;
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	683a      	ldr	r2, [r7, #0]
 8012f42:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	685b      	ldr	r3, [r3, #4]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d003      	beq.n	8012f54 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	685b      	ldr	r3, [r3, #4]
 8012f50:	683a      	ldr	r2, [r7, #0]
 8012f52:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8012f54:	683b      	ldr	r3, [r7, #0]
 8012f56:	2200      	movs	r2, #0
 8012f58:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	683a      	ldr	r2, [r7, #0]
 8012f5e:	605a      	str	r2, [r3, #4]

    return true;
 8012f60:	2301      	movs	r3, #1
}
 8012f62:	4618      	mov	r0, r3
 8012f64:	370c      	adds	r7, #12
 8012f66:	46bd      	mov	sp, r7
 8012f68:	bc80      	pop	{r7}
 8012f6a:	4770      	bx	lr

08012f6c <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8012f6c:	b480      	push	{r7}
 8012f6e:	b085      	sub	sp, #20
 8012f70:	af00      	add	r7, sp, #0
 8012f72:	6078      	str	r0, [r7, #4]
 8012f74:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d002      	beq.n	8012f82 <LinkedListGetPrevious+0x16>
 8012f7c:	683b      	ldr	r3, [r7, #0]
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d101      	bne.n	8012f86 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8012f82:	2300      	movs	r3, #0
 8012f84:	e016      	b.n	8012fb4 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8012f8c:	683a      	ldr	r2, [r7, #0]
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	429a      	cmp	r2, r3
 8012f92:	d00c      	beq.n	8012fae <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8012f94:	e002      	b.n	8012f9c <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d007      	beq.n	8012fb2 <LinkedListGetPrevious+0x46>
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	683a      	ldr	r2, [r7, #0]
 8012fa8:	429a      	cmp	r2, r3
 8012faa:	d1f4      	bne.n	8012f96 <LinkedListGetPrevious+0x2a>
 8012fac:	e001      	b.n	8012fb2 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8012fae:	2300      	movs	r3, #0
 8012fb0:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8012fb2:	68fb      	ldr	r3, [r7, #12]
}
 8012fb4:	4618      	mov	r0, r3
 8012fb6:	3714      	adds	r7, #20
 8012fb8:	46bd      	mov	sp, r7
 8012fba:	bc80      	pop	{r7}
 8012fbc:	4770      	bx	lr

08012fbe <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8012fbe:	b580      	push	{r7, lr}
 8012fc0:	b084      	sub	sp, #16
 8012fc2:	af00      	add	r7, sp, #0
 8012fc4:	6078      	str	r0, [r7, #4]
 8012fc6:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d002      	beq.n	8012fd4 <LinkedListRemove+0x16>
 8012fce:	683b      	ldr	r3, [r7, #0]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d101      	bne.n	8012fd8 <LinkedListRemove+0x1a>
    {
        return false;
 8012fd4:	2300      	movs	r3, #0
 8012fd6:	e020      	b.n	801301a <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8012fd8:	6839      	ldr	r1, [r7, #0]
 8012fda:	6878      	ldr	r0, [r7, #4]
 8012fdc:	f7ff ffc6 	bl	8012f6c <LinkedListGetPrevious>
 8012fe0:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	683a      	ldr	r2, [r7, #0]
 8012fe8:	429a      	cmp	r2, r3
 8012fea:	d103      	bne.n	8012ff4 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8012fec:	683b      	ldr	r3, [r7, #0]
 8012fee:	681a      	ldr	r2, [r3, #0]
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	685b      	ldr	r3, [r3, #4]
 8012ff8:	683a      	ldr	r2, [r7, #0]
 8012ffa:	429a      	cmp	r2, r3
 8012ffc:	d102      	bne.n	8013004 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	68fa      	ldr	r2, [r7, #12]
 8013002:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	2b00      	cmp	r3, #0
 8013008:	d003      	beq.n	8013012 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 801300a:	683b      	ldr	r3, [r7, #0]
 801300c:	681a      	ldr	r2, [r3, #0]
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8013012:	683b      	ldr	r3, [r7, #0]
 8013014:	2200      	movs	r2, #0
 8013016:	601a      	str	r2, [r3, #0]

    return true;
 8013018:	2301      	movs	r3, #1
}
 801301a:	4618      	mov	r0, r3
 801301c:	3710      	adds	r7, #16
 801301e:	46bd      	mov	sp, r7
 8013020:	bd80      	pop	{r7, pc}

08013022 <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8013022:	b480      	push	{r7}
 8013024:	b083      	sub	sp, #12
 8013026:	af00      	add	r7, sp, #0
 8013028:	4603      	mov	r3, r0
 801302a:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 801302c:	79fb      	ldrb	r3, [r7, #7]
 801302e:	2b05      	cmp	r3, #5
 8013030:	d004      	beq.n	801303c <IsSticky+0x1a>
 8013032:	2b05      	cmp	r3, #5
 8013034:	db04      	blt.n	8013040 <IsSticky+0x1e>
 8013036:	3b08      	subs	r3, #8
 8013038:	2b02      	cmp	r3, #2
 801303a:	d801      	bhi.n	8013040 <IsSticky+0x1e>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 801303c:	2301      	movs	r3, #1
 801303e:	e000      	b.n	8013042 <IsSticky+0x20>
        default:
            return false;
 8013040:	2300      	movs	r3, #0
    }
}
 8013042:	4618      	mov	r0, r3
 8013044:	370c      	adds	r7, #12
 8013046:	46bd      	mov	sp, r7
 8013048:	bc80      	pop	{r7}
 801304a:	4770      	bx	lr

0801304c <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 801304c:	b480      	push	{r7}
 801304e:	b083      	sub	sp, #12
 8013050:	af00      	add	r7, sp, #0
 8013052:	4603      	mov	r3, r0
 8013054:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 8013056:	2300      	movs	r3, #0
    }
}
 8013058:	4618      	mov	r0, r3
 801305a:	370c      	adds	r7, #12
 801305c:	46bd      	mov	sp, r7
 801305e:	bc80      	pop	{r7}
 8013060:	4770      	bx	lr
	...

08013064 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8013064:	b580      	push	{r7, lr}
 8013066:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8013068:	22fc      	movs	r2, #252	@ 0xfc
 801306a:	2100      	movs	r1, #0
 801306c:	4804      	ldr	r0, [pc, #16]	@ (8013080 <LoRaMacCommandsInit+0x1c>)
 801306e:	f005 fcf3 	bl	8018a58 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8013072:	4803      	ldr	r0, [pc, #12]	@ (8013080 <LoRaMacCommandsInit+0x1c>)
 8013074:	f7ff ff3d 	bl	8012ef2 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8013078:	2300      	movs	r3, #0
}
 801307a:	4618      	mov	r0, r3
 801307c:	bd80      	pop	{r7, pc}
 801307e:	bf00      	nop
 8013080:	20001b6c 	.word	0x20001b6c

08013084 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8013084:	b580      	push	{r7, lr}
 8013086:	b086      	sub	sp, #24
 8013088:	af00      	add	r7, sp, #0
 801308a:	4603      	mov	r3, r0
 801308c:	60b9      	str	r1, [r7, #8]
 801308e:	607a      	str	r2, [r7, #4]
 8013090:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8013092:	68bb      	ldr	r3, [r7, #8]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d101      	bne.n	801309c <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013098:	2301      	movs	r3, #1
 801309a:	e03b      	b.n	8013114 <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 801309c:	f7ff feee 	bl	8012e7c <MallocNewMacCommandSlot>
 80130a0:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 80130a2:	697b      	ldr	r3, [r7, #20]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d101      	bne.n	80130ac <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 80130a8:	2302      	movs	r3, #2
 80130aa:	e033      	b.n	8013114 <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 80130ac:	6979      	ldr	r1, [r7, #20]
 80130ae:	481b      	ldr	r0, [pc, #108]	@ (801311c <LoRaMacCommandsAddCmd+0x98>)
 80130b0:	f7ff ff34 	bl	8012f1c <LinkedListAdd>
 80130b4:	4603      	mov	r3, r0
 80130b6:	f083 0301 	eor.w	r3, r3, #1
 80130ba:	b2db      	uxtb	r3, r3
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d001      	beq.n	80130c4 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 80130c0:	2305      	movs	r3, #5
 80130c2:	e027      	b.n	8013114 <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 80130c4:	697b      	ldr	r3, [r7, #20]
 80130c6:	7bfa      	ldrb	r2, [r7, #15]
 80130c8:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 80130ca:	697b      	ldr	r3, [r7, #20]
 80130cc:	687a      	ldr	r2, [r7, #4]
 80130ce:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 80130d0:	697b      	ldr	r3, [r7, #20]
 80130d2:	3305      	adds	r3, #5
 80130d4:	687a      	ldr	r2, [r7, #4]
 80130d6:	b292      	uxth	r2, r2
 80130d8:	68b9      	ldr	r1, [r7, #8]
 80130da:	4618      	mov	r0, r3
 80130dc:	f005 fc81 	bl	80189e2 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 80130e0:	7bfb      	ldrb	r3, [r7, #15]
 80130e2:	4618      	mov	r0, r3
 80130e4:	f7ff ff9d 	bl	8013022 <IsSticky>
 80130e8:	4603      	mov	r3, r0
 80130ea:	461a      	mov	r2, r3
 80130ec:	697b      	ldr	r3, [r7, #20]
 80130ee:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 80130f0:	7bfb      	ldrb	r3, [r7, #15]
 80130f2:	4618      	mov	r0, r3
 80130f4:	f7ff ffaa 	bl	801304c <IsConfirmationRequired>
 80130f8:	4603      	mov	r3, r0
 80130fa:	461a      	mov	r2, r3
 80130fc:	697b      	ldr	r3, [r7, #20]
 80130fe:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8013100:	4b06      	ldr	r3, [pc, #24]	@ (801311c <LoRaMacCommandsAddCmd+0x98>)
 8013102:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	4413      	add	r3, r2
 801310a:	3301      	adds	r3, #1
 801310c:	4a03      	ldr	r2, [pc, #12]	@ (801311c <LoRaMacCommandsAddCmd+0x98>)
 801310e:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 8013112:	2300      	movs	r3, #0
}
 8013114:	4618      	mov	r0, r3
 8013116:	3718      	adds	r7, #24
 8013118:	46bd      	mov	sp, r7
 801311a:	bd80      	pop	{r7, pc}
 801311c:	20001b6c 	.word	0x20001b6c

08013120 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8013120:	b580      	push	{r7, lr}
 8013122:	b082      	sub	sp, #8
 8013124:	af00      	add	r7, sp, #0
 8013126:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	2b00      	cmp	r3, #0
 801312c:	d101      	bne.n	8013132 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801312e:	2301      	movs	r3, #1
 8013130:	e021      	b.n	8013176 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8013132:	6879      	ldr	r1, [r7, #4]
 8013134:	4812      	ldr	r0, [pc, #72]	@ (8013180 <LoRaMacCommandsRemoveCmd+0x60>)
 8013136:	f7ff ff42 	bl	8012fbe <LinkedListRemove>
 801313a:	4603      	mov	r3, r0
 801313c:	f083 0301 	eor.w	r3, r3, #1
 8013140:	b2db      	uxtb	r3, r3
 8013142:	2b00      	cmp	r3, #0
 8013144:	d001      	beq.n	801314a <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8013146:	2303      	movs	r3, #3
 8013148:	e015      	b.n	8013176 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 801314a:	4b0d      	ldr	r3, [pc, #52]	@ (8013180 <LoRaMacCommandsRemoveCmd+0x60>)
 801314c:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	689b      	ldr	r3, [r3, #8]
 8013154:	1ad3      	subs	r3, r2, r3
 8013156:	3b01      	subs	r3, #1
 8013158:	4a09      	ldr	r2, [pc, #36]	@ (8013180 <LoRaMacCommandsRemoveCmd+0x60>)
 801315a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 801315e:	6878      	ldr	r0, [r7, #4]
 8013160:	f7ff feb4 	bl	8012ecc <FreeMacCommandSlot>
 8013164:	4603      	mov	r3, r0
 8013166:	f083 0301 	eor.w	r3, r3, #1
 801316a:	b2db      	uxtb	r3, r3
 801316c:	2b00      	cmp	r3, #0
 801316e:	d001      	beq.n	8013174 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8013170:	2305      	movs	r3, #5
 8013172:	e000      	b.n	8013176 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8013174:	2300      	movs	r3, #0
}
 8013176:	4618      	mov	r0, r3
 8013178:	3708      	adds	r7, #8
 801317a:	46bd      	mov	sp, r7
 801317c:	bd80      	pop	{r7, pc}
 801317e:	bf00      	nop
 8013180:	20001b6c 	.word	0x20001b6c

08013184 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 8013184:	b480      	push	{r7}
 8013186:	b085      	sub	sp, #20
 8013188:	af00      	add	r7, sp, #0
 801318a:	4603      	mov	r3, r0
 801318c:	6039      	str	r1, [r7, #0]
 801318e:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8013190:	4b0e      	ldr	r3, [pc, #56]	@ (80131cc <LoRaMacCommandsGetCmd+0x48>)
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8013196:	e002      	b.n	801319e <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d004      	beq.n	80131ae <LoRaMacCommandsGetCmd+0x2a>
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	791b      	ldrb	r3, [r3, #4]
 80131a8:	79fa      	ldrb	r2, [r7, #7]
 80131aa:	429a      	cmp	r2, r3
 80131ac:	d1f4      	bne.n	8013198 <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 80131ae:	683b      	ldr	r3, [r7, #0]
 80131b0:	68fa      	ldr	r2, [r7, #12]
 80131b2:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d101      	bne.n	80131be <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 80131ba:	2303      	movs	r3, #3
 80131bc:	e000      	b.n	80131c0 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 80131be:	2300      	movs	r3, #0
}
 80131c0:	4618      	mov	r0, r3
 80131c2:	3714      	adds	r7, #20
 80131c4:	46bd      	mov	sp, r7
 80131c6:	bc80      	pop	{r7}
 80131c8:	4770      	bx	lr
 80131ca:	bf00      	nop
 80131cc:	20001b6c 	.word	0x20001b6c

080131d0 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 80131d0:	b580      	push	{r7, lr}
 80131d2:	b082      	sub	sp, #8
 80131d4:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80131d6:	4b0f      	ldr	r3, [pc, #60]	@ (8013214 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80131dc:	e012      	b.n	8013204 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	7b1b      	ldrb	r3, [r3, #12]
 80131e2:	f083 0301 	eor.w	r3, r3, #1
 80131e6:	b2db      	uxtb	r3, r3
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d008      	beq.n	80131fe <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 80131f2:	6878      	ldr	r0, [r7, #4]
 80131f4:	f7ff ff94 	bl	8013120 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 80131f8:	683b      	ldr	r3, [r7, #0]
 80131fa:	607b      	str	r3, [r7, #4]
 80131fc:	e002      	b.n	8013204 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	2b00      	cmp	r3, #0
 8013208:	d1e9      	bne.n	80131de <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801320a:	2300      	movs	r3, #0
}
 801320c:	4618      	mov	r0, r3
 801320e:	3708      	adds	r7, #8
 8013210:	46bd      	mov	sp, r7
 8013212:	bd80      	pop	{r7, pc}
 8013214:	20001b6c 	.word	0x20001b6c

08013218 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8013218:	b580      	push	{r7, lr}
 801321a:	b082      	sub	sp, #8
 801321c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801321e:	4b13      	ldr	r3, [pc, #76]	@ (801326c <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8013224:	e01a      	b.n	801325c <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	791b      	ldrb	r3, [r3, #4]
 8013230:	4618      	mov	r0, r3
 8013232:	f7ff fef6 	bl	8013022 <IsSticky>
 8013236:	4603      	mov	r3, r0
 8013238:	2b00      	cmp	r3, #0
 801323a:	d00d      	beq.n	8013258 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	791b      	ldrb	r3, [r3, #4]
 8013240:	4618      	mov	r0, r3
 8013242:	f7ff ff03 	bl	801304c <IsConfirmationRequired>
 8013246:	4603      	mov	r3, r0
 8013248:	f083 0301 	eor.w	r3, r3, #1
 801324c:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 801324e:	2b00      	cmp	r3, #0
 8013250:	d002      	beq.n	8013258 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8013252:	6878      	ldr	r0, [r7, #4]
 8013254:	f7ff ff64 	bl	8013120 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8013258:	683b      	ldr	r3, [r7, #0]
 801325a:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	2b00      	cmp	r3, #0
 8013260:	d1e1      	bne.n	8013226 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8013262:	2300      	movs	r3, #0
}
 8013264:	4618      	mov	r0, r3
 8013266:	3708      	adds	r7, #8
 8013268:	46bd      	mov	sp, r7
 801326a:	bd80      	pop	{r7, pc}
 801326c:	20001b6c 	.word	0x20001b6c

08013270 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8013270:	b480      	push	{r7}
 8013272:	b083      	sub	sp, #12
 8013274:	af00      	add	r7, sp, #0
 8013276:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d101      	bne.n	8013282 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801327e:	2301      	movs	r3, #1
 8013280:	e005      	b.n	801328e <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8013282:	4b05      	ldr	r3, [pc, #20]	@ (8013298 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8013284:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 801328c:	2300      	movs	r3, #0
}
 801328e:	4618      	mov	r0, r3
 8013290:	370c      	adds	r7, #12
 8013292:	46bd      	mov	sp, r7
 8013294:	bc80      	pop	{r7}
 8013296:	4770      	bx	lr
 8013298:	20001b6c 	.word	0x20001b6c

0801329c <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 801329c:	b580      	push	{r7, lr}
 801329e:	b088      	sub	sp, #32
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	60f8      	str	r0, [r7, #12]
 80132a4:	60b9      	str	r1, [r7, #8]
 80132a6:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 80132a8:	4b25      	ldr	r3, [pc, #148]	@ (8013340 <LoRaMacCommandsSerializeCmds+0xa4>)
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 80132ae:	2300      	movs	r3, #0
 80132b0:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d002      	beq.n	80132be <LoRaMacCommandsSerializeCmds+0x22>
 80132b8:	68bb      	ldr	r3, [r7, #8]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d126      	bne.n	801330c <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80132be:	2301      	movs	r3, #1
 80132c0:	e039      	b.n	8013336 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 80132c2:	7efb      	ldrb	r3, [r7, #27]
 80132c4:	68fa      	ldr	r2, [r7, #12]
 80132c6:	1ad2      	subs	r2, r2, r3
 80132c8:	69fb      	ldr	r3, [r7, #28]
 80132ca:	689b      	ldr	r3, [r3, #8]
 80132cc:	3301      	adds	r3, #1
 80132ce:	429a      	cmp	r2, r3
 80132d0:	d320      	bcc.n	8013314 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 80132d2:	7efb      	ldrb	r3, [r7, #27]
 80132d4:	1c5a      	adds	r2, r3, #1
 80132d6:	76fa      	strb	r2, [r7, #27]
 80132d8:	461a      	mov	r2, r3
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	4413      	add	r3, r2
 80132de:	69fa      	ldr	r2, [r7, #28]
 80132e0:	7912      	ldrb	r2, [r2, #4]
 80132e2:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 80132e4:	7efb      	ldrb	r3, [r7, #27]
 80132e6:	687a      	ldr	r2, [r7, #4]
 80132e8:	18d0      	adds	r0, r2, r3
 80132ea:	69fb      	ldr	r3, [r7, #28]
 80132ec:	1d59      	adds	r1, r3, #5
 80132ee:	69fb      	ldr	r3, [r7, #28]
 80132f0:	689b      	ldr	r3, [r3, #8]
 80132f2:	b29b      	uxth	r3, r3
 80132f4:	461a      	mov	r2, r3
 80132f6:	f005 fb74 	bl	80189e2 <memcpy1>
            itr += curElement->PayloadSize;
 80132fa:	69fb      	ldr	r3, [r7, #28]
 80132fc:	689b      	ldr	r3, [r3, #8]
 80132fe:	b2da      	uxtb	r2, r3
 8013300:	7efb      	ldrb	r3, [r7, #27]
 8013302:	4413      	add	r3, r2
 8013304:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8013306:	69fb      	ldr	r3, [r7, #28]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 801330c:	69fb      	ldr	r3, [r7, #28]
 801330e:	2b00      	cmp	r3, #0
 8013310:	d1d7      	bne.n	80132c2 <LoRaMacCommandsSerializeCmds+0x26>
 8013312:	e009      	b.n	8013328 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8013314:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8013316:	e007      	b.n	8013328 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8013318:	69fb      	ldr	r3, [r7, #28]
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 801331e:	69f8      	ldr	r0, [r7, #28]
 8013320:	f7ff fefe 	bl	8013120 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8013324:	697b      	ldr	r3, [r7, #20]
 8013326:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8013328:	69fb      	ldr	r3, [r7, #28]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d1f4      	bne.n	8013318 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 801332e:	68b8      	ldr	r0, [r7, #8]
 8013330:	f7ff ff9e 	bl	8013270 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8013334:	2300      	movs	r3, #0
}
 8013336:	4618      	mov	r0, r3
 8013338:	3720      	adds	r7, #32
 801333a:	46bd      	mov	sp, r7
 801333c:	bd80      	pop	{r7, pc}
 801333e:	bf00      	nop
 8013340:	20001b6c 	.word	0x20001b6c

08013344 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8013344:	b480      	push	{r7}
 8013346:	b085      	sub	sp, #20
 8013348:	af00      	add	r7, sp, #0
 801334a:	4603      	mov	r3, r0
 801334c:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 801334e:	2300      	movs	r3, #0
 8013350:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8013352:	79fb      	ldrb	r3, [r7, #7]
 8013354:	3b02      	subs	r3, #2
 8013356:	2b11      	cmp	r3, #17
 8013358:	d850      	bhi.n	80133fc <LoRaMacCommandsGetCmdSize+0xb8>
 801335a:	a201      	add	r2, pc, #4	@ (adr r2, 8013360 <LoRaMacCommandsGetCmdSize+0x1c>)
 801335c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013360:	080133a9 	.word	0x080133a9
 8013364:	080133af 	.word	0x080133af
 8013368:	080133b5 	.word	0x080133b5
 801336c:	080133bb 	.word	0x080133bb
 8013370:	080133c1 	.word	0x080133c1
 8013374:	080133c7 	.word	0x080133c7
 8013378:	080133cd 	.word	0x080133cd
 801337c:	080133d3 	.word	0x080133d3
 8013380:	080133d9 	.word	0x080133d9
 8013384:	080133fd 	.word	0x080133fd
 8013388:	080133fd 	.word	0x080133fd
 801338c:	080133df 	.word	0x080133df
 8013390:	080133fd 	.word	0x080133fd
 8013394:	080133fd 	.word	0x080133fd
 8013398:	080133e5 	.word	0x080133e5
 801339c:	080133eb 	.word	0x080133eb
 80133a0:	080133f1 	.word	0x080133f1
 80133a4:	080133f7 	.word	0x080133f7
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 80133a8:	2303      	movs	r3, #3
 80133aa:	73fb      	strb	r3, [r7, #15]
            break;
 80133ac:	e027      	b.n	80133fe <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 80133ae:	2305      	movs	r3, #5
 80133b0:	73fb      	strb	r3, [r7, #15]
            break;
 80133b2:	e024      	b.n	80133fe <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 80133b4:	2302      	movs	r3, #2
 80133b6:	73fb      	strb	r3, [r7, #15]
            break;
 80133b8:	e021      	b.n	80133fe <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 80133ba:	2305      	movs	r3, #5
 80133bc:	73fb      	strb	r3, [r7, #15]
            break;
 80133be:	e01e      	b.n	80133fe <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 80133c0:	2301      	movs	r3, #1
 80133c2:	73fb      	strb	r3, [r7, #15]
            break;
 80133c4:	e01b      	b.n	80133fe <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 80133c6:	2306      	movs	r3, #6
 80133c8:	73fb      	strb	r3, [r7, #15]
            break;
 80133ca:	e018      	b.n	80133fe <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 80133cc:	2302      	movs	r3, #2
 80133ce:	73fb      	strb	r3, [r7, #15]
            break;
 80133d0:	e015      	b.n	80133fe <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 80133d2:	2302      	movs	r3, #2
 80133d4:	73fb      	strb	r3, [r7, #15]
            break;
 80133d6:	e012      	b.n	80133fe <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 80133d8:	2305      	movs	r3, #5
 80133da:	73fb      	strb	r3, [r7, #15]
            break;
 80133dc:	e00f      	b.n	80133fe <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 80133de:	2306      	movs	r3, #6
 80133e0:	73fb      	strb	r3, [r7, #15]
            break;
 80133e2:	e00c      	b.n	80133fe <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 80133e4:	2301      	movs	r3, #1
 80133e6:	73fb      	strb	r3, [r7, #15]
            break;
 80133e8:	e009      	b.n	80133fe <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 80133ea:	2305      	movs	r3, #5
 80133ec:	73fb      	strb	r3, [r7, #15]
            break;
 80133ee:	e006      	b.n	80133fe <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 80133f0:	2304      	movs	r3, #4
 80133f2:	73fb      	strb	r3, [r7, #15]
            break;
 80133f4:	e003      	b.n	80133fe <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 80133f6:	2304      	movs	r3, #4
 80133f8:	73fb      	strb	r3, [r7, #15]
            break;
 80133fa:	e000      	b.n	80133fe <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 80133fc:	bf00      	nop
        }
    }
    return cidSize;
 80133fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8013400:	4618      	mov	r0, r3
 8013402:	3714      	adds	r7, #20
 8013404:	46bd      	mov	sp, r7
 8013406:	bc80      	pop	{r7}
 8013408:	4770      	bx	lr
 801340a:	bf00      	nop

0801340c <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 801340c:	b480      	push	{r7}
 801340e:	b083      	sub	sp, #12
 8013410:	af00      	add	r7, sp, #0
 8013412:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	4a07      	ldr	r2, [pc, #28]	@ (8013434 <IncreaseBufferPointer+0x28>)
 8013418:	4293      	cmp	r3, r2
 801341a:	d102      	bne.n	8013422 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 801341c:	4b06      	ldr	r3, [pc, #24]	@ (8013438 <IncreaseBufferPointer+0x2c>)
 801341e:	607b      	str	r3, [r7, #4]
 8013420:	e002      	b.n	8013428 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	3304      	adds	r3, #4
 8013426:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8013428:	687b      	ldr	r3, [r7, #4]
}
 801342a:	4618      	mov	r0, r3
 801342c:	370c      	adds	r7, #12
 801342e:	46bd      	mov	sp, r7
 8013430:	bc80      	pop	{r7}
 8013432:	4770      	bx	lr
 8013434:	20001c84 	.word	0x20001c84
 8013438:	20001c74 	.word	0x20001c74

0801343c <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 801343c:	b480      	push	{r7}
 801343e:	b083      	sub	sp, #12
 8013440:	af00      	add	r7, sp, #0
 8013442:	4603      	mov	r3, r0
 8013444:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8013446:	79fb      	ldrb	r3, [r7, #7]
 8013448:	2b00      	cmp	r3, #0
 801344a:	d101      	bne.n	8013450 <IsListEmpty+0x14>
    {
        return true;
 801344c:	2301      	movs	r3, #1
 801344e:	e000      	b.n	8013452 <IsListEmpty+0x16>
    }
    return false;
 8013450:	2300      	movs	r3, #0
}
 8013452:	4618      	mov	r0, r3
 8013454:	370c      	adds	r7, #12
 8013456:	46bd      	mov	sp, r7
 8013458:	bc80      	pop	{r7}
 801345a:	4770      	bx	lr

0801345c <IsListFull>:

static bool IsListFull( uint8_t count )
{
 801345c:	b480      	push	{r7}
 801345e:	b083      	sub	sp, #12
 8013460:	af00      	add	r7, sp, #0
 8013462:	4603      	mov	r3, r0
 8013464:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8013466:	79fb      	ldrb	r3, [r7, #7]
 8013468:	2b04      	cmp	r3, #4
 801346a:	d901      	bls.n	8013470 <IsListFull+0x14>
    {
        return true;
 801346c:	2301      	movs	r3, #1
 801346e:	e000      	b.n	8013472 <IsListFull+0x16>
    }
    return false;
 8013470:	2300      	movs	r3, #0
}
 8013472:	4618      	mov	r0, r3
 8013474:	370c      	adds	r7, #12
 8013476:	46bd      	mov	sp, r7
 8013478:	bc80      	pop	{r7}
 801347a:	4770      	bx	lr

0801347c <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 801347c:	b580      	push	{r7, lr}
 801347e:	b086      	sub	sp, #24
 8013480:	af00      	add	r7, sp, #0
 8013482:	4603      	mov	r3, r0
 8013484:	60b9      	str	r1, [r7, #8]
 8013486:	607a      	str	r2, [r7, #4]
 8013488:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 801348a:	68bb      	ldr	r3, [r7, #8]
 801348c:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801348e:	4b13      	ldr	r3, [pc, #76]	@ (80134dc <GetElement+0x60>)
 8013490:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013494:	4618      	mov	r0, r3
 8013496:	f7ff ffd1 	bl	801343c <IsListEmpty>
 801349a:	4603      	mov	r3, r0
 801349c:	2b00      	cmp	r3, #0
 801349e:	d001      	beq.n	80134a4 <GetElement+0x28>
    {
        return NULL;
 80134a0:	2300      	movs	r3, #0
 80134a2:	e017      	b.n	80134d4 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80134a4:	2300      	movs	r3, #0
 80134a6:	74fb      	strb	r3, [r7, #19]
 80134a8:	e00d      	b.n	80134c6 <GetElement+0x4a>
    {
        if( element->Request == request )
 80134aa:	697b      	ldr	r3, [r7, #20]
 80134ac:	781b      	ldrb	r3, [r3, #0]
 80134ae:	7bfa      	ldrb	r2, [r7, #15]
 80134b0:	429a      	cmp	r2, r3
 80134b2:	d101      	bne.n	80134b8 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 80134b4:	697b      	ldr	r3, [r7, #20]
 80134b6:	e00d      	b.n	80134d4 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 80134b8:	6978      	ldr	r0, [r7, #20]
 80134ba:	f7ff ffa7 	bl	801340c <IncreaseBufferPointer>
 80134be:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80134c0:	7cfb      	ldrb	r3, [r7, #19]
 80134c2:	3301      	adds	r3, #1
 80134c4:	74fb      	strb	r3, [r7, #19]
 80134c6:	4b05      	ldr	r3, [pc, #20]	@ (80134dc <GetElement+0x60>)
 80134c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80134cc:	7cfa      	ldrb	r2, [r7, #19]
 80134ce:	429a      	cmp	r2, r3
 80134d0:	d3eb      	bcc.n	80134aa <GetElement+0x2e>
    }

    return NULL;
 80134d2:	2300      	movs	r3, #0
}
 80134d4:	4618      	mov	r0, r3
 80134d6:	3718      	adds	r7, #24
 80134d8:	46bd      	mov	sp, r7
 80134da:	bd80      	pop	{r7, pc}
 80134dc:	20001c68 	.word	0x20001c68

080134e0 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 80134e0:	b580      	push	{r7, lr}
 80134e2:	b082      	sub	sp, #8
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 80134e8:	4a0c      	ldr	r2, [pc, #48]	@ (801351c <LoRaMacConfirmQueueInit+0x3c>)
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 80134ee:	4b0b      	ldr	r3, [pc, #44]	@ (801351c <LoRaMacConfirmQueueInit+0x3c>)
 80134f0:	2200      	movs	r2, #0
 80134f2:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80134f6:	4b09      	ldr	r3, [pc, #36]	@ (801351c <LoRaMacConfirmQueueInit+0x3c>)
 80134f8:	4a09      	ldr	r2, [pc, #36]	@ (8013520 <LoRaMacConfirmQueueInit+0x40>)
 80134fa:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80134fc:	4b07      	ldr	r3, [pc, #28]	@ (801351c <LoRaMacConfirmQueueInit+0x3c>)
 80134fe:	4a08      	ldr	r2, [pc, #32]	@ (8013520 <LoRaMacConfirmQueueInit+0x40>)
 8013500:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8013502:	2214      	movs	r2, #20
 8013504:	21ff      	movs	r1, #255	@ 0xff
 8013506:	4806      	ldr	r0, [pc, #24]	@ (8013520 <LoRaMacConfirmQueueInit+0x40>)
 8013508:	f005 faa6 	bl	8018a58 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801350c:	4b03      	ldr	r3, [pc, #12]	@ (801351c <LoRaMacConfirmQueueInit+0x3c>)
 801350e:	2201      	movs	r2, #1
 8013510:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8013514:	bf00      	nop
 8013516:	3708      	adds	r7, #8
 8013518:	46bd      	mov	sp, r7
 801351a:	bd80      	pop	{r7, pc}
 801351c:	20001c68 	.word	0x20001c68
 8013520:	20001c74 	.word	0x20001c74

08013524 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8013524:	b580      	push	{r7, lr}
 8013526:	b082      	sub	sp, #8
 8013528:	af00      	add	r7, sp, #0
 801352a:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801352c:	4b19      	ldr	r3, [pc, #100]	@ (8013594 <LoRaMacConfirmQueueAdd+0x70>)
 801352e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013532:	4618      	mov	r0, r3
 8013534:	f7ff ff92 	bl	801345c <IsListFull>
 8013538:	4603      	mov	r3, r0
 801353a:	2b00      	cmp	r3, #0
 801353c:	d001      	beq.n	8013542 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 801353e:	2300      	movs	r3, #0
 8013540:	e023      	b.n	801358a <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8013542:	4b14      	ldr	r3, [pc, #80]	@ (8013594 <LoRaMacConfirmQueueAdd+0x70>)
 8013544:	689b      	ldr	r3, [r3, #8]
 8013546:	687a      	ldr	r2, [r7, #4]
 8013548:	7812      	ldrb	r2, [r2, #0]
 801354a:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 801354c:	4b11      	ldr	r3, [pc, #68]	@ (8013594 <LoRaMacConfirmQueueAdd+0x70>)
 801354e:	689b      	ldr	r3, [r3, #8]
 8013550:	687a      	ldr	r2, [r7, #4]
 8013552:	7852      	ldrb	r2, [r2, #1]
 8013554:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8013556:	4b0f      	ldr	r3, [pc, #60]	@ (8013594 <LoRaMacConfirmQueueAdd+0x70>)
 8013558:	689b      	ldr	r3, [r3, #8]
 801355a:	687a      	ldr	r2, [r7, #4]
 801355c:	78d2      	ldrb	r2, [r2, #3]
 801355e:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8013560:	4b0c      	ldr	r3, [pc, #48]	@ (8013594 <LoRaMacConfirmQueueAdd+0x70>)
 8013562:	689b      	ldr	r3, [r3, #8]
 8013564:	2200      	movs	r2, #0
 8013566:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8013568:	4b0a      	ldr	r3, [pc, #40]	@ (8013594 <LoRaMacConfirmQueueAdd+0x70>)
 801356a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801356e:	3301      	adds	r3, #1
 8013570:	b2da      	uxtb	r2, r3
 8013572:	4b08      	ldr	r3, [pc, #32]	@ (8013594 <LoRaMacConfirmQueueAdd+0x70>)
 8013574:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8013578:	4b06      	ldr	r3, [pc, #24]	@ (8013594 <LoRaMacConfirmQueueAdd+0x70>)
 801357a:	689b      	ldr	r3, [r3, #8]
 801357c:	4618      	mov	r0, r3
 801357e:	f7ff ff45 	bl	801340c <IncreaseBufferPointer>
 8013582:	4603      	mov	r3, r0
 8013584:	4a03      	ldr	r2, [pc, #12]	@ (8013594 <LoRaMacConfirmQueueAdd+0x70>)
 8013586:	6093      	str	r3, [r2, #8]

    return true;
 8013588:	2301      	movs	r3, #1
}
 801358a:	4618      	mov	r0, r3
 801358c:	3708      	adds	r7, #8
 801358e:	46bd      	mov	sp, r7
 8013590:	bd80      	pop	{r7, pc}
 8013592:	bf00      	nop
 8013594:	20001c68 	.word	0x20001c68

08013598 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8013598:	b580      	push	{r7, lr}
 801359a:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801359c:	4b0e      	ldr	r3, [pc, #56]	@ (80135d8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801359e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80135a2:	4618      	mov	r0, r3
 80135a4:	f7ff ff4a 	bl	801343c <IsListEmpty>
 80135a8:	4603      	mov	r3, r0
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d001      	beq.n	80135b2 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 80135ae:	2300      	movs	r3, #0
 80135b0:	e010      	b.n	80135d4 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 80135b2:	4b09      	ldr	r3, [pc, #36]	@ (80135d8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80135b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80135b8:	3b01      	subs	r3, #1
 80135ba:	b2da      	uxtb	r2, r3
 80135bc:	4b06      	ldr	r3, [pc, #24]	@ (80135d8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80135be:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 80135c2:	4b05      	ldr	r3, [pc, #20]	@ (80135d8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80135c4:	685b      	ldr	r3, [r3, #4]
 80135c6:	4618      	mov	r0, r3
 80135c8:	f7ff ff20 	bl	801340c <IncreaseBufferPointer>
 80135cc:	4603      	mov	r3, r0
 80135ce:	4a02      	ldr	r2, [pc, #8]	@ (80135d8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80135d0:	6053      	str	r3, [r2, #4]

    return true;
 80135d2:	2301      	movs	r3, #1
}
 80135d4:	4618      	mov	r0, r3
 80135d6:	bd80      	pop	{r7, pc}
 80135d8:	20001c68 	.word	0x20001c68

080135dc <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 80135dc:	b580      	push	{r7, lr}
 80135de:	b084      	sub	sp, #16
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	4603      	mov	r3, r0
 80135e4:	460a      	mov	r2, r1
 80135e6:	71fb      	strb	r3, [r7, #7]
 80135e8:	4613      	mov	r3, r2
 80135ea:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 80135ec:	2300      	movs	r3, #0
 80135ee:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80135f0:	4b10      	ldr	r3, [pc, #64]	@ (8013634 <LoRaMacConfirmQueueSetStatus+0x58>)
 80135f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80135f6:	4618      	mov	r0, r3
 80135f8:	f7ff ff20 	bl	801343c <IsListEmpty>
 80135fc:	4603      	mov	r3, r0
 80135fe:	f083 0301 	eor.w	r3, r3, #1
 8013602:	b2db      	uxtb	r3, r3
 8013604:	2b00      	cmp	r3, #0
 8013606:	d011      	beq.n	801362c <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8013608:	4b0a      	ldr	r3, [pc, #40]	@ (8013634 <LoRaMacConfirmQueueSetStatus+0x58>)
 801360a:	6859      	ldr	r1, [r3, #4]
 801360c:	4b09      	ldr	r3, [pc, #36]	@ (8013634 <LoRaMacConfirmQueueSetStatus+0x58>)
 801360e:	689a      	ldr	r2, [r3, #8]
 8013610:	79bb      	ldrb	r3, [r7, #6]
 8013612:	4618      	mov	r0, r3
 8013614:	f7ff ff32 	bl	801347c <GetElement>
 8013618:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	2b00      	cmp	r3, #0
 801361e:	d005      	beq.n	801362c <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	79fa      	ldrb	r2, [r7, #7]
 8013624:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	2201      	movs	r2, #1
 801362a:	709a      	strb	r2, [r3, #2]
        }
    }
}
 801362c:	bf00      	nop
 801362e:	3710      	adds	r7, #16
 8013630:	46bd      	mov	sp, r7
 8013632:	bd80      	pop	{r7, pc}
 8013634:	20001c68 	.word	0x20001c68

08013638 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8013638:	b580      	push	{r7, lr}
 801363a:	b084      	sub	sp, #16
 801363c:	af00      	add	r7, sp, #0
 801363e:	4603      	mov	r3, r0
 8013640:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8013642:	2300      	movs	r3, #0
 8013644:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013646:	4b10      	ldr	r3, [pc, #64]	@ (8013688 <LoRaMacConfirmQueueGetStatus+0x50>)
 8013648:	f893 3020 	ldrb.w	r3, [r3, #32]
 801364c:	4618      	mov	r0, r3
 801364e:	f7ff fef5 	bl	801343c <IsListEmpty>
 8013652:	4603      	mov	r3, r0
 8013654:	f083 0301 	eor.w	r3, r3, #1
 8013658:	b2db      	uxtb	r3, r3
 801365a:	2b00      	cmp	r3, #0
 801365c:	d00e      	beq.n	801367c <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 801365e:	4b0a      	ldr	r3, [pc, #40]	@ (8013688 <LoRaMacConfirmQueueGetStatus+0x50>)
 8013660:	6859      	ldr	r1, [r3, #4]
 8013662:	4b09      	ldr	r3, [pc, #36]	@ (8013688 <LoRaMacConfirmQueueGetStatus+0x50>)
 8013664:	689a      	ldr	r2, [r3, #8]
 8013666:	79fb      	ldrb	r3, [r7, #7]
 8013668:	4618      	mov	r0, r3
 801366a:	f7ff ff07 	bl	801347c <GetElement>
 801366e:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	2b00      	cmp	r3, #0
 8013674:	d002      	beq.n	801367c <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	785b      	ldrb	r3, [r3, #1]
 801367a:	e000      	b.n	801367e <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 801367c:	2301      	movs	r3, #1
}
 801367e:	4618      	mov	r0, r3
 8013680:	3710      	adds	r7, #16
 8013682:	46bd      	mov	sp, r7
 8013684:	bd80      	pop	{r7, pc}
 8013686:	bf00      	nop
 8013688:	20001c68 	.word	0x20001c68

0801368c <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 801368c:	b580      	push	{r7, lr}
 801368e:	b084      	sub	sp, #16
 8013690:	af00      	add	r7, sp, #0
 8013692:	4603      	mov	r3, r0
 8013694:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8013696:	4b16      	ldr	r3, [pc, #88]	@ (80136f0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013698:	685b      	ldr	r3, [r3, #4]
 801369a:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 801369c:	4a14      	ldr	r2, [pc, #80]	@ (80136f0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801369e:	79fb      	ldrb	r3, [r7, #7]
 80136a0:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80136a4:	4b12      	ldr	r3, [pc, #72]	@ (80136f0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80136a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80136aa:	4618      	mov	r0, r3
 80136ac:	f7ff fec6 	bl	801343c <IsListEmpty>
 80136b0:	4603      	mov	r3, r0
 80136b2:	f083 0301 	eor.w	r3, r3, #1
 80136b6:	b2db      	uxtb	r3, r3
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d015      	beq.n	80136e8 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	79fa      	ldrb	r2, [r7, #7]
 80136c0:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	78db      	ldrb	r3, [r3, #3]
 80136c6:	f083 0301 	eor.w	r3, r3, #1
 80136ca:	b2db      	uxtb	r3, r3
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d002      	beq.n	80136d6 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	2201      	movs	r2, #1
 80136d4:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 80136d6:	68f8      	ldr	r0, [r7, #12]
 80136d8:	f7ff fe98 	bl	801340c <IncreaseBufferPointer>
 80136dc:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 80136de:	4b04      	ldr	r3, [pc, #16]	@ (80136f0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80136e0:	689b      	ldr	r3, [r3, #8]
 80136e2:	68fa      	ldr	r2, [r7, #12]
 80136e4:	429a      	cmp	r2, r3
 80136e6:	d1e9      	bne.n	80136bc <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 80136e8:	bf00      	nop
 80136ea:	3710      	adds	r7, #16
 80136ec:	46bd      	mov	sp, r7
 80136ee:	bd80      	pop	{r7, pc}
 80136f0:	20001c68 	.word	0x20001c68

080136f4 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 80136f4:	b580      	push	{r7, lr}
 80136f6:	b082      	sub	sp, #8
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	4603      	mov	r3, r0
 80136fc:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 80136fe:	4b09      	ldr	r3, [pc, #36]	@ (8013724 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013700:	6859      	ldr	r1, [r3, #4]
 8013702:	4b08      	ldr	r3, [pc, #32]	@ (8013724 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013704:	689a      	ldr	r2, [r3, #8]
 8013706:	79fb      	ldrb	r3, [r7, #7]
 8013708:	4618      	mov	r0, r3
 801370a:	f7ff feb7 	bl	801347c <GetElement>
 801370e:	4603      	mov	r3, r0
 8013710:	2b00      	cmp	r3, #0
 8013712:	d001      	beq.n	8013718 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8013714:	2301      	movs	r3, #1
 8013716:	e000      	b.n	801371a <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8013718:	2300      	movs	r3, #0
}
 801371a:	4618      	mov	r0, r3
 801371c:	3708      	adds	r7, #8
 801371e:	46bd      	mov	sp, r7
 8013720:	bd80      	pop	{r7, pc}
 8013722:	bf00      	nop
 8013724:	20001c68 	.word	0x20001c68

08013728 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8013728:	b580      	push	{r7, lr}
 801372a:	b084      	sub	sp, #16
 801372c:	af00      	add	r7, sp, #0
 801372e:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8013730:	4b25      	ldr	r3, [pc, #148]	@ (80137c8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013732:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013736:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8013738:	2300      	movs	r3, #0
 801373a:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 801373c:	f107 0308 	add.w	r3, r7, #8
 8013740:	2204      	movs	r2, #4
 8013742:	2100      	movs	r1, #0
 8013744:	4618      	mov	r0, r3
 8013746:	f005 f987 	bl	8018a58 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 801374a:	2300      	movs	r3, #0
 801374c:	73fb      	strb	r3, [r7, #15]
 801374e:	e032      	b.n	80137b6 <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8013750:	4b1d      	ldr	r3, [pc, #116]	@ (80137c8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013752:	685b      	ldr	r3, [r3, #4]
 8013754:	781a      	ldrb	r2, [r3, #0]
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 801375a:	4b1b      	ldr	r3, [pc, #108]	@ (80137c8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 801375c:	685b      	ldr	r3, [r3, #4]
 801375e:	785a      	ldrb	r2, [r3, #1]
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8013764:	4b18      	ldr	r3, [pc, #96]	@ (80137c8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013766:	685b      	ldr	r3, [r3, #4]
 8013768:	789b      	ldrb	r3, [r3, #2]
 801376a:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 801376c:	7b7b      	ldrb	r3, [r7, #13]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d005      	beq.n	801377e <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8013772:	4b15      	ldr	r3, [pc, #84]	@ (80137c8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	689b      	ldr	r3, [r3, #8]
 8013778:	6878      	ldr	r0, [r7, #4]
 801377a:	4798      	blx	r3
 801377c:	e00b      	b.n	8013796 <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 801377e:	4b12      	ldr	r3, [pc, #72]	@ (80137c8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013780:	685b      	ldr	r3, [r3, #4]
 8013782:	781b      	ldrb	r3, [r3, #0]
 8013784:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8013786:	4b10      	ldr	r3, [pc, #64]	@ (80137c8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013788:	685b      	ldr	r3, [r3, #4]
 801378a:	785b      	ldrb	r3, [r3, #1]
 801378c:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 801378e:	4b0e      	ldr	r3, [pc, #56]	@ (80137c8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013790:	685b      	ldr	r3, [r3, #4]
 8013792:	78db      	ldrb	r3, [r3, #3]
 8013794:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8013796:	f7ff feff 	bl	8013598 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 801379a:	7b7b      	ldrb	r3, [r7, #13]
 801379c:	f083 0301 	eor.w	r3, r3, #1
 80137a0:	b2db      	uxtb	r3, r3
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d004      	beq.n	80137b0 <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 80137a6:	f107 0308 	add.w	r3, r7, #8
 80137aa:	4618      	mov	r0, r3
 80137ac:	f7ff feba 	bl	8013524 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 80137b0:	7bfb      	ldrb	r3, [r7, #15]
 80137b2:	3301      	adds	r3, #1
 80137b4:	73fb      	strb	r3, [r7, #15]
 80137b6:	7bfa      	ldrb	r2, [r7, #15]
 80137b8:	7bbb      	ldrb	r3, [r7, #14]
 80137ba:	429a      	cmp	r2, r3
 80137bc:	d3c8      	bcc.n	8013750 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 80137be:	bf00      	nop
 80137c0:	bf00      	nop
 80137c2:	3710      	adds	r7, #16
 80137c4:	46bd      	mov	sp, r7
 80137c6:	bd80      	pop	{r7, pc}
 80137c8:	20001c68 	.word	0x20001c68

080137cc <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 80137cc:	b480      	push	{r7}
 80137ce:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80137d0:	4b03      	ldr	r3, [pc, #12]	@ (80137e0 <LoRaMacConfirmQueueGetCnt+0x14>)
 80137d2:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 80137d6:	4618      	mov	r0, r3
 80137d8:	46bd      	mov	sp, r7
 80137da:	bc80      	pop	{r7}
 80137dc:	4770      	bx	lr
 80137de:	bf00      	nop
 80137e0:	20001c68 	.word	0x20001c68

080137e4 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 80137e4:	b580      	push	{r7, lr}
 80137e6:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80137e8:	4b06      	ldr	r3, [pc, #24]	@ (8013804 <LoRaMacConfirmQueueIsFull+0x20>)
 80137ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80137ee:	4618      	mov	r0, r3
 80137f0:	f7ff fe34 	bl	801345c <IsListFull>
 80137f4:	4603      	mov	r3, r0
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d001      	beq.n	80137fe <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 80137fa:	2301      	movs	r3, #1
 80137fc:	e000      	b.n	8013800 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 80137fe:	2300      	movs	r3, #0
    }
}
 8013800:	4618      	mov	r0, r3
 8013802:	bd80      	pop	{r7, pc}
 8013804:	20001c68 	.word	0x20001c68

08013808 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8013808:	b580      	push	{r7, lr}
 801380a:	b08e      	sub	sp, #56	@ 0x38
 801380c:	af00      	add	r7, sp, #0
 801380e:	60f8      	str	r0, [r7, #12]
 8013810:	607b      	str	r3, [r7, #4]
 8013812:	460b      	mov	r3, r1
 8013814:	817b      	strh	r3, [r7, #10]
 8013816:	4613      	mov	r3, r2
 8013818:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	2b00      	cmp	r3, #0
 801381e:	d101      	bne.n	8013824 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013820:	230a      	movs	r3, #10
 8013822:	e086      	b.n	8013932 <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 8013824:	2300      	movs	r3, #0
 8013826:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint16_t ctr = 1;
 801382a:	2301      	movs	r3, #1
 801382c:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint8_t sBlock[16] = { 0 };
 801382e:	2300      	movs	r3, #0
 8013830:	623b      	str	r3, [r7, #32]
 8013832:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013836:	2200      	movs	r2, #0
 8013838:	601a      	str	r2, [r3, #0]
 801383a:	605a      	str	r2, [r3, #4]
 801383c:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 801383e:	2300      	movs	r3, #0
 8013840:	613b      	str	r3, [r7, #16]
 8013842:	f107 0314 	add.w	r3, r7, #20
 8013846:	2200      	movs	r2, #0
 8013848:	601a      	str	r2, [r3, #0]
 801384a:	605a      	str	r2, [r3, #4]
 801384c:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 801384e:	2301      	movs	r3, #1
 8013850:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8013852:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8013856:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	b2db      	uxtb	r3, r3
 801385c:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	0a1b      	lsrs	r3, r3, #8
 8013862:	b2db      	uxtb	r3, r3
 8013864:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	0c1b      	lsrs	r3, r3, #16
 801386a:	b2db      	uxtb	r3, r3
 801386c:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	0e1b      	lsrs	r3, r3, #24
 8013872:	b2db      	uxtb	r3, r3
 8013874:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8013876:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013878:	b2db      	uxtb	r3, r3
 801387a:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 801387c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801387e:	0a1b      	lsrs	r3, r3, #8
 8013880:	b2db      	uxtb	r3, r3
 8013882:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8013884:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013886:	0c1b      	lsrs	r3, r3, #16
 8013888:	b2db      	uxtb	r3, r3
 801388a:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 801388c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801388e:	0e1b      	lsrs	r3, r3, #24
 8013890:	b2db      	uxtb	r3, r3
 8013892:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8013894:	e048      	b.n	8013928 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8013896:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8013898:	b2db      	uxtb	r3, r3
 801389a:	77fb      	strb	r3, [r7, #31]
        ctr++;
 801389c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801389e:	3301      	adds	r3, #1
 80138a0:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 80138a2:	f107 0320 	add.w	r3, r7, #32
 80138a6:	7a7a      	ldrb	r2, [r7, #9]
 80138a8:	f107 0010 	add.w	r0, r7, #16
 80138ac:	2110      	movs	r1, #16
 80138ae:	f7f8 fd97 	bl	800c3e0 <SecureElementAesEncrypt>
 80138b2:	4603      	mov	r3, r0
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d001      	beq.n	80138bc <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80138b8:	230f      	movs	r3, #15
 80138ba:	e03a      	b.n	8013932 <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80138bc:	2300      	movs	r3, #0
 80138be:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80138c2:	e01e      	b.n	8013902 <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 80138c4:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80138c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80138cc:	4413      	add	r3, r2
 80138ce:	461a      	mov	r2, r3
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	4413      	add	r3, r2
 80138d4:	7819      	ldrb	r1, [r3, #0]
 80138d6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80138da:	3338      	adds	r3, #56	@ 0x38
 80138dc:	443b      	add	r3, r7
 80138de:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80138e2:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 80138e6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80138ea:	4403      	add	r3, r0
 80138ec:	4618      	mov	r0, r3
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	4403      	add	r3, r0
 80138f2:	404a      	eors	r2, r1
 80138f4:	b2d2      	uxtb	r2, r2
 80138f6:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80138f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80138fc:	3301      	adds	r3, #1
 80138fe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8013902:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013906:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801390a:	2a10      	cmp	r2, #16
 801390c:	bfa8      	it	ge
 801390e:	2210      	movge	r2, #16
 8013910:	b212      	sxth	r2, r2
 8013912:	4293      	cmp	r3, r2
 8013914:	dbd6      	blt.n	80138c4 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8013916:	897b      	ldrh	r3, [r7, #10]
 8013918:	3b10      	subs	r3, #16
 801391a:	b29b      	uxth	r3, r3
 801391c:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 801391e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013922:	3310      	adds	r3, #16
 8013924:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while( size > 0 )
 8013928:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801392c:	2b00      	cmp	r3, #0
 801392e:	dcb2      	bgt.n	8013896 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013930:	2300      	movs	r3, #0
}
 8013932:	4618      	mov	r0, r3
 8013934:	3738      	adds	r7, #56	@ 0x38
 8013936:	46bd      	mov	sp, r7
 8013938:	bd80      	pop	{r7, pc}

0801393a <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 801393a:	b490      	push	{r4, r7}
 801393c:	b082      	sub	sp, #8
 801393e:	af00      	add	r7, sp, #0
 8013940:	4604      	mov	r4, r0
 8013942:	4608      	mov	r0, r1
 8013944:	4611      	mov	r1, r2
 8013946:	461a      	mov	r2, r3
 8013948:	4623      	mov	r3, r4
 801394a:	80fb      	strh	r3, [r7, #6]
 801394c:	4603      	mov	r3, r0
 801394e:	717b      	strb	r3, [r7, #5]
 8013950:	460b      	mov	r3, r1
 8013952:	713b      	strb	r3, [r7, #4]
 8013954:	4613      	mov	r3, r2
 8013956:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8013958:	69bb      	ldr	r3, [r7, #24]
 801395a:	2b00      	cmp	r3, #0
 801395c:	d101      	bne.n	8013962 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801395e:	230a      	movs	r3, #10
 8013960:	e04e      	b.n	8013a00 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8013962:	69bb      	ldr	r3, [r7, #24]
 8013964:	2249      	movs	r2, #73	@ 0x49
 8013966:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 8013968:	69bb      	ldr	r3, [r7, #24]
 801396a:	3301      	adds	r3, #1
 801396c:	2200      	movs	r2, #0
 801396e:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8013970:	69bb      	ldr	r3, [r7, #24]
 8013972:	3302      	adds	r3, #2
 8013974:	2200      	movs	r2, #0
 8013976:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8013978:	69bb      	ldr	r3, [r7, #24]
 801397a:	3303      	adds	r3, #3
 801397c:	2200      	movs	r2, #0
 801397e:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8013980:	69bb      	ldr	r3, [r7, #24]
 8013982:	3304      	adds	r3, #4
 8013984:	2200      	movs	r2, #0
 8013986:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8013988:	69bb      	ldr	r3, [r7, #24]
 801398a:	3305      	adds	r3, #5
 801398c:	78fa      	ldrb	r2, [r7, #3]
 801398e:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8013990:	69bb      	ldr	r3, [r7, #24]
 8013992:	3306      	adds	r3, #6
 8013994:	693a      	ldr	r2, [r7, #16]
 8013996:	b2d2      	uxtb	r2, r2
 8013998:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 801399a:	693b      	ldr	r3, [r7, #16]
 801399c:	0a1a      	lsrs	r2, r3, #8
 801399e:	69bb      	ldr	r3, [r7, #24]
 80139a0:	3307      	adds	r3, #7
 80139a2:	b2d2      	uxtb	r2, r2
 80139a4:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 80139a6:	693b      	ldr	r3, [r7, #16]
 80139a8:	0c1a      	lsrs	r2, r3, #16
 80139aa:	69bb      	ldr	r3, [r7, #24]
 80139ac:	3308      	adds	r3, #8
 80139ae:	b2d2      	uxtb	r2, r2
 80139b0:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 80139b2:	693b      	ldr	r3, [r7, #16]
 80139b4:	0e1a      	lsrs	r2, r3, #24
 80139b6:	69bb      	ldr	r3, [r7, #24]
 80139b8:	3309      	adds	r3, #9
 80139ba:	b2d2      	uxtb	r2, r2
 80139bc:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 80139be:	69bb      	ldr	r3, [r7, #24]
 80139c0:	330a      	adds	r3, #10
 80139c2:	697a      	ldr	r2, [r7, #20]
 80139c4:	b2d2      	uxtb	r2, r2
 80139c6:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 80139c8:	697b      	ldr	r3, [r7, #20]
 80139ca:	0a1a      	lsrs	r2, r3, #8
 80139cc:	69bb      	ldr	r3, [r7, #24]
 80139ce:	330b      	adds	r3, #11
 80139d0:	b2d2      	uxtb	r2, r2
 80139d2:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 80139d4:	697b      	ldr	r3, [r7, #20]
 80139d6:	0c1a      	lsrs	r2, r3, #16
 80139d8:	69bb      	ldr	r3, [r7, #24]
 80139da:	330c      	adds	r3, #12
 80139dc:	b2d2      	uxtb	r2, r2
 80139de:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 80139e0:	697b      	ldr	r3, [r7, #20]
 80139e2:	0e1a      	lsrs	r2, r3, #24
 80139e4:	69bb      	ldr	r3, [r7, #24]
 80139e6:	330d      	adds	r3, #13
 80139e8:	b2d2      	uxtb	r2, r2
 80139ea:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 80139ec:	69bb      	ldr	r3, [r7, #24]
 80139ee:	330e      	adds	r3, #14
 80139f0:	2200      	movs	r2, #0
 80139f2:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 80139f4:	69bb      	ldr	r3, [r7, #24]
 80139f6:	330f      	adds	r3, #15
 80139f8:	88fa      	ldrh	r2, [r7, #6]
 80139fa:	b2d2      	uxtb	r2, r2
 80139fc:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80139fe:	2300      	movs	r3, #0
}
 8013a00:	4618      	mov	r0, r3
 8013a02:	3708      	adds	r7, #8
 8013a04:	46bd      	mov	sp, r7
 8013a06:	bc90      	pop	{r4, r7}
 8013a08:	4770      	bx	lr

08013a0a <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8013a0a:	b590      	push	{r4, r7, lr}
 8013a0c:	b08b      	sub	sp, #44	@ 0x2c
 8013a0e:	af04      	add	r7, sp, #16
 8013a10:	6078      	str	r0, [r7, #4]
 8013a12:	4608      	mov	r0, r1
 8013a14:	4611      	mov	r1, r2
 8013a16:	461a      	mov	r2, r3
 8013a18:	4603      	mov	r3, r0
 8013a1a:	807b      	strh	r3, [r7, #2]
 8013a1c:	460b      	mov	r3, r1
 8013a1e:	707b      	strb	r3, [r7, #1]
 8013a20:	4613      	mov	r3, r2
 8013a22:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d002      	beq.n	8013a30 <ComputeCmacB0+0x26>
 8013a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d101      	bne.n	8013a34 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013a30:	230a      	movs	r3, #10
 8013a32:	e024      	b.n	8013a7e <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8013a34:	887b      	ldrh	r3, [r7, #2]
 8013a36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013a3a:	d901      	bls.n	8013a40 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8013a3c:	230e      	movs	r3, #14
 8013a3e:	e01e      	b.n	8013a7e <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8013a40:	f897 4028 	ldrb.w	r4, [r7, #40]	@ 0x28
 8013a44:	783a      	ldrb	r2, [r7, #0]
 8013a46:	7879      	ldrb	r1, [r7, #1]
 8013a48:	8878      	ldrh	r0, [r7, #2]
 8013a4a:	f107 0308 	add.w	r3, r7, #8
 8013a4e:	9302      	str	r3, [sp, #8]
 8013a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a52:	9301      	str	r3, [sp, #4]
 8013a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a56:	9300      	str	r3, [sp, #0]
 8013a58:	4623      	mov	r3, r4
 8013a5a:	f7ff ff6e 	bl	801393a <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8013a5e:	887a      	ldrh	r2, [r7, #2]
 8013a60:	7879      	ldrb	r1, [r7, #1]
 8013a62:	f107 0008 	add.w	r0, r7, #8
 8013a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a68:	9300      	str	r3, [sp, #0]
 8013a6a:	460b      	mov	r3, r1
 8013a6c:	6879      	ldr	r1, [r7, #4]
 8013a6e:	f7f8 fc71 	bl	800c354 <SecureElementComputeAesCmac>
 8013a72:	4603      	mov	r3, r0
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d001      	beq.n	8013a7c <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013a78:	230f      	movs	r3, #15
 8013a7a:	e000      	b.n	8013a7e <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013a7c:	2300      	movs	r3, #0
}
 8013a7e:	4618      	mov	r0, r3
 8013a80:	371c      	adds	r7, #28
 8013a82:	46bd      	mov	sp, r7
 8013a84:	bd90      	pop	{r4, r7, pc}

08013a86 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8013a86:	b590      	push	{r4, r7, lr}
 8013a88:	b0cd      	sub	sp, #308	@ 0x134
 8013a8a:	af04      	add	r7, sp, #16
 8013a8c:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 8013a90:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 8013a94:	6020      	str	r0, [r4, #0]
 8013a96:	460c      	mov	r4, r1
 8013a98:	4610      	mov	r0, r2
 8013a9a:	4619      	mov	r1, r3
 8013a9c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013aa0:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8013aa4:	4622      	mov	r2, r4
 8013aa6:	801a      	strh	r2, [r3, #0]
 8013aa8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013aac:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8013ab0:	4602      	mov	r2, r0
 8013ab2:	701a      	strb	r2, [r3, #0]
 8013ab4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013ab8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8013abc:	460a      	mov	r2, r1
 8013abe:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8013ac0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013ac4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d101      	bne.n	8013ad2 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013ace:	230a      	movs	r3, #10
 8013ad0:	e063      	b.n	8013b9a <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8013ad2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013ad6:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8013ada:	881b      	ldrh	r3, [r3, #0]
 8013adc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013ae0:	d901      	bls.n	8013ae6 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8013ae2:	230e      	movs	r3, #14
 8013ae4:	e059      	b.n	8013b9a <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8013ae6:	f107 030c 	add.w	r3, r7, #12
 8013aea:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8013aee:	2100      	movs	r1, #0
 8013af0:	4618      	mov	r0, r3
 8013af2:	f004 ffb1 	bl	8018a58 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8013af6:	f897 4130 	ldrb.w	r4, [r7, #304]	@ 0x130
 8013afa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013afe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8013b02:	781a      	ldrb	r2, [r3, #0]
 8013b04:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013b08:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8013b0c:	7819      	ldrb	r1, [r3, #0]
 8013b0e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013b12:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8013b16:	8818      	ldrh	r0, [r3, #0]
 8013b18:	f107 030c 	add.w	r3, r7, #12
 8013b1c:	9302      	str	r3, [sp, #8]
 8013b1e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8013b22:	9301      	str	r3, [sp, #4]
 8013b24:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013b28:	9300      	str	r3, [sp, #0]
 8013b2a:	4623      	mov	r3, r4
 8013b2c:	f7ff ff05 	bl	801393a <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8013b30:	f107 030c 	add.w	r3, r7, #12
 8013b34:	3310      	adds	r3, #16
 8013b36:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8013b3a:	f5a2 728f 	sub.w	r2, r2, #286	@ 0x11e
 8013b3e:	8812      	ldrh	r2, [r2, #0]
 8013b40:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8013b44:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 8013b48:	6809      	ldr	r1, [r1, #0]
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	f004 ff49 	bl	80189e2 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8013b50:	2306      	movs	r3, #6
 8013b52:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8013b56:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013b5a:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8013b5e:	881b      	ldrh	r3, [r3, #0]
 8013b60:	3310      	adds	r3, #16
 8013b62:	4619      	mov	r1, r3
 8013b64:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013b68:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8013b6c:	781b      	ldrb	r3, [r3, #0]
 8013b6e:	f107 000c 	add.w	r0, r7, #12
 8013b72:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8013b76:	f7f8 fc07 	bl	800c388 <SecureElementVerifyAesCmac>
 8013b7a:	4603      	mov	r3, r0
 8013b7c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8013b80:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d101      	bne.n	8013b8c <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8013b88:	2300      	movs	r3, #0
 8013b8a:	e006      	b.n	8013b9a <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8013b8c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8013b90:	2b01      	cmp	r3, #1
 8013b92:	d101      	bne.n	8013b98 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8013b94:	2301      	movs	r3, #1
 8013b96:	e000      	b.n	8013b9a <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013b98:	230f      	movs	r3, #15
}
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8013ba0:	46bd      	mov	sp, r7
 8013ba2:	bd90      	pop	{r4, r7, pc}

08013ba4 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8013ba4:	b480      	push	{r7}
 8013ba6:	b085      	sub	sp, #20
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	4603      	mov	r3, r0
 8013bac:	6039      	str	r1, [r7, #0]
 8013bae:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8013bb0:	2300      	movs	r3, #0
 8013bb2:	73fb      	strb	r3, [r7, #15]
 8013bb4:	e011      	b.n	8013bda <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8013bb6:	7bfb      	ldrb	r3, [r7, #15]
 8013bb8:	4a0c      	ldr	r2, [pc, #48]	@ (8013bec <GetKeyAddrItem+0x48>)
 8013bba:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8013bbe:	79fa      	ldrb	r2, [r7, #7]
 8013bc0:	429a      	cmp	r2, r3
 8013bc2:	d107      	bne.n	8013bd4 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8013bc4:	7bfb      	ldrb	r3, [r7, #15]
 8013bc6:	009b      	lsls	r3, r3, #2
 8013bc8:	4a08      	ldr	r2, [pc, #32]	@ (8013bec <GetKeyAddrItem+0x48>)
 8013bca:	441a      	add	r2, r3
 8013bcc:	683b      	ldr	r3, [r7, #0]
 8013bce:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8013bd0:	2300      	movs	r3, #0
 8013bd2:	e006      	b.n	8013be2 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8013bd4:	7bfb      	ldrb	r3, [r7, #15]
 8013bd6:	3301      	adds	r3, #1
 8013bd8:	73fb      	strb	r3, [r7, #15]
 8013bda:	7bfb      	ldrb	r3, [r7, #15]
 8013bdc:	2b01      	cmp	r3, #1
 8013bde:	d9ea      	bls.n	8013bb6 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8013be0:	230c      	movs	r3, #12
}
 8013be2:	4618      	mov	r0, r3
 8013be4:	3714      	adds	r7, #20
 8013be6:	46bd      	mov	sp, r7
 8013be8:	bc80      	pop	{r7}
 8013bea:	4770      	bx	lr
 8013bec:	20000124 	.word	0x20000124

08013bf0 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8013bf0:	b580      	push	{r7, lr}
 8013bf2:	b088      	sub	sp, #32
 8013bf4:	af00      	add	r7, sp, #0
 8013bf6:	60b9      	str	r1, [r7, #8]
 8013bf8:	607a      	str	r2, [r7, #4]
 8013bfa:	461a      	mov	r2, r3
 8013bfc:	4603      	mov	r3, r0
 8013bfe:	73fb      	strb	r3, [r7, #15]
 8013c00:	4613      	mov	r3, r2
 8013c02:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8013c04:	2300      	movs	r3, #0
 8013c06:	613b      	str	r3, [r7, #16]
 8013c08:	f107 0314 	add.w	r3, r7, #20
 8013c0c:	2200      	movs	r2, #0
 8013c0e:	601a      	str	r2, [r3, #0]
 8013c10:	605a      	str	r2, [r3, #4]
 8013c12:	609a      	str	r2, [r3, #8]

    switch( keyID )
 8013c14:	7bfb      	ldrb	r3, [r7, #15]
 8013c16:	2b08      	cmp	r3, #8
 8013c18:	d002      	beq.n	8013c20 <DeriveSessionKey10x+0x30>
 8013c1a:	2b09      	cmp	r3, #9
 8013c1c:	d003      	beq.n	8013c26 <DeriveSessionKey10x+0x36>
 8013c1e:	e005      	b.n	8013c2c <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 8013c20:	2301      	movs	r3, #1
 8013c22:	743b      	strb	r3, [r7, #16]
            break;
 8013c24:	e004      	b.n	8013c30 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8013c26:	2302      	movs	r3, #2
 8013c28:	743b      	strb	r3, [r7, #16]
            break;
 8013c2a:	e001      	b.n	8013c30 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8013c2c:	230b      	movs	r3, #11
 8013c2e:	e02a      	b.n	8013c86 <DeriveSessionKey10x+0x96>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8013c30:	68bb      	ldr	r3, [r7, #8]
 8013c32:	b2db      	uxtb	r3, r3
 8013c34:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8013c36:	68bb      	ldr	r3, [r7, #8]
 8013c38:	0a1b      	lsrs	r3, r3, #8
 8013c3a:	b2db      	uxtb	r3, r3
 8013c3c:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8013c3e:	68bb      	ldr	r3, [r7, #8]
 8013c40:	0c1b      	lsrs	r3, r3, #16
 8013c42:	b2db      	uxtb	r3, r3
 8013c44:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	b2db      	uxtb	r3, r3
 8013c4a:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	0a1b      	lsrs	r3, r3, #8
 8013c50:	b2db      	uxtb	r3, r3
 8013c52:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	0c1b      	lsrs	r3, r3, #16
 8013c58:	b2db      	uxtb	r3, r3
 8013c5a:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8013c5c:	89bb      	ldrh	r3, [r7, #12]
 8013c5e:	b2db      	uxtb	r3, r3
 8013c60:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8013c62:	89bb      	ldrh	r3, [r7, #12]
 8013c64:	0a1b      	lsrs	r3, r3, #8
 8013c66:	b29b      	uxth	r3, r3
 8013c68:	b2db      	uxtb	r3, r3
 8013c6a:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8013c6c:	7bfa      	ldrb	r2, [r7, #15]
 8013c6e:	f107 0310 	add.w	r3, r7, #16
 8013c72:	2101      	movs	r1, #1
 8013c74:	4618      	mov	r0, r3
 8013c76:	f7f8 fc33 	bl	800c4e0 <SecureElementDeriveAndStoreKey>
 8013c7a:	4603      	mov	r3, r0
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d001      	beq.n	8013c84 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013c80:	230f      	movs	r3, #15
 8013c82:	e000      	b.n	8013c86 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013c84:	2300      	movs	r3, #0
}
 8013c86:	4618      	mov	r0, r3
 8013c88:	3720      	adds	r7, #32
 8013c8a:	46bd      	mov	sp, r7
 8013c8c:	bd80      	pop	{r7, pc}
	...

08013c90 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8013c90:	b480      	push	{r7}
 8013c92:	b083      	sub	sp, #12
 8013c94:	af00      	add	r7, sp, #0
 8013c96:	4603      	mov	r3, r0
 8013c98:	6039      	str	r1, [r7, #0]
 8013c9a:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8013c9c:	683b      	ldr	r3, [r7, #0]
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d101      	bne.n	8013ca6 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013ca2:	230a      	movs	r3, #10
 8013ca4:	e029      	b.n	8013cfa <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 8013ca6:	79fb      	ldrb	r3, [r7, #7]
 8013ca8:	3b01      	subs	r3, #1
 8013caa:	2b03      	cmp	r3, #3
 8013cac:	d822      	bhi.n	8013cf4 <GetLastFcntDown+0x64>
 8013cae:	a201      	add	r2, pc, #4	@ (adr r2, 8013cb4 <GetLastFcntDown+0x24>)
 8013cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013cb4:	08013cc5 	.word	0x08013cc5
 8013cb8:	08013cd1 	.word	0x08013cd1
 8013cbc:	08013cdd 	.word	0x08013cdd
 8013cc0:	08013ce9 	.word	0x08013ce9
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8013cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8013d04 <GetLastFcntDown+0x74>)
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	691a      	ldr	r2, [r3, #16]
 8013cca:	683b      	ldr	r3, [r7, #0]
 8013ccc:	601a      	str	r2, [r3, #0]
            break;
 8013cce:	e013      	b.n	8013cf8 <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8013cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8013d04 <GetLastFcntDown+0x74>)
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	695a      	ldr	r2, [r3, #20]
 8013cd6:	683b      	ldr	r3, [r7, #0]
 8013cd8:	601a      	str	r2, [r3, #0]
            break;
 8013cda:	e00d      	b.n	8013cf8 <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8013cdc:	4b09      	ldr	r3, [pc, #36]	@ (8013d04 <GetLastFcntDown+0x74>)
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	699a      	ldr	r2, [r3, #24]
 8013ce2:	683b      	ldr	r3, [r7, #0]
 8013ce4:	601a      	str	r2, [r3, #0]
            break;
 8013ce6:	e007      	b.n	8013cf8 <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8013ce8:	4b06      	ldr	r3, [pc, #24]	@ (8013d04 <GetLastFcntDown+0x74>)
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	69da      	ldr	r2, [r3, #28]
 8013cee:	683b      	ldr	r3, [r7, #0]
 8013cf0:	601a      	str	r2, [r3, #0]
            break;
 8013cf2:	e001      	b.n	8013cf8 <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8013cf4:	2305      	movs	r3, #5
 8013cf6:	e000      	b.n	8013cfa <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013cf8:	2300      	movs	r3, #0
}
 8013cfa:	4618      	mov	r0, r3
 8013cfc:	370c      	adds	r7, #12
 8013cfe:	46bd      	mov	sp, r7
 8013d00:	bc80      	pop	{r7}
 8013d02:	4770      	bx	lr
 8013d04:	20001c8c 	.word	0x20001c8c

08013d08 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8013d08:	b580      	push	{r7, lr}
 8013d0a:	b084      	sub	sp, #16
 8013d0c:	af00      	add	r7, sp, #0
 8013d0e:	4603      	mov	r3, r0
 8013d10:	6039      	str	r1, [r7, #0]
 8013d12:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8013d14:	2300      	movs	r3, #0
 8013d16:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8013d18:	f107 020c 	add.w	r2, r7, #12
 8013d1c:	79fb      	ldrb	r3, [r7, #7]
 8013d1e:	4611      	mov	r1, r2
 8013d20:	4618      	mov	r0, r3
 8013d22:	f7ff ffb5 	bl	8013c90 <GetLastFcntDown>
 8013d26:	4603      	mov	r3, r0
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d001      	beq.n	8013d30 <CheckFCntDown+0x28>
    {
        return false;
 8013d2c:	2300      	movs	r3, #0
 8013d2e:	e00a      	b.n	8013d46 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	683a      	ldr	r2, [r7, #0]
 8013d34:	429a      	cmp	r2, r3
 8013d36:	d803      	bhi.n	8013d40 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 8013d38:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8013d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d3e:	d101      	bne.n	8013d44 <CheckFCntDown+0x3c>
    {
        return true;
 8013d40:	2301      	movs	r3, #1
 8013d42:	e000      	b.n	8013d46 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8013d44:	2300      	movs	r3, #0
    }
}
 8013d46:	4618      	mov	r0, r3
 8013d48:	3710      	adds	r7, #16
 8013d4a:	46bd      	mov	sp, r7
 8013d4c:	bd80      	pop	{r7, pc}
	...

08013d50 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8013d50:	b480      	push	{r7}
 8013d52:	b083      	sub	sp, #12
 8013d54:	af00      	add	r7, sp, #0
 8013d56:	4603      	mov	r3, r0
 8013d58:	6039      	str	r1, [r7, #0]
 8013d5a:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8013d5c:	79fb      	ldrb	r3, [r7, #7]
 8013d5e:	3b01      	subs	r3, #1
 8013d60:	2b03      	cmp	r3, #3
 8013d62:	d82b      	bhi.n	8013dbc <UpdateFCntDown+0x6c>
 8013d64:	a201      	add	r2, pc, #4	@ (adr r2, 8013d6c <UpdateFCntDown+0x1c>)
 8013d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d6a:	bf00      	nop
 8013d6c:	08013d7d 	.word	0x08013d7d
 8013d70:	08013d8f 	.word	0x08013d8f
 8013d74:	08013da1 	.word	0x08013da1
 8013d78:	08013db3 	.word	0x08013db3
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8013d7c:	4b12      	ldr	r3, [pc, #72]	@ (8013dc8 <UpdateFCntDown+0x78>)
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	683a      	ldr	r2, [r7, #0]
 8013d82:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 8013d84:	4b10      	ldr	r3, [pc, #64]	@ (8013dc8 <UpdateFCntDown+0x78>)
 8013d86:	681b      	ldr	r3, [r3, #0]
 8013d88:	683a      	ldr	r2, [r7, #0]
 8013d8a:	621a      	str	r2, [r3, #32]
            break;
 8013d8c:	e017      	b.n	8013dbe <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8013d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8013dc8 <UpdateFCntDown+0x78>)
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	683a      	ldr	r2, [r7, #0]
 8013d94:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 8013d96:	4b0c      	ldr	r3, [pc, #48]	@ (8013dc8 <UpdateFCntDown+0x78>)
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	683a      	ldr	r2, [r7, #0]
 8013d9c:	621a      	str	r2, [r3, #32]
            break;
 8013d9e:	e00e      	b.n	8013dbe <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8013da0:	4b09      	ldr	r3, [pc, #36]	@ (8013dc8 <UpdateFCntDown+0x78>)
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	683a      	ldr	r2, [r7, #0]
 8013da6:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 8013da8:	4b07      	ldr	r3, [pc, #28]	@ (8013dc8 <UpdateFCntDown+0x78>)
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	683a      	ldr	r2, [r7, #0]
 8013dae:	621a      	str	r2, [r3, #32]
            break;
 8013db0:	e005      	b.n	8013dbe <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8013db2:	4b05      	ldr	r3, [pc, #20]	@ (8013dc8 <UpdateFCntDown+0x78>)
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	683a      	ldr	r2, [r7, #0]
 8013db8:	61da      	str	r2, [r3, #28]
            break;
 8013dba:	e000      	b.n	8013dbe <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8013dbc:	bf00      	nop
    }
}
 8013dbe:	bf00      	nop
 8013dc0:	370c      	adds	r7, #12
 8013dc2:	46bd      	mov	sp, r7
 8013dc4:	bc80      	pop	{r7}
 8013dc6:	4770      	bx	lr
 8013dc8:	20001c8c 	.word	0x20001c8c

08013dcc <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8013dcc:	b480      	push	{r7}
 8013dce:	b083      	sub	sp, #12
 8013dd0:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8013dd2:	4b18      	ldr	r3, [pc, #96]	@ (8013e34 <ResetFCnts+0x68>)
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	2200      	movs	r2, #0
 8013dd8:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8013dda:	4b16      	ldr	r3, [pc, #88]	@ (8013e34 <ResetFCnts+0x68>)
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	f04f 32ff 	mov.w	r2, #4294967295
 8013de2:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8013de4:	4b13      	ldr	r3, [pc, #76]	@ (8013e34 <ResetFCnts+0x68>)
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	f04f 32ff 	mov.w	r2, #4294967295
 8013dec:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8013dee:	4b11      	ldr	r3, [pc, #68]	@ (8013e34 <ResetFCnts+0x68>)
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	f04f 32ff 	mov.w	r2, #4294967295
 8013df6:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8013df8:	4b0e      	ldr	r3, [pc, #56]	@ (8013e34 <ResetFCnts+0x68>)
 8013dfa:	681a      	ldr	r2, [r3, #0]
 8013dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8013e34 <ResetFCnts+0x68>)
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	6992      	ldr	r2, [r2, #24]
 8013e02:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013e04:	2300      	movs	r3, #0
 8013e06:	607b      	str	r3, [r7, #4]
 8013e08:	e00b      	b.n	8013e22 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 8013e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8013e34 <ResetFCnts+0x68>)
 8013e0c:	681a      	ldr	r2, [r3, #0]
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	3306      	adds	r3, #6
 8013e12:	009b      	lsls	r3, r3, #2
 8013e14:	4413      	add	r3, r2
 8013e16:	f04f 32ff 	mov.w	r2, #4294967295
 8013e1a:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	3301      	adds	r3, #1
 8013e20:	607b      	str	r3, [r7, #4]
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	ddf0      	ble.n	8013e0a <ResetFCnts+0x3e>
    }
}
 8013e28:	bf00      	nop
 8013e2a:	bf00      	nop
 8013e2c:	370c      	adds	r7, #12
 8013e2e:	46bd      	mov	sp, r7
 8013e30:	bc80      	pop	{r7}
 8013e32:	4770      	bx	lr
 8013e34:	20001c8c 	.word	0x20001c8c

08013e38 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 8013e38:	b480      	push	{r7}
 8013e3a:	b083      	sub	sp, #12
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 8013e40:	4b06      	ldr	r3, [pc, #24]	@ (8013e5c <IsJoinNonce10xOk+0x24>)
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	689b      	ldr	r3, [r3, #8]
 8013e46:	687a      	ldr	r2, [r7, #4]
 8013e48:	429a      	cmp	r2, r3
 8013e4a:	bf8c      	ite	hi
 8013e4c:	2301      	movhi	r3, #1
 8013e4e:	2300      	movls	r3, #0
 8013e50:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 8013e52:	4618      	mov	r0, r3
 8013e54:	370c      	adds	r7, #12
 8013e56:	46bd      	mov	sp, r7
 8013e58:	bc80      	pop	{r7}
 8013e5a:	4770      	bx	lr
 8013e5c:	20001c8c 	.word	0x20001c8c

08013e60 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8013e60:	b580      	push	{r7, lr}
 8013e62:	b082      	sub	sp, #8
 8013e64:	af00      	add	r7, sp, #0
 8013e66:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d101      	bne.n	8013e72 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8013e6e:	2309      	movs	r3, #9
 8013e70:	e01c      	b.n	8013eac <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8013e72:	4a10      	ldr	r2, [pc, #64]	@ (8013eb4 <LoRaMacCryptoInit+0x54>)
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8013e78:	4b0e      	ldr	r3, [pc, #56]	@ (8013eb4 <LoRaMacCryptoInit+0x54>)
 8013e7a:	681b      	ldr	r3, [r3, #0]
 8013e7c:	2228      	movs	r2, #40	@ 0x28
 8013e7e:	2100      	movs	r1, #0
 8013e80:	4618      	mov	r0, r3
 8013e82:	f004 fde9 	bl	8018a58 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8013e86:	4b0b      	ldr	r3, [pc, #44]	@ (8013eb4 <LoRaMacCryptoInit+0x54>)
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	2201      	movs	r2, #1
 8013e8c:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8013e8e:	4b09      	ldr	r3, [pc, #36]	@ (8013eb4 <LoRaMacCryptoInit+0x54>)
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	2201      	movs	r2, #1
 8013e94:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8013e96:	4b07      	ldr	r3, [pc, #28]	@ (8013eb4 <LoRaMacCryptoInit+0x54>)
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	2201      	movs	r2, #1
 8013e9c:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8013e9e:	4b05      	ldr	r3, [pc, #20]	@ (8013eb4 <LoRaMacCryptoInit+0x54>)
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	2200      	movs	r2, #0
 8013ea4:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8013ea6:	f7ff ff91 	bl	8013dcc <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8013eaa:	2300      	movs	r3, #0
}
 8013eac:	4618      	mov	r0, r3
 8013eae:	3708      	adds	r7, #8
 8013eb0:	46bd      	mov	sp, r7
 8013eb2:	bd80      	pop	{r7, pc}
 8013eb4:	20001c8c 	.word	0x20001c8c

08013eb8 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8013eb8:	b480      	push	{r7}
 8013eba:	b083      	sub	sp, #12
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8013ec0:	4b04      	ldr	r3, [pc, #16]	@ (8013ed4 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	687a      	ldr	r2, [r7, #4]
 8013ec6:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8013ec8:	2300      	movs	r3, #0
}
 8013eca:	4618      	mov	r0, r3
 8013ecc:	370c      	adds	r7, #12
 8013ece:	46bd      	mov	sp, r7
 8013ed0:	bc80      	pop	{r7}
 8013ed2:	4770      	bx	lr
 8013ed4:	20001c8c 	.word	0x20001c8c

08013ed8 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8013ed8:	b480      	push	{r7}
 8013eda:	b083      	sub	sp, #12
 8013edc:	af00      	add	r7, sp, #0
 8013ede:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d101      	bne.n	8013eea <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013ee6:	230a      	movs	r3, #10
 8013ee8:	e006      	b.n	8013ef8 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8013eea:	4b06      	ldr	r3, [pc, #24]	@ (8013f04 <LoRaMacCryptoGetFCntUp+0x2c>)
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	68db      	ldr	r3, [r3, #12]
 8013ef0:	1c5a      	adds	r2, r3, #1
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8013ef6:	2300      	movs	r3, #0
}
 8013ef8:	4618      	mov	r0, r3
 8013efa:	370c      	adds	r7, #12
 8013efc:	46bd      	mov	sp, r7
 8013efe:	bc80      	pop	{r7}
 8013f00:	4770      	bx	lr
 8013f02:	bf00      	nop
 8013f04:	20001c8c 	.word	0x20001c8c

08013f08 <LoRaMacCryptoGetFCntDown>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8013f08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013f0c:	b08a      	sub	sp, #40	@ 0x28
 8013f0e:	af00      	add	r7, sp, #0
 8013f10:	613a      	str	r2, [r7, #16]
 8013f12:	60fb      	str	r3, [r7, #12]
 8013f14:	4603      	mov	r3, r0
 8013f16:	75fb      	strb	r3, [r7, #23]
 8013f18:	460b      	mov	r3, r1
 8013f1a:	82bb      	strh	r3, [r7, #20]
    uint32_t lastDown = 0;
 8013f1c:	2300      	movs	r3, #0
 8013f1e:	61fb      	str	r3, [r7, #28]
    int32_t fCntDiff = 0;
 8013f20:	2300      	movs	r3, #0
 8013f22:	627b      	str	r3, [r7, #36]	@ 0x24
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8013f24:	2313      	movs	r3, #19
 8013f26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    if( currentDown == NULL )
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d101      	bne.n	8013f34 <LoRaMacCryptoGetFCntDown+0x2c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013f30:	230a      	movs	r3, #10
 8013f32:	e057      	b.n	8013fe4 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8013f34:	f107 021c 	add.w	r2, r7, #28
 8013f38:	7dfb      	ldrb	r3, [r7, #23]
 8013f3a:	4611      	mov	r1, r2
 8013f3c:	4618      	mov	r0, r3
 8013f3e:	f7ff fea7 	bl	8013c90 <GetLastFcntDown>
 8013f42:	4603      	mov	r3, r0
 8013f44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8013f48:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d002      	beq.n	8013f56 <LoRaMacCryptoGetFCntDown+0x4e>
    {
        return cryptoStatus;
 8013f50:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8013f54:	e046      	b.n	8013fe4 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 8013f56:	69fb      	ldr	r3, [r7, #28]
 8013f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f5c:	d103      	bne.n	8013f66 <LoRaMacCryptoGetFCntDown+0x5e>
    {
        *currentDown = frameFcnt;
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	693a      	ldr	r2, [r7, #16]
 8013f62:	601a      	str	r2, [r3, #0]
 8013f64:	e01e      	b.n	8013fa4 <LoRaMacCryptoGetFCntDown+0x9c>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8013f66:	69fb      	ldr	r3, [r7, #28]
 8013f68:	b29b      	uxth	r3, r3
 8013f6a:	693a      	ldr	r2, [r7, #16]
 8013f6c:	1ad3      	subs	r3, r2, r3
 8013f6e:	627b      	str	r3, [r7, #36]	@ 0x24

        if( fCntDiff > 0 )
 8013f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	dd05      	ble.n	8013f82 <LoRaMacCryptoGetFCntDown+0x7a>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8013f76:	69fa      	ldr	r2, [r7, #28]
 8013f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f7a:	441a      	add	r2, r3
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	601a      	str	r2, [r3, #0]
 8013f80:	e010      	b.n	8013fa4 <LoRaMacCryptoGetFCntDown+0x9c>
        }
        else if( fCntDiff == 0 )
 8013f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d104      	bne.n	8013f92 <LoRaMacCryptoGetFCntDown+0x8a>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8013f88:	69fa      	ldr	r2, [r7, #28]
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8013f8e:	2307      	movs	r3, #7
 8013f90:	e028      	b.n	8013fe4 <LoRaMacCryptoGetFCntDown+0xdc>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8013f92:	69fb      	ldr	r3, [r7, #28]
 8013f94:	0c1b      	lsrs	r3, r3, #16
 8013f96:	041b      	lsls	r3, r3, #16
 8013f98:	693a      	ldr	r2, [r7, #16]
 8013f9a:	4413      	add	r3, r2
 8013f9c:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8013fa4:	4b12      	ldr	r3, [pc, #72]	@ (8013ff0 <LoRaMacCryptoGetFCntDown+0xe8>)
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	789b      	ldrb	r3, [r3, #2]
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d119      	bne.n	8013fe2 <LoRaMacCryptoGetFCntDown+0xda>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	2200      	movs	r2, #0
 8013fb4:	603b      	str	r3, [r7, #0]
 8013fb6:	607a      	str	r2, [r7, #4]
 8013fb8:	69fb      	ldr	r3, [r7, #28]
 8013fba:	2200      	movs	r2, #0
 8013fbc:	469a      	mov	sl, r3
 8013fbe:	4693      	mov	fp, r2
 8013fc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013fc4:	4611      	mov	r1, r2
 8013fc6:	ebb1 040a 	subs.w	r4, r1, sl
 8013fca:	eb63 050b 	sbc.w	r5, r3, fp
 8013fce:	8abb      	ldrh	r3, [r7, #20]
 8013fd0:	2200      	movs	r2, #0
 8013fd2:	4698      	mov	r8, r3
 8013fd4:	4691      	mov	r9, r2
 8013fd6:	4544      	cmp	r4, r8
 8013fd8:	eb75 0309 	sbcs.w	r3, r5, r9
 8013fdc:	db01      	blt.n	8013fe2 <LoRaMacCryptoGetFCntDown+0xda>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8013fde:	2308      	movs	r3, #8
 8013fe0:	e000      	b.n	8013fe4 <LoRaMacCryptoGetFCntDown+0xdc>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013fe2:	2300      	movs	r3, #0
}
 8013fe4:	4618      	mov	r0, r3
 8013fe6:	3728      	adds	r7, #40	@ 0x28
 8013fe8:	46bd      	mov	sp, r7
 8013fea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013fee:	bf00      	nop
 8013ff0:	20001c8c 	.word	0x20001c8c

08013ff4 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8013ff4:	b480      	push	{r7}
 8013ff6:	b085      	sub	sp, #20
 8013ff8:	af00      	add	r7, sp, #0
 8013ffa:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d101      	bne.n	8014006 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014002:	230a      	movs	r3, #10
 8014004:	e019      	b.n	801403a <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014006:	2300      	movs	r3, #0
 8014008:	60fb      	str	r3, [r7, #12]
 801400a:	e012      	b.n	8014032 <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 801400c:	4b0d      	ldr	r3, [pc, #52]	@ (8014044 <LoRaMacCryptoSetMulticastReference+0x50>)
 801400e:	6819      	ldr	r1, [r3, #0]
 8014010:	68fa      	ldr	r2, [r7, #12]
 8014012:	4613      	mov	r3, r2
 8014014:	005b      	lsls	r3, r3, #1
 8014016:	4413      	add	r3, r2
 8014018:	011b      	lsls	r3, r3, #4
 801401a:	461a      	mov	r2, r3
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	4413      	add	r3, r2
 8014020:	68fa      	ldr	r2, [r7, #12]
 8014022:	3206      	adds	r2, #6
 8014024:	0092      	lsls	r2, r2, #2
 8014026:	440a      	add	r2, r1
 8014028:	3204      	adds	r2, #4
 801402a:	625a      	str	r2, [r3, #36]	@ 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	3301      	adds	r3, #1
 8014030:	60fb      	str	r3, [r7, #12]
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	2b00      	cmp	r3, #0
 8014036:	dde9      	ble.n	801400c <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014038:	2300      	movs	r3, #0
}
 801403a:	4618      	mov	r0, r3
 801403c:	3714      	adds	r7, #20
 801403e:	46bd      	mov	sp, r7
 8014040:	bc80      	pop	{r7}
 8014042:	4770      	bx	lr
 8014044:	20001c8c 	.word	0x20001c8c

08014048 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8014048:	b580      	push	{r7, lr}
 801404a:	b082      	sub	sp, #8
 801404c:	af00      	add	r7, sp, #0
 801404e:	4603      	mov	r3, r0
 8014050:	6039      	str	r1, [r7, #0]
 8014052:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8014054:	79fb      	ldrb	r3, [r7, #7]
 8014056:	6839      	ldr	r1, [r7, #0]
 8014058:	4618      	mov	r0, r3
 801405a:	f7f8 f91d 	bl	800c298 <SecureElementSetKey>
 801405e:	4603      	mov	r3, r0
 8014060:	2b00      	cmp	r3, #0
 8014062:	d001      	beq.n	8014068 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014064:	230f      	movs	r3, #15
 8014066:	e021      	b.n	80140ac <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 8014068:	79fb      	ldrb	r3, [r7, #7]
 801406a:	2b00      	cmp	r3, #0
 801406c:	d11d      	bne.n	80140aa <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801406e:	4b11      	ldr	r3, [pc, #68]	@ (80140b4 <LoRaMacCryptoSetKey+0x6c>)
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	789b      	ldrb	r3, [r3, #2]
 8014074:	210b      	movs	r1, #11
 8014076:	4618      	mov	r0, r3
 8014078:	f000 fa5c 	bl	8014534 <LoRaMacCryptoDeriveLifeTimeKey>
 801407c:	4603      	mov	r3, r0
 801407e:	2b00      	cmp	r3, #0
 8014080:	d001      	beq.n	8014086 <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014082:	230f      	movs	r3, #15
 8014084:	e012      	b.n	80140ac <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8014086:	210c      	movs	r1, #12
 8014088:	2000      	movs	r0, #0
 801408a:	f000 fa53 	bl	8014534 <LoRaMacCryptoDeriveLifeTimeKey>
 801408e:	4603      	mov	r3, r0
 8014090:	2b00      	cmp	r3, #0
 8014092:	d001      	beq.n	8014098 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014094:	230f      	movs	r3, #15
 8014096:	e009      	b.n	80140ac <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8014098:	210a      	movs	r1, #10
 801409a:	2000      	movs	r0, #0
 801409c:	f000 fa4a 	bl	8014534 <LoRaMacCryptoDeriveLifeTimeKey>
 80140a0:	4603      	mov	r3, r0
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d001      	beq.n	80140aa <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80140a6:	230f      	movs	r3, #15
 80140a8:	e000      	b.n	80140ac <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80140aa:	2300      	movs	r3, #0
}
 80140ac:	4618      	mov	r0, r3
 80140ae:	3708      	adds	r7, #8
 80140b0:	46bd      	mov	sp, r7
 80140b2:	bd80      	pop	{r7, pc}
 80140b4:	20001c8c 	.word	0x20001c8c

080140b8 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80140b8:	b580      	push	{r7, lr}
 80140ba:	b086      	sub	sp, #24
 80140bc:	af02      	add	r7, sp, #8
 80140be:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d101      	bne.n	80140ca <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80140c6:	230a      	movs	r3, #10
 80140c8:	e033      	b.n	8014132 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 80140ca:	2301      	movs	r3, #1
 80140cc:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 80140ce:	2300      	movs	r3, #0
 80140d0:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 80140d2:	f107 0308 	add.w	r3, r7, #8
 80140d6:	4618      	mov	r0, r3
 80140d8:	f7f8 fab8 	bl	800c64c <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 80140dc:	68ba      	ldr	r2, [r7, #8]
 80140de:	4b17      	ldr	r3, [pc, #92]	@ (801413c <LoRaMacCryptoPrepareJoinRequest+0x84>)
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	b292      	uxth	r2, r2
 80140e4:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 80140e6:	4b15      	ldr	r3, [pc, #84]	@ (801413c <LoRaMacCryptoPrepareJoinRequest+0x84>)
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	889a      	ldrh	r2, [r3, #4]
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80140f0:	6878      	ldr	r0, [r7, #4]
 80140f2:	f000 fc17 	bl	8014924 <LoRaMacSerializerJoinRequest>
 80140f6:	4603      	mov	r3, r0
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d001      	beq.n	8014100 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80140fc:	2311      	movs	r3, #17
 80140fe:	e018      	b.n	8014132 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	6819      	ldr	r1, [r3, #0]
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	3318      	adds	r3, #24
 8014108:	7bfa      	ldrb	r2, [r7, #15]
 801410a:	9300      	str	r3, [sp, #0]
 801410c:	4613      	mov	r3, r2
 801410e:	2213      	movs	r2, #19
 8014110:	2000      	movs	r0, #0
 8014112:	f7f8 f91f 	bl	800c354 <SecureElementComputeAesCmac>
 8014116:	4603      	mov	r3, r0
 8014118:	2b00      	cmp	r3, #0
 801411a:	d001      	beq.n	8014120 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801411c:	230f      	movs	r3, #15
 801411e:	e008      	b.n	8014132 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014120:	6878      	ldr	r0, [r7, #4]
 8014122:	f000 fbff 	bl	8014924 <LoRaMacSerializerJoinRequest>
 8014126:	4603      	mov	r3, r0
 8014128:	2b00      	cmp	r3, #0
 801412a:	d001      	beq.n	8014130 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801412c:	2311      	movs	r3, #17
 801412e:	e000      	b.n	8014132 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014130:	2300      	movs	r3, #0
}
 8014132:	4618      	mov	r0, r3
 8014134:	3710      	adds	r7, #16
 8014136:	46bd      	mov	sp, r7
 8014138:	bd80      	pop	{r7, pc}
 801413a:	bf00      	nop
 801413c:	20001c8c 	.word	0x20001c8c

08014140 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8014140:	b590      	push	{r4, r7, lr}
 8014142:	b097      	sub	sp, #92	@ 0x5c
 8014144:	af04      	add	r7, sp, #16
 8014146:	4603      	mov	r3, r0
 8014148:	60b9      	str	r1, [r7, #8]
 801414a:	607a      	str	r2, [r7, #4]
 801414c:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d002      	beq.n	801415a <LoRaMacCryptoHandleJoinAccept+0x1a>
 8014154:	68bb      	ldr	r3, [r7, #8]
 8014156:	2b00      	cmp	r3, #0
 8014158:	d101      	bne.n	801415e <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801415a:	230a      	movs	r3, #10
 801415c:	e0d3      	b.n	8014306 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801415e:	2313      	movs	r3, #19
 8014160:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8014164:	2300      	movs	r3, #0
 8014166:	617b      	str	r3, [r7, #20]
 8014168:	f107 0318 	add.w	r3, r7, #24
 801416c:	221d      	movs	r2, #29
 801416e:	2100      	movs	r1, #0
 8014170:	4618      	mov	r0, r3
 8014172:	f008 fccf 	bl	801cb14 <memset>
    uint8_t versionMinor         = 0;
 8014176:	2300      	movs	r3, #0
 8014178:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 801417a:	4b65      	ldr	r3, [pc, #404]	@ (8014310 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 801417c:	681b      	ldr	r3, [r3, #0]
 801417e:	889b      	ldrh	r3, [r3, #4]
 8014180:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	681c      	ldr	r4, [r3, #0]
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	791b      	ldrb	r3, [r3, #4]
 801418c:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 8014190:	7bf8      	ldrb	r0, [r7, #15]
 8014192:	f107 0213 	add.w	r2, r7, #19
 8014196:	9202      	str	r2, [sp, #8]
 8014198:	f107 0214 	add.w	r2, r7, #20
 801419c:	9201      	str	r2, [sp, #4]
 801419e:	9300      	str	r3, [sp, #0]
 80141a0:	4623      	mov	r3, r4
 80141a2:	460a      	mov	r2, r1
 80141a4:	68b9      	ldr	r1, [r7, #8]
 80141a6:	f7f8 f9db 	bl	800c560 <SecureElementProcessJoinAccept>
 80141aa:	4603      	mov	r3, r0
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d001      	beq.n	80141b4 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80141b0:	230f      	movs	r3, #15
 80141b2:	e0a8      	b.n	8014306 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	6818      	ldr	r0, [r3, #0]
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	791b      	ldrb	r3, [r3, #4]
 80141bc:	461a      	mov	r2, r3
 80141be:	f107 0314 	add.w	r3, r7, #20
 80141c2:	4619      	mov	r1, r3
 80141c4:	f004 fc0d 	bl	80189e2 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80141c8:	6878      	ldr	r0, [r7, #4]
 80141ca:	f000 f9ee 	bl	80145aa <LoRaMacParserJoinAccept>
 80141ce:	4603      	mov	r3, r0
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d001      	beq.n	80141d8 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80141d4:	2310      	movs	r3, #16
 80141d6:	e096      	b.n	8014306 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 80141d8:	2300      	movs	r3, #0
 80141da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	799b      	ldrb	r3, [r3, #6]
 80141e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	79db      	ldrb	r3, [r3, #7]
 80141e8:	021b      	lsls	r3, r3, #8
 80141ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80141ec:	4313      	orrs	r3, r2
 80141ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	7a1b      	ldrb	r3, [r3, #8]
 80141f4:	041b      	lsls	r3, r3, #16
 80141f6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80141f8:	4313      	orrs	r3, r2
 80141fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 80141fc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80141fe:	f7ff fe1b 	bl	8013e38 <IsJoinNonce10xOk>
 8014202:	4603      	mov	r3, r0
 8014204:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    }

    if( isJoinNonceOk == true )
 8014208:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801420c:	2b00      	cmp	r3, #0
 801420e:	d010      	beq.n	8014232 <LoRaMacCryptoHandleJoinAccept+0xf2>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8014210:	4b3f      	ldr	r3, [pc, #252]	@ (8014310 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014216:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 8014218:	7cfb      	ldrb	r3, [r7, #19]
 801421a:	210b      	movs	r1, #11
 801421c:	4618      	mov	r0, r3
 801421e:	f000 f989 	bl	8014534 <LoRaMacCryptoDeriveLifeTimeKey>
 8014222:	4603      	mov	r3, r0
 8014224:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014228:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801422c:	2b00      	cmp	r3, #0
 801422e:	d005      	beq.n	801423c <LoRaMacCryptoHandleJoinAccept+0xfc>
 8014230:	e001      	b.n	8014236 <LoRaMacCryptoHandleJoinAccept+0xf6>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8014232:	2303      	movs	r3, #3
 8014234:	e067      	b.n	8014306 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        return retval;
 8014236:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801423a:	e064      	b.n	8014306 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 801423c:	210c      	movs	r1, #12
 801423e:	2000      	movs	r0, #0
 8014240:	f000 f978 	bl	8014534 <LoRaMacCryptoDeriveLifeTimeKey>
 8014244:	4603      	mov	r3, r0
 8014246:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801424a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801424e:	2b00      	cmp	r3, #0
 8014250:	d002      	beq.n	8014258 <LoRaMacCryptoHandleJoinAccept+0x118>
    {
        return retval;
 8014252:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014256:	e056      	b.n	8014306 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 8014258:	210a      	movs	r1, #10
 801425a:	2000      	movs	r0, #0
 801425c:	f000 f96a 	bl	8014534 <LoRaMacCryptoDeriveLifeTimeKey>
 8014260:	4603      	mov	r3, r0
 8014262:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014266:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801426a:	2b00      	cmp	r3, #0
 801426c:	d002      	beq.n	8014274 <LoRaMacCryptoHandleJoinAccept+0x134>
    {
        return retval;
 801426e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014272:	e048      	b.n	8014306 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	7a5b      	ldrb	r3, [r3, #9]
 8014278:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	7a9b      	ldrb	r3, [r3, #10]
 801427e:	021b      	lsls	r3, r3, #8
 8014280:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014282:	4313      	orrs	r3, r2
 8014284:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	7adb      	ldrb	r3, [r3, #11]
 801428a:	041b      	lsls	r3, r3, #16
 801428c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801428e:	4313      	orrs	r3, r2
 8014290:	63bb      	str	r3, [r7, #56]	@ 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8014292:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014296:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014298:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801429a:	2009      	movs	r0, #9
 801429c:	f7ff fca8 	bl	8013bf0 <DeriveSessionKey10x>
 80142a0:	4603      	mov	r3, r0
 80142a2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80142a6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d002      	beq.n	80142b4 <LoRaMacCryptoHandleJoinAccept+0x174>
        {
            return retval;
 80142ae:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80142b2:	e028      	b.n	8014306 <LoRaMacCryptoHandleJoinAccept+0x1c6>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 80142b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80142b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80142ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80142bc:	2008      	movs	r0, #8
 80142be:	f7ff fc97 	bl	8013bf0 <DeriveSessionKey10x>
 80142c2:	4603      	mov	r3, r0
 80142c4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80142c8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d002      	beq.n	80142d6 <LoRaMacCryptoHandleJoinAccept+0x196>
        {
            return retval;
 80142d0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80142d4:	e017      	b.n	8014306 <LoRaMacCryptoHandleJoinAccept+0x1c6>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 80142d6:	4b0e      	ldr	r3, [pc, #56]	@ (8014310 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80142d8:	681b      	ldr	r3, [r3, #0]
 80142da:	7cfa      	ldrb	r2, [r7, #19]
 80142dc:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 80142de:	4b0c      	ldr	r3, [pc, #48]	@ (8014310 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	2200      	movs	r2, #0
 80142e4:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 80142e6:	4b0a      	ldr	r3, [pc, #40]	@ (8014310 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	f04f 32ff 	mov.w	r2, #4294967295
 80142ee:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80142f0:	4b07      	ldr	r3, [pc, #28]	@ (8014310 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	f04f 32ff 	mov.w	r2, #4294967295
 80142f8:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80142fa:	4b05      	ldr	r3, [pc, #20]	@ (8014310 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80142fc:	681b      	ldr	r3, [r3, #0]
 80142fe:	f04f 32ff 	mov.w	r2, #4294967295
 8014302:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8014304:	2300      	movs	r3, #0
}
 8014306:	4618      	mov	r0, r3
 8014308:	374c      	adds	r7, #76	@ 0x4c
 801430a:	46bd      	mov	sp, r7
 801430c:	bd90      	pop	{r4, r7, pc}
 801430e:	bf00      	nop
 8014310:	20001c8c 	.word	0x20001c8c

08014314 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8014314:	b590      	push	{r4, r7, lr}
 8014316:	b08b      	sub	sp, #44	@ 0x2c
 8014318:	af04      	add	r7, sp, #16
 801431a:	60f8      	str	r0, [r7, #12]
 801431c:	607b      	str	r3, [r7, #4]
 801431e:	460b      	mov	r3, r1
 8014320:	72fb      	strb	r3, [r7, #11]
 8014322:	4613      	mov	r3, r2
 8014324:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8014326:	2313      	movs	r3, #19
 8014328:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801432a:	2309      	movs	r3, #9
 801432c:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	2b00      	cmp	r3, #0
 8014332:	d101      	bne.n	8014338 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014334:	230a      	movs	r3, #10
 8014336:	e05e      	b.n	80143f6 <LoRaMacCryptoSecureMessage+0xe2>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8014338:	4b31      	ldr	r3, [pc, #196]	@ (8014400 <LoRaMacCryptoSecureMessage+0xec>)
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	68db      	ldr	r3, [r3, #12]
 801433e:	68fa      	ldr	r2, [r7, #12]
 8014340:	429a      	cmp	r2, r3
 8014342:	d201      	bcs.n	8014348 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8014344:	2306      	movs	r3, #6
 8014346:	e056      	b.n	80143f6 <LoRaMacCryptoSecureMessage+0xe2>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801434e:	2b00      	cmp	r3, #0
 8014350:	d101      	bne.n	8014356 <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8014352:	2308      	movs	r3, #8
 8014354:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8014356:	4b2a      	ldr	r3, [pc, #168]	@ (8014400 <LoRaMacCryptoSecureMessage+0xec>)
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	68db      	ldr	r3, [r3, #12]
 801435c:	68fa      	ldr	r2, [r7, #12]
 801435e:	429a      	cmp	r2, r3
 8014360:	d916      	bls.n	8014390 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801436c:	b219      	sxth	r1, r3
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	689c      	ldr	r4, [r3, #8]
 8014372:	7dfa      	ldrb	r2, [r7, #23]
 8014374:	68fb      	ldr	r3, [r7, #12]
 8014376:	9301      	str	r3, [sp, #4]
 8014378:	2300      	movs	r3, #0
 801437a:	9300      	str	r3, [sp, #0]
 801437c:	4623      	mov	r3, r4
 801437e:	f7ff fa43 	bl	8013808 <PayloadEncrypt>
 8014382:	4603      	mov	r3, r0
 8014384:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014386:	7dbb      	ldrb	r3, [r7, #22]
 8014388:	2b00      	cmp	r3, #0
 801438a:	d001      	beq.n	8014390 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 801438c:	7dbb      	ldrb	r3, [r7, #22]
 801438e:	e032      	b.n	80143f6 <LoRaMacCryptoSecureMessage+0xe2>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014390:	6878      	ldr	r0, [r7, #4]
 8014392:	f000 fb49 	bl	8014a28 <LoRaMacSerializerData>
 8014396:	4603      	mov	r3, r0
 8014398:	2b00      	cmp	r3, #0
 801439a:	d001      	beq.n	80143a0 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801439c:	2311      	movs	r3, #17
 801439e:	e02a      	b.n	80143f6 <LoRaMacCryptoSecureMessage+0xe2>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 80143a0:	2308      	movs	r3, #8
 80143a2:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	6818      	ldr	r0, [r3, #0]
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	791b      	ldrb	r3, [r3, #4]
 80143ac:	3b04      	subs	r3, #4
 80143ae:	b299      	uxth	r1, r3
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	689b      	ldr	r3, [r3, #8]
 80143b4:	687a      	ldr	r2, [r7, #4]
 80143b6:	322c      	adds	r2, #44	@ 0x2c
 80143b8:	7dfc      	ldrb	r4, [r7, #23]
 80143ba:	9203      	str	r2, [sp, #12]
 80143bc:	68fa      	ldr	r2, [r7, #12]
 80143be:	9202      	str	r2, [sp, #8]
 80143c0:	9301      	str	r3, [sp, #4]
 80143c2:	2300      	movs	r3, #0
 80143c4:	9300      	str	r3, [sp, #0]
 80143c6:	2300      	movs	r3, #0
 80143c8:	4622      	mov	r2, r4
 80143ca:	f7ff fb1e 	bl	8013a0a <ComputeCmacB0>
 80143ce:	4603      	mov	r3, r0
 80143d0:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80143d2:	7dbb      	ldrb	r3, [r7, #22]
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d001      	beq.n	80143dc <LoRaMacCryptoSecureMessage+0xc8>
        {
            return retval;
 80143d8:	7dbb      	ldrb	r3, [r7, #22]
 80143da:	e00c      	b.n	80143f6 <LoRaMacCryptoSecureMessage+0xe2>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80143dc:	6878      	ldr	r0, [r7, #4]
 80143de:	f000 fb23 	bl	8014a28 <LoRaMacSerializerData>
 80143e2:	4603      	mov	r3, r0
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d001      	beq.n	80143ec <LoRaMacCryptoSecureMessage+0xd8>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80143e8:	2311      	movs	r3, #17
 80143ea:	e004      	b.n	80143f6 <LoRaMacCryptoSecureMessage+0xe2>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 80143ec:	4b04      	ldr	r3, [pc, #16]	@ (8014400 <LoRaMacCryptoSecureMessage+0xec>)
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	68fa      	ldr	r2, [r7, #12]
 80143f2:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 80143f4:	2300      	movs	r3, #0
}
 80143f6:	4618      	mov	r0, r3
 80143f8:	371c      	adds	r7, #28
 80143fa:	46bd      	mov	sp, r7
 80143fc:	bd90      	pop	{r4, r7, pc}
 80143fe:	bf00      	nop
 8014400:	20001c8c 	.word	0x20001c8c

08014404 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8014404:	b590      	push	{r4, r7, lr}
 8014406:	b08b      	sub	sp, #44	@ 0x2c
 8014408:	af04      	add	r7, sp, #16
 801440a:	60b9      	str	r1, [r7, #8]
 801440c:	607b      	str	r3, [r7, #4]
 801440e:	4603      	mov	r3, r0
 8014410:	73fb      	strb	r3, [r7, #15]
 8014412:	4613      	mov	r3, r2
 8014414:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8014416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014418:	2b00      	cmp	r3, #0
 801441a:	d101      	bne.n	8014420 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801441c:	230a      	movs	r3, #10
 801441e:	e083      	b.n	8014528 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8014420:	7bbb      	ldrb	r3, [r7, #14]
 8014422:	6879      	ldr	r1, [r7, #4]
 8014424:	4618      	mov	r0, r3
 8014426:	f7ff fc6f 	bl	8013d08 <CheckFCntDown>
 801442a:	4603      	mov	r3, r0
 801442c:	f083 0301 	eor.w	r3, r3, #1
 8014430:	b2db      	uxtb	r3, r3
 8014432:	2b00      	cmp	r3, #0
 8014434:	d001      	beq.n	801443a <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8014436:	2306      	movs	r3, #6
 8014438:	e076      	b.n	8014528 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801443a:	2313      	movs	r3, #19
 801443c:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801443e:	2309      	movs	r3, #9
 8014440:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8014442:	2308      	movs	r3, #8
 8014444:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8014446:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014448:	f000 f97a 	bl	8014740 <LoRaMacParserData>
 801444c:	4603      	mov	r3, r0
 801444e:	2b00      	cmp	r3, #0
 8014450:	d001      	beq.n	8014456 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8014452:	2310      	movs	r3, #16
 8014454:	e068      	b.n	8014528 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8014456:	f107 0210 	add.w	r2, r7, #16
 801445a:	7bfb      	ldrb	r3, [r7, #15]
 801445c:	4611      	mov	r1, r2
 801445e:	4618      	mov	r0, r3
 8014460:	f7ff fba0 	bl	8013ba4 <GetKeyAddrItem>
 8014464:	4603      	mov	r3, r0
 8014466:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014468:	7d7b      	ldrb	r3, [r7, #21]
 801446a:	2b00      	cmp	r3, #0
 801446c:	d001      	beq.n	8014472 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 801446e:	7d7b      	ldrb	r3, [r7, #21]
 8014470:	e05a      	b.n	8014528 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8014472:	693b      	ldr	r3, [r7, #16]
 8014474:	785b      	ldrb	r3, [r3, #1]
 8014476:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8014478:	693b      	ldr	r3, [r7, #16]
 801447a:	789b      	ldrb	r3, [r3, #2]
 801447c:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 801447e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014480:	689b      	ldr	r3, [r3, #8]
 8014482:	68ba      	ldr	r2, [r7, #8]
 8014484:	429a      	cmp	r2, r3
 8014486:	d001      	beq.n	801448c <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8014488:	2302      	movs	r3, #2
 801448a:	e04d      	b.n	8014528 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 801448c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801448e:	7b1b      	ldrb	r3, [r3, #12]
 8014490:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8014494:	b2db      	uxtb	r3, r3
 8014496:	2b00      	cmp	r3, #0
 8014498:	bf14      	ite	ne
 801449a:	2301      	movne	r3, #1
 801449c:	2300      	moveq	r3, #0
 801449e:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 80144a0:	4b23      	ldr	r3, [pc, #140]	@ (8014530 <LoRaMacCryptoUnsecureMessage+0x12c>)
 80144a2:	681b      	ldr	r3, [r3, #0]
 80144a4:	789b      	ldrb	r3, [r3, #2]
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d101      	bne.n	80144ae <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 80144aa:	2300      	movs	r3, #0
 80144ac:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 80144ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144b0:	6818      	ldr	r0, [r3, #0]
 80144b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144b4:	791b      	ldrb	r3, [r3, #4]
 80144b6:	3b04      	subs	r3, #4
 80144b8:	b299      	uxth	r1, r3
 80144ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144be:	7dbc      	ldrb	r4, [r7, #22]
 80144c0:	7d3a      	ldrb	r2, [r7, #20]
 80144c2:	9303      	str	r3, [sp, #12]
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	9302      	str	r3, [sp, #8]
 80144c8:	68bb      	ldr	r3, [r7, #8]
 80144ca:	9301      	str	r3, [sp, #4]
 80144cc:	2301      	movs	r3, #1
 80144ce:	9300      	str	r3, [sp, #0]
 80144d0:	4623      	mov	r3, r4
 80144d2:	f7ff fad8 	bl	8013a86 <VerifyCmacB0>
 80144d6:	4603      	mov	r3, r0
 80144d8:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80144da:	7d7b      	ldrb	r3, [r7, #21]
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d001      	beq.n	80144e4 <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        return retval;
 80144e0:	7d7b      	ldrb	r3, [r7, #21]
 80144e2:	e021      	b.n	8014528 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 80144e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d101      	bne.n	80144f2 <LoRaMacCryptoUnsecureMessage+0xee>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 80144ee:	2308      	movs	r3, #8
 80144f0:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 80144f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144f4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80144f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80144fc:	b219      	sxth	r1, r3
 80144fe:	7dfa      	ldrb	r2, [r7, #23]
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	9301      	str	r3, [sp, #4]
 8014504:	2301      	movs	r3, #1
 8014506:	9300      	str	r3, [sp, #0]
 8014508:	68bb      	ldr	r3, [r7, #8]
 801450a:	f7ff f97d 	bl	8013808 <PayloadEncrypt>
 801450e:	4603      	mov	r3, r0
 8014510:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014512:	7d7b      	ldrb	r3, [r7, #21]
 8014514:	2b00      	cmp	r3, #0
 8014516:	d001      	beq.n	801451c <LoRaMacCryptoUnsecureMessage+0x118>
    {
        return retval;
 8014518:	7d7b      	ldrb	r3, [r7, #21]
 801451a:	e005      	b.n	8014528 <LoRaMacCryptoUnsecureMessage+0x124>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 801451c:	7bbb      	ldrb	r3, [r7, #14]
 801451e:	6879      	ldr	r1, [r7, #4]
 8014520:	4618      	mov	r0, r3
 8014522:	f7ff fc15 	bl	8013d50 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8014526:	2300      	movs	r3, #0
}
 8014528:	4618      	mov	r0, r3
 801452a:	371c      	adds	r7, #28
 801452c:	46bd      	mov	sp, r7
 801452e:	bd90      	pop	{r4, r7, pc}
 8014530:	20001c8c 	.word	0x20001c8c

08014534 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8014534:	b580      	push	{r7, lr}
 8014536:	b088      	sub	sp, #32
 8014538:	af00      	add	r7, sp, #0
 801453a:	4603      	mov	r3, r0
 801453c:	460a      	mov	r2, r1
 801453e:	71fb      	strb	r3, [r7, #7]
 8014540:	4613      	mov	r3, r2
 8014542:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 8014544:	2300      	movs	r3, #0
 8014546:	60fb      	str	r3, [r7, #12]
 8014548:	f107 0310 	add.w	r3, r7, #16
 801454c:	2200      	movs	r2, #0
 801454e:	601a      	str	r2, [r3, #0]
 8014550:	605a      	str	r2, [r3, #4]
 8014552:	609a      	str	r2, [r3, #8]
    KeyIdentifier_t rootKeyId = APP_KEY;
 8014554:	2300      	movs	r3, #0
 8014556:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 8014558:	79bb      	ldrb	r3, [r7, #6]
 801455a:	2b0c      	cmp	r3, #12
 801455c:	d00b      	beq.n	8014576 <LoRaMacCryptoDeriveLifeTimeKey+0x42>
 801455e:	2b0c      	cmp	r3, #12
 8014560:	dc0f      	bgt.n	8014582 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
 8014562:	2b0a      	cmp	r3, #10
 8014564:	d00a      	beq.n	801457c <LoRaMacCryptoDeriveLifeTimeKey+0x48>
 8014566:	2b0b      	cmp	r3, #11
 8014568:	d10b      	bne.n	8014582 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 801456a:	79fb      	ldrb	r3, [r7, #7]
 801456c:	2b01      	cmp	r3, #1
 801456e:	d10a      	bne.n	8014586 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
            {
                compBase[0] = 0x20;
 8014570:	2320      	movs	r3, #32
 8014572:	733b      	strb	r3, [r7, #12]
            }
            break;
 8014574:	e007      	b.n	8014586 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 8014576:	230b      	movs	r3, #11
 8014578:	77fb      	strb	r3, [r7, #31]
            break;
 801457a:	e005      	b.n	8014588 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 801457c:	2330      	movs	r3, #48	@ 0x30
 801457e:	733b      	strb	r3, [r7, #12]
            break;
 8014580:	e002      	b.n	8014588 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8014582:	230b      	movs	r3, #11
 8014584:	e00d      	b.n	80145a2 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
            break;
 8014586:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 8014588:	79ba      	ldrb	r2, [r7, #6]
 801458a:	7ff9      	ldrb	r1, [r7, #31]
 801458c:	f107 030c 	add.w	r3, r7, #12
 8014590:	4618      	mov	r0, r3
 8014592:	f7f7 ffa5 	bl	800c4e0 <SecureElementDeriveAndStoreKey>
 8014596:	4603      	mov	r3, r0
 8014598:	2b00      	cmp	r3, #0
 801459a:	d001      	beq.n	80145a0 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801459c:	230f      	movs	r3, #15
 801459e:	e000      	b.n	80145a2 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80145a0:	2300      	movs	r3, #0
}
 80145a2:	4618      	mov	r0, r3
 80145a4:	3720      	adds	r7, #32
 80145a6:	46bd      	mov	sp, r7
 80145a8:	bd80      	pop	{r7, pc}

080145aa <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 80145aa:	b580      	push	{r7, lr}
 80145ac:	b084      	sub	sp, #16
 80145ae:	af00      	add	r7, sp, #0
 80145b0:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d003      	beq.n	80145c0 <LoRaMacParserJoinAccept+0x16>
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	681b      	ldr	r3, [r3, #0]
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d101      	bne.n	80145c4 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80145c0:	2302      	movs	r3, #2
 80145c2:	e0b9      	b.n	8014738 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 80145c4:	2300      	movs	r3, #0
 80145c6:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	681a      	ldr	r2, [r3, #0]
 80145cc:	89fb      	ldrh	r3, [r7, #14]
 80145ce:	1c59      	adds	r1, r3, #1
 80145d0:	81f9      	strh	r1, [r7, #14]
 80145d2:	4413      	add	r3, r2
 80145d4:	781a      	ldrb	r2, [r3, #0]
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	1d98      	adds	r0, r3, #6
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	681a      	ldr	r2, [r3, #0]
 80145e2:	89fb      	ldrh	r3, [r7, #14]
 80145e4:	4413      	add	r3, r2
 80145e6:	2203      	movs	r2, #3
 80145e8:	4619      	mov	r1, r3
 80145ea:	f004 f9fa 	bl	80189e2 <memcpy1>
    bufItr = bufItr + 3;
 80145ee:	89fb      	ldrh	r3, [r7, #14]
 80145f0:	3303      	adds	r3, #3
 80145f2:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	f103 0009 	add.w	r0, r3, #9
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	681a      	ldr	r2, [r3, #0]
 80145fe:	89fb      	ldrh	r3, [r7, #14]
 8014600:	4413      	add	r3, r2
 8014602:	2203      	movs	r2, #3
 8014604:	4619      	mov	r1, r3
 8014606:	f004 f9ec 	bl	80189e2 <memcpy1>
    bufItr = bufItr + 3;
 801460a:	89fb      	ldrh	r3, [r7, #14]
 801460c:	3303      	adds	r3, #3
 801460e:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	681a      	ldr	r2, [r3, #0]
 8014614:	89fb      	ldrh	r3, [r7, #14]
 8014616:	1c59      	adds	r1, r3, #1
 8014618:	81f9      	strh	r1, [r7, #14]
 801461a:	4413      	add	r3, r2
 801461c:	781b      	ldrb	r3, [r3, #0]
 801461e:	461a      	mov	r2, r3
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	681a      	ldr	r2, [r3, #0]
 8014628:	89fb      	ldrh	r3, [r7, #14]
 801462a:	1c59      	adds	r1, r3, #1
 801462c:	81f9      	strh	r1, [r7, #14]
 801462e:	4413      	add	r3, r2
 8014630:	781b      	ldrb	r3, [r3, #0]
 8014632:	021a      	lsls	r2, r3, #8
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	68db      	ldr	r3, [r3, #12]
 8014638:	431a      	orrs	r2, r3
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	681a      	ldr	r2, [r3, #0]
 8014642:	89fb      	ldrh	r3, [r7, #14]
 8014644:	1c59      	adds	r1, r3, #1
 8014646:	81f9      	strh	r1, [r7, #14]
 8014648:	4413      	add	r3, r2
 801464a:	781b      	ldrb	r3, [r3, #0]
 801464c:	041a      	lsls	r2, r3, #16
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	68db      	ldr	r3, [r3, #12]
 8014652:	431a      	orrs	r2, r3
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	681a      	ldr	r2, [r3, #0]
 801465c:	89fb      	ldrh	r3, [r7, #14]
 801465e:	1c59      	adds	r1, r3, #1
 8014660:	81f9      	strh	r1, [r7, #14]
 8014662:	4413      	add	r3, r2
 8014664:	781b      	ldrb	r3, [r3, #0]
 8014666:	061a      	lsls	r2, r3, #24
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	68db      	ldr	r3, [r3, #12]
 801466c:	431a      	orrs	r2, r3
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	681a      	ldr	r2, [r3, #0]
 8014676:	89fb      	ldrh	r3, [r7, #14]
 8014678:	1c59      	adds	r1, r3, #1
 801467a:	81f9      	strh	r1, [r7, #14]
 801467c:	4413      	add	r3, r2
 801467e:	781a      	ldrb	r2, [r3, #0]
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	681a      	ldr	r2, [r3, #0]
 8014688:	89fb      	ldrh	r3, [r7, #14]
 801468a:	1c59      	adds	r1, r3, #1
 801468c:	81f9      	strh	r1, [r7, #14]
 801468e:	4413      	add	r3, r2
 8014690:	781a      	ldrb	r2, [r3, #0]
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	791b      	ldrb	r3, [r3, #4]
 801469a:	1f1a      	subs	r2, r3, #4
 801469c:	89fb      	ldrh	r3, [r7, #14]
 801469e:	1ad3      	subs	r3, r2, r3
 80146a0:	2b10      	cmp	r3, #16
 80146a2:	d10e      	bne.n	80146c2 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	f103 0012 	add.w	r0, r3, #18
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	681a      	ldr	r2, [r3, #0]
 80146ae:	89fb      	ldrh	r3, [r7, #14]
 80146b0:	4413      	add	r3, r2
 80146b2:	2210      	movs	r2, #16
 80146b4:	4619      	mov	r1, r3
 80146b6:	f004 f994 	bl	80189e2 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 80146ba:	89fb      	ldrh	r3, [r7, #14]
 80146bc:	3310      	adds	r3, #16
 80146be:	81fb      	strh	r3, [r7, #14]
 80146c0:	e008      	b.n	80146d4 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	791b      	ldrb	r3, [r3, #4]
 80146c6:	1f1a      	subs	r2, r3, #4
 80146c8:	89fb      	ldrh	r3, [r7, #14]
 80146ca:	1ad3      	subs	r3, r2, r3
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	dd01      	ble.n	80146d4 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 80146d0:	2301      	movs	r3, #1
 80146d2:	e031      	b.n	8014738 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	681a      	ldr	r2, [r3, #0]
 80146d8:	89fb      	ldrh	r3, [r7, #14]
 80146da:	1c59      	adds	r1, r3, #1
 80146dc:	81f9      	strh	r1, [r7, #14]
 80146de:	4413      	add	r3, r2
 80146e0:	781b      	ldrb	r3, [r3, #0]
 80146e2:	461a      	mov	r2, r3
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	681a      	ldr	r2, [r3, #0]
 80146ec:	89fb      	ldrh	r3, [r7, #14]
 80146ee:	1c59      	adds	r1, r3, #1
 80146f0:	81f9      	strh	r1, [r7, #14]
 80146f2:	4413      	add	r3, r2
 80146f4:	781b      	ldrb	r3, [r3, #0]
 80146f6:	021a      	lsls	r2, r3, #8
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80146fc:	431a      	orrs	r2, r3
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	681a      	ldr	r2, [r3, #0]
 8014706:	89fb      	ldrh	r3, [r7, #14]
 8014708:	1c59      	adds	r1, r3, #1
 801470a:	81f9      	strh	r1, [r7, #14]
 801470c:	4413      	add	r3, r2
 801470e:	781b      	ldrb	r3, [r3, #0]
 8014710:	041a      	lsls	r2, r3, #16
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014716:	431a      	orrs	r2, r3
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	681a      	ldr	r2, [r3, #0]
 8014720:	89fb      	ldrh	r3, [r7, #14]
 8014722:	1c59      	adds	r1, r3, #1
 8014724:	81f9      	strh	r1, [r7, #14]
 8014726:	4413      	add	r3, r2
 8014728:	781b      	ldrb	r3, [r3, #0]
 801472a:	061a      	lsls	r2, r3, #24
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014730:	431a      	orrs	r2, r3
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	625a      	str	r2, [r3, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 8014736:	2300      	movs	r3, #0
}
 8014738:	4618      	mov	r0, r3
 801473a:	3710      	adds	r7, #16
 801473c:	46bd      	mov	sp, r7
 801473e:	bd80      	pop	{r7, pc}

08014740 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8014740:	b580      	push	{r7, lr}
 8014742:	b084      	sub	sp, #16
 8014744:	af00      	add	r7, sp, #0
 8014746:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d003      	beq.n	8014756 <LoRaMacParserData+0x16>
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	2b00      	cmp	r3, #0
 8014754:	d101      	bne.n	801475a <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8014756:	2302      	movs	r3, #2
 8014758:	e0e0      	b.n	801491c <LoRaMacParserData+0x1dc>
    }

    uint16_t bufItr = 0;
 801475a:	2300      	movs	r3, #0
 801475c:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	681a      	ldr	r2, [r3, #0]
 8014762:	89fb      	ldrh	r3, [r7, #14]
 8014764:	1c59      	adds	r1, r3, #1
 8014766:	81f9      	strh	r1, [r7, #14]
 8014768:	4413      	add	r3, r2
 801476a:	781a      	ldrb	r2, [r3, #0]
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	681a      	ldr	r2, [r3, #0]
 8014774:	89fb      	ldrh	r3, [r7, #14]
 8014776:	1c59      	adds	r1, r3, #1
 8014778:	81f9      	strh	r1, [r7, #14]
 801477a:	4413      	add	r3, r2
 801477c:	781b      	ldrb	r3, [r3, #0]
 801477e:	461a      	mov	r2, r3
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	681a      	ldr	r2, [r3, #0]
 8014788:	89fb      	ldrh	r3, [r7, #14]
 801478a:	1c59      	adds	r1, r3, #1
 801478c:	81f9      	strh	r1, [r7, #14]
 801478e:	4413      	add	r3, r2
 8014790:	781b      	ldrb	r3, [r3, #0]
 8014792:	021a      	lsls	r2, r3, #8
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	689b      	ldr	r3, [r3, #8]
 8014798:	431a      	orrs	r2, r3
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	681a      	ldr	r2, [r3, #0]
 80147a2:	89fb      	ldrh	r3, [r7, #14]
 80147a4:	1c59      	adds	r1, r3, #1
 80147a6:	81f9      	strh	r1, [r7, #14]
 80147a8:	4413      	add	r3, r2
 80147aa:	781b      	ldrb	r3, [r3, #0]
 80147ac:	041a      	lsls	r2, r3, #16
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	689b      	ldr	r3, [r3, #8]
 80147b2:	431a      	orrs	r2, r3
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	681a      	ldr	r2, [r3, #0]
 80147bc:	89fb      	ldrh	r3, [r7, #14]
 80147be:	1c59      	adds	r1, r3, #1
 80147c0:	81f9      	strh	r1, [r7, #14]
 80147c2:	4413      	add	r3, r2
 80147c4:	781b      	ldrb	r3, [r3, #0]
 80147c6:	061a      	lsls	r2, r3, #24
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	689b      	ldr	r3, [r3, #8]
 80147cc:	431a      	orrs	r2, r3
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	681a      	ldr	r2, [r3, #0]
 80147d6:	89fb      	ldrh	r3, [r7, #14]
 80147d8:	1c59      	adds	r1, r3, #1
 80147da:	81f9      	strh	r1, [r7, #14]
 80147dc:	4413      	add	r3, r2
 80147de:	781a      	ldrb	r2, [r3, #0]
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	681a      	ldr	r2, [r3, #0]
 80147e8:	89fb      	ldrh	r3, [r7, #14]
 80147ea:	1c59      	adds	r1, r3, #1
 80147ec:	81f9      	strh	r1, [r7, #14]
 80147ee:	4413      	add	r3, r2
 80147f0:	781b      	ldrb	r3, [r3, #0]
 80147f2:	461a      	mov	r2, r3
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	681a      	ldr	r2, [r3, #0]
 80147fc:	89fb      	ldrh	r3, [r7, #14]
 80147fe:	1c59      	adds	r1, r3, #1
 8014800:	81f9      	strh	r1, [r7, #14]
 8014802:	4413      	add	r3, r2
 8014804:	781b      	ldrb	r3, [r3, #0]
 8014806:	0219      	lsls	r1, r3, #8
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	89db      	ldrh	r3, [r3, #14]
 801480c:	b21a      	sxth	r2, r3
 801480e:	b20b      	sxth	r3, r1
 8014810:	4313      	orrs	r3, r2
 8014812:	b21b      	sxth	r3, r3
 8014814:	b29a      	uxth	r2, r3
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	f103 0010 	add.w	r0, r3, #16
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	681a      	ldr	r2, [r3, #0]
 8014824:	89fb      	ldrh	r3, [r7, #14]
 8014826:	18d1      	adds	r1, r2, r3
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	7b1b      	ldrb	r3, [r3, #12]
 801482c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014830:	b2db      	uxtb	r3, r3
 8014832:	461a      	mov	r2, r3
 8014834:	f004 f8d5 	bl	80189e2 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	7b1b      	ldrb	r3, [r3, #12]
 801483c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014840:	b2db      	uxtb	r3, r3
 8014842:	461a      	mov	r2, r3
 8014844:	89fb      	ldrh	r3, [r7, #14]
 8014846:	4413      	add	r3, r2
 8014848:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	2200      	movs	r2, #0
 801484e:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	2200      	movs	r2, #0
 8014856:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	791b      	ldrb	r3, [r3, #4]
 801485e:	461a      	mov	r2, r3
 8014860:	89fb      	ldrh	r3, [r7, #14]
 8014862:	1ad3      	subs	r3, r2, r3
 8014864:	2b04      	cmp	r3, #4
 8014866:	dd27      	ble.n	80148b8 <LoRaMacParserData+0x178>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	681a      	ldr	r2, [r3, #0]
 801486c:	89fb      	ldrh	r3, [r7, #14]
 801486e:	1c59      	adds	r1, r3, #1
 8014870:	81f9      	strh	r1, [r7, #14]
 8014872:	4413      	add	r3, r2
 8014874:	781a      	ldrb	r2, [r3, #0]
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	791a      	ldrb	r2, [r3, #4]
 8014880:	89fb      	ldrh	r3, [r7, #14]
 8014882:	b2db      	uxtb	r3, r3
 8014884:	1ad3      	subs	r3, r2, r3
 8014886:	b2db      	uxtb	r3, r3
 8014888:	3b04      	subs	r3, #4
 801488a:	b2da      	uxtb	r2, r3
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	681a      	ldr	r2, [r3, #0]
 801489a:	89fb      	ldrh	r3, [r7, #14]
 801489c:	18d1      	adds	r1, r2, r3
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80148a4:	461a      	mov	r2, r3
 80148a6:	f004 f89c 	bl	80189e2 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80148b0:	461a      	mov	r2, r3
 80148b2:	89fb      	ldrh	r3, [r7, #14]
 80148b4:	4413      	add	r3, r2
 80148b6:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	681a      	ldr	r2, [r3, #0]
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	791b      	ldrb	r3, [r3, #4]
 80148c0:	3b04      	subs	r3, #4
 80148c2:	4413      	add	r3, r2
 80148c4:	781b      	ldrb	r3, [r3, #0]
 80148c6:	461a      	mov	r2, r3
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	6819      	ldr	r1, [r3, #0]
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	791b      	ldrb	r3, [r3, #4]
 80148d8:	3b03      	subs	r3, #3
 80148da:	440b      	add	r3, r1
 80148dc:	781b      	ldrb	r3, [r3, #0]
 80148de:	021b      	lsls	r3, r3, #8
 80148e0:	431a      	orrs	r2, r3
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	6819      	ldr	r1, [r3, #0]
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	791b      	ldrb	r3, [r3, #4]
 80148f2:	3b02      	subs	r3, #2
 80148f4:	440b      	add	r3, r1
 80148f6:	781b      	ldrb	r3, [r3, #0]
 80148f8:	041b      	lsls	r3, r3, #16
 80148fa:	431a      	orrs	r2, r3
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	6819      	ldr	r1, [r3, #0]
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	791b      	ldrb	r3, [r3, #4]
 801490c:	3b01      	subs	r3, #1
 801490e:	440b      	add	r3, r1
 8014910:	781b      	ldrb	r3, [r3, #0]
 8014912:	061b      	lsls	r3, r3, #24
 8014914:	431a      	orrs	r2, r3
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	62da      	str	r2, [r3, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 801491a:	2300      	movs	r3, #0
}
 801491c:	4618      	mov	r0, r3
 801491e:	3710      	adds	r7, #16
 8014920:	46bd      	mov	sp, r7
 8014922:	bd80      	pop	{r7, pc}

08014924 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8014924:	b580      	push	{r7, lr}
 8014926:	b084      	sub	sp, #16
 8014928:	af00      	add	r7, sp, #0
 801492a:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	2b00      	cmp	r3, #0
 8014930:	d003      	beq.n	801493a <LoRaMacSerializerJoinRequest+0x16>
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	681b      	ldr	r3, [r3, #0]
 8014936:	2b00      	cmp	r3, #0
 8014938:	d101      	bne.n	801493e <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 801493a:	2301      	movs	r3, #1
 801493c:	e070      	b.n	8014a20 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 801493e:	2300      	movs	r3, #0
 8014940:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	791b      	ldrb	r3, [r3, #4]
 8014946:	2b16      	cmp	r3, #22
 8014948:	d801      	bhi.n	801494e <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 801494a:	2302      	movs	r3, #2
 801494c:	e068      	b.n	8014a20 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	681a      	ldr	r2, [r3, #0]
 8014952:	89fb      	ldrh	r3, [r7, #14]
 8014954:	1c59      	adds	r1, r3, #1
 8014956:	81f9      	strh	r1, [r7, #14]
 8014958:	4413      	add	r3, r2
 801495a:	687a      	ldr	r2, [r7, #4]
 801495c:	7952      	ldrb	r2, [r2, #5]
 801495e:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	681a      	ldr	r2, [r3, #0]
 8014964:	89fb      	ldrh	r3, [r7, #14]
 8014966:	18d0      	adds	r0, r2, r3
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	3306      	adds	r3, #6
 801496c:	2208      	movs	r2, #8
 801496e:	4619      	mov	r1, r3
 8014970:	f004 f852 	bl	8018a18 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8014974:	89fb      	ldrh	r3, [r7, #14]
 8014976:	3308      	adds	r3, #8
 8014978:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	681a      	ldr	r2, [r3, #0]
 801497e:	89fb      	ldrh	r3, [r7, #14]
 8014980:	18d0      	adds	r0, r2, r3
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	330e      	adds	r3, #14
 8014986:	2208      	movs	r2, #8
 8014988:	4619      	mov	r1, r3
 801498a:	f004 f845 	bl	8018a18 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 801498e:	89fb      	ldrh	r3, [r7, #14]
 8014990:	3308      	adds	r3, #8
 8014992:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	8ad9      	ldrh	r1, [r3, #22]
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	681a      	ldr	r2, [r3, #0]
 801499c:	89fb      	ldrh	r3, [r7, #14]
 801499e:	1c58      	adds	r0, r3, #1
 80149a0:	81f8      	strh	r0, [r7, #14]
 80149a2:	4413      	add	r3, r2
 80149a4:	b2ca      	uxtb	r2, r1
 80149a6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	8adb      	ldrh	r3, [r3, #22]
 80149ac:	0a1b      	lsrs	r3, r3, #8
 80149ae:	b299      	uxth	r1, r3
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	681a      	ldr	r2, [r3, #0]
 80149b4:	89fb      	ldrh	r3, [r7, #14]
 80149b6:	1c58      	adds	r0, r3, #1
 80149b8:	81f8      	strh	r0, [r7, #14]
 80149ba:	4413      	add	r3, r2
 80149bc:	b2ca      	uxtb	r2, r1
 80149be:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	6999      	ldr	r1, [r3, #24]
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	681a      	ldr	r2, [r3, #0]
 80149c8:	89fb      	ldrh	r3, [r7, #14]
 80149ca:	1c58      	adds	r0, r3, #1
 80149cc:	81f8      	strh	r0, [r7, #14]
 80149ce:	4413      	add	r3, r2
 80149d0:	b2ca      	uxtb	r2, r1
 80149d2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	699b      	ldr	r3, [r3, #24]
 80149d8:	0a19      	lsrs	r1, r3, #8
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	681a      	ldr	r2, [r3, #0]
 80149de:	89fb      	ldrh	r3, [r7, #14]
 80149e0:	1c58      	adds	r0, r3, #1
 80149e2:	81f8      	strh	r0, [r7, #14]
 80149e4:	4413      	add	r3, r2
 80149e6:	b2ca      	uxtb	r2, r1
 80149e8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	699b      	ldr	r3, [r3, #24]
 80149ee:	0c19      	lsrs	r1, r3, #16
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	681a      	ldr	r2, [r3, #0]
 80149f4:	89fb      	ldrh	r3, [r7, #14]
 80149f6:	1c58      	adds	r0, r3, #1
 80149f8:	81f8      	strh	r0, [r7, #14]
 80149fa:	4413      	add	r3, r2
 80149fc:	b2ca      	uxtb	r2, r1
 80149fe:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	699b      	ldr	r3, [r3, #24]
 8014a04:	0e19      	lsrs	r1, r3, #24
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	681a      	ldr	r2, [r3, #0]
 8014a0a:	89fb      	ldrh	r3, [r7, #14]
 8014a0c:	1c58      	adds	r0, r3, #1
 8014a0e:	81f8      	strh	r0, [r7, #14]
 8014a10:	4413      	add	r3, r2
 8014a12:	b2ca      	uxtb	r2, r1
 8014a14:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8014a16:	89fb      	ldrh	r3, [r7, #14]
 8014a18:	b2da      	uxtb	r2, r3
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8014a1e:	2300      	movs	r3, #0
}
 8014a20:	4618      	mov	r0, r3
 8014a22:	3710      	adds	r7, #16
 8014a24:	46bd      	mov	sp, r7
 8014a26:	bd80      	pop	{r7, pc}

08014a28 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8014a28:	b580      	push	{r7, lr}
 8014a2a:	b084      	sub	sp, #16
 8014a2c:	af00      	add	r7, sp, #0
 8014a2e:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d003      	beq.n	8014a3e <LoRaMacSerializerData+0x16>
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d101      	bne.n	8014a42 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8014a3e:	2301      	movs	r3, #1
 8014a40:	e0e3      	b.n	8014c0a <LoRaMacSerializerData+0x1e2>
    }

    uint16_t bufItr = 0;
 8014a42:	2300      	movs	r3, #0
 8014a44:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8014a46:	2308      	movs	r3, #8
 8014a48:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	7b1b      	ldrb	r3, [r3, #12]
 8014a4e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014a52:	b2db      	uxtb	r3, r3
 8014a54:	461a      	mov	r2, r3
 8014a56:	89bb      	ldrh	r3, [r7, #12]
 8014a58:	4413      	add	r3, r2
 8014a5a:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d002      	beq.n	8014a6c <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8014a66:	89bb      	ldrh	r3, [r7, #12]
 8014a68:	3301      	adds	r3, #1
 8014a6a:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014a72:	461a      	mov	r2, r3
 8014a74:	89bb      	ldrh	r3, [r7, #12]
 8014a76:	4413      	add	r3, r2
 8014a78:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8014a7a:	89bb      	ldrh	r3, [r7, #12]
 8014a7c:	3304      	adds	r3, #4
 8014a7e:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	791b      	ldrb	r3, [r3, #4]
 8014a84:	461a      	mov	r2, r3
 8014a86:	89bb      	ldrh	r3, [r7, #12]
 8014a88:	4293      	cmp	r3, r2
 8014a8a:	d901      	bls.n	8014a90 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8014a8c:	2302      	movs	r3, #2
 8014a8e:	e0bc      	b.n	8014c0a <LoRaMacSerializerData+0x1e2>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	681a      	ldr	r2, [r3, #0]
 8014a94:	89fb      	ldrh	r3, [r7, #14]
 8014a96:	1c59      	adds	r1, r3, #1
 8014a98:	81f9      	strh	r1, [r7, #14]
 8014a9a:	4413      	add	r3, r2
 8014a9c:	687a      	ldr	r2, [r7, #4]
 8014a9e:	7952      	ldrb	r2, [r2, #5]
 8014aa0:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	6899      	ldr	r1, [r3, #8]
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	681a      	ldr	r2, [r3, #0]
 8014aaa:	89fb      	ldrh	r3, [r7, #14]
 8014aac:	1c58      	adds	r0, r3, #1
 8014aae:	81f8      	strh	r0, [r7, #14]
 8014ab0:	4413      	add	r3, r2
 8014ab2:	b2ca      	uxtb	r2, r1
 8014ab4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	689b      	ldr	r3, [r3, #8]
 8014aba:	0a19      	lsrs	r1, r3, #8
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	681a      	ldr	r2, [r3, #0]
 8014ac0:	89fb      	ldrh	r3, [r7, #14]
 8014ac2:	1c58      	adds	r0, r3, #1
 8014ac4:	81f8      	strh	r0, [r7, #14]
 8014ac6:	4413      	add	r3, r2
 8014ac8:	b2ca      	uxtb	r2, r1
 8014aca:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	689b      	ldr	r3, [r3, #8]
 8014ad0:	0c19      	lsrs	r1, r3, #16
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	681a      	ldr	r2, [r3, #0]
 8014ad6:	89fb      	ldrh	r3, [r7, #14]
 8014ad8:	1c58      	adds	r0, r3, #1
 8014ada:	81f8      	strh	r0, [r7, #14]
 8014adc:	4413      	add	r3, r2
 8014ade:	b2ca      	uxtb	r2, r1
 8014ae0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	689b      	ldr	r3, [r3, #8]
 8014ae6:	0e19      	lsrs	r1, r3, #24
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	681a      	ldr	r2, [r3, #0]
 8014aec:	89fb      	ldrh	r3, [r7, #14]
 8014aee:	1c58      	adds	r0, r3, #1
 8014af0:	81f8      	strh	r0, [r7, #14]
 8014af2:	4413      	add	r3, r2
 8014af4:	b2ca      	uxtb	r2, r1
 8014af6:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	681a      	ldr	r2, [r3, #0]
 8014afc:	89fb      	ldrh	r3, [r7, #14]
 8014afe:	1c59      	adds	r1, r3, #1
 8014b00:	81f9      	strh	r1, [r7, #14]
 8014b02:	4413      	add	r3, r2
 8014b04:	687a      	ldr	r2, [r7, #4]
 8014b06:	7b12      	ldrb	r2, [r2, #12]
 8014b08:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	89d9      	ldrh	r1, [r3, #14]
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	681a      	ldr	r2, [r3, #0]
 8014b12:	89fb      	ldrh	r3, [r7, #14]
 8014b14:	1c58      	adds	r0, r3, #1
 8014b16:	81f8      	strh	r0, [r7, #14]
 8014b18:	4413      	add	r3, r2
 8014b1a:	b2ca      	uxtb	r2, r1
 8014b1c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	89db      	ldrh	r3, [r3, #14]
 8014b22:	0a1b      	lsrs	r3, r3, #8
 8014b24:	b299      	uxth	r1, r3
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	681a      	ldr	r2, [r3, #0]
 8014b2a:	89fb      	ldrh	r3, [r7, #14]
 8014b2c:	1c58      	adds	r0, r3, #1
 8014b2e:	81f8      	strh	r0, [r7, #14]
 8014b30:	4413      	add	r3, r2
 8014b32:	b2ca      	uxtb	r2, r1
 8014b34:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	681a      	ldr	r2, [r3, #0]
 8014b3a:	89fb      	ldrh	r3, [r7, #14]
 8014b3c:	18d0      	adds	r0, r2, r3
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	f103 0110 	add.w	r1, r3, #16
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	7b1b      	ldrb	r3, [r3, #12]
 8014b48:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014b4c:	b2db      	uxtb	r3, r3
 8014b4e:	461a      	mov	r2, r3
 8014b50:	f003 ff47 	bl	80189e2 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	7b1b      	ldrb	r3, [r3, #12]
 8014b58:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014b5c:	b2db      	uxtb	r3, r3
 8014b5e:	461a      	mov	r2, r3
 8014b60:	89fb      	ldrh	r3, [r7, #14]
 8014b62:	4413      	add	r3, r2
 8014b64:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d009      	beq.n	8014b84 <LoRaMacSerializerData+0x15c>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	681a      	ldr	r2, [r3, #0]
 8014b74:	89fb      	ldrh	r3, [r7, #14]
 8014b76:	1c59      	adds	r1, r3, #1
 8014b78:	81f9      	strh	r1, [r7, #14]
 8014b7a:	4413      	add	r3, r2
 8014b7c:	687a      	ldr	r2, [r7, #4]
 8014b7e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8014b82:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	681a      	ldr	r2, [r3, #0]
 8014b88:	89fb      	ldrh	r3, [r7, #14]
 8014b8a:	18d0      	adds	r0, r2, r3
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014b96:	461a      	mov	r2, r3
 8014b98:	f003 ff23 	bl	80189e2 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014ba2:	461a      	mov	r2, r3
 8014ba4:	89fb      	ldrh	r3, [r7, #14]
 8014ba6:	4413      	add	r3, r2
 8014ba8:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	681a      	ldr	r2, [r3, #0]
 8014bb2:	89fb      	ldrh	r3, [r7, #14]
 8014bb4:	1c58      	adds	r0, r3, #1
 8014bb6:	81f8      	strh	r0, [r7, #14]
 8014bb8:	4413      	add	r3, r2
 8014bba:	b2ca      	uxtb	r2, r1
 8014bbc:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014bc2:	0a19      	lsrs	r1, r3, #8
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	681a      	ldr	r2, [r3, #0]
 8014bc8:	89fb      	ldrh	r3, [r7, #14]
 8014bca:	1c58      	adds	r0, r3, #1
 8014bcc:	81f8      	strh	r0, [r7, #14]
 8014bce:	4413      	add	r3, r2
 8014bd0:	b2ca      	uxtb	r2, r1
 8014bd2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014bd8:	0c19      	lsrs	r1, r3, #16
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	681a      	ldr	r2, [r3, #0]
 8014bde:	89fb      	ldrh	r3, [r7, #14]
 8014be0:	1c58      	adds	r0, r3, #1
 8014be2:	81f8      	strh	r0, [r7, #14]
 8014be4:	4413      	add	r3, r2
 8014be6:	b2ca      	uxtb	r2, r1
 8014be8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014bee:	0e19      	lsrs	r1, r3, #24
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	681a      	ldr	r2, [r3, #0]
 8014bf4:	89fb      	ldrh	r3, [r7, #14]
 8014bf6:	1c58      	adds	r0, r3, #1
 8014bf8:	81f8      	strh	r0, [r7, #14]
 8014bfa:	4413      	add	r3, r2
 8014bfc:	b2ca      	uxtb	r2, r1
 8014bfe:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8014c00:	89fb      	ldrh	r3, [r7, #14]
 8014c02:	b2da      	uxtb	r2, r3
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8014c08:	2300      	movs	r3, #0
}
 8014c0a:	4618      	mov	r0, r3
 8014c0c:	3710      	adds	r7, #16
 8014c0e:	46bd      	mov	sp, r7
 8014c10:	bd80      	pop	{r7, pc}

08014c12 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8014c12:	b480      	push	{r7}
 8014c14:	b083      	sub	sp, #12
 8014c16:	af00      	add	r7, sp, #0
 8014c18:	4603      	mov	r3, r0
 8014c1a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014c1c:	79fb      	ldrb	r3, [r7, #7]
 8014c1e:	2b05      	cmp	r3, #5
 8014c20:	d002      	beq.n	8014c28 <RegionIsActive+0x16>
 8014c22:	2b08      	cmp	r3, #8
 8014c24:	d002      	beq.n	8014c2c <RegionIsActive+0x1a>
 8014c26:	e003      	b.n	8014c30 <RegionIsActive+0x1e>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8014c28:	2301      	movs	r3, #1
 8014c2a:	e002      	b.n	8014c32 <RegionIsActive+0x20>
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
 8014c2c:	2301      	movs	r3, #1
 8014c2e:	e000      	b.n	8014c32 <RegionIsActive+0x20>
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8014c30:	2300      	movs	r3, #0
        }
    }
}
 8014c32:	4618      	mov	r0, r3
 8014c34:	370c      	adds	r7, #12
 8014c36:	46bd      	mov	sp, r7
 8014c38:	bc80      	pop	{r7}
 8014c3a:	4770      	bx	lr

08014c3c <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8014c3c:	b580      	push	{r7, lr}
 8014c3e:	b084      	sub	sp, #16
 8014c40:	af00      	add	r7, sp, #0
 8014c42:	4603      	mov	r3, r0
 8014c44:	6039      	str	r1, [r7, #0]
 8014c46:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8014c48:	2300      	movs	r3, #0
 8014c4a:	60bb      	str	r3, [r7, #8]
    switch( region )
 8014c4c:	79fb      	ldrb	r3, [r7, #7]
 8014c4e:	2b05      	cmp	r3, #5
 8014c50:	d002      	beq.n	8014c58 <RegionGetPhyParam+0x1c>
 8014c52:	2b08      	cmp	r3, #8
 8014c54:	d006      	beq.n	8014c64 <RegionGetPhyParam+0x28>
 8014c56:	e00b      	b.n	8014c70 <RegionGetPhyParam+0x34>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8014c58:	6838      	ldr	r0, [r7, #0]
 8014c5a:	f001 fae7 	bl	801622c <RegionEU868GetPhyParam>
 8014c5e:	4603      	mov	r3, r0
 8014c60:	60fb      	str	r3, [r7, #12]
 8014c62:	e007      	b.n	8014c74 <RegionGetPhyParam+0x38>
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
 8014c64:	6838      	ldr	r0, [r7, #0]
 8014c66:	f002 fcbb 	bl	80175e0 <RegionUS915GetPhyParam>
 8014c6a:	4603      	mov	r3, r0
 8014c6c:	60fb      	str	r3, [r7, #12]
 8014c6e:	e001      	b.n	8014c74 <RegionGetPhyParam+0x38>
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8014c70:	68bb      	ldr	r3, [r7, #8]
 8014c72:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	4618      	mov	r0, r3
 8014c78:	3710      	adds	r7, #16
 8014c7a:	46bd      	mov	sp, r7
 8014c7c:	bd80      	pop	{r7, pc}

08014c7e <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8014c7e:	b580      	push	{r7, lr}
 8014c80:	b082      	sub	sp, #8
 8014c82:	af00      	add	r7, sp, #0
 8014c84:	4603      	mov	r3, r0
 8014c86:	6039      	str	r1, [r7, #0]
 8014c88:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014c8a:	79fb      	ldrb	r3, [r7, #7]
 8014c8c:	2b05      	cmp	r3, #5
 8014c8e:	d002      	beq.n	8014c96 <RegionSetBandTxDone+0x18>
 8014c90:	2b08      	cmp	r3, #8
 8014c92:	d004      	beq.n	8014c9e <RegionSetBandTxDone+0x20>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8014c94:	e006      	b.n	8014ca4 <RegionSetBandTxDone+0x26>
        EU868_SET_BAND_TX_DONE( );
 8014c96:	6838      	ldr	r0, [r7, #0]
 8014c98:	f001 fc14 	bl	80164c4 <RegionEU868SetBandTxDone>
 8014c9c:	e002      	b.n	8014ca4 <RegionSetBandTxDone+0x26>
        US915_SET_BAND_TX_DONE( );
 8014c9e:	6838      	ldr	r0, [r7, #0]
 8014ca0:	f002 fe00 	bl	80178a4 <RegionUS915SetBandTxDone>
        }
    }
}
 8014ca4:	3708      	adds	r7, #8
 8014ca6:	46bd      	mov	sp, r7
 8014ca8:	bd80      	pop	{r7, pc}

08014caa <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8014caa:	b580      	push	{r7, lr}
 8014cac:	b082      	sub	sp, #8
 8014cae:	af00      	add	r7, sp, #0
 8014cb0:	4603      	mov	r3, r0
 8014cb2:	6039      	str	r1, [r7, #0]
 8014cb4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014cb6:	79fb      	ldrb	r3, [r7, #7]
 8014cb8:	2b05      	cmp	r3, #5
 8014cba:	d002      	beq.n	8014cc2 <RegionInitDefaults+0x18>
 8014cbc:	2b08      	cmp	r3, #8
 8014cbe:	d004      	beq.n	8014cca <RegionInitDefaults+0x20>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8014cc0:	e006      	b.n	8014cd0 <RegionInitDefaults+0x26>
        EU868_INIT_DEFAULTS( );
 8014cc2:	6838      	ldr	r0, [r7, #0]
 8014cc4:	f001 fc2a 	bl	801651c <RegionEU868InitDefaults>
 8014cc8:	e002      	b.n	8014cd0 <RegionInitDefaults+0x26>
        US915_INIT_DEFAULTS( );
 8014cca:	6838      	ldr	r0, [r7, #0]
 8014ccc:	f002 fe16 	bl	80178fc <RegionUS915InitDefaults>
        }
    }
}
 8014cd0:	bf00      	nop
 8014cd2:	3708      	adds	r7, #8
 8014cd4:	46bd      	mov	sp, r7
 8014cd6:	bd80      	pop	{r7, pc}

08014cd8 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8014cd8:	b580      	push	{r7, lr}
 8014cda:	b082      	sub	sp, #8
 8014cdc:	af00      	add	r7, sp, #0
 8014cde:	4603      	mov	r3, r0
 8014ce0:	6039      	str	r1, [r7, #0]
 8014ce2:	71fb      	strb	r3, [r7, #7]
 8014ce4:	4613      	mov	r3, r2
 8014ce6:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8014ce8:	79fb      	ldrb	r3, [r7, #7]
 8014cea:	2b05      	cmp	r3, #5
 8014cec:	d002      	beq.n	8014cf4 <RegionVerify+0x1c>
 8014cee:	2b08      	cmp	r3, #8
 8014cf0:	d007      	beq.n	8014d02 <RegionVerify+0x2a>
 8014cf2:	e00d      	b.n	8014d10 <RegionVerify+0x38>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8014cf4:	79bb      	ldrb	r3, [r7, #6]
 8014cf6:	4619      	mov	r1, r3
 8014cf8:	6838      	ldr	r0, [r7, #0]
 8014cfa:	f001 fcad 	bl	8016658 <RegionEU868Verify>
 8014cfe:	4603      	mov	r3, r0
 8014d00:	e007      	b.n	8014d12 <RegionVerify+0x3a>
        KR920_VERIFY( );
        IN865_VERIFY( );
        US915_VERIFY( );
 8014d02:	79bb      	ldrb	r3, [r7, #6]
 8014d04:	4619      	mov	r1, r3
 8014d06:	6838      	ldr	r0, [r7, #0]
 8014d08:	f002 ff2a 	bl	8017b60 <RegionUS915Verify>
 8014d0c:	4603      	mov	r3, r0
 8014d0e:	e000      	b.n	8014d12 <RegionVerify+0x3a>
        RU864_VERIFY( );
        default:
        {
            return false;
 8014d10:	2300      	movs	r3, #0
        }
    }
}
 8014d12:	4618      	mov	r0, r3
 8014d14:	3708      	adds	r7, #8
 8014d16:	46bd      	mov	sp, r7
 8014d18:	bd80      	pop	{r7, pc}

08014d1a <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8014d1a:	b580      	push	{r7, lr}
 8014d1c:	b082      	sub	sp, #8
 8014d1e:	af00      	add	r7, sp, #0
 8014d20:	4603      	mov	r3, r0
 8014d22:	6039      	str	r1, [r7, #0]
 8014d24:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014d26:	79fb      	ldrb	r3, [r7, #7]
 8014d28:	2b05      	cmp	r3, #5
 8014d2a:	d002      	beq.n	8014d32 <RegionApplyCFList+0x18>
 8014d2c:	2b08      	cmp	r3, #8
 8014d2e:	d004      	beq.n	8014d3a <RegionApplyCFList+0x20>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8014d30:	e006      	b.n	8014d40 <RegionApplyCFList+0x26>
        EU868_APPLY_CF_LIST( );
 8014d32:	6838      	ldr	r0, [r7, #0]
 8014d34:	f001 fd0c 	bl	8016750 <RegionEU868ApplyCFList>
 8014d38:	e002      	b.n	8014d40 <RegionApplyCFList+0x26>
        US915_APPLY_CF_LIST( );
 8014d3a:	6838      	ldr	r0, [r7, #0]
 8014d3c:	f002 ff78 	bl	8017c30 <RegionUS915ApplyCFList>
        }
    }
}
 8014d40:	bf00      	nop
 8014d42:	3708      	adds	r7, #8
 8014d44:	46bd      	mov	sp, r7
 8014d46:	bd80      	pop	{r7, pc}

08014d48 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8014d48:	b580      	push	{r7, lr}
 8014d4a:	b082      	sub	sp, #8
 8014d4c:	af00      	add	r7, sp, #0
 8014d4e:	4603      	mov	r3, r0
 8014d50:	6039      	str	r1, [r7, #0]
 8014d52:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014d54:	79fb      	ldrb	r3, [r7, #7]
 8014d56:	2b05      	cmp	r3, #5
 8014d58:	d002      	beq.n	8014d60 <RegionChanMaskSet+0x18>
 8014d5a:	2b08      	cmp	r3, #8
 8014d5c:	d005      	beq.n	8014d6a <RegionChanMaskSet+0x22>
 8014d5e:	e009      	b.n	8014d74 <RegionChanMaskSet+0x2c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8014d60:	6838      	ldr	r0, [r7, #0]
 8014d62:	f001 fd69 	bl	8016838 <RegionEU868ChanMaskSet>
 8014d66:	4603      	mov	r3, r0
 8014d68:	e005      	b.n	8014d76 <RegionChanMaskSet+0x2e>
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
 8014d6a:	6838      	ldr	r0, [r7, #0]
 8014d6c:	f002 ffd4 	bl	8017d18 <RegionUS915ChanMaskSet>
 8014d70:	4603      	mov	r3, r0
 8014d72:	e000      	b.n	8014d76 <RegionChanMaskSet+0x2e>
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8014d74:	2300      	movs	r3, #0
        }
    }
}
 8014d76:	4618      	mov	r0, r3
 8014d78:	3708      	adds	r7, #8
 8014d7a:	46bd      	mov	sp, r7
 8014d7c:	bd80      	pop	{r7, pc}

08014d7e <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8014d7e:	b580      	push	{r7, lr}
 8014d80:	b082      	sub	sp, #8
 8014d82:	af00      	add	r7, sp, #0
 8014d84:	603b      	str	r3, [r7, #0]
 8014d86:	4603      	mov	r3, r0
 8014d88:	71fb      	strb	r3, [r7, #7]
 8014d8a:	460b      	mov	r3, r1
 8014d8c:	71bb      	strb	r3, [r7, #6]
 8014d8e:	4613      	mov	r3, r2
 8014d90:	717b      	strb	r3, [r7, #5]
    switch( region )
 8014d92:	79fb      	ldrb	r3, [r7, #7]
 8014d94:	2b05      	cmp	r3, #5
 8014d96:	d002      	beq.n	8014d9e <RegionComputeRxWindowParameters+0x20>
 8014d98:	2b08      	cmp	r3, #8
 8014d9a:	d008      	beq.n	8014dae <RegionComputeRxWindowParameters+0x30>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8014d9c:	e00e      	b.n	8014dbc <RegionComputeRxWindowParameters+0x3e>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8014d9e:	7979      	ldrb	r1, [r7, #5]
 8014da0:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8014da4:	693b      	ldr	r3, [r7, #16]
 8014da6:	683a      	ldr	r2, [r7, #0]
 8014da8:	f001 fd70 	bl	801688c <RegionEU868ComputeRxWindowParameters>
 8014dac:	e006      	b.n	8014dbc <RegionComputeRxWindowParameters+0x3e>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 8014dae:	7979      	ldrb	r1, [r7, #5]
 8014db0:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8014db4:	693b      	ldr	r3, [r7, #16]
 8014db6:	683a      	ldr	r2, [r7, #0]
 8014db8:	f003 f818 	bl	8017dec <RegionUS915ComputeRxWindowParameters>
        }
    }
}
 8014dbc:	bf00      	nop
 8014dbe:	3708      	adds	r7, #8
 8014dc0:	46bd      	mov	sp, r7
 8014dc2:	bd80      	pop	{r7, pc}

08014dc4 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8014dc4:	b580      	push	{r7, lr}
 8014dc6:	b084      	sub	sp, #16
 8014dc8:	af00      	add	r7, sp, #0
 8014dca:	4603      	mov	r3, r0
 8014dcc:	60b9      	str	r1, [r7, #8]
 8014dce:	607a      	str	r2, [r7, #4]
 8014dd0:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014dd2:	7bfb      	ldrb	r3, [r7, #15]
 8014dd4:	2b05      	cmp	r3, #5
 8014dd6:	d002      	beq.n	8014dde <RegionRxConfig+0x1a>
 8014dd8:	2b08      	cmp	r3, #8
 8014dda:	d006      	beq.n	8014dea <RegionRxConfig+0x26>
 8014ddc:	e00b      	b.n	8014df6 <RegionRxConfig+0x32>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8014dde:	6879      	ldr	r1, [r7, #4]
 8014de0:	68b8      	ldr	r0, [r7, #8]
 8014de2:	f001 fdad 	bl	8016940 <RegionEU868RxConfig>
 8014de6:	4603      	mov	r3, r0
 8014de8:	e006      	b.n	8014df8 <RegionRxConfig+0x34>
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
 8014dea:	6879      	ldr	r1, [r7, #4]
 8014dec:	68b8      	ldr	r0, [r7, #8]
 8014dee:	f003 f847 	bl	8017e80 <RegionUS915RxConfig>
 8014df2:	4603      	mov	r3, r0
 8014df4:	e000      	b.n	8014df8 <RegionRxConfig+0x34>
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8014df6:	2300      	movs	r3, #0
        }
    }
}
 8014df8:	4618      	mov	r0, r3
 8014dfa:	3710      	adds	r7, #16
 8014dfc:	46bd      	mov	sp, r7
 8014dfe:	bd80      	pop	{r7, pc}

08014e00 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8014e00:	b580      	push	{r7, lr}
 8014e02:	b084      	sub	sp, #16
 8014e04:	af00      	add	r7, sp, #0
 8014e06:	60b9      	str	r1, [r7, #8]
 8014e08:	607a      	str	r2, [r7, #4]
 8014e0a:	603b      	str	r3, [r7, #0]
 8014e0c:	4603      	mov	r3, r0
 8014e0e:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014e10:	7bfb      	ldrb	r3, [r7, #15]
 8014e12:	2b05      	cmp	r3, #5
 8014e14:	d002      	beq.n	8014e1c <RegionTxConfig+0x1c>
 8014e16:	2b08      	cmp	r3, #8
 8014e18:	d007      	beq.n	8014e2a <RegionTxConfig+0x2a>
 8014e1a:	e00d      	b.n	8014e38 <RegionTxConfig+0x38>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8014e1c:	683a      	ldr	r2, [r7, #0]
 8014e1e:	6879      	ldr	r1, [r7, #4]
 8014e20:	68b8      	ldr	r0, [r7, #8]
 8014e22:	f001 fe5d 	bl	8016ae0 <RegionEU868TxConfig>
 8014e26:	4603      	mov	r3, r0
 8014e28:	e007      	b.n	8014e3a <RegionTxConfig+0x3a>
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
 8014e2a:	683a      	ldr	r2, [r7, #0]
 8014e2c:	6879      	ldr	r1, [r7, #4]
 8014e2e:	68b8      	ldr	r0, [r7, #8]
 8014e30:	f003 f8aa 	bl	8017f88 <RegionUS915TxConfig>
 8014e34:	4603      	mov	r3, r0
 8014e36:	e000      	b.n	8014e3a <RegionTxConfig+0x3a>
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8014e38:	2300      	movs	r3, #0
        }
    }
}
 8014e3a:	4618      	mov	r0, r3
 8014e3c:	3710      	adds	r7, #16
 8014e3e:	46bd      	mov	sp, r7
 8014e40:	bd80      	pop	{r7, pc}

08014e42 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8014e42:	b580      	push	{r7, lr}
 8014e44:	b086      	sub	sp, #24
 8014e46:	af02      	add	r7, sp, #8
 8014e48:	60b9      	str	r1, [r7, #8]
 8014e4a:	607a      	str	r2, [r7, #4]
 8014e4c:	603b      	str	r3, [r7, #0]
 8014e4e:	4603      	mov	r3, r0
 8014e50:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014e52:	7bfb      	ldrb	r3, [r7, #15]
 8014e54:	2b05      	cmp	r3, #5
 8014e56:	d002      	beq.n	8014e5e <RegionLinkAdrReq+0x1c>
 8014e58:	2b08      	cmp	r3, #8
 8014e5a:	d00a      	beq.n	8014e72 <RegionLinkAdrReq+0x30>
 8014e5c:	e013      	b.n	8014e86 <RegionLinkAdrReq+0x44>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8014e5e:	69fb      	ldr	r3, [r7, #28]
 8014e60:	9300      	str	r3, [sp, #0]
 8014e62:	69bb      	ldr	r3, [r7, #24]
 8014e64:	683a      	ldr	r2, [r7, #0]
 8014e66:	6879      	ldr	r1, [r7, #4]
 8014e68:	68b8      	ldr	r0, [r7, #8]
 8014e6a:	f001 ff09 	bl	8016c80 <RegionEU868LinkAdrReq>
 8014e6e:	4603      	mov	r3, r0
 8014e70:	e00a      	b.n	8014e88 <RegionLinkAdrReq+0x46>
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
 8014e72:	69fb      	ldr	r3, [r7, #28]
 8014e74:	9300      	str	r3, [sp, #0]
 8014e76:	69bb      	ldr	r3, [r7, #24]
 8014e78:	683a      	ldr	r2, [r7, #0]
 8014e7a:	6879      	ldr	r1, [r7, #4]
 8014e7c:	68b8      	ldr	r0, [r7, #8]
 8014e7e:	f003 f92f 	bl	80180e0 <RegionUS915LinkAdrReq>
 8014e82:	4603      	mov	r3, r0
 8014e84:	e000      	b.n	8014e88 <RegionLinkAdrReq+0x46>
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8014e86:	2300      	movs	r3, #0
        }
    }
}
 8014e88:	4618      	mov	r0, r3
 8014e8a:	3710      	adds	r7, #16
 8014e8c:	46bd      	mov	sp, r7
 8014e8e:	bd80      	pop	{r7, pc}

08014e90 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8014e90:	b580      	push	{r7, lr}
 8014e92:	b082      	sub	sp, #8
 8014e94:	af00      	add	r7, sp, #0
 8014e96:	4603      	mov	r3, r0
 8014e98:	6039      	str	r1, [r7, #0]
 8014e9a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014e9c:	79fb      	ldrb	r3, [r7, #7]
 8014e9e:	2b05      	cmp	r3, #5
 8014ea0:	d002      	beq.n	8014ea8 <RegionRxParamSetupReq+0x18>
 8014ea2:	2b08      	cmp	r3, #8
 8014ea4:	d005      	beq.n	8014eb2 <RegionRxParamSetupReq+0x22>
 8014ea6:	e009      	b.n	8014ebc <RegionRxParamSetupReq+0x2c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8014ea8:	6838      	ldr	r0, [r7, #0]
 8014eaa:	f002 f80b 	bl	8016ec4 <RegionEU868RxParamSetupReq>
 8014eae:	4603      	mov	r3, r0
 8014eb0:	e005      	b.n	8014ebe <RegionRxParamSetupReq+0x2e>
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
 8014eb2:	6838      	ldr	r0, [r7, #0]
 8014eb4:	f003 fb38 	bl	8018528 <RegionUS915RxParamSetupReq>
 8014eb8:	4603      	mov	r3, r0
 8014eba:	e000      	b.n	8014ebe <RegionRxParamSetupReq+0x2e>
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8014ebc:	2300      	movs	r3, #0
        }
    }
}
 8014ebe:	4618      	mov	r0, r3
 8014ec0:	3708      	adds	r7, #8
 8014ec2:	46bd      	mov	sp, r7
 8014ec4:	bd80      	pop	{r7, pc}

08014ec6 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8014ec6:	b580      	push	{r7, lr}
 8014ec8:	b082      	sub	sp, #8
 8014eca:	af00      	add	r7, sp, #0
 8014ecc:	4603      	mov	r3, r0
 8014ece:	6039      	str	r1, [r7, #0]
 8014ed0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014ed2:	79fb      	ldrb	r3, [r7, #7]
 8014ed4:	2b05      	cmp	r3, #5
 8014ed6:	d002      	beq.n	8014ede <RegionNewChannelReq+0x18>
 8014ed8:	2b08      	cmp	r3, #8
 8014eda:	d005      	beq.n	8014ee8 <RegionNewChannelReq+0x22>
 8014edc:	e009      	b.n	8014ef2 <RegionNewChannelReq+0x2c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8014ede:	6838      	ldr	r0, [r7, #0]
 8014ee0:	f002 f82e 	bl	8016f40 <RegionEU868NewChannelReq>
 8014ee4:	4603      	mov	r3, r0
 8014ee6:	e005      	b.n	8014ef4 <RegionNewChannelReq+0x2e>
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
 8014ee8:	6838      	ldr	r0, [r7, #0]
 8014eea:	f003 fb69 	bl	80185c0 <RegionUS915NewChannelReq>
 8014eee:	4603      	mov	r3, r0
 8014ef0:	e000      	b.n	8014ef4 <RegionNewChannelReq+0x2e>
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8014ef2:	2300      	movs	r3, #0
        }
    }
}
 8014ef4:	4618      	mov	r0, r3
 8014ef6:	3708      	adds	r7, #8
 8014ef8:	46bd      	mov	sp, r7
 8014efa:	bd80      	pop	{r7, pc}

08014efc <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8014efc:	b580      	push	{r7, lr}
 8014efe:	b082      	sub	sp, #8
 8014f00:	af00      	add	r7, sp, #0
 8014f02:	4603      	mov	r3, r0
 8014f04:	6039      	str	r1, [r7, #0]
 8014f06:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014f08:	79fb      	ldrb	r3, [r7, #7]
 8014f0a:	2b05      	cmp	r3, #5
 8014f0c:	d002      	beq.n	8014f14 <RegionTxParamSetupReq+0x18>
 8014f0e:	2b08      	cmp	r3, #8
 8014f10:	d005      	beq.n	8014f1e <RegionTxParamSetupReq+0x22>
 8014f12:	e009      	b.n	8014f28 <RegionTxParamSetupReq+0x2c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8014f14:	6838      	ldr	r0, [r7, #0]
 8014f16:	f002 f871 	bl	8016ffc <RegionEU868TxParamSetupReq>
 8014f1a:	4603      	mov	r3, r0
 8014f1c:	e005      	b.n	8014f2a <RegionTxParamSetupReq+0x2e>
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
 8014f1e:	6838      	ldr	r0, [r7, #0]
 8014f20:	f003 fb59 	bl	80185d6 <RegionUS915TxParamSetupReq>
 8014f24:	4603      	mov	r3, r0
 8014f26:	e000      	b.n	8014f2a <RegionTxParamSetupReq+0x2e>
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8014f28:	2300      	movs	r3, #0
        }
    }
}
 8014f2a:	4618      	mov	r0, r3
 8014f2c:	3708      	adds	r7, #8
 8014f2e:	46bd      	mov	sp, r7
 8014f30:	bd80      	pop	{r7, pc}

08014f32 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8014f32:	b580      	push	{r7, lr}
 8014f34:	b082      	sub	sp, #8
 8014f36:	af00      	add	r7, sp, #0
 8014f38:	4603      	mov	r3, r0
 8014f3a:	6039      	str	r1, [r7, #0]
 8014f3c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014f3e:	79fb      	ldrb	r3, [r7, #7]
 8014f40:	2b05      	cmp	r3, #5
 8014f42:	d002      	beq.n	8014f4a <RegionDlChannelReq+0x18>
 8014f44:	2b08      	cmp	r3, #8
 8014f46:	d005      	beq.n	8014f54 <RegionDlChannelReq+0x22>
 8014f48:	e009      	b.n	8014f5e <RegionDlChannelReq+0x2c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8014f4a:	6838      	ldr	r0, [r7, #0]
 8014f4c:	f002 f862 	bl	8017014 <RegionEU868DlChannelReq>
 8014f50:	4603      	mov	r3, r0
 8014f52:	e005      	b.n	8014f60 <RegionDlChannelReq+0x2e>
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
 8014f54:	6838      	ldr	r0, [r7, #0]
 8014f56:	f003 fb49 	bl	80185ec <RegionUS915DlChannelReq>
 8014f5a:	4603      	mov	r3, r0
 8014f5c:	e000      	b.n	8014f60 <RegionDlChannelReq+0x2e>
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8014f5e:	2300      	movs	r3, #0
        }
    }
}
 8014f60:	4618      	mov	r0, r3
 8014f62:	3708      	adds	r7, #8
 8014f64:	46bd      	mov	sp, r7
 8014f66:	bd80      	pop	{r7, pc}

08014f68 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8014f68:	b580      	push	{r7, lr}
 8014f6a:	b082      	sub	sp, #8
 8014f6c:	af00      	add	r7, sp, #0
 8014f6e:	4603      	mov	r3, r0
 8014f70:	71fb      	strb	r3, [r7, #7]
 8014f72:	460b      	mov	r3, r1
 8014f74:	71bb      	strb	r3, [r7, #6]
 8014f76:	4613      	mov	r3, r2
 8014f78:	717b      	strb	r3, [r7, #5]
    switch( region )
 8014f7a:	79fb      	ldrb	r3, [r7, #7]
 8014f7c:	2b05      	cmp	r3, #5
 8014f7e:	d002      	beq.n	8014f86 <RegionAlternateDr+0x1e>
 8014f80:	2b08      	cmp	r3, #8
 8014f82:	d009      	beq.n	8014f98 <RegionAlternateDr+0x30>
 8014f84:	e011      	b.n	8014faa <RegionAlternateDr+0x42>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8014f86:	797a      	ldrb	r2, [r7, #5]
 8014f88:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014f8c:	4611      	mov	r1, r2
 8014f8e:	4618      	mov	r0, r3
 8014f90:	f002 f88a 	bl	80170a8 <RegionEU868AlternateDr>
 8014f94:	4603      	mov	r3, r0
 8014f96:	e009      	b.n	8014fac <RegionAlternateDr+0x44>
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
 8014f98:	797a      	ldrb	r2, [r7, #5]
 8014f9a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014f9e:	4611      	mov	r1, r2
 8014fa0:	4618      	mov	r0, r3
 8014fa2:	f003 fb2f 	bl	8018604 <RegionUS915AlternateDr>
 8014fa6:	4603      	mov	r3, r0
 8014fa8:	e000      	b.n	8014fac <RegionAlternateDr+0x44>
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8014faa:	2300      	movs	r3, #0
        }
    }
}
 8014fac:	4618      	mov	r0, r3
 8014fae:	3708      	adds	r7, #8
 8014fb0:	46bd      	mov	sp, r7
 8014fb2:	bd80      	pop	{r7, pc}

08014fb4 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8014fb4:	b580      	push	{r7, lr}
 8014fb6:	b084      	sub	sp, #16
 8014fb8:	af00      	add	r7, sp, #0
 8014fba:	60b9      	str	r1, [r7, #8]
 8014fbc:	607a      	str	r2, [r7, #4]
 8014fbe:	603b      	str	r3, [r7, #0]
 8014fc0:	4603      	mov	r3, r0
 8014fc2:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014fc4:	7bfb      	ldrb	r3, [r7, #15]
 8014fc6:	2b05      	cmp	r3, #5
 8014fc8:	d002      	beq.n	8014fd0 <RegionNextChannel+0x1c>
 8014fca:	2b08      	cmp	r3, #8
 8014fcc:	d008      	beq.n	8014fe0 <RegionNextChannel+0x2c>
 8014fce:	e00f      	b.n	8014ff0 <RegionNextChannel+0x3c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8014fd0:	69bb      	ldr	r3, [r7, #24]
 8014fd2:	683a      	ldr	r2, [r7, #0]
 8014fd4:	6879      	ldr	r1, [r7, #4]
 8014fd6:	68b8      	ldr	r0, [r7, #8]
 8014fd8:	f002 f876 	bl	80170c8 <RegionEU868NextChannel>
 8014fdc:	4603      	mov	r3, r0
 8014fde:	e008      	b.n	8014ff2 <RegionNextChannel+0x3e>
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
 8014fe0:	69bb      	ldr	r3, [r7, #24]
 8014fe2:	683a      	ldr	r2, [r7, #0]
 8014fe4:	6879      	ldr	r1, [r7, #4]
 8014fe6:	68b8      	ldr	r0, [r7, #8]
 8014fe8:	f003 fb48 	bl	801867c <RegionUS915NextChannel>
 8014fec:	4603      	mov	r3, r0
 8014fee:	e000      	b.n	8014ff2 <RegionNextChannel+0x3e>
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8014ff0:	2309      	movs	r3, #9
        }
    }
}
 8014ff2:	4618      	mov	r0, r3
 8014ff4:	3710      	adds	r7, #16
 8014ff6:	46bd      	mov	sp, r7
 8014ff8:	bd80      	pop	{r7, pc}

08014ffa <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8014ffa:	b580      	push	{r7, lr}
 8014ffc:	b082      	sub	sp, #8
 8014ffe:	af00      	add	r7, sp, #0
 8015000:	4603      	mov	r3, r0
 8015002:	6039      	str	r1, [r7, #0]
 8015004:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015006:	79fb      	ldrb	r3, [r7, #7]
 8015008:	2b05      	cmp	r3, #5
 801500a:	d002      	beq.n	8015012 <RegionSetContinuousWave+0x18>
 801500c:	2b08      	cmp	r3, #8
 801500e:	d004      	beq.n	801501a <RegionSetContinuousWave+0x20>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8015010:	e006      	b.n	8015020 <RegionSetContinuousWave+0x26>
        EU868_SET_CONTINUOUS_WAVE( );
 8015012:	6838      	ldr	r0, [r7, #0]
 8015014:	f002 f9d2 	bl	80173bc <RegionEU868SetContinuousWave>
 8015018:	e002      	b.n	8015020 <RegionSetContinuousWave+0x26>
        US915_SET_CONTINUOUS_WAVE( );
 801501a:	6838      	ldr	r0, [r7, #0]
 801501c:	f003 fc22 	bl	8018864 <RegionUS915SetContinuousWave>
        }
    }
}
 8015020:	bf00      	nop
 8015022:	3708      	adds	r7, #8
 8015024:	46bd      	mov	sp, r7
 8015026:	bd80      	pop	{r7, pc}

08015028 <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8015028:	b590      	push	{r4, r7, lr}
 801502a:	b083      	sub	sp, #12
 801502c:	af00      	add	r7, sp, #0
 801502e:	4604      	mov	r4, r0
 8015030:	4608      	mov	r0, r1
 8015032:	4611      	mov	r1, r2
 8015034:	461a      	mov	r2, r3
 8015036:	4623      	mov	r3, r4
 8015038:	71fb      	strb	r3, [r7, #7]
 801503a:	4603      	mov	r3, r0
 801503c:	71bb      	strb	r3, [r7, #6]
 801503e:	460b      	mov	r3, r1
 8015040:	717b      	strb	r3, [r7, #5]
 8015042:	4613      	mov	r3, r2
 8015044:	713b      	strb	r3, [r7, #4]
    switch( region )
 8015046:	79fb      	ldrb	r3, [r7, #7]
 8015048:	2b05      	cmp	r3, #5
 801504a:	d002      	beq.n	8015052 <RegionApplyDrOffset+0x2a>
 801504c:	2b08      	cmp	r3, #8
 801504e:	d00a      	beq.n	8015066 <RegionApplyDrOffset+0x3e>
 8015050:	e013      	b.n	801507a <RegionApplyDrOffset+0x52>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8015052:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8015056:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801505a:	79bb      	ldrb	r3, [r7, #6]
 801505c:	4618      	mov	r0, r3
 801505e:	f002 f9fb 	bl	8017458 <RegionEU868ApplyDrOffset>
 8015062:	4603      	mov	r3, r0
 8015064:	e00a      	b.n	801507c <RegionApplyDrOffset+0x54>
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
 8015066:	f997 2004 	ldrsb.w	r2, [r7, #4]
 801506a:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801506e:	79bb      	ldrb	r3, [r7, #6]
 8015070:	4618      	mov	r0, r3
 8015072:	f003 fc4d 	bl	8018910 <RegionUS915ApplyDrOffset>
 8015076:	4603      	mov	r3, r0
 8015078:	e000      	b.n	801507c <RegionApplyDrOffset+0x54>
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 801507a:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 801507c:	4618      	mov	r0, r3
 801507e:	370c      	adds	r7, #12
 8015080:	46bd      	mov	sp, r7
 8015082:	bd90      	pop	{r4, r7, pc}

08015084 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8015084:	b480      	push	{r7}
 8015086:	b083      	sub	sp, #12
 8015088:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 801508a:	4b04      	ldr	r3, [pc, #16]	@ (801509c <RegionGetVersion+0x18>)
 801508c:	607b      	str	r3, [r7, #4]

    return version;
 801508e:	687b      	ldr	r3, [r7, #4]
}
 8015090:	4618      	mov	r0, r3
 8015092:	370c      	adds	r7, #12
 8015094:	46bd      	mov	sp, r7
 8015096:	bc80      	pop	{r7}
 8015098:	4770      	bx	lr
 801509a:	bf00      	nop
 801509c:	01010003 	.word	0x01010003

080150a0 <FindAvailable125kHzChannels>:
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
 80150a0:	b480      	push	{r7}
 80150a2:	b087      	sub	sp, #28
 80150a4:	af00      	add	r7, sp, #0
 80150a6:	4603      	mov	r3, r0
 80150a8:	60b9      	str	r1, [r7, #8]
 80150aa:	607a      	str	r2, [r7, #4]
 80150ac:	81fb      	strh	r3, [r7, #14]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 80150ae:	68bb      	ldr	r3, [r7, #8]
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d002      	beq.n	80150ba <FindAvailable125kHzChannels+0x1a>
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d101      	bne.n	80150be <FindAvailable125kHzChannels+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80150ba:	2303      	movs	r3, #3
 80150bc:	e021      	b.n	8015102 <FindAvailable125kHzChannels+0x62>
    }

    // Initialize counter
    *availableChannels = 0;
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	2200      	movs	r2, #0
 80150c2:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 80150c4:	2300      	movs	r3, #0
 80150c6:	75fb      	strb	r3, [r7, #23]
 80150c8:	e017      	b.n	80150fa <FindAvailable125kHzChannels+0x5a>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 80150ca:	89fa      	ldrh	r2, [r7, #14]
 80150cc:	7dfb      	ldrb	r3, [r7, #23]
 80150ce:	fa42 f303 	asr.w	r3, r2, r3
 80150d2:	f003 0301 	and.w	r3, r3, #1
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d00c      	beq.n	80150f4 <FindAvailable125kHzChannels+0x54>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	781b      	ldrb	r3, [r3, #0]
 80150de:	461a      	mov	r2, r3
 80150e0:	68bb      	ldr	r3, [r7, #8]
 80150e2:	4413      	add	r3, r2
 80150e4:	7dfa      	ldrb	r2, [r7, #23]
 80150e6:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	781b      	ldrb	r3, [r3, #0]
 80150ec:	3301      	adds	r3, #1
 80150ee:	b2da      	uxtb	r2, r3
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 80150f4:	7dfb      	ldrb	r3, [r7, #23]
 80150f6:	3301      	adds	r3, #1
 80150f8:	75fb      	strb	r3, [r7, #23]
 80150fa:	7dfb      	ldrb	r3, [r7, #23]
 80150fc:	2b07      	cmp	r3, #7
 80150fe:	d9e4      	bls.n	80150ca <FindAvailable125kHzChannels+0x2a>
        }
    }

    return LORAMAC_STATUS_OK;
 8015100:	2300      	movs	r3, #0
}
 8015102:	4618      	mov	r0, r3
 8015104:	371c      	adds	r7, #28
 8015106:	46bd      	mov	sp, r7
 8015108:	bc80      	pop	{r7}
 801510a:	4770      	bx	lr

0801510c <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 801510c:	b590      	push	{r4, r7, lr}
 801510e:	b089      	sub	sp, #36	@ 0x24
 8015110:	af00      	add	r7, sp, #0
 8015112:	60f8      	str	r0, [r7, #12]
 8015114:	60b9      	str	r1, [r7, #8]
 8015116:	607a      	str	r2, [r7, #4]
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 8015118:	2300      	movs	r3, #0
 801511a:	617b      	str	r3, [r7, #20]
 801511c:	2300      	movs	r3, #0
 801511e:	61bb      	str	r3, [r7, #24]
    uint8_t availableChannels = 0;
 8015120:	2300      	movs	r3, #0
 8015122:	74fb      	strb	r3, [r7, #19]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 8015124:	68fb      	ldr	r3, [r7, #12]
 8015126:	2b00      	cmp	r3, #0
 8015128:	d005      	beq.n	8015136 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 801512a:	68bb      	ldr	r3, [r7, #8]
 801512c:	2b00      	cmp	r3, #0
 801512e:	d002      	beq.n	8015136 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	2b00      	cmp	r3, #0
 8015134:	d101      	bne.n	801513a <RegionBaseUSComputeNext125kHzJoinChannel+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015136:	2303      	movs	r3, #3
 8015138:	e055      	b.n	80151e6 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 801513a:	68bb      	ldr	r3, [r7, #8]
 801513c:	781b      	ldrb	r3, [r3, #0]
 801513e:	777b      	strb	r3, [r7, #29]

    do
    {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 8015140:	7f7b      	ldrb	r3, [r7, #29]
 8015142:	085b      	lsrs	r3, r3, #1
 8015144:	773b      	strb	r3, [r7, #28]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 8015146:	7f7b      	ldrb	r3, [r7, #29]
 8015148:	f003 0301 	and.w	r3, r3, #1
 801514c:	b2db      	uxtb	r3, r3
 801514e:	2b00      	cmp	r3, #0
 8015150:	d107      	bne.n	8015162 <RegionBaseUSComputeNext125kHzJoinChannel+0x56>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 8015152:	7f3b      	ldrb	r3, [r7, #28]
 8015154:	005b      	lsls	r3, r3, #1
 8015156:	68fa      	ldr	r2, [r7, #12]
 8015158:	4413      	add	r3, r2
 801515a:	881b      	ldrh	r3, [r3, #0]
 801515c:	b2db      	uxtb	r3, r3
 801515e:	83fb      	strh	r3, [r7, #30]
 8015160:	e006      	b.n	8015170 <RegionBaseUSComputeNext125kHzJoinChannel+0x64>
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 8015162:	7f3b      	ldrb	r3, [r7, #28]
 8015164:	005b      	lsls	r3, r3, #1
 8015166:	68fa      	ldr	r2, [r7, #12]
 8015168:	4413      	add	r3, r2
 801516a:	881b      	ldrh	r3, [r3, #0]
 801516c:	0a1b      	lsrs	r3, r3, #8
 801516e:	83fb      	strh	r3, [r7, #30]
        }

        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8015170:	f107 0213 	add.w	r2, r7, #19
 8015174:	f107 0114 	add.w	r1, r7, #20
 8015178:	8bfb      	ldrh	r3, [r7, #30]
 801517a:	4618      	mov	r0, r3
 801517c:	f7ff ff90 	bl	80150a0 <FindAvailable125kHzChannels>
 8015180:	4603      	mov	r3, r0
 8015182:	2b03      	cmp	r3, #3
 8015184:	d101      	bne.n	801518a <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8015186:	2303      	movs	r3, #3
 8015188:	e02d      	b.n	80151e6 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
        }

        if ( availableChannels > 0 )
 801518a:	7cfb      	ldrb	r3, [r7, #19]
 801518c:	2b00      	cmp	r3, #0
 801518e:	d011      	beq.n	80151b4 <RegionBaseUSComputeNext125kHzJoinChannel+0xa8>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 8015190:	7f7b      	ldrb	r3, [r7, #29]
 8015192:	00db      	lsls	r3, r3, #3
 8015194:	b2dc      	uxtb	r4, r3
 8015196:	7cfb      	ldrb	r3, [r7, #19]
 8015198:	3b01      	subs	r3, #1
 801519a:	4619      	mov	r1, r3
 801519c:	2000      	movs	r0, #0
 801519e:	f003 fc09 	bl	80189b4 <randr>
 80151a2:	4603      	mov	r3, r0
 80151a4:	3320      	adds	r3, #32
 80151a6:	443b      	add	r3, r7
 80151a8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80151ac:	4423      	add	r3, r4
 80151ae:	b2da      	uxtb	r2, r3
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 80151b4:	7f7b      	ldrb	r3, [r7, #29]
 80151b6:	3301      	adds	r3, #1
 80151b8:	777b      	strb	r3, [r7, #29]
        if ( startIndex > 7 )
 80151ba:	7f7b      	ldrb	r3, [r7, #29]
 80151bc:	2b07      	cmp	r3, #7
 80151be:	d901      	bls.n	80151c4 <RegionBaseUSComputeNext125kHzJoinChannel+0xb8>
        {
            startIndex = 0;
 80151c0:	2300      	movs	r3, #0
 80151c2:	777b      	strb	r3, [r7, #29]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 80151c4:	7cfb      	ldrb	r3, [r7, #19]
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d104      	bne.n	80151d4 <RegionBaseUSComputeNext125kHzJoinChannel+0xc8>
 80151ca:	68bb      	ldr	r3, [r7, #8]
 80151cc:	781b      	ldrb	r3, [r3, #0]
 80151ce:	7f7a      	ldrb	r2, [r7, #29]
 80151d0:	429a      	cmp	r2, r3
 80151d2:	d1b5      	bne.n	8015140 <RegionBaseUSComputeNext125kHzJoinChannel+0x34>

    if ( availableChannels > 0 )
 80151d4:	7cfb      	ldrb	r3, [r7, #19]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d004      	beq.n	80151e4 <RegionBaseUSComputeNext125kHzJoinChannel+0xd8>
    {
        *groupsCurrentIndex = startIndex;
 80151da:	68bb      	ldr	r3, [r7, #8]
 80151dc:	7f7a      	ldrb	r2, [r7, #29]
 80151de:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 80151e0:	2300      	movs	r3, #0
 80151e2:	e000      	b.n	80151e6 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 80151e4:	2303      	movs	r3, #3
}
 80151e6:	4618      	mov	r0, r3
 80151e8:	3724      	adds	r7, #36	@ 0x24
 80151ea:	46bd      	mov	sp, r7
 80151ec:	bd90      	pop	{r4, r7, pc}

080151ee <RegionBaseUSCalcDownlinkFrequency>:
    return true;
}

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
 80151ee:	b480      	push	{r7}
 80151f0:	b085      	sub	sp, #20
 80151f2:	af00      	add	r7, sp, #0
 80151f4:	4603      	mov	r3, r0
 80151f6:	60b9      	str	r1, [r7, #8]
 80151f8:	607a      	str	r2, [r7, #4]
 80151fa:	73fb      	strb	r3, [r7, #15]
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 80151fc:	7bfb      	ldrb	r3, [r7, #15]
 80151fe:	687a      	ldr	r2, [r7, #4]
 8015200:	fb03 f202 	mul.w	r2, r3, r2
 8015204:	68bb      	ldr	r3, [r7, #8]
 8015206:	4413      	add	r3, r2
}
 8015208:	4618      	mov	r0, r3
 801520a:	3714      	adds	r7, #20
 801520c:	46bd      	mov	sp, r7
 801520e:	bc80      	pop	{r7}
 8015210:	4770      	bx	lr

08015212 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8015212:	b480      	push	{r7}
 8015214:	b087      	sub	sp, #28
 8015216:	af00      	add	r7, sp, #0
 8015218:	60f8      	str	r0, [r7, #12]
 801521a:	4608      	mov	r0, r1
 801521c:	4639      	mov	r1, r7
 801521e:	e881 000c 	stmia.w	r1, {r2, r3}
 8015222:	4603      	mov	r3, r0
 8015224:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8015226:	68fb      	ldr	r3, [r7, #12]
 8015228:	881b      	ldrh	r3, [r3, #0]
 801522a:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 801522c:	7afb      	ldrb	r3, [r7, #11]
 801522e:	f083 0301 	eor.w	r3, r3, #1
 8015232:	b2db      	uxtb	r3, r3
 8015234:	2b00      	cmp	r3, #0
 8015236:	d01b      	beq.n	8015270 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8015238:	f242 7310 	movw	r3, #10000	@ 0x2710
 801523c:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 801523e:	683b      	ldr	r3, [r7, #0]
 8015240:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8015244:	d202      	bcs.n	801524c <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8015246:	2364      	movs	r3, #100	@ 0x64
 8015248:	82bb      	strh	r3, [r7, #20]
 801524a:	e00b      	b.n	8015264 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 801524c:	683b      	ldr	r3, [r7, #0]
 801524e:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 8015252:	4293      	cmp	r3, r2
 8015254:	d803      	bhi.n	801525e <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8015256:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801525a:	82bb      	strh	r3, [r7, #20]
 801525c:	e002      	b.n	8015264 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 801525e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8015262:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8015264:	8aba      	ldrh	r2, [r7, #20]
 8015266:	8afb      	ldrh	r3, [r7, #22]
 8015268:	4293      	cmp	r3, r2
 801526a:	bf38      	it	cc
 801526c:	4613      	movcc	r3, r2
 801526e:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8015270:	8afb      	ldrh	r3, [r7, #22]
 8015272:	2b00      	cmp	r3, #0
 8015274:	d101      	bne.n	801527a <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8015276:	2301      	movs	r3, #1
 8015278:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 801527a:	8afb      	ldrh	r3, [r7, #22]
}
 801527c:	4618      	mov	r0, r3
 801527e:	371c      	adds	r7, #28
 8015280:	46bd      	mov	sp, r7
 8015282:	bc80      	pop	{r7}
 8015284:	4770      	bx	lr
	...

08015288 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8015288:	b580      	push	{r7, lr}
 801528a:	b08e      	sub	sp, #56	@ 0x38
 801528c:	af02      	add	r7, sp, #8
 801528e:	60f8      	str	r0, [r7, #12]
 8015290:	4608      	mov	r0, r1
 8015292:	4639      	mov	r1, r7
 8015294:	e881 000c 	stmia.w	r1, {r2, r3}
 8015298:	4603      	mov	r3, r0
 801529a:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	881b      	ldrh	r3, [r3, #0]
 80152a0:	857b      	strh	r3, [r7, #42]	@ 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80152a2:	4b4b      	ldr	r3, [pc, #300]	@ (80153d0 <SetMaxTimeCredits+0x148>)
 80152a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 80152a6:	463b      	mov	r3, r7
 80152a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80152ac:	f006 faa2 	bl	801b7f4 <SysTimeToMs>
 80152b0:	6278      	str	r0, [r7, #36]	@ 0x24
    SysTime_t timeDiff = { 0 };
 80152b2:	f107 0314 	add.w	r3, r7, #20
 80152b6:	2200      	movs	r2, #0
 80152b8:	601a      	str	r2, [r3, #0]
 80152ba:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80152bc:	7af9      	ldrb	r1, [r7, #11]
 80152be:	463b      	mov	r3, r7
 80152c0:	cb0c      	ldmia	r3, {r2, r3}
 80152c2:	68f8      	ldr	r0, [r7, #12]
 80152c4:	f7ff ffa5 	bl	8015212 <GetDutyCycle>
 80152c8:	4603      	mov	r3, r0
 80152ca:	857b      	strh	r3, [r7, #42]	@ 0x2a

    if( joined == false )
 80152cc:	7afb      	ldrb	r3, [r7, #11]
 80152ce:	f083 0301 	eor.w	r3, r3, #1
 80152d2:	b2db      	uxtb	r3, r3
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d062      	beq.n	801539e <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 80152d8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80152da:	2b64      	cmp	r3, #100	@ 0x64
 80152dc:	d105      	bne.n	80152ea <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80152de:	4b3c      	ldr	r3, [pc, #240]	@ (80153d0 <SetMaxTimeCredits+0x148>)
 80152e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80152e2:	68fb      	ldr	r3, [r7, #12]
 80152e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80152e6:	609a      	str	r2, [r3, #8]
 80152e8:	e00b      	b.n	8015302 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80152ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80152ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80152f0:	d105      	bne.n	80152fe <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 80152f2:	4b38      	ldr	r3, [pc, #224]	@ (80153d4 <SetMaxTimeCredits+0x14c>)
 80152f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80152f6:	68fb      	ldr	r3, [r7, #12]
 80152f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80152fa:	609a      	str	r2, [r3, #8]
 80152fc:	e001      	b.n	8015302 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 80152fe:	4b36      	ldr	r3, [pc, #216]	@ (80153d8 <SetMaxTimeCredits+0x150>)
 8015300:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8015302:	68fb      	ldr	r3, [r7, #12]
 8015304:	689a      	ldr	r2, [r3, #8]
 8015306:	f107 031c 	add.w	r3, r7, #28
 801530a:	4611      	mov	r1, r2
 801530c:	4618      	mov	r0, r3
 801530e:	f006 fa99 	bl	801b844 <SysTimeFromMs>
 8015312:	f107 0014 	add.w	r0, r7, #20
 8015316:	6a3b      	ldr	r3, [r7, #32]
 8015318:	9300      	str	r3, [sp, #0]
 801531a:	69fb      	ldr	r3, [r7, #28]
 801531c:	463a      	mov	r2, r7
 801531e:	ca06      	ldmia	r2, {r1, r2}
 8015320:	f006 f9a9 	bl	801b676 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8015324:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8015328:	f083 0301 	eor.w	r3, r3, #1
 801532c:	b2db      	uxtb	r3, r3
 801532e:	2b00      	cmp	r3, #0
 8015330:	d006      	beq.n	8015340 <SetMaxTimeCredits+0xb8>
 8015332:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8015336:	f083 0301 	eor.w	r3, r3, #1
 801533a:	b2db      	uxtb	r3, r3
 801533c:	2b00      	cmp	r3, #0
 801533e:	d108      	bne.n	8015352 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8015344:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015346:	429a      	cmp	r2, r3
 8015348:	d103      	bne.n	8015352 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 801534a:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 801534c:	4a23      	ldr	r2, [pc, #140]	@ (80153dc <SetMaxTimeCredits+0x154>)
 801534e:	4293      	cmp	r3, r2
 8015350:	d92f      	bls.n	80153b2 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015356:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8015358:	683b      	ldr	r3, [r7, #0]
 801535a:	4a21      	ldr	r2, [pc, #132]	@ (80153e0 <SetMaxTimeCredits+0x158>)
 801535c:	4293      	cmp	r3, r2
 801535e:	d928      	bls.n	80153b2 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8015360:	683b      	ldr	r3, [r7, #0]
 8015362:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 8015366:	3b30      	subs	r3, #48	@ 0x30
 8015368:	4a1e      	ldr	r2, [pc, #120]	@ (80153e4 <SetMaxTimeCredits+0x15c>)
 801536a:	fba2 2303 	umull	r2, r3, r2, r3
 801536e:	0c1b      	lsrs	r3, r3, #16
 8015370:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8015372:	697b      	ldr	r3, [r7, #20]
 8015374:	4a1c      	ldr	r2, [pc, #112]	@ (80153e8 <SetMaxTimeCredits+0x160>)
 8015376:	fb02 f303 	mul.w	r3, r2, r3
 801537a:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 801537c:	697b      	ldr	r3, [r7, #20]
 801537e:	f503 33f6 	add.w	r3, r3, #125952	@ 0x1ec00
 8015382:	3330      	adds	r3, #48	@ 0x30
 8015384:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8015386:	2300      	movs	r3, #0
 8015388:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 801538a:	f107 0314 	add.w	r3, r7, #20
 801538e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015392:	f006 fa2f 	bl	801b7f4 <SysTimeToMs>
 8015396:	4602      	mov	r2, r0
 8015398:	68fb      	ldr	r3, [r7, #12]
 801539a:	609a      	str	r2, [r3, #8]
 801539c:	e009      	b.n	80153b2 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 801539e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80153a2:	f083 0301 	eor.w	r3, r3, #1
 80153a6:	b2db      	uxtb	r3, r3
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d002      	beq.n	80153b2 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80153b0:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	685b      	ldr	r3, [r3, #4]
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d102      	bne.n	80153c0 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 80153ba:	68fb      	ldr	r3, [r7, #12]
 80153bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80153be:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80153c4:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 80153c6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
}
 80153c8:	4618      	mov	r0, r3
 80153ca:	3730      	adds	r7, #48	@ 0x30
 80153cc:	46bd      	mov	sp, r7
 80153ce:	bd80      	pop	{r7, pc}
 80153d0:	001b7740 	.word	0x001b7740
 80153d4:	0112a880 	.word	0x0112a880
 80153d8:	02932e00 	.word	0x02932e00
 80153dc:	0001517f 	.word	0x0001517f
 80153e0:	0001ec2f 	.word	0x0001ec2f
 80153e4:	c22e4507 	.word	0xc22e4507
 80153e8:	00015180 	.word	0x00015180

080153ec <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 80153ec:	b580      	push	{r7, lr}
 80153ee:	b086      	sub	sp, #24
 80153f0:	af02      	add	r7, sp, #8
 80153f2:	6078      	str	r0, [r7, #4]
 80153f4:	4608      	mov	r0, r1
 80153f6:	4611      	mov	r1, r2
 80153f8:	461a      	mov	r2, r3
 80153fa:	4603      	mov	r3, r0
 80153fc:	70fb      	strb	r3, [r7, #3]
 80153fe:	460b      	mov	r3, r1
 8015400:	70bb      	strb	r3, [r7, #2]
 8015402:	4613      	mov	r3, r2
 8015404:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8015406:	78f9      	ldrb	r1, [r7, #3]
 8015408:	787b      	ldrb	r3, [r7, #1]
 801540a:	9301      	str	r3, [sp, #4]
 801540c:	78bb      	ldrb	r3, [r7, #2]
 801540e:	9300      	str	r3, [sp, #0]
 8015410:	f107 0318 	add.w	r3, r7, #24
 8015414:	cb0c      	ldmia	r3, {r2, r3}
 8015416:	6878      	ldr	r0, [r7, #4]
 8015418:	f7ff ff36 	bl	8015288 <SetMaxTimeCredits>
 801541c:	4603      	mov	r3, r0
 801541e:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8015420:	78fb      	ldrb	r3, [r7, #3]
 8015422:	2b00      	cmp	r3, #0
 8015424:	d00a      	beq.n	801543c <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	685b      	ldr	r3, [r3, #4]
 801542a:	4618      	mov	r0, r3
 801542c:	f007 f81c 	bl	801c468 <UTIL_TIMER_GetElapsedTime>
 8015430:	4602      	mov	r2, r0
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	68db      	ldr	r3, [r3, #12]
 8015436:	441a      	add	r2, r3
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	68da      	ldr	r2, [r3, #12]
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	691b      	ldr	r3, [r3, #16]
 8015444:	429a      	cmp	r2, r3
 8015446:	d903      	bls.n	8015450 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	691a      	ldr	r2, [r3, #16]
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	6a3a      	ldr	r2, [r7, #32]
 8015454:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8015456:	89fb      	ldrh	r3, [r7, #14]
}
 8015458:	4618      	mov	r0, r3
 801545a:	3710      	adds	r7, #16
 801545c:	46bd      	mov	sp, r7
 801545e:	bd80      	pop	{r7, pc}

08015460 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8015460:	b480      	push	{r7}
 8015462:	b085      	sub	sp, #20
 8015464:	af00      	add	r7, sp, #0
 8015466:	4603      	mov	r3, r0
 8015468:	460a      	mov	r2, r1
 801546a:	80fb      	strh	r3, [r7, #6]
 801546c:	4613      	mov	r3, r2
 801546e:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8015470:	2300      	movs	r3, #0
 8015472:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8015474:	2300      	movs	r3, #0
 8015476:	73bb      	strb	r3, [r7, #14]
 8015478:	e011      	b.n	801549e <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 801547a:	88fa      	ldrh	r2, [r7, #6]
 801547c:	7bbb      	ldrb	r3, [r7, #14]
 801547e:	2101      	movs	r1, #1
 8015480:	fa01 f303 	lsl.w	r3, r1, r3
 8015484:	401a      	ands	r2, r3
 8015486:	7bbb      	ldrb	r3, [r7, #14]
 8015488:	2101      	movs	r1, #1
 801548a:	fa01 f303 	lsl.w	r3, r1, r3
 801548e:	429a      	cmp	r2, r3
 8015490:	d102      	bne.n	8015498 <CountChannels+0x38>
        {
            nbActiveBits++;
 8015492:	7bfb      	ldrb	r3, [r7, #15]
 8015494:	3301      	adds	r3, #1
 8015496:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8015498:	7bbb      	ldrb	r3, [r7, #14]
 801549a:	3301      	adds	r3, #1
 801549c:	73bb      	strb	r3, [r7, #14]
 801549e:	7bba      	ldrb	r2, [r7, #14]
 80154a0:	797b      	ldrb	r3, [r7, #5]
 80154a2:	429a      	cmp	r2, r3
 80154a4:	d3e9      	bcc.n	801547a <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 80154a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80154a8:	4618      	mov	r0, r3
 80154aa:	3714      	adds	r7, #20
 80154ac:	46bd      	mov	sp, r7
 80154ae:	bc80      	pop	{r7}
 80154b0:	4770      	bx	lr

080154b2 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 80154b2:	b580      	push	{r7, lr}
 80154b4:	b084      	sub	sp, #16
 80154b6:	af00      	add	r7, sp, #0
 80154b8:	6039      	str	r1, [r7, #0]
 80154ba:	4611      	mov	r1, r2
 80154bc:	461a      	mov	r2, r3
 80154be:	4603      	mov	r3, r0
 80154c0:	71fb      	strb	r3, [r7, #7]
 80154c2:	460b      	mov	r3, r1
 80154c4:	71bb      	strb	r3, [r7, #6]
 80154c6:	4613      	mov	r3, r2
 80154c8:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 80154ca:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80154ce:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80154d2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80154d6:	4618      	mov	r0, r3
 80154d8:	f000 f85d 	bl	8015596 <RegionCommonValueInRange>
 80154dc:	4603      	mov	r3, r0
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d101      	bne.n	80154e6 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 80154e2:	2300      	movs	r3, #0
 80154e4:	e053      	b.n	801558e <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80154e6:	2300      	movs	r3, #0
 80154e8:	73fb      	strb	r3, [r7, #15]
 80154ea:	2300      	movs	r3, #0
 80154ec:	73bb      	strb	r3, [r7, #14]
 80154ee:	e049      	b.n	8015584 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80154f0:	2300      	movs	r3, #0
 80154f2:	737b      	strb	r3, [r7, #13]
 80154f4:	e03d      	b.n	8015572 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 80154f6:	7bbb      	ldrb	r3, [r7, #14]
 80154f8:	005b      	lsls	r3, r3, #1
 80154fa:	683a      	ldr	r2, [r7, #0]
 80154fc:	4413      	add	r3, r2
 80154fe:	881b      	ldrh	r3, [r3, #0]
 8015500:	461a      	mov	r2, r3
 8015502:	7b7b      	ldrb	r3, [r7, #13]
 8015504:	fa42 f303 	asr.w	r3, r2, r3
 8015508:	f003 0301 	and.w	r3, r3, #1
 801550c:	2b00      	cmp	r3, #0
 801550e:	d02d      	beq.n	801556c <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8015510:	7bfa      	ldrb	r2, [r7, #15]
 8015512:	7b7b      	ldrb	r3, [r7, #13]
 8015514:	4413      	add	r3, r2
 8015516:	461a      	mov	r2, r3
 8015518:	4613      	mov	r3, r2
 801551a:	005b      	lsls	r3, r3, #1
 801551c:	4413      	add	r3, r2
 801551e:	009b      	lsls	r3, r3, #2
 8015520:	461a      	mov	r2, r3
 8015522:	69fb      	ldr	r3, [r7, #28]
 8015524:	4413      	add	r3, r2
 8015526:	7a1b      	ldrb	r3, [r3, #8]
 8015528:	f343 0303 	sbfx	r3, r3, #0, #4
 801552c:	b25b      	sxtb	r3, r3
 801552e:	f003 030f 	and.w	r3, r3, #15
 8015532:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8015534:	7bfa      	ldrb	r2, [r7, #15]
 8015536:	7b7b      	ldrb	r3, [r7, #13]
 8015538:	4413      	add	r3, r2
 801553a:	461a      	mov	r2, r3
 801553c:	4613      	mov	r3, r2
 801553e:	005b      	lsls	r3, r3, #1
 8015540:	4413      	add	r3, r2
 8015542:	009b      	lsls	r3, r3, #2
 8015544:	461a      	mov	r2, r3
 8015546:	69fb      	ldr	r3, [r7, #28]
 8015548:	4413      	add	r3, r2
 801554a:	7a1b      	ldrb	r3, [r3, #8]
 801554c:	f343 1303 	sbfx	r3, r3, #4, #4
 8015550:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8015552:	f003 030f 	and.w	r3, r3, #15
 8015556:	b25a      	sxtb	r2, r3
 8015558:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801555c:	4618      	mov	r0, r3
 801555e:	f000 f81a 	bl	8015596 <RegionCommonValueInRange>
 8015562:	4603      	mov	r3, r0
 8015564:	2b01      	cmp	r3, #1
 8015566:	d101      	bne.n	801556c <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8015568:	2301      	movs	r3, #1
 801556a:	e010      	b.n	801558e <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 801556c:	7b7b      	ldrb	r3, [r7, #13]
 801556e:	3301      	adds	r3, #1
 8015570:	737b      	strb	r3, [r7, #13]
 8015572:	7b7b      	ldrb	r3, [r7, #13]
 8015574:	2b0f      	cmp	r3, #15
 8015576:	d9be      	bls.n	80154f6 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8015578:	7bfb      	ldrb	r3, [r7, #15]
 801557a:	3310      	adds	r3, #16
 801557c:	73fb      	strb	r3, [r7, #15]
 801557e:	7bbb      	ldrb	r3, [r7, #14]
 8015580:	3301      	adds	r3, #1
 8015582:	73bb      	strb	r3, [r7, #14]
 8015584:	7bfa      	ldrb	r2, [r7, #15]
 8015586:	79fb      	ldrb	r3, [r7, #7]
 8015588:	429a      	cmp	r2, r3
 801558a:	d3b1      	bcc.n	80154f0 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 801558c:	2300      	movs	r3, #0
}
 801558e:	4618      	mov	r0, r3
 8015590:	3710      	adds	r7, #16
 8015592:	46bd      	mov	sp, r7
 8015594:	bd80      	pop	{r7, pc}

08015596 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8015596:	b480      	push	{r7}
 8015598:	b083      	sub	sp, #12
 801559a:	af00      	add	r7, sp, #0
 801559c:	4603      	mov	r3, r0
 801559e:	71fb      	strb	r3, [r7, #7]
 80155a0:	460b      	mov	r3, r1
 80155a2:	71bb      	strb	r3, [r7, #6]
 80155a4:	4613      	mov	r3, r2
 80155a6:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 80155a8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80155ac:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80155b0:	429a      	cmp	r2, r3
 80155b2:	db07      	blt.n	80155c4 <RegionCommonValueInRange+0x2e>
 80155b4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80155b8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80155bc:	429a      	cmp	r2, r3
 80155be:	dc01      	bgt.n	80155c4 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 80155c0:	2301      	movs	r3, #1
 80155c2:	e000      	b.n	80155c6 <RegionCommonValueInRange+0x30>
    }
    return 0;
 80155c4:	2300      	movs	r3, #0
}
 80155c6:	4618      	mov	r0, r3
 80155c8:	370c      	adds	r7, #12
 80155ca:	46bd      	mov	sp, r7
 80155cc:	bc80      	pop	{r7}
 80155ce:	4770      	bx	lr

080155d0 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 80155d0:	b480      	push	{r7}
 80155d2:	b085      	sub	sp, #20
 80155d4:	af00      	add	r7, sp, #0
 80155d6:	6078      	str	r0, [r7, #4]
 80155d8:	460b      	mov	r3, r1
 80155da:	70fb      	strb	r3, [r7, #3]
 80155dc:	4613      	mov	r3, r2
 80155de:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 80155e0:	78fb      	ldrb	r3, [r7, #3]
 80155e2:	091b      	lsrs	r3, r3, #4
 80155e4:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 80155e6:	78bb      	ldrb	r3, [r7, #2]
 80155e8:	091b      	lsrs	r3, r3, #4
 80155ea:	b2db      	uxtb	r3, r3
 80155ec:	7bfa      	ldrb	r2, [r7, #15]
 80155ee:	429a      	cmp	r2, r3
 80155f0:	d803      	bhi.n	80155fa <RegionCommonChanDisable+0x2a>
 80155f2:	78fa      	ldrb	r2, [r7, #3]
 80155f4:	78bb      	ldrb	r3, [r7, #2]
 80155f6:	429a      	cmp	r2, r3
 80155f8:	d301      	bcc.n	80155fe <RegionCommonChanDisable+0x2e>
    {
        return false;
 80155fa:	2300      	movs	r3, #0
 80155fc:	e017      	b.n	801562e <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 80155fe:	7bfb      	ldrb	r3, [r7, #15]
 8015600:	005b      	lsls	r3, r3, #1
 8015602:	687a      	ldr	r2, [r7, #4]
 8015604:	4413      	add	r3, r2
 8015606:	881b      	ldrh	r3, [r3, #0]
 8015608:	b21a      	sxth	r2, r3
 801560a:	78fb      	ldrb	r3, [r7, #3]
 801560c:	f003 030f 	and.w	r3, r3, #15
 8015610:	2101      	movs	r1, #1
 8015612:	fa01 f303 	lsl.w	r3, r1, r3
 8015616:	b21b      	sxth	r3, r3
 8015618:	43db      	mvns	r3, r3
 801561a:	b21b      	sxth	r3, r3
 801561c:	4013      	ands	r3, r2
 801561e:	b219      	sxth	r1, r3
 8015620:	7bfb      	ldrb	r3, [r7, #15]
 8015622:	005b      	lsls	r3, r3, #1
 8015624:	687a      	ldr	r2, [r7, #4]
 8015626:	4413      	add	r3, r2
 8015628:	b28a      	uxth	r2, r1
 801562a:	801a      	strh	r2, [r3, #0]

    return true;
 801562c:	2301      	movs	r3, #1
}
 801562e:	4618      	mov	r0, r3
 8015630:	3714      	adds	r7, #20
 8015632:	46bd      	mov	sp, r7
 8015634:	bc80      	pop	{r7}
 8015636:	4770      	bx	lr

08015638 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8015638:	b580      	push	{r7, lr}
 801563a:	b084      	sub	sp, #16
 801563c:	af00      	add	r7, sp, #0
 801563e:	6078      	str	r0, [r7, #4]
 8015640:	460b      	mov	r3, r1
 8015642:	70fb      	strb	r3, [r7, #3]
 8015644:	4613      	mov	r3, r2
 8015646:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8015648:	2300      	movs	r3, #0
 801564a:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	2b00      	cmp	r3, #0
 8015650:	d101      	bne.n	8015656 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8015652:	2300      	movs	r3, #0
 8015654:	e018      	b.n	8015688 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8015656:	78fb      	ldrb	r3, [r7, #3]
 8015658:	73bb      	strb	r3, [r7, #14]
 801565a:	e010      	b.n	801567e <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 801565c:	7bbb      	ldrb	r3, [r7, #14]
 801565e:	005b      	lsls	r3, r3, #1
 8015660:	687a      	ldr	r2, [r7, #4]
 8015662:	4413      	add	r3, r2
 8015664:	881b      	ldrh	r3, [r3, #0]
 8015666:	2110      	movs	r1, #16
 8015668:	4618      	mov	r0, r3
 801566a:	f7ff fef9 	bl	8015460 <CountChannels>
 801566e:	4603      	mov	r3, r0
 8015670:	461a      	mov	r2, r3
 8015672:	7bfb      	ldrb	r3, [r7, #15]
 8015674:	4413      	add	r3, r2
 8015676:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8015678:	7bbb      	ldrb	r3, [r7, #14]
 801567a:	3301      	adds	r3, #1
 801567c:	73bb      	strb	r3, [r7, #14]
 801567e:	7bba      	ldrb	r2, [r7, #14]
 8015680:	78bb      	ldrb	r3, [r7, #2]
 8015682:	429a      	cmp	r2, r3
 8015684:	d3ea      	bcc.n	801565c <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8015686:	7bfb      	ldrb	r3, [r7, #15]
}
 8015688:	4618      	mov	r0, r3
 801568a:	3710      	adds	r7, #16
 801568c:	46bd      	mov	sp, r7
 801568e:	bd80      	pop	{r7, pc}

08015690 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8015690:	b480      	push	{r7}
 8015692:	b087      	sub	sp, #28
 8015694:	af00      	add	r7, sp, #0
 8015696:	60f8      	str	r0, [r7, #12]
 8015698:	60b9      	str	r1, [r7, #8]
 801569a:	4613      	mov	r3, r2
 801569c:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 801569e:	68fb      	ldr	r3, [r7, #12]
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d016      	beq.n	80156d2 <RegionCommonChanMaskCopy+0x42>
 80156a4:	68bb      	ldr	r3, [r7, #8]
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d013      	beq.n	80156d2 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 80156aa:	2300      	movs	r3, #0
 80156ac:	75fb      	strb	r3, [r7, #23]
 80156ae:	e00c      	b.n	80156ca <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 80156b0:	7dfb      	ldrb	r3, [r7, #23]
 80156b2:	005b      	lsls	r3, r3, #1
 80156b4:	68ba      	ldr	r2, [r7, #8]
 80156b6:	441a      	add	r2, r3
 80156b8:	7dfb      	ldrb	r3, [r7, #23]
 80156ba:	005b      	lsls	r3, r3, #1
 80156bc:	68f9      	ldr	r1, [r7, #12]
 80156be:	440b      	add	r3, r1
 80156c0:	8812      	ldrh	r2, [r2, #0]
 80156c2:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 80156c4:	7dfb      	ldrb	r3, [r7, #23]
 80156c6:	3301      	adds	r3, #1
 80156c8:	75fb      	strb	r3, [r7, #23]
 80156ca:	7dfa      	ldrb	r2, [r7, #23]
 80156cc:	79fb      	ldrb	r3, [r7, #7]
 80156ce:	429a      	cmp	r2, r3
 80156d0:	d3ee      	bcc.n	80156b0 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 80156d2:	bf00      	nop
 80156d4:	371c      	adds	r7, #28
 80156d6:	46bd      	mov	sp, r7
 80156d8:	bc80      	pop	{r7}
 80156da:	4770      	bx	lr

080156dc <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80156dc:	b082      	sub	sp, #8
 80156de:	b580      	push	{r7, lr}
 80156e0:	b086      	sub	sp, #24
 80156e2:	af00      	add	r7, sp, #0
 80156e4:	60f8      	str	r0, [r7, #12]
 80156e6:	60b9      	str	r1, [r7, #8]
 80156e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80156ea:	4613      	mov	r3, r2
 80156ec:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80156ee:	79f9      	ldrb	r1, [r7, #7]
 80156f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80156f4:	cb0c      	ldmia	r3, {r2, r3}
 80156f6:	68f8      	ldr	r0, [r7, #12]
 80156f8:	f7ff fd8b 	bl	8015212 <GetDutyCycle>
 80156fc:	4603      	mov	r3, r0
 80156fe:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8015700:	68fb      	ldr	r3, [r7, #12]
 8015702:	68da      	ldr	r2, [r3, #12]
 8015704:	8afb      	ldrh	r3, [r7, #22]
 8015706:	68b9      	ldr	r1, [r7, #8]
 8015708:	fb01 f303 	mul.w	r3, r1, r3
 801570c:	429a      	cmp	r2, r3
 801570e:	d909      	bls.n	8015724 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	68da      	ldr	r2, [r3, #12]
 8015714:	8afb      	ldrh	r3, [r7, #22]
 8015716:	68b9      	ldr	r1, [r7, #8]
 8015718:	fb01 f303 	mul.w	r3, r1, r3
 801571c:	1ad2      	subs	r2, r2, r3
 801571e:	68fb      	ldr	r3, [r7, #12]
 8015720:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8015722:	e002      	b.n	801572a <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	2200      	movs	r2, #0
 8015728:	60da      	str	r2, [r3, #12]
}
 801572a:	bf00      	nop
 801572c:	3718      	adds	r7, #24
 801572e:	46bd      	mov	sp, r7
 8015730:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015734:	b002      	add	sp, #8
 8015736:	4770      	bx	lr

08015738 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8015738:	b5f0      	push	{r4, r5, r6, r7, lr}
 801573a:	b08f      	sub	sp, #60	@ 0x3c
 801573c:	af04      	add	r7, sp, #16
 801573e:	6039      	str	r1, [r7, #0]
 8015740:	4611      	mov	r1, r2
 8015742:	461a      	mov	r2, r3
 8015744:	4603      	mov	r3, r0
 8015746:	71fb      	strb	r3, [r7, #7]
 8015748:	460b      	mov	r3, r1
 801574a:	71bb      	strb	r3, [r7, #6]
 801574c:	4613      	mov	r3, r2
 801574e:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8015750:	f04f 33ff 	mov.w	r3, #4294967295
 8015754:	627b      	str	r3, [r7, #36]	@ 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8015756:	f006 fe75 	bl	801c444 <UTIL_TIMER_GetCurrentTime>
 801575a:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 801575c:	2300      	movs	r3, #0
 801575e:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8015760:	2301      	movs	r3, #1
 8015762:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8015764:	2300      	movs	r3, #0
 8015766:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 801576a:	2300      	movs	r3, #0
 801576c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8015770:	e0ba      	b.n	80158e8 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8015772:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8015776:	4613      	mov	r3, r2
 8015778:	005b      	lsls	r3, r3, #1
 801577a:	4413      	add	r3, r2
 801577c:	00db      	lsls	r3, r3, #3
 801577e:	461a      	mov	r2, r3
 8015780:	683b      	ldr	r3, [r7, #0]
 8015782:	189c      	adds	r4, r3, r2
 8015784:	f897 6040 	ldrb.w	r6, [r7, #64]	@ 0x40
 8015788:	797a      	ldrb	r2, [r7, #5]
 801578a:	79fd      	ldrb	r5, [r7, #7]
 801578c:	69fb      	ldr	r3, [r7, #28]
 801578e:	9302      	str	r3, [sp, #8]
 8015790:	46ec      	mov	ip, sp
 8015792:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8015796:	e893 0003 	ldmia.w	r3, {r0, r1}
 801579a:	e88c 0003 	stmia.w	ip, {r0, r1}
 801579e:	4633      	mov	r3, r6
 80157a0:	4629      	mov	r1, r5
 80157a2:	4620      	mov	r0, r4
 80157a4:	f7ff fe22 	bl	80153ec <UpdateTimeCredits>
 80157a8:	4603      	mov	r3, r0
 80157aa:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 80157ac:	8afa      	ldrh	r2, [r7, #22]
 80157ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80157b0:	fb02 f303 	mul.w	r3, r2, r3
 80157b4:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 80157b6:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80157ba:	4613      	mov	r3, r2
 80157bc:	005b      	lsls	r3, r3, #1
 80157be:	4413      	add	r3, r2
 80157c0:	00db      	lsls	r3, r3, #3
 80157c2:	461a      	mov	r2, r3
 80157c4:	683b      	ldr	r3, [r7, #0]
 80157c6:	4413      	add	r3, r2
 80157c8:	68db      	ldr	r3, [r3, #12]
 80157ca:	69ba      	ldr	r2, [r7, #24]
 80157cc:	429a      	cmp	r2, r3
 80157ce:	d908      	bls.n	80157e2 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80157d0:	797b      	ldrb	r3, [r7, #5]
 80157d2:	f083 0301 	eor.w	r3, r3, #1
 80157d6:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d013      	beq.n	8015804 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80157dc:	79fb      	ldrb	r3, [r7, #7]
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d010      	beq.n	8015804 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 80157e2:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80157e6:	4613      	mov	r3, r2
 80157e8:	005b      	lsls	r3, r3, #1
 80157ea:	4413      	add	r3, r2
 80157ec:	00db      	lsls	r3, r3, #3
 80157ee:	461a      	mov	r2, r3
 80157f0:	683b      	ldr	r3, [r7, #0]
 80157f2:	4413      	add	r3, r2
 80157f4:	2201      	movs	r2, #1
 80157f6:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 80157f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80157fc:	3301      	adds	r3, #1
 80157fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015802:	e06c      	b.n	80158de <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8015804:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8015808:	4613      	mov	r3, r2
 801580a:	005b      	lsls	r3, r3, #1
 801580c:	4413      	add	r3, r2
 801580e:	00db      	lsls	r3, r3, #3
 8015810:	461a      	mov	r2, r3
 8015812:	683b      	ldr	r3, [r7, #0]
 8015814:	4413      	add	r3, r2
 8015816:	2200      	movs	r2, #0
 8015818:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 801581a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801581e:	4613      	mov	r3, r2
 8015820:	005b      	lsls	r3, r3, #1
 8015822:	4413      	add	r3, r2
 8015824:	00db      	lsls	r3, r3, #3
 8015826:	461a      	mov	r2, r3
 8015828:	683b      	ldr	r3, [r7, #0]
 801582a:	4413      	add	r3, r2
 801582c:	691b      	ldr	r3, [r3, #16]
 801582e:	69ba      	ldr	r2, [r7, #24]
 8015830:	429a      	cmp	r2, r3
 8015832:	d815      	bhi.n	8015860 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8015834:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8015838:	4613      	mov	r3, r2
 801583a:	005b      	lsls	r3, r3, #1
 801583c:	4413      	add	r3, r2
 801583e:	00db      	lsls	r3, r3, #3
 8015840:	461a      	mov	r2, r3
 8015842:	683b      	ldr	r3, [r7, #0]
 8015844:	4413      	add	r3, r2
 8015846:	68db      	ldr	r3, [r3, #12]
 8015848:	69ba      	ldr	r2, [r7, #24]
 801584a:	1ad3      	subs	r3, r2, r3
 801584c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801584e:	4293      	cmp	r3, r2
 8015850:	bf28      	it	cs
 8015852:	4613      	movcs	r3, r2
 8015854:	627b      	str	r3, [r7, #36]	@ 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8015856:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801585a:	3301      	adds	r3, #1
 801585c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8015860:	79fb      	ldrb	r3, [r7, #7]
 8015862:	f083 0301 	eor.w	r3, r3, #1
 8015866:	b2db      	uxtb	r3, r3
 8015868:	2b00      	cmp	r3, #0
 801586a:	d038      	beq.n	80158de <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 801586c:	2300      	movs	r3, #0
 801586e:	60fb      	str	r3, [r7, #12]
 8015870:	2300      	movs	r3, #0
 8015872:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8015874:	8afb      	ldrh	r3, [r7, #22]
 8015876:	2b64      	cmp	r3, #100	@ 0x64
 8015878:	d103      	bne.n	8015882 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 801587a:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 801587e:	60fb      	str	r3, [r7, #12]
 8015880:	e009      	b.n	8015896 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8015882:	8afb      	ldrh	r3, [r7, #22]
 8015884:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8015888:	d103      	bne.n	8015892 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 801588a:	f649 23b0 	movw	r3, #39600	@ 0x9ab0
 801588e:	60fb      	str	r3, [r7, #12]
 8015890:	e001      	b.n	8015896 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8015892:	4b1e      	ldr	r3, [pc, #120]	@ (801590c <RegionCommonUpdateBandTimeOff+0x1d4>)
 8015894:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8015896:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015898:	4a1c      	ldr	r2, [pc, #112]	@ (801590c <RegionCommonUpdateBandTimeOff+0x1d4>)
 801589a:	4293      	cmp	r3, r2
 801589c:	d90e      	bls.n	80158bc <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 801589e:	68fa      	ldr	r2, [r7, #12]
 80158a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80158a2:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 80158a6:	3b30      	subs	r3, #48	@ 0x30
 80158a8:	4919      	ldr	r1, [pc, #100]	@ (8015910 <RegionCommonUpdateBandTimeOff+0x1d8>)
 80158aa:	fba1 1303 	umull	r1, r3, r1, r3
 80158ae:	0c1b      	lsrs	r3, r3, #16
 80158b0:	3301      	adds	r3, #1
 80158b2:	4918      	ldr	r1, [pc, #96]	@ (8015914 <RegionCommonUpdateBandTimeOff+0x1dc>)
 80158b4:	fb01 f303 	mul.w	r3, r1, r3
 80158b8:	4413      	add	r3, r2
 80158ba:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 80158bc:	f107 000c 	add.w	r0, r7, #12
 80158c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80158c2:	9300      	str	r3, [sp, #0]
 80158c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80158c6:	f107 020c 	add.w	r2, r7, #12
 80158ca:	ca06      	ldmia	r2, {r1, r2}
 80158cc:	f005 fed3 	bl	801b676 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 80158d0:	f107 030c 	add.w	r3, r7, #12
 80158d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80158d8:	f005 ff8c 	bl	801b7f4 <SysTimeToMs>
 80158dc:	6278      	str	r0, [r7, #36]	@ 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 80158de:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80158e2:	3301      	adds	r3, #1
 80158e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80158e8:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80158ec:	79bb      	ldrb	r3, [r7, #6]
 80158ee:	429a      	cmp	r2, r3
 80158f0:	f4ff af3f 	bcc.w	8015772 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 80158f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d102      	bne.n	8015902 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 80158fc:	f04f 33ff 	mov.w	r3, #4294967295
 8015900:	e000      	b.n	8015904 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8015902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8015904:	4618      	mov	r0, r3
 8015906:	372c      	adds	r7, #44	@ 0x2c
 8015908:	46bd      	mov	sp, r7
 801590a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801590c:	0001ec30 	.word	0x0001ec30
 8015910:	c22e4507 	.word	0xc22e4507
 8015914:	00015180 	.word	0x00015180

08015918 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8015918:	b480      	push	{r7}
 801591a:	b085      	sub	sp, #20
 801591c:	af00      	add	r7, sp, #0
 801591e:	6078      	str	r0, [r7, #4]
 8015920:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8015922:	2300      	movs	r3, #0
 8015924:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	781b      	ldrb	r3, [r3, #0]
 801592a:	2b03      	cmp	r3, #3
 801592c:	d13f      	bne.n	80159ae <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	3301      	adds	r3, #1
 8015932:	781b      	ldrb	r3, [r3, #0]
 8015934:	b25a      	sxtb	r2, r3
 8015936:	683b      	ldr	r3, [r7, #0]
 8015938:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 801593a:	683b      	ldr	r3, [r7, #0]
 801593c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015940:	f003 030f 	and.w	r3, r3, #15
 8015944:	b25a      	sxtb	r2, r3
 8015946:	683b      	ldr	r3, [r7, #0]
 8015948:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 801594a:	683b      	ldr	r3, [r7, #0]
 801594c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015950:	b2db      	uxtb	r3, r3
 8015952:	091b      	lsrs	r3, r3, #4
 8015954:	b2db      	uxtb	r3, r3
 8015956:	b25a      	sxtb	r2, r3
 8015958:	683b      	ldr	r3, [r7, #0]
 801595a:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	3302      	adds	r3, #2
 8015960:	781b      	ldrb	r3, [r3, #0]
 8015962:	461a      	mov	r2, r3
 8015964:	683b      	ldr	r3, [r7, #0]
 8015966:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8015968:	683b      	ldr	r3, [r7, #0]
 801596a:	889b      	ldrh	r3, [r3, #4]
 801596c:	b21a      	sxth	r2, r3
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	3303      	adds	r3, #3
 8015972:	781b      	ldrb	r3, [r3, #0]
 8015974:	021b      	lsls	r3, r3, #8
 8015976:	b21b      	sxth	r3, r3
 8015978:	4313      	orrs	r3, r2
 801597a:	b21b      	sxth	r3, r3
 801597c:	b29a      	uxth	r2, r3
 801597e:	683b      	ldr	r3, [r7, #0]
 8015980:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	791a      	ldrb	r2, [r3, #4]
 8015986:	683b      	ldr	r3, [r7, #0]
 8015988:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 801598a:	683b      	ldr	r3, [r7, #0]
 801598c:	781b      	ldrb	r3, [r3, #0]
 801598e:	091b      	lsrs	r3, r3, #4
 8015990:	b2db      	uxtb	r3, r3
 8015992:	f003 0307 	and.w	r3, r3, #7
 8015996:	b2da      	uxtb	r2, r3
 8015998:	683b      	ldr	r3, [r7, #0]
 801599a:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 801599c:	683b      	ldr	r3, [r7, #0]
 801599e:	781b      	ldrb	r3, [r3, #0]
 80159a0:	f003 030f 	and.w	r3, r3, #15
 80159a4:	b2da      	uxtb	r2, r3
 80159a6:	683b      	ldr	r3, [r7, #0]
 80159a8:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 80159aa:	2305      	movs	r3, #5
 80159ac:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 80159ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80159b0:	4618      	mov	r0, r3
 80159b2:	3714      	adds	r7, #20
 80159b4:	46bd      	mov	sp, r7
 80159b6:	bc80      	pop	{r7}
 80159b8:	4770      	bx	lr

080159ba <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 80159ba:	b5b0      	push	{r4, r5, r7, lr}
 80159bc:	b088      	sub	sp, #32
 80159be:	af02      	add	r7, sp, #8
 80159c0:	60f8      	str	r0, [r7, #12]
 80159c2:	60b9      	str	r1, [r7, #8]
 80159c4:	607a      	str	r2, [r7, #4]
 80159c6:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	791b      	ldrb	r3, [r3, #4]
 80159cc:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 80159ce:	68fb      	ldr	r3, [r7, #12]
 80159d0:	799b      	ldrb	r3, [r3, #6]
 80159d2:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 80159d4:	68fb      	ldr	r3, [r7, #12]
 80159d6:	79db      	ldrb	r3, [r3, #7]
 80159d8:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	7a1b      	ldrb	r3, [r3, #8]
 80159de:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 80159e0:	68fb      	ldr	r3, [r7, #12]
 80159e2:	795b      	ldrb	r3, [r3, #5]
 80159e4:	f083 0301 	eor.w	r3, r3, #1
 80159e8:	b2db      	uxtb	r3, r3
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d008      	beq.n	8015a00 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	7adb      	ldrb	r3, [r3, #11]
 80159f2:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	7a5b      	ldrb	r3, [r3, #9]
 80159f8:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 80159fa:	68fb      	ldr	r3, [r7, #12]
 80159fc:	7a9b      	ldrb	r3, [r3, #10]
 80159fe:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8015a00:	7dfb      	ldrb	r3, [r7, #23]
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d04a      	beq.n	8015a9c <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8015a06:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8015a0a:	2b0f      	cmp	r3, #15
 8015a0c:	d103      	bne.n	8015a16 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8015a0e:	68fb      	ldr	r3, [r7, #12]
 8015a10:	7a5b      	ldrb	r3, [r3, #9]
 8015a12:	75bb      	strb	r3, [r7, #22]
 8015a14:	e01d      	b.n	8015a52 <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8015a16:	68fb      	ldr	r3, [r7, #12]
 8015a18:	7b18      	ldrb	r0, [r3, #12]
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	6919      	ldr	r1, [r3, #16]
 8015a1e:	68fb      	ldr	r3, [r7, #12]
 8015a20:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8015a24:	68fb      	ldr	r3, [r7, #12]
 8015a26:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8015a2a:	68fa      	ldr	r2, [r7, #12]
 8015a2c:	6992      	ldr	r2, [r2, #24]
 8015a2e:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8015a32:	9201      	str	r2, [sp, #4]
 8015a34:	9300      	str	r3, [sp, #0]
 8015a36:	462b      	mov	r3, r5
 8015a38:	4622      	mov	r2, r4
 8015a3a:	f7ff fd3a 	bl	80154b2 <RegionCommonChanVerifyDr>
 8015a3e:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8015a40:	f083 0301 	eor.w	r3, r3, #1
 8015a44:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d003      	beq.n	8015a52 <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8015a4a:	7dfb      	ldrb	r3, [r7, #23]
 8015a4c:	f023 0302 	bic.w	r3, r3, #2
 8015a50:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 8015a52:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8015a56:	2b0f      	cmp	r3, #15
 8015a58:	d103      	bne.n	8015a62 <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	7a9b      	ldrb	r3, [r3, #10]
 8015a5e:	757b      	strb	r3, [r7, #21]
 8015a60:	e01c      	b.n	8015a9c <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8015a68:	68fb      	ldr	r3, [r7, #12]
 8015a6a:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8015a6e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8015a72:	4618      	mov	r0, r3
 8015a74:	f7ff fd8f 	bl	8015596 <RegionCommonValueInRange>
 8015a78:	4603      	mov	r3, r0
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d10e      	bne.n	8015a9c <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8015a7e:	68fb      	ldr	r3, [r7, #12]
 8015a80:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8015a84:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8015a88:	429a      	cmp	r2, r3
 8015a8a:	da03      	bge.n	8015a94 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8015a8c:	68fb      	ldr	r3, [r7, #12]
 8015a8e:	7f5b      	ldrb	r3, [r3, #29]
 8015a90:	757b      	strb	r3, [r7, #21]
 8015a92:	e003      	b.n	8015a9c <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8015a94:	7dfb      	ldrb	r3, [r7, #23]
 8015a96:	f023 0304 	bic.w	r3, r3, #4
 8015a9a:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8015a9c:	7dfb      	ldrb	r3, [r7, #23]
 8015a9e:	2b07      	cmp	r3, #7
 8015aa0:	d105      	bne.n	8015aae <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8015aa2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d101      	bne.n	8015aae <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8015aaa:	2301      	movs	r3, #1
 8015aac:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8015aae:	68bb      	ldr	r3, [r7, #8]
 8015ab0:	7dba      	ldrb	r2, [r7, #22]
 8015ab2:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	7d7a      	ldrb	r2, [r7, #21]
 8015ab8:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8015aba:	7d3a      	ldrb	r2, [r7, #20]
 8015abc:	683b      	ldr	r3, [r7, #0]
 8015abe:	701a      	strb	r2, [r3, #0]

    return status;
 8015ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8015ac2:	4618      	mov	r0, r3
 8015ac4:	3718      	adds	r7, #24
 8015ac6:	46bd      	mov	sp, r7
 8015ac8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08015acc <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8015acc:	b480      	push	{r7}
 8015ace:	b083      	sub	sp, #12
 8015ad0:	af00      	add	r7, sp, #0
 8015ad2:	4603      	mov	r3, r0
 8015ad4:	6039      	str	r1, [r7, #0]
 8015ad6:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8015ad8:	79fb      	ldrb	r3, [r7, #7]
 8015ada:	4a06      	ldr	r2, [pc, #24]	@ (8015af4 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8015adc:	fa02 f303 	lsl.w	r3, r2, r3
 8015ae0:	461a      	mov	r2, r3
 8015ae2:	683b      	ldr	r3, [r7, #0]
 8015ae4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8015ae8:	4618      	mov	r0, r3
 8015aea:	370c      	adds	r7, #12
 8015aec:	46bd      	mov	sp, r7
 8015aee:	bc80      	pop	{r7}
 8015af0:	4770      	bx	lr
 8015af2:	bf00      	nop
 8015af4:	000f4240 	.word	0x000f4240

08015af8 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8015af8:	b480      	push	{r7}
 8015afa:	b083      	sub	sp, #12
 8015afc:	af00      	add	r7, sp, #0
 8015afe:	4603      	mov	r3, r0
 8015b00:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8015b02:	79fb      	ldrb	r3, [r7, #7]
 8015b04:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8015b08:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8015b0c:	4618      	mov	r0, r3
 8015b0e:	370c      	adds	r7, #12
 8015b10:	46bd      	mov	sp, r7
 8015b12:	bc80      	pop	{r7}
 8015b14:	4770      	bx	lr
	...

08015b18 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8015b18:	b480      	push	{r7}
 8015b1a:	b085      	sub	sp, #20
 8015b1c:	af00      	add	r7, sp, #0
 8015b1e:	60f8      	str	r0, [r7, #12]
 8015b20:	607a      	str	r2, [r7, #4]
 8015b22:	603b      	str	r3, [r7, #0]
 8015b24:	460b      	mov	r3, r1
 8015b26:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8015b28:	7afa      	ldrb	r2, [r7, #11]
 8015b2a:	7afb      	ldrb	r3, [r7, #11]
 8015b2c:	3b04      	subs	r3, #4
 8015b2e:	4619      	mov	r1, r3
 8015b30:	68fb      	ldr	r3, [r7, #12]
 8015b32:	fb03 f101 	mul.w	r1, r3, r1
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8015b3c:	fb00 f303 	mul.w	r3, r0, r3
 8015b40:	440b      	add	r3, r1
 8015b42:	005b      	lsls	r3, r3, #1
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d013      	beq.n	8015b70 <RegionCommonComputeRxWindowParameters+0x58>
 8015b48:	7afb      	ldrb	r3, [r7, #11]
 8015b4a:	3b04      	subs	r3, #4
 8015b4c:	4619      	mov	r1, r3
 8015b4e:	68fb      	ldr	r3, [r7, #12]
 8015b50:	fb03 f101 	mul.w	r1, r3, r1
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8015b5a:	fb00 f303 	mul.w	r3, r0, r3
 8015b5e:	440b      	add	r3, r1
 8015b60:	0059      	lsls	r1, r3, #1
 8015b62:	68fb      	ldr	r3, [r7, #12]
 8015b64:	440b      	add	r3, r1
 8015b66:	1e59      	subs	r1, r3, #1
 8015b68:	68fb      	ldr	r3, [r7, #12]
 8015b6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8015b6e:	e00f      	b.n	8015b90 <RegionCommonComputeRxWindowParameters+0x78>
 8015b70:	7afb      	ldrb	r3, [r7, #11]
 8015b72:	3b04      	subs	r3, #4
 8015b74:	4619      	mov	r1, r3
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	fb03 f101 	mul.w	r1, r3, r1
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8015b82:	fb00 f303 	mul.w	r3, r0, r3
 8015b86:	440b      	add	r3, r1
 8015b88:	0059      	lsls	r1, r3, #1
 8015b8a:	68fb      	ldr	r3, [r7, #12]
 8015b8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8015b90:	429a      	cmp	r2, r3
 8015b92:	bf38      	it	cc
 8015b94:	461a      	movcc	r2, r3
 8015b96:	69bb      	ldr	r3, [r7, #24]
 8015b98:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8015b9a:	68fb      	ldr	r3, [r7, #12]
 8015b9c:	009b      	lsls	r3, r3, #2
 8015b9e:	4619      	mov	r1, r3
 8015ba0:	69bb      	ldr	r3, [r7, #24]
 8015ba2:	681b      	ldr	r3, [r3, #0]
 8015ba4:	68fa      	ldr	r2, [r7, #12]
 8015ba6:	fb02 f303 	mul.w	r3, r2, r3
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d007      	beq.n	8015bbe <RegionCommonComputeRxWindowParameters+0xa6>
 8015bae:	69bb      	ldr	r3, [r7, #24]
 8015bb0:	681b      	ldr	r3, [r3, #0]
 8015bb2:	68fa      	ldr	r2, [r7, #12]
 8015bb4:	fb02 f303 	mul.w	r3, r2, r3
 8015bb8:	3301      	adds	r3, #1
 8015bba:	085b      	lsrs	r3, r3, #1
 8015bbc:	e005      	b.n	8015bca <RegionCommonComputeRxWindowParameters+0xb2>
 8015bbe:	69bb      	ldr	r3, [r7, #24]
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	68fa      	ldr	r2, [r7, #12]
 8015bc4:	fb02 f303 	mul.w	r3, r2, r3
 8015bc8:	085b      	lsrs	r3, r3, #1
 8015bca:	1acb      	subs	r3, r1, r3
 8015bcc:	683a      	ldr	r2, [r7, #0]
 8015bce:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8015bd2:	fb01 f202 	mul.w	r2, r1, r2
 8015bd6:	1a9b      	subs	r3, r3, r2
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	dd27      	ble.n	8015c2c <RegionCommonComputeRxWindowParameters+0x114>
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	009b      	lsls	r3, r3, #2
 8015be0:	4619      	mov	r1, r3
 8015be2:	69bb      	ldr	r3, [r7, #24]
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	68fa      	ldr	r2, [r7, #12]
 8015be8:	fb02 f303 	mul.w	r3, r2, r3
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d007      	beq.n	8015c00 <RegionCommonComputeRxWindowParameters+0xe8>
 8015bf0:	69bb      	ldr	r3, [r7, #24]
 8015bf2:	681b      	ldr	r3, [r3, #0]
 8015bf4:	68fa      	ldr	r2, [r7, #12]
 8015bf6:	fb02 f303 	mul.w	r3, r2, r3
 8015bfa:	3301      	adds	r3, #1
 8015bfc:	085b      	lsrs	r3, r3, #1
 8015bfe:	e005      	b.n	8015c0c <RegionCommonComputeRxWindowParameters+0xf4>
 8015c00:	69bb      	ldr	r3, [r7, #24]
 8015c02:	681b      	ldr	r3, [r3, #0]
 8015c04:	68fa      	ldr	r2, [r7, #12]
 8015c06:	fb02 f303 	mul.w	r3, r2, r3
 8015c0a:	085b      	lsrs	r3, r3, #1
 8015c0c:	1acb      	subs	r3, r1, r3
 8015c0e:	683a      	ldr	r2, [r7, #0]
 8015c10:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8015c14:	fb01 f202 	mul.w	r2, r1, r2
 8015c18:	1a9b      	subs	r3, r3, r2
 8015c1a:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 8015c1e:	4a19      	ldr	r2, [pc, #100]	@ (8015c84 <RegionCommonComputeRxWindowParameters+0x16c>)
 8015c20:	fb82 1203 	smull	r1, r2, r2, r3
 8015c24:	1192      	asrs	r2, r2, #6
 8015c26:	17db      	asrs	r3, r3, #31
 8015c28:	1ad3      	subs	r3, r2, r3
 8015c2a:	e024      	b.n	8015c76 <RegionCommonComputeRxWindowParameters+0x15e>
 8015c2c:	68fb      	ldr	r3, [r7, #12]
 8015c2e:	009b      	lsls	r3, r3, #2
 8015c30:	4619      	mov	r1, r3
 8015c32:	69bb      	ldr	r3, [r7, #24]
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	68fa      	ldr	r2, [r7, #12]
 8015c38:	fb02 f303 	mul.w	r3, r2, r3
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d007      	beq.n	8015c50 <RegionCommonComputeRxWindowParameters+0x138>
 8015c40:	69bb      	ldr	r3, [r7, #24]
 8015c42:	681b      	ldr	r3, [r3, #0]
 8015c44:	68fa      	ldr	r2, [r7, #12]
 8015c46:	fb02 f303 	mul.w	r3, r2, r3
 8015c4a:	3301      	adds	r3, #1
 8015c4c:	085b      	lsrs	r3, r3, #1
 8015c4e:	e005      	b.n	8015c5c <RegionCommonComputeRxWindowParameters+0x144>
 8015c50:	69bb      	ldr	r3, [r7, #24]
 8015c52:	681b      	ldr	r3, [r3, #0]
 8015c54:	68fa      	ldr	r2, [r7, #12]
 8015c56:	fb02 f303 	mul.w	r3, r2, r3
 8015c5a:	085b      	lsrs	r3, r3, #1
 8015c5c:	1acb      	subs	r3, r1, r3
 8015c5e:	683a      	ldr	r2, [r7, #0]
 8015c60:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8015c64:	fb01 f202 	mul.w	r2, r1, r2
 8015c68:	1a9b      	subs	r3, r3, r2
 8015c6a:	4a06      	ldr	r2, [pc, #24]	@ (8015c84 <RegionCommonComputeRxWindowParameters+0x16c>)
 8015c6c:	fb82 1203 	smull	r1, r2, r2, r3
 8015c70:	1192      	asrs	r2, r2, #6
 8015c72:	17db      	asrs	r3, r3, #31
 8015c74:	1ad3      	subs	r3, r2, r3
 8015c76:	69fa      	ldr	r2, [r7, #28]
 8015c78:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8015c7a:	bf00      	nop
 8015c7c:	3714      	adds	r7, #20
 8015c7e:	46bd      	mov	sp, r7
 8015c80:	bc80      	pop	{r7}
 8015c82:	4770      	bx	lr
 8015c84:	10624dd3 	.word	0x10624dd3

08015c88 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8015c88:	b580      	push	{r7, lr}
 8015c8a:	b086      	sub	sp, #24
 8015c8c:	af00      	add	r7, sp, #0
 8015c8e:	4603      	mov	r3, r0
 8015c90:	60b9      	str	r1, [r7, #8]
 8015c92:	607a      	str	r2, [r7, #4]
 8015c94:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8015c96:	2300      	movs	r3, #0
 8015c98:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8015c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015c9e:	005b      	lsls	r3, r3, #1
 8015ca0:	4618      	mov	r0, r3
 8015ca2:	f7ea fd93 	bl	80007cc <__aeabi_ui2f>
 8015ca6:	4603      	mov	r3, r0
 8015ca8:	4619      	mov	r1, r3
 8015caa:	68b8      	ldr	r0, [r7, #8]
 8015cac:	f7ea fcdc 	bl	8000668 <__aeabi_fsub>
 8015cb0:	4603      	mov	r3, r0
 8015cb2:	6879      	ldr	r1, [r7, #4]
 8015cb4:	4618      	mov	r0, r3
 8015cb6:	f7ea fcd7 	bl	8000668 <__aeabi_fsub>
 8015cba:	4603      	mov	r3, r0
 8015cbc:	4618      	mov	r0, r3
 8015cbe:	f7ea fbc7 	bl	8000450 <__aeabi_f2d>
 8015cc2:	4602      	mov	r2, r0
 8015cc4:	460b      	mov	r3, r1
 8015cc6:	4610      	mov	r0, r2
 8015cc8:	4619      	mov	r1, r3
 8015cca:	f006 ff51 	bl	801cb70 <floor>
 8015cce:	4602      	mov	r2, r0
 8015cd0:	460b      	mov	r3, r1
 8015cd2:	4610      	mov	r0, r2
 8015cd4:	4619      	mov	r1, r3
 8015cd6:	f7ea fc9b 	bl	8000610 <__aeabi_d2iz>
 8015cda:	4603      	mov	r3, r0
 8015cdc:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8015cde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015ce2:	4618      	mov	r0, r3
 8015ce4:	3718      	adds	r7, #24
 8015ce6:	46bd      	mov	sp, r7
 8015ce8:	bd80      	pop	{r7, pc}

08015cea <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8015cea:	b590      	push	{r4, r7, lr}
 8015cec:	b087      	sub	sp, #28
 8015cee:	af00      	add	r7, sp, #0
 8015cf0:	60f8      	str	r0, [r7, #12]
 8015cf2:	60b9      	str	r1, [r7, #8]
 8015cf4:	607a      	str	r2, [r7, #4]
 8015cf6:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8015cf8:	2300      	movs	r3, #0
 8015cfa:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8015cfc:	2300      	movs	r3, #0
 8015cfe:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8015d00:	2300      	movs	r3, #0
 8015d02:	757b      	strb	r3, [r7, #21]
 8015d04:	2300      	movs	r3, #0
 8015d06:	753b      	strb	r3, [r7, #20]
 8015d08:	e09c      	b.n	8015e44 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8015d0a:	2300      	movs	r3, #0
 8015d0c:	74fb      	strb	r3, [r7, #19]
 8015d0e:	e08f      	b.n	8015e30 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8015d10:	68fb      	ldr	r3, [r7, #12]
 8015d12:	685a      	ldr	r2, [r3, #4]
 8015d14:	7d3b      	ldrb	r3, [r7, #20]
 8015d16:	005b      	lsls	r3, r3, #1
 8015d18:	4413      	add	r3, r2
 8015d1a:	881b      	ldrh	r3, [r3, #0]
 8015d1c:	461a      	mov	r2, r3
 8015d1e:	7cfb      	ldrb	r3, [r7, #19]
 8015d20:	fa42 f303 	asr.w	r3, r2, r3
 8015d24:	f003 0301 	and.w	r3, r3, #1
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d07e      	beq.n	8015e2a <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8015d2c:	68fb      	ldr	r3, [r7, #12]
 8015d2e:	689a      	ldr	r2, [r3, #8]
 8015d30:	7d79      	ldrb	r1, [r7, #21]
 8015d32:	7cfb      	ldrb	r3, [r7, #19]
 8015d34:	440b      	add	r3, r1
 8015d36:	4619      	mov	r1, r3
 8015d38:	460b      	mov	r3, r1
 8015d3a:	005b      	lsls	r3, r3, #1
 8015d3c:	440b      	add	r3, r1
 8015d3e:	009b      	lsls	r3, r3, #2
 8015d40:	4413      	add	r3, r2
 8015d42:	681b      	ldr	r3, [r3, #0]
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	d06b      	beq.n	8015e20 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8015d48:	68fb      	ldr	r3, [r7, #12]
 8015d4a:	781b      	ldrb	r3, [r3, #0]
 8015d4c:	f083 0301 	eor.w	r3, r3, #1
 8015d50:	b2db      	uxtb	r3, r3
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d011      	beq.n	8015d7a <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8015d56:	68fb      	ldr	r3, [r7, #12]
 8015d58:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d00d      	beq.n	8015d7a <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8015d5e:	68fb      	ldr	r3, [r7, #12]
 8015d60:	695a      	ldr	r2, [r3, #20]
 8015d62:	7d3b      	ldrb	r3, [r7, #20]
 8015d64:	005b      	lsls	r3, r3, #1
 8015d66:	4413      	add	r3, r2
 8015d68:	881b      	ldrh	r3, [r3, #0]
 8015d6a:	461a      	mov	r2, r3
 8015d6c:	7cfb      	ldrb	r3, [r7, #19]
 8015d6e:	fa42 f303 	asr.w	r3, r2, r3
 8015d72:	f003 0301 	and.w	r3, r3, #1
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d054      	beq.n	8015e24 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	785b      	ldrb	r3, [r3, #1]
 8015d7e:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8015d80:	68fb      	ldr	r3, [r7, #12]
 8015d82:	689a      	ldr	r2, [r3, #8]
 8015d84:	7d79      	ldrb	r1, [r7, #21]
 8015d86:	7cfb      	ldrb	r3, [r7, #19]
 8015d88:	440b      	add	r3, r1
 8015d8a:	4619      	mov	r1, r3
 8015d8c:	460b      	mov	r3, r1
 8015d8e:	005b      	lsls	r3, r3, #1
 8015d90:	440b      	add	r3, r1
 8015d92:	009b      	lsls	r3, r3, #2
 8015d94:	4413      	add	r3, r2
 8015d96:	7a1b      	ldrb	r3, [r3, #8]
 8015d98:	f343 0303 	sbfx	r3, r3, #0, #4
 8015d9c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8015d9e:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8015da0:	68fb      	ldr	r3, [r7, #12]
 8015da2:	689a      	ldr	r2, [r3, #8]
 8015da4:	7d79      	ldrb	r1, [r7, #21]
 8015da6:	7cfb      	ldrb	r3, [r7, #19]
 8015da8:	440b      	add	r3, r1
 8015daa:	4619      	mov	r1, r3
 8015dac:	460b      	mov	r3, r1
 8015dae:	005b      	lsls	r3, r3, #1
 8015db0:	440b      	add	r3, r1
 8015db2:	009b      	lsls	r3, r3, #2
 8015db4:	4413      	add	r3, r2
 8015db6:	7a1b      	ldrb	r3, [r3, #8]
 8015db8:	f343 1303 	sbfx	r3, r3, #4, #4
 8015dbc:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8015dbe:	461a      	mov	r2, r3
 8015dc0:	4621      	mov	r1, r4
 8015dc2:	f7ff fbe8 	bl	8015596 <RegionCommonValueInRange>
 8015dc6:	4603      	mov	r3, r0
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d02d      	beq.n	8015e28 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8015dcc:	68fb      	ldr	r3, [r7, #12]
 8015dce:	68da      	ldr	r2, [r3, #12]
 8015dd0:	68fb      	ldr	r3, [r7, #12]
 8015dd2:	6899      	ldr	r1, [r3, #8]
 8015dd4:	7d78      	ldrb	r0, [r7, #21]
 8015dd6:	7cfb      	ldrb	r3, [r7, #19]
 8015dd8:	4403      	add	r3, r0
 8015dda:	4618      	mov	r0, r3
 8015ddc:	4603      	mov	r3, r0
 8015dde:	005b      	lsls	r3, r3, #1
 8015de0:	4403      	add	r3, r0
 8015de2:	009b      	lsls	r3, r3, #2
 8015de4:	440b      	add	r3, r1
 8015de6:	7a5b      	ldrb	r3, [r3, #9]
 8015de8:	4619      	mov	r1, r3
 8015dea:	460b      	mov	r3, r1
 8015dec:	005b      	lsls	r3, r3, #1
 8015dee:	440b      	add	r3, r1
 8015df0:	00db      	lsls	r3, r3, #3
 8015df2:	4413      	add	r3, r2
 8015df4:	7d1b      	ldrb	r3, [r3, #20]
 8015df6:	f083 0301 	eor.w	r3, r3, #1
 8015dfa:	b2db      	uxtb	r3, r3
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d003      	beq.n	8015e08 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8015e00:	7dbb      	ldrb	r3, [r7, #22]
 8015e02:	3301      	adds	r3, #1
 8015e04:	75bb      	strb	r3, [r7, #22]
                    continue;
 8015e06:	e010      	b.n	8015e2a <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8015e08:	7dfb      	ldrb	r3, [r7, #23]
 8015e0a:	1c5a      	adds	r2, r3, #1
 8015e0c:	75fa      	strb	r2, [r7, #23]
 8015e0e:	461a      	mov	r2, r3
 8015e10:	68bb      	ldr	r3, [r7, #8]
 8015e12:	4413      	add	r3, r2
 8015e14:	7d79      	ldrb	r1, [r7, #21]
 8015e16:	7cfa      	ldrb	r2, [r7, #19]
 8015e18:	440a      	add	r2, r1
 8015e1a:	b2d2      	uxtb	r2, r2
 8015e1c:	701a      	strb	r2, [r3, #0]
 8015e1e:	e004      	b.n	8015e2a <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8015e20:	bf00      	nop
 8015e22:	e002      	b.n	8015e2a <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8015e24:	bf00      	nop
 8015e26:	e000      	b.n	8015e2a <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8015e28:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8015e2a:	7cfb      	ldrb	r3, [r7, #19]
 8015e2c:	3301      	adds	r3, #1
 8015e2e:	74fb      	strb	r3, [r7, #19]
 8015e30:	7cfb      	ldrb	r3, [r7, #19]
 8015e32:	2b0f      	cmp	r3, #15
 8015e34:	f67f af6c 	bls.w	8015d10 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8015e38:	7d7b      	ldrb	r3, [r7, #21]
 8015e3a:	3310      	adds	r3, #16
 8015e3c:	757b      	strb	r3, [r7, #21]
 8015e3e:	7d3b      	ldrb	r3, [r7, #20]
 8015e40:	3301      	adds	r3, #1
 8015e42:	753b      	strb	r3, [r7, #20]
 8015e44:	7d7b      	ldrb	r3, [r7, #21]
 8015e46:	b29a      	uxth	r2, r3
 8015e48:	68fb      	ldr	r3, [r7, #12]
 8015e4a:	8a1b      	ldrh	r3, [r3, #16]
 8015e4c:	429a      	cmp	r2, r3
 8015e4e:	f4ff af5c 	bcc.w	8015d0a <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	7dfa      	ldrb	r2, [r7, #23]
 8015e56:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8015e58:	683b      	ldr	r3, [r7, #0]
 8015e5a:	7dba      	ldrb	r2, [r7, #22]
 8015e5c:	701a      	strb	r2, [r3, #0]
}
 8015e5e:	bf00      	nop
 8015e60:	371c      	adds	r7, #28
 8015e62:	46bd      	mov	sp, r7
 8015e64:	bd90      	pop	{r4, r7, pc}

08015e66 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8015e66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e68:	b08b      	sub	sp, #44	@ 0x2c
 8015e6a:	af04      	add	r7, sp, #16
 8015e6c:	60f8      	str	r0, [r7, #12]
 8015e6e:	60b9      	str	r1, [r7, #8]
 8015e70:	607a      	str	r2, [r7, #4]
 8015e72:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	685b      	ldr	r3, [r3, #4]
 8015e78:	4618      	mov	r0, r3
 8015e7a:	f006 faf5 	bl	801c468 <UTIL_TIMER_GetElapsedTime>
 8015e7e:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	681a      	ldr	r2, [r3, #0]
 8015e84:	697b      	ldr	r3, [r7, #20]
 8015e86:	1ad2      	subs	r2, r2, r3
 8015e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015e8a:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8015e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e8e:	2201      	movs	r2, #1
 8015e90:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8015e92:	683b      	ldr	r3, [r7, #0]
 8015e94:	2200      	movs	r2, #0
 8015e96:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8015e98:	68fb      	ldr	r3, [r7, #12]
 8015e9a:	685b      	ldr	r3, [r3, #4]
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d004      	beq.n	8015eaa <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8015ea4:	697a      	ldr	r2, [r7, #20]
 8015ea6:	429a      	cmp	r2, r3
 8015ea8:	d32b      	bcc.n	8015f02 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8015eaa:	68bb      	ldr	r3, [r7, #8]
 8015eac:	2200      	movs	r2, #0
 8015eae:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8015eb0:	68fb      	ldr	r3, [r7, #12]
 8015eb2:	69db      	ldr	r3, [r3, #28]
 8015eb4:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8015eb6:	68fb      	ldr	r3, [r7, #12]
 8015eb8:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8015eba:	68dd      	ldr	r5, [r3, #12]
 8015ebc:	68fb      	ldr	r3, [r7, #12]
 8015ebe:	7a5e      	ldrb	r6, [r3, #9]
 8015ec0:	68fb      	ldr	r3, [r7, #12]
 8015ec2:	f893 c008 	ldrb.w	ip, [r3, #8]
 8015ec6:	68fb      	ldr	r3, [r7, #12]
 8015ec8:	7d1b      	ldrb	r3, [r3, #20]
 8015eca:	68fa      	ldr	r2, [r7, #12]
 8015ecc:	6992      	ldr	r2, [r2, #24]
 8015ece:	9203      	str	r2, [sp, #12]
 8015ed0:	68fa      	ldr	r2, [r7, #12]
 8015ed2:	f10d 0e04 	add.w	lr, sp, #4
 8015ed6:	320c      	adds	r2, #12
 8015ed8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015edc:	e88e 0003 	stmia.w	lr, {r0, r1}
 8015ee0:	9300      	str	r3, [sp, #0]
 8015ee2:	4663      	mov	r3, ip
 8015ee4:	4632      	mov	r2, r6
 8015ee6:	4629      	mov	r1, r5
 8015ee8:	4620      	mov	r0, r4
 8015eea:	f7ff fc25 	bl	8015738 <RegionCommonUpdateBandTimeOff>
 8015eee:	4602      	mov	r2, r0
 8015ef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015ef2:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8015ef4:	68fb      	ldr	r3, [r7, #12]
 8015ef6:	69d8      	ldr	r0, [r3, #28]
 8015ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015efa:	683a      	ldr	r2, [r7, #0]
 8015efc:	6879      	ldr	r1, [r7, #4]
 8015efe:	f7ff fef4 	bl	8015cea <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8015f02:	683b      	ldr	r3, [r7, #0]
 8015f04:	781b      	ldrb	r3, [r3, #0]
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d004      	beq.n	8015f14 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8015f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015f0c:	2200      	movs	r2, #0
 8015f0e:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8015f10:	2300      	movs	r3, #0
 8015f12:	e006      	b.n	8015f22 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8015f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f16:	781b      	ldrb	r3, [r3, #0]
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d001      	beq.n	8015f20 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8015f1c:	230b      	movs	r3, #11
 8015f1e:	e000      	b.n	8015f22 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8015f20:	230c      	movs	r3, #12
    }
}
 8015f22:	4618      	mov	r0, r3
 8015f24:	371c      	adds	r7, #28
 8015f26:	46bd      	mov	sp, r7
 8015f28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015f2a <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8015f2a:	b5b0      	push	{r4, r5, r7, lr}
 8015f2c:	b086      	sub	sp, #24
 8015f2e:	af02      	add	r7, sp, #8
 8015f30:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	781b      	ldrb	r3, [r3, #0]
 8015f36:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	f993 2000 	ldrsb.w	r2, [r3]
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8015f44:	429a      	cmp	r2, r3
 8015f46:	d103      	bne.n	8015f50 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8015f4e:	e026      	b.n	8015f9e <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8015f50:	7bfb      	ldrb	r3, [r7, #15]
 8015f52:	3b01      	subs	r3, #1
 8015f54:	b2db      	uxtb	r3, r3
 8015f56:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8015f5e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8015f62:	429a      	cmp	r2, r3
 8015f64:	d019      	beq.n	8015f9a <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	78d8      	ldrb	r0, [r3, #3]
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	6859      	ldr	r1, [r3, #4]
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015f7a:	687a      	ldr	r2, [r7, #4]
 8015f7c:	6892      	ldr	r2, [r2, #8]
 8015f7e:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8015f82:	9201      	str	r2, [sp, #4]
 8015f84:	9300      	str	r3, [sp, #0]
 8015f86:	462b      	mov	r3, r5
 8015f88:	4622      	mov	r2, r4
 8015f8a:	f7ff fa92 	bl	80154b2 <RegionCommonChanVerifyDr>
 8015f8e:	4603      	mov	r3, r0
 8015f90:	f083 0301 	eor.w	r3, r3, #1
 8015f94:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	d1da      	bne.n	8015f50 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8015f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8015f9e:	4618      	mov	r0, r3
 8015fa0:	3710      	adds	r7, #16
 8015fa2:	46bd      	mov	sp, r7
 8015fa4:	bdb0      	pop	{r4, r5, r7, pc}

08015fa6 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8015fa6:	b480      	push	{r7}
 8015fa8:	b083      	sub	sp, #12
 8015faa:	af00      	add	r7, sp, #0
 8015fac:	4603      	mov	r3, r0
 8015fae:	460a      	mov	r2, r1
 8015fb0:	71fb      	strb	r3, [r7, #7]
 8015fb2:	4613      	mov	r3, r2
 8015fb4:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8015fb6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8015fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015fbe:	4293      	cmp	r3, r2
 8015fc0:	bfb8      	it	lt
 8015fc2:	4613      	movlt	r3, r2
 8015fc4:	b25b      	sxtb	r3, r3
}
 8015fc6:	4618      	mov	r0, r3
 8015fc8:	370c      	adds	r7, #12
 8015fca:	46bd      	mov	sp, r7
 8015fcc:	bc80      	pop	{r7}
 8015fce:	4770      	bx	lr

08015fd0 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8015fd0:	b480      	push	{r7}
 8015fd2:	b083      	sub	sp, #12
 8015fd4:	af00      	add	r7, sp, #0
 8015fd6:	6078      	str	r0, [r7, #4]
 8015fd8:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	009b      	lsls	r3, r3, #2
 8015fde:	683a      	ldr	r2, [r7, #0]
 8015fe0:	4413      	add	r3, r2
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	4a07      	ldr	r2, [pc, #28]	@ (8016004 <RegionCommonGetBandwidth+0x34>)
 8015fe6:	4293      	cmp	r3, r2
 8015fe8:	d004      	beq.n	8015ff4 <RegionCommonGetBandwidth+0x24>
 8015fea:	4a07      	ldr	r2, [pc, #28]	@ (8016008 <RegionCommonGetBandwidth+0x38>)
 8015fec:	4293      	cmp	r3, r2
 8015fee:	d003      	beq.n	8015ff8 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8015ff0:	2300      	movs	r3, #0
 8015ff2:	e002      	b.n	8015ffa <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8015ff4:	2301      	movs	r3, #1
 8015ff6:	e000      	b.n	8015ffa <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8015ff8:	2302      	movs	r3, #2
    }
}
 8015ffa:	4618      	mov	r0, r3
 8015ffc:	370c      	adds	r7, #12
 8015ffe:	46bd      	mov	sp, r7
 8016000:	bc80      	pop	{r7}
 8016002:	4770      	bx	lr
 8016004:	0003d090 	.word	0x0003d090
 8016008:	0007a120 	.word	0x0007a120

0801600c <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 801600c:	b580      	push	{r7, lr}
 801600e:	b086      	sub	sp, #24
 8016010:	af04      	add	r7, sp, #16
 8016012:	4603      	mov	r3, r0
 8016014:	6039      	str	r1, [r7, #0]
 8016016:	71fb      	strb	r3, [r7, #7]
 8016018:	4613      	mov	r3, r2
 801601a:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 801601c:	79fb      	ldrb	r3, [r7, #7]
 801601e:	2b05      	cmp	r3, #5
 8016020:	d810      	bhi.n	8016044 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 8016022:	79fb      	ldrb	r3, [r7, #7]
 8016024:	4a0f      	ldr	r2, [pc, #60]	@ (8016064 <RegionCommonRxConfigPrint+0x58>)
 8016026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801602a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801602e:	9202      	str	r2, [sp, #8]
 8016030:	683a      	ldr	r2, [r7, #0]
 8016032:	9201      	str	r2, [sp, #4]
 8016034:	9300      	str	r3, [sp, #0]
 8016036:	4b0c      	ldr	r3, [pc, #48]	@ (8016068 <RegionCommonRxConfigPrint+0x5c>)
 8016038:	2201      	movs	r2, #1
 801603a:	2100      	movs	r1, #0
 801603c:	2002      	movs	r0, #2
 801603e:	f006 faf1 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8016042:	e00a      	b.n	801605a <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8016044:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016048:	9301      	str	r3, [sp, #4]
 801604a:	683b      	ldr	r3, [r7, #0]
 801604c:	9300      	str	r3, [sp, #0]
 801604e:	4b07      	ldr	r3, [pc, #28]	@ (801606c <RegionCommonRxConfigPrint+0x60>)
 8016050:	2201      	movs	r2, #1
 8016052:	2100      	movs	r1, #0
 8016054:	2002      	movs	r0, #2
 8016056:	f006 fae5 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
}
 801605a:	bf00      	nop
 801605c:	3708      	adds	r7, #8
 801605e:	46bd      	mov	sp, r7
 8016060:	bd80      	pop	{r7, pc}
 8016062:	bf00      	nop
 8016064:	2000012c 	.word	0x2000012c
 8016068:	0801d3a4 	.word	0x0801d3a4
 801606c:	0801d3c4 	.word	0x0801d3c4

08016070 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8016070:	b580      	push	{r7, lr}
 8016072:	b084      	sub	sp, #16
 8016074:	af02      	add	r7, sp, #8
 8016076:	6078      	str	r0, [r7, #4]
 8016078:	460b      	mov	r3, r1
 801607a:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 801607c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016080:	9301      	str	r3, [sp, #4]
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	9300      	str	r3, [sp, #0]
 8016086:	4b05      	ldr	r3, [pc, #20]	@ (801609c <RegionCommonTxConfigPrint+0x2c>)
 8016088:	2201      	movs	r2, #1
 801608a:	2100      	movs	r1, #0
 801608c:	2002      	movs	r0, #2
 801608e:	f006 fac9 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
}
 8016092:	bf00      	nop
 8016094:	3708      	adds	r7, #8
 8016096:	46bd      	mov	sp, r7
 8016098:	bd80      	pop	{r7, pc}
 801609a:	bf00      	nop
 801609c:	0801d3e0 	.word	0x0801d3e0

080160a0 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 80160a0:	b580      	push	{r7, lr}
 80160a2:	b082      	sub	sp, #8
 80160a4:	af00      	add	r7, sp, #0
 80160a6:	6078      	str	r0, [r7, #4]
 80160a8:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 80160aa:	4b2d      	ldr	r3, [pc, #180]	@ (8016160 <VerifyRfFreq+0xc0>)
 80160ac:	6a1b      	ldr	r3, [r3, #32]
 80160ae:	6878      	ldr	r0, [r7, #4]
 80160b0:	4798      	blx	r3
 80160b2:	4603      	mov	r3, r0
 80160b4:	f083 0301 	eor.w	r3, r3, #1
 80160b8:	b2db      	uxtb	r3, r3
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d001      	beq.n	80160c2 <VerifyRfFreq+0x22>
    {
        return false;
 80160be:	2300      	movs	r3, #0
 80160c0:	e04a      	b.n	8016158 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	4a27      	ldr	r2, [pc, #156]	@ (8016164 <VerifyRfFreq+0xc4>)
 80160c6:	4293      	cmp	r3, r2
 80160c8:	d307      	bcc.n	80160da <VerifyRfFreq+0x3a>
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	4a26      	ldr	r2, [pc, #152]	@ (8016168 <VerifyRfFreq+0xc8>)
 80160ce:	4293      	cmp	r3, r2
 80160d0:	d803      	bhi.n	80160da <VerifyRfFreq+0x3a>
    {
        *band = 2;
 80160d2:	683b      	ldr	r3, [r7, #0]
 80160d4:	2202      	movs	r2, #2
 80160d6:	701a      	strb	r2, [r3, #0]
 80160d8:	e03d      	b.n	8016156 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	4a22      	ldr	r2, [pc, #136]	@ (8016168 <VerifyRfFreq+0xc8>)
 80160de:	4293      	cmp	r3, r2
 80160e0:	d907      	bls.n	80160f2 <VerifyRfFreq+0x52>
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	4a21      	ldr	r2, [pc, #132]	@ (801616c <VerifyRfFreq+0xcc>)
 80160e6:	4293      	cmp	r3, r2
 80160e8:	d803      	bhi.n	80160f2 <VerifyRfFreq+0x52>
    {
        *band = 0;
 80160ea:	683b      	ldr	r3, [r7, #0]
 80160ec:	2200      	movs	r2, #0
 80160ee:	701a      	strb	r2, [r3, #0]
 80160f0:	e031      	b.n	8016156 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	4a1d      	ldr	r2, [pc, #116]	@ (801616c <VerifyRfFreq+0xcc>)
 80160f6:	4293      	cmp	r3, r2
 80160f8:	d907      	bls.n	801610a <VerifyRfFreq+0x6a>
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	4a1c      	ldr	r2, [pc, #112]	@ (8016170 <VerifyRfFreq+0xd0>)
 80160fe:	4293      	cmp	r3, r2
 8016100:	d803      	bhi.n	801610a <VerifyRfFreq+0x6a>
    {
        *band = 1;
 8016102:	683b      	ldr	r3, [r7, #0]
 8016104:	2201      	movs	r2, #1
 8016106:	701a      	strb	r2, [r3, #0]
 8016108:	e025      	b.n	8016156 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	4a19      	ldr	r2, [pc, #100]	@ (8016174 <VerifyRfFreq+0xd4>)
 801610e:	4293      	cmp	r3, r2
 8016110:	d907      	bls.n	8016122 <VerifyRfFreq+0x82>
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	4a18      	ldr	r2, [pc, #96]	@ (8016178 <VerifyRfFreq+0xd8>)
 8016116:	4293      	cmp	r3, r2
 8016118:	d803      	bhi.n	8016122 <VerifyRfFreq+0x82>
    {
        *band = 5;
 801611a:	683b      	ldr	r3, [r7, #0]
 801611c:	2205      	movs	r2, #5
 801611e:	701a      	strb	r2, [r3, #0]
 8016120:	e019      	b.n	8016156 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	4a15      	ldr	r2, [pc, #84]	@ (801617c <VerifyRfFreq+0xdc>)
 8016126:	4293      	cmp	r3, r2
 8016128:	d907      	bls.n	801613a <VerifyRfFreq+0x9a>
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	4a14      	ldr	r2, [pc, #80]	@ (8016180 <VerifyRfFreq+0xe0>)
 801612e:	4293      	cmp	r3, r2
 8016130:	d803      	bhi.n	801613a <VerifyRfFreq+0x9a>
    {
        *band = 3;
 8016132:	683b      	ldr	r3, [r7, #0]
 8016134:	2203      	movs	r2, #3
 8016136:	701a      	strb	r2, [r3, #0]
 8016138:	e00d      	b.n	8016156 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	4a11      	ldr	r2, [pc, #68]	@ (8016184 <VerifyRfFreq+0xe4>)
 801613e:	4293      	cmp	r3, r2
 8016140:	d307      	bcc.n	8016152 <VerifyRfFreq+0xb2>
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	4a10      	ldr	r2, [pc, #64]	@ (8016188 <VerifyRfFreq+0xe8>)
 8016146:	4293      	cmp	r3, r2
 8016148:	d803      	bhi.n	8016152 <VerifyRfFreq+0xb2>
    {
        *band = 4;
 801614a:	683b      	ldr	r3, [r7, #0]
 801614c:	2204      	movs	r2, #4
 801614e:	701a      	strb	r2, [r3, #0]
 8016150:	e001      	b.n	8016156 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 8016152:	2300      	movs	r3, #0
 8016154:	e000      	b.n	8016158 <VerifyRfFreq+0xb8>
    }
    return true;
 8016156:	2301      	movs	r3, #1
}
 8016158:	4618      	mov	r0, r3
 801615a:	3708      	adds	r7, #8
 801615c:	46bd      	mov	sp, r7
 801615e:	bd80      	pop	{r7, pc}
 8016160:	0801da80 	.word	0x0801da80
 8016164:	337055c0 	.word	0x337055c0
 8016168:	338eda3f 	.word	0x338eda3f
 801616c:	33bca100 	.word	0x33bca100
 8016170:	33c5c8c0 	.word	0x33c5c8c0
 8016174:	33c74f5f 	.word	0x33c74f5f
 8016178:	33cef080 	.word	0x33cef080
 801617c:	33d1fdbf 	.word	0x33d1fdbf
 8016180:	33d5ce50 	.word	0x33d5ce50
 8016184:	33d691a0 	.word	0x33d691a0
 8016188:	33db2580 	.word	0x33db2580

0801618c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 801618c:	b590      	push	{r4, r7, lr}
 801618e:	b08b      	sub	sp, #44	@ 0x2c
 8016190:	af04      	add	r7, sp, #16
 8016192:	4603      	mov	r3, r0
 8016194:	460a      	mov	r2, r1
 8016196:	71fb      	strb	r3, [r7, #7]
 8016198:	4613      	mov	r3, r2
 801619a:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 801619c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80161a0:	4a1f      	ldr	r2, [pc, #124]	@ (8016220 <GetTimeOnAir+0x94>)
 80161a2:	5cd3      	ldrb	r3, [r2, r3]
 80161a4:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 80161a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80161aa:	491e      	ldr	r1, [pc, #120]	@ (8016224 <GetTimeOnAir+0x98>)
 80161ac:	4618      	mov	r0, r3
 80161ae:	f7ff ff0f 	bl	8015fd0 <RegionCommonGetBandwidth>
 80161b2:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 80161b4:	2300      	movs	r3, #0
 80161b6:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 80161b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80161bc:	2b07      	cmp	r3, #7
 80161be:	d118      	bne.n	80161f2 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 80161c0:	4b19      	ldr	r3, [pc, #100]	@ (8016228 <GetTimeOnAir+0x9c>)
 80161c2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80161c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80161c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80161cc:	fb02 f303 	mul.w	r3, r2, r3
 80161d0:	4619      	mov	r1, r3
 80161d2:	88bb      	ldrh	r3, [r7, #4]
 80161d4:	b2db      	uxtb	r3, r3
 80161d6:	2201      	movs	r2, #1
 80161d8:	9203      	str	r2, [sp, #12]
 80161da:	9302      	str	r3, [sp, #8]
 80161dc:	2300      	movs	r3, #0
 80161de:	9301      	str	r3, [sp, #4]
 80161e0:	2305      	movs	r3, #5
 80161e2:	9300      	str	r3, [sp, #0]
 80161e4:	2300      	movs	r3, #0
 80161e6:	460a      	mov	r2, r1
 80161e8:	68f9      	ldr	r1, [r7, #12]
 80161ea:	2000      	movs	r0, #0
 80161ec:	47a0      	blx	r4
 80161ee:	6178      	str	r0, [r7, #20]
 80161f0:	e011      	b.n	8016216 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80161f2:	4b0d      	ldr	r3, [pc, #52]	@ (8016228 <GetTimeOnAir+0x9c>)
 80161f4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80161f6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80161fa:	88bb      	ldrh	r3, [r7, #4]
 80161fc:	b2db      	uxtb	r3, r3
 80161fe:	2101      	movs	r1, #1
 8016200:	9103      	str	r1, [sp, #12]
 8016202:	9302      	str	r3, [sp, #8]
 8016204:	2300      	movs	r3, #0
 8016206:	9301      	str	r3, [sp, #4]
 8016208:	2308      	movs	r3, #8
 801620a:	9300      	str	r3, [sp, #0]
 801620c:	2301      	movs	r3, #1
 801620e:	68f9      	ldr	r1, [r7, #12]
 8016210:	2001      	movs	r0, #1
 8016212:	47a0      	blx	r4
 8016214:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8016216:	697b      	ldr	r3, [r7, #20]
}
 8016218:	4618      	mov	r0, r3
 801621a:	371c      	adds	r7, #28
 801621c:	46bd      	mov	sp, r7
 801621e:	bd90      	pop	{r4, r7, pc}
 8016220:	0801d9c4 	.word	0x0801d9c4
 8016224:	0801d9cc 	.word	0x0801d9cc
 8016228:	0801da80 	.word	0x0801da80

0801622c <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 801622c:	b580      	push	{r7, lr}
 801622e:	b088      	sub	sp, #32
 8016230:	af00      	add	r7, sp, #0
 8016232:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8016234:	2300      	movs	r3, #0
 8016236:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	781b      	ldrb	r3, [r3, #0]
 801623c:	3b01      	subs	r3, #1
 801623e:	2b38      	cmp	r3, #56	@ 0x38
 8016240:	f200 8128 	bhi.w	8016494 <RegionEU868GetPhyParam+0x268>
 8016244:	a201      	add	r2, pc, #4	@ (adr r2, 801624c <RegionEU868GetPhyParam+0x20>)
 8016246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801624a:	bf00      	nop
 801624c:	08016331 	.word	0x08016331
 8016250:	08016337 	.word	0x08016337
 8016254:	08016495 	.word	0x08016495
 8016258:	08016495 	.word	0x08016495
 801625c:	08016495 	.word	0x08016495
 8016260:	0801633d 	.word	0x0801633d
 8016264:	08016495 	.word	0x08016495
 8016268:	08016377 	.word	0x08016377
 801626c:	08016495 	.word	0x08016495
 8016270:	0801637d 	.word	0x0801637d
 8016274:	08016383 	.word	0x08016383
 8016278:	08016389 	.word	0x08016389
 801627c:	0801638f 	.word	0x0801638f
 8016280:	0801639f 	.word	0x0801639f
 8016284:	080163af 	.word	0x080163af
 8016288:	080163b5 	.word	0x080163b5
 801628c:	080163bd 	.word	0x080163bd
 8016290:	080163c5 	.word	0x080163c5
 8016294:	080163cd 	.word	0x080163cd
 8016298:	080163d5 	.word	0x080163d5
 801629c:	080163dd 	.word	0x080163dd
 80162a0:	080163e5 	.word	0x080163e5
 80162a4:	080163f9 	.word	0x080163f9
 80162a8:	080163ff 	.word	0x080163ff
 80162ac:	08016405 	.word	0x08016405
 80162b0:	0801640b 	.word	0x0801640b
 80162b4:	08016417 	.word	0x08016417
 80162b8:	08016423 	.word	0x08016423
 80162bc:	08016429 	.word	0x08016429
 80162c0:	08016431 	.word	0x08016431
 80162c4:	08016437 	.word	0x08016437
 80162c8:	0801643d 	.word	0x0801643d
 80162cc:	08016445 	.word	0x08016445
 80162d0:	08016343 	.word	0x08016343
 80162d4:	08016495 	.word	0x08016495
 80162d8:	08016495 	.word	0x08016495
 80162dc:	08016495 	.word	0x08016495
 80162e0:	08016495 	.word	0x08016495
 80162e4:	08016495 	.word	0x08016495
 80162e8:	08016495 	.word	0x08016495
 80162ec:	08016495 	.word	0x08016495
 80162f0:	08016495 	.word	0x08016495
 80162f4:	08016495 	.word	0x08016495
 80162f8:	08016495 	.word	0x08016495
 80162fc:	08016495 	.word	0x08016495
 8016300:	08016495 	.word	0x08016495
 8016304:	08016495 	.word	0x08016495
 8016308:	0801644b 	.word	0x0801644b
 801630c:	08016451 	.word	0x08016451
 8016310:	0801645f 	.word	0x0801645f
 8016314:	08016495 	.word	0x08016495
 8016318:	08016495 	.word	0x08016495
 801631c:	08016465 	.word	0x08016465
 8016320:	0801646b 	.word	0x0801646b
 8016324:	08016495 	.word	0x08016495
 8016328:	08016471 	.word	0x08016471
 801632c:	08016481 	.word	0x08016481
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8016330:	2300      	movs	r3, #0
 8016332:	61bb      	str	r3, [r7, #24]
            break;
 8016334:	e0af      	b.n	8016496 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8016336:	2300      	movs	r3, #0
 8016338:	61bb      	str	r3, [r7, #24]
            break;
 801633a:	e0ac      	b.n	8016496 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 801633c:	2300      	movs	r3, #0
 801633e:	61bb      	str	r3, [r7, #24]
            break;
 8016340:	e0a9      	b.n	8016496 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8016348:	733b      	strb	r3, [r7, #12]
 801634a:	2307      	movs	r3, #7
 801634c:	737b      	strb	r3, [r7, #13]
 801634e:	2300      	movs	r3, #0
 8016350:	73bb      	strb	r3, [r7, #14]
 8016352:	2310      	movs	r3, #16
 8016354:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8016356:	4b53      	ldr	r3, [pc, #332]	@ (80164a4 <RegionEU868GetPhyParam+0x278>)
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801635e:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8016360:	4b50      	ldr	r3, [pc, #320]	@ (80164a4 <RegionEU868GetPhyParam+0x278>)
 8016362:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8016364:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8016366:	f107 030c 	add.w	r3, r7, #12
 801636a:	4618      	mov	r0, r3
 801636c:	f7ff fddd 	bl	8015f2a <RegionCommonGetNextLowerTxDr>
 8016370:	4603      	mov	r3, r0
 8016372:	61bb      	str	r3, [r7, #24]
            break;
 8016374:	e08f      	b.n	8016496 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8016376:	2300      	movs	r3, #0
 8016378:	61bb      	str	r3, [r7, #24]
            break;
 801637a:	e08c      	b.n	8016496 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 801637c:	2300      	movs	r3, #0
 801637e:	61bb      	str	r3, [r7, #24]
            break;
 8016380:	e089      	b.n	8016496 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8016382:	2340      	movs	r3, #64	@ 0x40
 8016384:	61bb      	str	r3, [r7, #24]
            break;
 8016386:	e086      	b.n	8016496 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8016388:	2320      	movs	r3, #32
 801638a:	61bb      	str	r3, [r7, #24]
            break;
 801638c:	e083      	b.n	8016496 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016394:	461a      	mov	r2, r3
 8016396:	4b44      	ldr	r3, [pc, #272]	@ (80164a8 <RegionEU868GetPhyParam+0x27c>)
 8016398:	5c9b      	ldrb	r3, [r3, r2]
 801639a:	61bb      	str	r3, [r7, #24]
            break;
 801639c:	e07b      	b.n	8016496 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80163a4:	461a      	mov	r2, r3
 80163a6:	4b41      	ldr	r3, [pc, #260]	@ (80164ac <RegionEU868GetPhyParam+0x280>)
 80163a8:	5c9b      	ldrb	r3, [r3, r2]
 80163aa:	61bb      	str	r3, [r7, #24]
            break;
 80163ac:	e073      	b.n	8016496 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 80163ae:	2301      	movs	r3, #1
 80163b0:	61bb      	str	r3, [r7, #24]
            break;
 80163b2:	e070      	b.n	8016496 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 80163b4:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80163b8:	61bb      	str	r3, [r7, #24]
            break;
 80163ba:	e06c      	b.n	8016496 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 80163bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80163c0:	61bb      	str	r3, [r7, #24]
            break;
 80163c2:	e068      	b.n	8016496 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 80163c4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80163c8:	61bb      	str	r3, [r7, #24]
            break;
 80163ca:	e064      	b.n	8016496 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 80163cc:	f241 3388 	movw	r3, #5000	@ 0x1388
 80163d0:	61bb      	str	r3, [r7, #24]
            break;
 80163d2:	e060      	b.n	8016496 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 80163d4:	f241 7370 	movw	r3, #6000	@ 0x1770
 80163d8:	61bb      	str	r3, [r7, #24]
            break;
 80163da:	e05c      	b.n	8016496 <RegionEU868GetPhyParam+0x26a>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 80163dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80163e0:	61bb      	str	r3, [r7, #24]
            break;
 80163e2:	e058      	b.n	8016496 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 80163e4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80163e8:	4831      	ldr	r0, [pc, #196]	@ (80164b0 <RegionEU868GetPhyParam+0x284>)
 80163ea:	f002 fae3 	bl	80189b4 <randr>
 80163ee:	4603      	mov	r3, r0
 80163f0:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80163f4:	61bb      	str	r3, [r7, #24]
            break;
 80163f6:	e04e      	b.n	8016496 <RegionEU868GetPhyParam+0x26a>
            break;
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 80163f8:	2300      	movs	r3, #0
 80163fa:	61bb      	str	r3, [r7, #24]
            break;
 80163fc:	e04b      	b.n	8016496 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 80163fe:	4b2d      	ldr	r3, [pc, #180]	@ (80164b4 <RegionEU868GetPhyParam+0x288>)
 8016400:	61bb      	str	r3, [r7, #24]
            break;
 8016402:	e048      	b.n	8016496 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8016404:	2300      	movs	r3, #0
 8016406:	61bb      	str	r3, [r7, #24]
            break;
 8016408:	e045      	b.n	8016496 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801640a:	4b26      	ldr	r3, [pc, #152]	@ (80164a4 <RegionEU868GetPhyParam+0x278>)
 801640c:	681b      	ldr	r3, [r3, #0]
 801640e:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8016412:	61bb      	str	r3, [r7, #24]
            break;
 8016414:	e03f      	b.n	8016496 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8016416:	4b23      	ldr	r3, [pc, #140]	@ (80164a4 <RegionEU868GetPhyParam+0x278>)
 8016418:	681b      	ldr	r3, [r3, #0]
 801641a:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 801641e:	61bb      	str	r3, [r7, #24]
            break;
 8016420:	e039      	b.n	8016496 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8016422:	2310      	movs	r3, #16
 8016424:	61bb      	str	r3, [r7, #24]
            break;
 8016426:	e036      	b.n	8016496 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8016428:	4b1e      	ldr	r3, [pc, #120]	@ (80164a4 <RegionEU868GetPhyParam+0x278>)
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	61bb      	str	r3, [r7, #24]
            break;
 801642e:	e032      	b.n	8016496 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8016430:	2300      	movs	r3, #0
 8016432:	61bb      	str	r3, [r7, #24]
            break;
 8016434:	e02f      	b.n	8016496 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8016436:	2300      	movs	r3, #0
 8016438:	61bb      	str	r3, [r7, #24]
            break;
 801643a:	e02c      	b.n	8016496 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 801643c:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8016440:	61bb      	str	r3, [r7, #24]
            break;
 8016442:	e028      	b.n	8016496 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8016444:	4b1c      	ldr	r3, [pc, #112]	@ (80164b8 <RegionEU868GetPhyParam+0x28c>)
 8016446:	61bb      	str	r3, [r7, #24]
            break;
 8016448:	e025      	b.n	8016496 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 801644a:	4b1a      	ldr	r3, [pc, #104]	@ (80164b4 <RegionEU868GetPhyParam+0x288>)
 801644c:	61bb      	str	r3, [r7, #24]
            break;
 801644e:	e022      	b.n	8016496 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8016450:	2311      	movs	r3, #17
 8016452:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8016454:	2302      	movs	r3, #2
 8016456:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8016458:	2300      	movs	r3, #0
 801645a:	76bb      	strb	r3, [r7, #26]
            break;
 801645c:	e01b      	b.n	8016496 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 801645e:	2303      	movs	r3, #3
 8016460:	61bb      	str	r3, [r7, #24]
            break;
 8016462:	e018      	b.n	8016496 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8016464:	4b13      	ldr	r3, [pc, #76]	@ (80164b4 <RegionEU868GetPhyParam+0x288>)
 8016466:	61bb      	str	r3, [r7, #24]
            break;
 8016468:	e015      	b.n	8016496 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 801646a:	2303      	movs	r3, #3
 801646c:	61bb      	str	r3, [r7, #24]
            break;
 801646e:	e012      	b.n	8016496 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016476:	461a      	mov	r2, r3
 8016478:	4b10      	ldr	r3, [pc, #64]	@ (80164bc <RegionEU868GetPhyParam+0x290>)
 801647a:	5c9b      	ldrb	r3, [r3, r2]
 801647c:	61bb      	str	r3, [r7, #24]
            break;
 801647e:	e00a      	b.n	8016496 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016486:	490e      	ldr	r1, [pc, #56]	@ (80164c0 <RegionEU868GetPhyParam+0x294>)
 8016488:	4618      	mov	r0, r3
 801648a:	f7ff fda1 	bl	8015fd0 <RegionCommonGetBandwidth>
 801648e:	4603      	mov	r3, r0
 8016490:	61bb      	str	r3, [r7, #24]
            break;
 8016492:	e000      	b.n	8016496 <RegionEU868GetPhyParam+0x26a>
        }
        default:
        {
            break;
 8016494:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8016496:	69bb      	ldr	r3, [r7, #24]
 8016498:	61fb      	str	r3, [r7, #28]
 801649a:	69fb      	ldr	r3, [r7, #28]
}
 801649c:	4618      	mov	r0, r3
 801649e:	3720      	adds	r7, #32
 80164a0:	46bd      	mov	sp, r7
 80164a2:	bd80      	pop	{r7, pc}
 80164a4:	20001c94 	.word	0x20001c94
 80164a8:	0801d9ec 	.word	0x0801d9ec
 80164ac:	0801d9f4 	.word	0x0801d9f4
 80164b0:	fffffc18 	.word	0xfffffc18
 80164b4:	33d3e608 	.word	0x33d3e608
 80164b8:	4009999a 	.word	0x4009999a
 80164bc:	0801d9c4 	.word	0x0801d9c4
 80164c0:	0801d9cc 	.word	0x0801d9cc

080164c4 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 80164c4:	b590      	push	{r4, r7, lr}
 80164c6:	b085      	sub	sp, #20
 80164c8:	af02      	add	r7, sp, #8
 80164ca:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 80164cc:	4b11      	ldr	r3, [pc, #68]	@ (8016514 <RegionEU868SetBandTxDone+0x50>)
 80164ce:	681a      	ldr	r2, [r3, #0]
 80164d0:	4b11      	ldr	r3, [pc, #68]	@ (8016518 <RegionEU868SetBandTxDone+0x54>)
 80164d2:	6819      	ldr	r1, [r3, #0]
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	781b      	ldrb	r3, [r3, #0]
 80164d8:	4618      	mov	r0, r3
 80164da:	4603      	mov	r3, r0
 80164dc:	005b      	lsls	r3, r3, #1
 80164de:	4403      	add	r3, r0
 80164e0:	009b      	lsls	r3, r3, #2
 80164e2:	440b      	add	r3, r1
 80164e4:	3309      	adds	r3, #9
 80164e6:	781b      	ldrb	r3, [r3, #0]
 80164e8:	4619      	mov	r1, r3
 80164ea:	460b      	mov	r3, r1
 80164ec:	005b      	lsls	r3, r3, #1
 80164ee:	440b      	add	r3, r1
 80164f0:	00db      	lsls	r3, r3, #3
 80164f2:	18d0      	adds	r0, r2, r3
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	6899      	ldr	r1, [r3, #8]
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	785c      	ldrb	r4, [r3, #1]
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	691a      	ldr	r2, [r3, #16]
 8016500:	9200      	str	r2, [sp, #0]
 8016502:	68db      	ldr	r3, [r3, #12]
 8016504:	4622      	mov	r2, r4
 8016506:	f7ff f8e9 	bl	80156dc <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 801650a:	bf00      	nop
 801650c:	370c      	adds	r7, #12
 801650e:	46bd      	mov	sp, r7
 8016510:	bd90      	pop	{r4, r7, pc}
 8016512:	bf00      	nop
 8016514:	20001c90 	.word	0x20001c90
 8016518:	20001c94 	.word	0x20001c94

0801651c <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 801651c:	b580      	push	{r7, lr}
 801651e:	b0b0      	sub	sp, #192	@ 0xc0
 8016520:	af00      	add	r7, sp, #0
 8016522:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8016524:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8016528:	2290      	movs	r2, #144	@ 0x90
 801652a:	2100      	movs	r1, #0
 801652c:	4618      	mov	r0, r3
 801652e:	f006 faf1 	bl	801cb14 <memset>
 8016532:	2364      	movs	r3, #100	@ 0x64
 8016534:	863b      	strh	r3, [r7, #48]	@ 0x30
 8016536:	2364      	movs	r3, #100	@ 0x64
 8016538:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 801653c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8016540:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8016544:	230a      	movs	r3, #10
 8016546:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
 801654a:	2364      	movs	r3, #100	@ 0x64
 801654c:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8016550:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8016554:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	7a1b      	ldrb	r3, [r3, #8]
 801655c:	2b02      	cmp	r3, #2
 801655e:	d05e      	beq.n	801661e <RegionEU868InitDefaults+0x102>
 8016560:	2b02      	cmp	r3, #2
 8016562:	dc6b      	bgt.n	801663c <RegionEU868InitDefaults+0x120>
 8016564:	2b00      	cmp	r3, #0
 8016566:	d002      	beq.n	801656e <RegionEU868InitDefaults+0x52>
 8016568:	2b01      	cmp	r3, #1
 801656a:	d03f      	beq.n	80165ec <RegionEU868InitDefaults+0xd0>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 801656c:	e066      	b.n	801663c <RegionEU868InitDefaults+0x120>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	681b      	ldr	r3, [r3, #0]
 8016572:	2b00      	cmp	r3, #0
 8016574:	d063      	beq.n	801663e <RegionEU868InitDefaults+0x122>
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	685b      	ldr	r3, [r3, #4]
 801657a:	2b00      	cmp	r3, #0
 801657c:	d05f      	beq.n	801663e <RegionEU868InitDefaults+0x122>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	681b      	ldr	r3, [r3, #0]
 8016582:	4a30      	ldr	r2, [pc, #192]	@ (8016644 <RegionEU868InitDefaults+0x128>)
 8016584:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	685b      	ldr	r3, [r3, #4]
 801658a:	4a2f      	ldr	r2, [pc, #188]	@ (8016648 <RegionEU868InitDefaults+0x12c>)
 801658c:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 801658e:	4b2d      	ldr	r3, [pc, #180]	@ (8016644 <RegionEU868InitDefaults+0x128>)
 8016590:	681b      	ldr	r3, [r3, #0]
 8016592:	4618      	mov	r0, r3
 8016594:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8016598:	2290      	movs	r2, #144	@ 0x90
 801659a:	4619      	mov	r1, r3
 801659c:	f002 fa21 	bl	80189e2 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 80165a0:	4b29      	ldr	r3, [pc, #164]	@ (8016648 <RegionEU868InitDefaults+0x12c>)
 80165a2:	681b      	ldr	r3, [r3, #0]
 80165a4:	4a29      	ldr	r2, [pc, #164]	@ (801664c <RegionEU868InitDefaults+0x130>)
 80165a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80165a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 80165ac:	4b26      	ldr	r3, [pc, #152]	@ (8016648 <RegionEU868InitDefaults+0x12c>)
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	4a27      	ldr	r2, [pc, #156]	@ (8016650 <RegionEU868InitDefaults+0x134>)
 80165b2:	330c      	adds	r3, #12
 80165b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80165b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 80165ba:	4b23      	ldr	r3, [pc, #140]	@ (8016648 <RegionEU868InitDefaults+0x12c>)
 80165bc:	681b      	ldr	r3, [r3, #0]
 80165be:	4a25      	ldr	r2, [pc, #148]	@ (8016654 <RegionEU868InitDefaults+0x138>)
 80165c0:	3318      	adds	r3, #24
 80165c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80165c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 80165c8:	4b1f      	ldr	r3, [pc, #124]	@ (8016648 <RegionEU868InitDefaults+0x12c>)
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	2207      	movs	r2, #7
 80165ce:	f8a3 248c 	strh.w	r2, [r3, #1164]	@ 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80165d2:	4b1d      	ldr	r3, [pc, #116]	@ (8016648 <RegionEU868InitDefaults+0x12c>)
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 80165da:	4b1b      	ldr	r3, [pc, #108]	@ (8016648 <RegionEU868InitDefaults+0x12c>)
 80165dc:	681b      	ldr	r3, [r3, #0]
 80165de:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 80165e2:	2201      	movs	r2, #1
 80165e4:	4619      	mov	r1, r3
 80165e6:	f7ff f853 	bl	8015690 <RegionCommonChanMaskCopy>
 80165ea:	e028      	b.n	801663e <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 80165ec:	4b16      	ldr	r3, [pc, #88]	@ (8016648 <RegionEU868InitDefaults+0x12c>)
 80165ee:	681b      	ldr	r3, [r3, #0]
 80165f0:	2200      	movs	r2, #0
 80165f2:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 80165f4:	4b14      	ldr	r3, [pc, #80]	@ (8016648 <RegionEU868InitDefaults+0x12c>)
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	2200      	movs	r2, #0
 80165fa:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 80165fc:	4b12      	ldr	r3, [pc, #72]	@ (8016648 <RegionEU868InitDefaults+0x12c>)
 80165fe:	681b      	ldr	r3, [r3, #0]
 8016600:	2200      	movs	r2, #0
 8016602:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8016604:	4b10      	ldr	r3, [pc, #64]	@ (8016648 <RegionEU868InitDefaults+0x12c>)
 8016606:	681b      	ldr	r3, [r3, #0]
 8016608:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 801660c:	4b0e      	ldr	r3, [pc, #56]	@ (8016648 <RegionEU868InitDefaults+0x12c>)
 801660e:	681b      	ldr	r3, [r3, #0]
 8016610:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 8016614:	2201      	movs	r2, #1
 8016616:	4619      	mov	r1, r3
 8016618:	f7ff f83a 	bl	8015690 <RegionCommonChanMaskCopy>
            break;
 801661c:	e00f      	b.n	801663e <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 801661e:	4b0a      	ldr	r3, [pc, #40]	@ (8016648 <RegionEU868InitDefaults+0x12c>)
 8016620:	681b      	ldr	r3, [r3, #0]
 8016622:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	@ 0x480
 8016626:	4b08      	ldr	r3, [pc, #32]	@ (8016648 <RegionEU868InitDefaults+0x12c>)
 8016628:	681b      	ldr	r3, [r3, #0]
 801662a:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	@ 0x48c
 801662e:	4b06      	ldr	r3, [pc, #24]	@ (8016648 <RegionEU868InitDefaults+0x12c>)
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	430a      	orrs	r2, r1
 8016634:	b292      	uxth	r2, r2
 8016636:	f8a3 2480 	strh.w	r2, [r3, #1152]	@ 0x480
            break;
 801663a:	e000      	b.n	801663e <RegionEU868InitDefaults+0x122>
            break;
 801663c:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 801663e:	37c0      	adds	r7, #192	@ 0xc0
 8016640:	46bd      	mov	sp, r7
 8016642:	bd80      	pop	{r7, pc}
 8016644:	20001c90 	.word	0x20001c90
 8016648:	20001c94 	.word	0x20001c94
 801664c:	0801d3fc 	.word	0x0801d3fc
 8016650:	0801d408 	.word	0x0801d408
 8016654:	0801d414 	.word	0x0801d414

08016658 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8016658:	b580      	push	{r7, lr}
 801665a:	b084      	sub	sp, #16
 801665c:	af00      	add	r7, sp, #0
 801665e:	6078      	str	r0, [r7, #4]
 8016660:	460b      	mov	r3, r1
 8016662:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8016664:	78fb      	ldrb	r3, [r7, #3]
 8016666:	2b0f      	cmp	r3, #15
 8016668:	d86c      	bhi.n	8016744 <RegionEU868Verify+0xec>
 801666a:	a201      	add	r2, pc, #4	@ (adr r2, 8016670 <RegionEU868Verify+0x18>)
 801666c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016670:	080166b1 	.word	0x080166b1
 8016674:	08016745 	.word	0x08016745
 8016678:	08016745 	.word	0x08016745
 801667c:	08016745 	.word	0x08016745
 8016680:	08016745 	.word	0x08016745
 8016684:	080166c9 	.word	0x080166c9
 8016688:	080166e7 	.word	0x080166e7
 801668c:	08016705 	.word	0x08016705
 8016690:	08016745 	.word	0x08016745
 8016694:	08016723 	.word	0x08016723
 8016698:	08016723 	.word	0x08016723
 801669c:	08016745 	.word	0x08016745
 80166a0:	08016745 	.word	0x08016745
 80166a4:	08016745 	.word	0x08016745
 80166a8:	08016745 	.word	0x08016745
 80166ac:	08016741 	.word	0x08016741
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 80166b0:	2300      	movs	r3, #0
 80166b2:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	681b      	ldr	r3, [r3, #0]
 80166b8:	f107 020f 	add.w	r2, r7, #15
 80166bc:	4611      	mov	r1, r2
 80166be:	4618      	mov	r0, r3
 80166c0:	f7ff fcee 	bl	80160a0 <VerifyRfFreq>
 80166c4:	4603      	mov	r3, r0
 80166c6:	e03e      	b.n	8016746 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	f993 3000 	ldrsb.w	r3, [r3]
 80166ce:	2207      	movs	r2, #7
 80166d0:	2100      	movs	r1, #0
 80166d2:	4618      	mov	r0, r3
 80166d4:	f7fe ff5f 	bl	8015596 <RegionCommonValueInRange>
 80166d8:	4603      	mov	r3, r0
 80166da:	2b00      	cmp	r3, #0
 80166dc:	bf14      	ite	ne
 80166de:	2301      	movne	r3, #1
 80166e0:	2300      	moveq	r3, #0
 80166e2:	b2db      	uxtb	r3, r3
 80166e4:	e02f      	b.n	8016746 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	f993 3000 	ldrsb.w	r3, [r3]
 80166ec:	2205      	movs	r2, #5
 80166ee:	2100      	movs	r1, #0
 80166f0:	4618      	mov	r0, r3
 80166f2:	f7fe ff50 	bl	8015596 <RegionCommonValueInRange>
 80166f6:	4603      	mov	r3, r0
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	bf14      	ite	ne
 80166fc:	2301      	movne	r3, #1
 80166fe:	2300      	moveq	r3, #0
 8016700:	b2db      	uxtb	r3, r3
 8016702:	e020      	b.n	8016746 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	f993 3000 	ldrsb.w	r3, [r3]
 801670a:	2207      	movs	r2, #7
 801670c:	2100      	movs	r1, #0
 801670e:	4618      	mov	r0, r3
 8016710:	f7fe ff41 	bl	8015596 <RegionCommonValueInRange>
 8016714:	4603      	mov	r3, r0
 8016716:	2b00      	cmp	r3, #0
 8016718:	bf14      	ite	ne
 801671a:	2301      	movne	r3, #1
 801671c:	2300      	moveq	r3, #0
 801671e:	b2db      	uxtb	r3, r3
 8016720:	e011      	b.n	8016746 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	f993 3000 	ldrsb.w	r3, [r3]
 8016728:	2207      	movs	r2, #7
 801672a:	2100      	movs	r1, #0
 801672c:	4618      	mov	r0, r3
 801672e:	f7fe ff32 	bl	8015596 <RegionCommonValueInRange>
 8016732:	4603      	mov	r3, r0
 8016734:	2b00      	cmp	r3, #0
 8016736:	bf14      	ite	ne
 8016738:	2301      	movne	r3, #1
 801673a:	2300      	moveq	r3, #0
 801673c:	b2db      	uxtb	r3, r3
 801673e:	e002      	b.n	8016746 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8016740:	2301      	movs	r3, #1
 8016742:	e000      	b.n	8016746 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8016744:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8016746:	4618      	mov	r0, r3
 8016748:	3710      	adds	r7, #16
 801674a:	46bd      	mov	sp, r7
 801674c:	bd80      	pop	{r7, pc}
 801674e:	bf00      	nop

08016750 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8016750:	b580      	push	{r7, lr}
 8016752:	b08a      	sub	sp, #40	@ 0x28
 8016754:	af00      	add	r7, sp, #0
 8016756:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8016758:	2350      	movs	r3, #80	@ 0x50
 801675a:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	791b      	ldrb	r3, [r3, #4]
 8016762:	2b10      	cmp	r3, #16
 8016764:	d162      	bne.n	801682c <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	681b      	ldr	r3, [r3, #0]
 801676a:	330f      	adds	r3, #15
 801676c:	781b      	ldrb	r3, [r3, #0]
 801676e:	2b00      	cmp	r3, #0
 8016770:	d15e      	bne.n	8016830 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8016772:	2300      	movs	r3, #0
 8016774:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016778:	2303      	movs	r3, #3
 801677a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801677e:	e050      	b.n	8016822 <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8016780:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016784:	2b07      	cmp	r3, #7
 8016786:	d824      	bhi.n	80167d2 <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	681a      	ldr	r2, [r3, #0]
 801678c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016790:	4413      	add	r3, r2
 8016792:	781b      	ldrb	r3, [r3, #0]
 8016794:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8016796:	69ba      	ldr	r2, [r7, #24]
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	6819      	ldr	r1, [r3, #0]
 801679c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80167a0:	3301      	adds	r3, #1
 80167a2:	440b      	add	r3, r1
 80167a4:	781b      	ldrb	r3, [r3, #0]
 80167a6:	021b      	lsls	r3, r3, #8
 80167a8:	4313      	orrs	r3, r2
 80167aa:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 80167ac:	69ba      	ldr	r2, [r7, #24]
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	6819      	ldr	r1, [r3, #0]
 80167b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80167b6:	3302      	adds	r3, #2
 80167b8:	440b      	add	r3, r1
 80167ba:	781b      	ldrb	r3, [r3, #0]
 80167bc:	041b      	lsls	r3, r3, #16
 80167be:	4313      	orrs	r3, r2
 80167c0:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 80167c2:	69bb      	ldr	r3, [r7, #24]
 80167c4:	2264      	movs	r2, #100	@ 0x64
 80167c6:	fb02 f303 	mul.w	r3, r2, r3
 80167ca:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 80167cc:	2300      	movs	r3, #0
 80167ce:	61fb      	str	r3, [r7, #28]
 80167d0:	e006      	b.n	80167e0 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 80167d2:	2300      	movs	r3, #0
 80167d4:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 80167d6:	2300      	movs	r3, #0
 80167d8:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 80167dc:	2300      	movs	r3, #0
 80167de:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 80167e0:	69bb      	ldr	r3, [r7, #24]
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d00b      	beq.n	80167fe <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 80167e6:	f107 0318 	add.w	r3, r7, #24
 80167ea:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 80167ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80167f0:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 80167f2:	f107 0310 	add.w	r3, r7, #16
 80167f6:	4618      	mov	r0, r3
 80167f8:	f000 fd14 	bl	8017224 <RegionEU868ChannelAdd>
 80167fc:	e007      	b.n	801680e <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 80167fe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016802:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8016804:	f107 030c 	add.w	r3, r7, #12
 8016808:	4618      	mov	r0, r3
 801680a:	f000 fdad 	bl	8017368 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801680e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016812:	3303      	adds	r3, #3
 8016814:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016818:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801681c:	3301      	adds	r3, #1
 801681e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8016822:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016826:	2b0f      	cmp	r3, #15
 8016828:	d9aa      	bls.n	8016780 <RegionEU868ApplyCFList+0x30>
 801682a:	e002      	b.n	8016832 <RegionEU868ApplyCFList+0xe2>
        return;
 801682c:	bf00      	nop
 801682e:	e000      	b.n	8016832 <RegionEU868ApplyCFList+0xe2>
        return;
 8016830:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8016832:	3728      	adds	r7, #40	@ 0x28
 8016834:	46bd      	mov	sp, r7
 8016836:	bd80      	pop	{r7, pc}

08016838 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8016838:	b580      	push	{r7, lr}
 801683a:	b082      	sub	sp, #8
 801683c:	af00      	add	r7, sp, #0
 801683e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	791b      	ldrb	r3, [r3, #4]
 8016844:	2b00      	cmp	r3, #0
 8016846:	d002      	beq.n	801684e <RegionEU868ChanMaskSet+0x16>
 8016848:	2b01      	cmp	r3, #1
 801684a:	d00b      	beq.n	8016864 <RegionEU868ChanMaskSet+0x2c>
 801684c:	e015      	b.n	801687a <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801684e:	4b0e      	ldr	r3, [pc, #56]	@ (8016888 <RegionEU868ChanMaskSet+0x50>)
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	681b      	ldr	r3, [r3, #0]
 801685a:	2201      	movs	r2, #1
 801685c:	4619      	mov	r1, r3
 801685e:	f7fe ff17 	bl	8015690 <RegionCommonChanMaskCopy>
            break;
 8016862:	e00c      	b.n	801687e <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8016864:	4b08      	ldr	r3, [pc, #32]	@ (8016888 <RegionEU868ChanMaskSet+0x50>)
 8016866:	681b      	ldr	r3, [r3, #0]
 8016868:	f203 408c 	addw	r0, r3, #1164	@ 0x48c
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	2201      	movs	r2, #1
 8016872:	4619      	mov	r1, r3
 8016874:	f7fe ff0c 	bl	8015690 <RegionCommonChanMaskCopy>
            break;
 8016878:	e001      	b.n	801687e <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 801687a:	2300      	movs	r3, #0
 801687c:	e000      	b.n	8016880 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 801687e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8016880:	4618      	mov	r0, r3
 8016882:	3708      	adds	r7, #8
 8016884:	46bd      	mov	sp, r7
 8016886:	bd80      	pop	{r7, pc}
 8016888:	20001c94 	.word	0x20001c94

0801688c <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801688c:	b580      	push	{r7, lr}
 801688e:	b088      	sub	sp, #32
 8016890:	af02      	add	r7, sp, #8
 8016892:	60ba      	str	r2, [r7, #8]
 8016894:	607b      	str	r3, [r7, #4]
 8016896:	4603      	mov	r3, r0
 8016898:	73fb      	strb	r3, [r7, #15]
 801689a:	460b      	mov	r3, r1
 801689c:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 801689e:	2300      	movs	r3, #0
 80168a0:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 80168a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80168a6:	2b07      	cmp	r3, #7
 80168a8:	bfa8      	it	ge
 80168aa:	2307      	movge	r3, #7
 80168ac:	b25a      	sxtb	r2, r3
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80168b8:	491e      	ldr	r1, [pc, #120]	@ (8016934 <RegionEU868ComputeRxWindowParameters+0xa8>)
 80168ba:	4618      	mov	r0, r3
 80168bc:	f7ff fb88 	bl	8015fd0 <RegionCommonGetBandwidth>
 80168c0:	4603      	mov	r3, r0
 80168c2:	b2da      	uxtb	r2, r3
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80168ce:	2b07      	cmp	r3, #7
 80168d0:	d10a      	bne.n	80168e8 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80168d8:	461a      	mov	r2, r3
 80168da:	4b17      	ldr	r3, [pc, #92]	@ (8016938 <RegionEU868ComputeRxWindowParameters+0xac>)
 80168dc:	5c9b      	ldrb	r3, [r3, r2]
 80168de:	4618      	mov	r0, r3
 80168e0:	f7ff f90a 	bl	8015af8 <RegionCommonComputeSymbolTimeFsk>
 80168e4:	6178      	str	r0, [r7, #20]
 80168e6:	e011      	b.n	801690c <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80168ee:	461a      	mov	r2, r3
 80168f0:	4b11      	ldr	r3, [pc, #68]	@ (8016938 <RegionEU868ComputeRxWindowParameters+0xac>)
 80168f2:	5c9a      	ldrb	r2, [r3, r2]
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80168fa:	4619      	mov	r1, r3
 80168fc:	4b0d      	ldr	r3, [pc, #52]	@ (8016934 <RegionEU868ComputeRxWindowParameters+0xa8>)
 80168fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016902:	4619      	mov	r1, r3
 8016904:	4610      	mov	r0, r2
 8016906:	f7ff f8e1 	bl	8015acc <RegionCommonComputeSymbolTimeLoRa>
 801690a:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 801690c:	4b0b      	ldr	r3, [pc, #44]	@ (801693c <RegionEU868ComputeRxWindowParameters+0xb0>)
 801690e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016910:	4798      	blx	r3
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	3308      	adds	r3, #8
 8016916:	687a      	ldr	r2, [r7, #4]
 8016918:	320c      	adds	r2, #12
 801691a:	7bb9      	ldrb	r1, [r7, #14]
 801691c:	9201      	str	r2, [sp, #4]
 801691e:	9300      	str	r3, [sp, #0]
 8016920:	4603      	mov	r3, r0
 8016922:	68ba      	ldr	r2, [r7, #8]
 8016924:	6978      	ldr	r0, [r7, #20]
 8016926:	f7ff f8f7 	bl	8015b18 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 801692a:	bf00      	nop
 801692c:	3718      	adds	r7, #24
 801692e:	46bd      	mov	sp, r7
 8016930:	bd80      	pop	{r7, pc}
 8016932:	bf00      	nop
 8016934:	0801d9cc 	.word	0x0801d9cc
 8016938:	0801d9c4 	.word	0x0801d9c4
 801693c:	0801da80 	.word	0x0801da80

08016940 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8016940:	b5b0      	push	{r4, r5, r7, lr}
 8016942:	b090      	sub	sp, #64	@ 0x40
 8016944:	af0a      	add	r7, sp, #40	@ 0x28
 8016946:	6078      	str	r0, [r7, #4]
 8016948:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	785b      	ldrb	r3, [r3, #1]
 801694e:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8016950:	2300      	movs	r3, #0
 8016952:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8016954:	2300      	movs	r3, #0
 8016956:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	685b      	ldr	r3, [r3, #4]
 801695c:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801695e:	4b5a      	ldr	r3, [pc, #360]	@ (8016ac8 <RegionEU868RxConfig+0x188>)
 8016960:	685b      	ldr	r3, [r3, #4]
 8016962:	4798      	blx	r3
 8016964:	4603      	mov	r3, r0
 8016966:	2b00      	cmp	r3, #0
 8016968:	d001      	beq.n	801696e <RegionEU868RxConfig+0x2e>
    {
        return false;
 801696a:	2300      	movs	r3, #0
 801696c:	e0a8      	b.n	8016ac0 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	7cdb      	ldrb	r3, [r3, #19]
 8016972:	2b00      	cmp	r3, #0
 8016974:	d126      	bne.n	80169c4 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8016976:	4b55      	ldr	r3, [pc, #340]	@ (8016acc <RegionEU868RxConfig+0x18c>)
 8016978:	681a      	ldr	r2, [r3, #0]
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	781b      	ldrb	r3, [r3, #0]
 801697e:	4619      	mov	r1, r3
 8016980:	460b      	mov	r3, r1
 8016982:	005b      	lsls	r3, r3, #1
 8016984:	440b      	add	r3, r1
 8016986:	009b      	lsls	r3, r3, #2
 8016988:	4413      	add	r3, r2
 801698a:	681b      	ldr	r3, [r3, #0]
 801698c:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 801698e:	4b4f      	ldr	r3, [pc, #316]	@ (8016acc <RegionEU868RxConfig+0x18c>)
 8016990:	681a      	ldr	r2, [r3, #0]
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	781b      	ldrb	r3, [r3, #0]
 8016996:	4619      	mov	r1, r3
 8016998:	460b      	mov	r3, r1
 801699a:	005b      	lsls	r3, r3, #1
 801699c:	440b      	add	r3, r1
 801699e:	009b      	lsls	r3, r3, #2
 80169a0:	4413      	add	r3, r2
 80169a2:	3304      	adds	r3, #4
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	d00c      	beq.n	80169c4 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 80169aa:	4b48      	ldr	r3, [pc, #288]	@ (8016acc <RegionEU868RxConfig+0x18c>)
 80169ac:	681a      	ldr	r2, [r3, #0]
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	781b      	ldrb	r3, [r3, #0]
 80169b2:	4619      	mov	r1, r3
 80169b4:	460b      	mov	r3, r1
 80169b6:	005b      	lsls	r3, r3, #1
 80169b8:	440b      	add	r3, r1
 80169ba:	009b      	lsls	r3, r3, #2
 80169bc:	4413      	add	r3, r2
 80169be:	3304      	adds	r3, #4
 80169c0:	681b      	ldr	r3, [r3, #0]
 80169c2:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 80169c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80169c8:	4a41      	ldr	r2, [pc, #260]	@ (8016ad0 <RegionEU868RxConfig+0x190>)
 80169ca:	5cd3      	ldrb	r3, [r2, r3]
 80169cc:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 80169ce:	4b3e      	ldr	r3, [pc, #248]	@ (8016ac8 <RegionEU868RxConfig+0x188>)
 80169d0:	68db      	ldr	r3, [r3, #12]
 80169d2:	6938      	ldr	r0, [r7, #16]
 80169d4:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 80169d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80169da:	2b07      	cmp	r3, #7
 80169dc:	d128      	bne.n	8016a30 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 80169de:	2300      	movs	r3, #0
 80169e0:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 80169e2:	4b39      	ldr	r3, [pc, #228]	@ (8016ac8 <RegionEU868RxConfig+0x188>)
 80169e4:	699c      	ldr	r4, [r3, #24]
 80169e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80169ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80169ee:	fb02 f303 	mul.w	r3, r2, r3
 80169f2:	4619      	mov	r1, r3
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	689b      	ldr	r3, [r3, #8]
 80169f8:	b29b      	uxth	r3, r3
 80169fa:	687a      	ldr	r2, [r7, #4]
 80169fc:	7c92      	ldrb	r2, [r2, #18]
 80169fe:	7df8      	ldrb	r0, [r7, #23]
 8016a00:	9209      	str	r2, [sp, #36]	@ 0x24
 8016a02:	2200      	movs	r2, #0
 8016a04:	9208      	str	r2, [sp, #32]
 8016a06:	2200      	movs	r2, #0
 8016a08:	9207      	str	r2, [sp, #28]
 8016a0a:	2200      	movs	r2, #0
 8016a0c:	9206      	str	r2, [sp, #24]
 8016a0e:	2201      	movs	r2, #1
 8016a10:	9205      	str	r2, [sp, #20]
 8016a12:	2200      	movs	r2, #0
 8016a14:	9204      	str	r2, [sp, #16]
 8016a16:	2200      	movs	r2, #0
 8016a18:	9203      	str	r2, [sp, #12]
 8016a1a:	9302      	str	r3, [sp, #8]
 8016a1c:	2305      	movs	r3, #5
 8016a1e:	9301      	str	r3, [sp, #4]
 8016a20:	4b2c      	ldr	r3, [pc, #176]	@ (8016ad4 <RegionEU868RxConfig+0x194>)
 8016a22:	9300      	str	r3, [sp, #0]
 8016a24:	2300      	movs	r3, #0
 8016a26:	460a      	mov	r2, r1
 8016a28:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8016a2c:	47a0      	blx	r4
 8016a2e:	e024      	b.n	8016a7a <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8016a30:	2301      	movs	r3, #1
 8016a32:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8016a34:	4b24      	ldr	r3, [pc, #144]	@ (8016ac8 <RegionEU868RxConfig+0x188>)
 8016a36:	699c      	ldr	r4, [r3, #24]
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	789b      	ldrb	r3, [r3, #2]
 8016a3c:	461d      	mov	r5, r3
 8016a3e:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	689b      	ldr	r3, [r3, #8]
 8016a46:	b29b      	uxth	r3, r3
 8016a48:	687a      	ldr	r2, [r7, #4]
 8016a4a:	7c92      	ldrb	r2, [r2, #18]
 8016a4c:	7df8      	ldrb	r0, [r7, #23]
 8016a4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8016a50:	2201      	movs	r2, #1
 8016a52:	9208      	str	r2, [sp, #32]
 8016a54:	2200      	movs	r2, #0
 8016a56:	9207      	str	r2, [sp, #28]
 8016a58:	2200      	movs	r2, #0
 8016a5a:	9206      	str	r2, [sp, #24]
 8016a5c:	2200      	movs	r2, #0
 8016a5e:	9205      	str	r2, [sp, #20]
 8016a60:	2200      	movs	r2, #0
 8016a62:	9204      	str	r2, [sp, #16]
 8016a64:	2200      	movs	r2, #0
 8016a66:	9203      	str	r2, [sp, #12]
 8016a68:	9302      	str	r3, [sp, #8]
 8016a6a:	2308      	movs	r3, #8
 8016a6c:	9301      	str	r3, [sp, #4]
 8016a6e:	2300      	movs	r3, #0
 8016a70:	9300      	str	r3, [sp, #0]
 8016a72:	2301      	movs	r3, #1
 8016a74:	460a      	mov	r2, r1
 8016a76:	4629      	mov	r1, r5
 8016a78:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	7c5b      	ldrb	r3, [r3, #17]
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d005      	beq.n	8016a8e <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8016a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016a86:	4a14      	ldr	r2, [pc, #80]	@ (8016ad8 <RegionEU868RxConfig+0x198>)
 8016a88:	5cd3      	ldrb	r3, [r2, r3]
 8016a8a:	75bb      	strb	r3, [r7, #22]
 8016a8c:	e004      	b.n	8016a98 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8016a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016a92:	4a12      	ldr	r2, [pc, #72]	@ (8016adc <RegionEU868RxConfig+0x19c>)
 8016a94:	5cd3      	ldrb	r3, [r2, r3]
 8016a96:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8016a98:	4b0b      	ldr	r3, [pc, #44]	@ (8016ac8 <RegionEU868RxConfig+0x188>)
 8016a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016a9c:	7dba      	ldrb	r2, [r7, #22]
 8016a9e:	320d      	adds	r2, #13
 8016aa0:	b2d1      	uxtb	r1, r2
 8016aa2:	7dfa      	ldrb	r2, [r7, #23]
 8016aa4:	4610      	mov	r0, r2
 8016aa6:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	7cdb      	ldrb	r3, [r3, #19]
 8016aac:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8016ab0:	6939      	ldr	r1, [r7, #16]
 8016ab2:	4618      	mov	r0, r3
 8016ab4:	f7ff faaa 	bl	801600c <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 8016ab8:	683b      	ldr	r3, [r7, #0]
 8016aba:	7bfa      	ldrb	r2, [r7, #15]
 8016abc:	701a      	strb	r2, [r3, #0]
    return true;
 8016abe:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8016ac0:	4618      	mov	r0, r3
 8016ac2:	3718      	adds	r7, #24
 8016ac4:	46bd      	mov	sp, r7
 8016ac6:	bdb0      	pop	{r4, r5, r7, pc}
 8016ac8:	0801da80 	.word	0x0801da80
 8016acc:	20001c94 	.word	0x20001c94
 8016ad0:	0801d9c4 	.word	0x0801d9c4
 8016ad4:	00014585 	.word	0x00014585
 8016ad8:	0801d9f4 	.word	0x0801d9f4
 8016adc:	0801d9ec 	.word	0x0801d9ec

08016ae0 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8016ae0:	b590      	push	{r4, r7, lr}
 8016ae2:	b093      	sub	sp, #76	@ 0x4c
 8016ae4:	af0a      	add	r7, sp, #40	@ 0x28
 8016ae6:	60f8      	str	r0, [r7, #12]
 8016ae8:	60b9      	str	r1, [r7, #8]
 8016aea:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8016aec:	68fb      	ldr	r3, [r7, #12]
 8016aee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016af2:	461a      	mov	r2, r3
 8016af4:	4b5d      	ldr	r3, [pc, #372]	@ (8016c6c <RegionEU868TxConfig+0x18c>)
 8016af6:	5c9b      	ldrb	r3, [r3, r2]
 8016af8:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8016afa:	68fb      	ldr	r3, [r7, #12]
 8016afc:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8016b00:	4b5b      	ldr	r3, [pc, #364]	@ (8016c70 <RegionEU868TxConfig+0x190>)
 8016b02:	681a      	ldr	r2, [r3, #0]
 8016b04:	4b5b      	ldr	r3, [pc, #364]	@ (8016c74 <RegionEU868TxConfig+0x194>)
 8016b06:	6819      	ldr	r1, [r3, #0]
 8016b08:	68fb      	ldr	r3, [r7, #12]
 8016b0a:	781b      	ldrb	r3, [r3, #0]
 8016b0c:	461c      	mov	r4, r3
 8016b0e:	4623      	mov	r3, r4
 8016b10:	005b      	lsls	r3, r3, #1
 8016b12:	4423      	add	r3, r4
 8016b14:	009b      	lsls	r3, r3, #2
 8016b16:	440b      	add	r3, r1
 8016b18:	3309      	adds	r3, #9
 8016b1a:	781b      	ldrb	r3, [r3, #0]
 8016b1c:	4619      	mov	r1, r3
 8016b1e:	460b      	mov	r3, r1
 8016b20:	005b      	lsls	r3, r3, #1
 8016b22:	440b      	add	r3, r1
 8016b24:	00db      	lsls	r3, r3, #3
 8016b26:	4413      	add	r3, r2
 8016b28:	3302      	adds	r3, #2
 8016b2a:	f993 3000 	ldrsb.w	r3, [r3]
 8016b2e:	4619      	mov	r1, r3
 8016b30:	f7ff fa39 	bl	8015fa6 <RegionCommonLimitTxPower>
 8016b34:	4603      	mov	r3, r0
 8016b36:	777b      	strb	r3, [r7, #29]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8016b38:	68fb      	ldr	r3, [r7, #12]
 8016b3a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016b3e:	494e      	ldr	r1, [pc, #312]	@ (8016c78 <RegionEU868TxConfig+0x198>)
 8016b40:	4618      	mov	r0, r3
 8016b42:	f7ff fa45 	bl	8015fd0 <RegionCommonGetBandwidth>
 8016b46:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8016b48:	2300      	movs	r3, #0
 8016b4a:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8016b4c:	68fb      	ldr	r3, [r7, #12]
 8016b4e:	6859      	ldr	r1, [r3, #4]
 8016b50:	68fb      	ldr	r3, [r7, #12]
 8016b52:	689a      	ldr	r2, [r3, #8]
 8016b54:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8016b58:	4618      	mov	r0, r3
 8016b5a:	f7ff f895 	bl	8015c88 <RegionCommonComputeTxPower>
 8016b5e:	4603      	mov	r3, r0
 8016b60:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8016b62:	4b46      	ldr	r3, [pc, #280]	@ (8016c7c <RegionEU868TxConfig+0x19c>)
 8016b64:	68da      	ldr	r2, [r3, #12]
 8016b66:	4b43      	ldr	r3, [pc, #268]	@ (8016c74 <RegionEU868TxConfig+0x194>)
 8016b68:	6819      	ldr	r1, [r3, #0]
 8016b6a:	68fb      	ldr	r3, [r7, #12]
 8016b6c:	781b      	ldrb	r3, [r3, #0]
 8016b6e:	4618      	mov	r0, r3
 8016b70:	4603      	mov	r3, r0
 8016b72:	005b      	lsls	r3, r3, #1
 8016b74:	4403      	add	r3, r0
 8016b76:	009b      	lsls	r3, r3, #2
 8016b78:	440b      	add	r3, r1
 8016b7a:	681b      	ldr	r3, [r3, #0]
 8016b7c:	4618      	mov	r0, r3
 8016b7e:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8016b80:	68fb      	ldr	r3, [r7, #12]
 8016b82:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016b86:	2b07      	cmp	r3, #7
 8016b88:	d124      	bne.n	8016bd4 <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8016b8a:	2300      	movs	r3, #0
 8016b8c:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8016b8e:	4b3b      	ldr	r3, [pc, #236]	@ (8016c7c <RegionEU868TxConfig+0x19c>)
 8016b90:	69dc      	ldr	r4, [r3, #28]
 8016b92:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8016b96:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8016b9a:	fb02 f303 	mul.w	r3, r2, r3
 8016b9e:	461a      	mov	r2, r3
 8016ba0:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8016ba4:	7ff8      	ldrb	r0, [r7, #31]
 8016ba6:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8016baa:	9308      	str	r3, [sp, #32]
 8016bac:	2300      	movs	r3, #0
 8016bae:	9307      	str	r3, [sp, #28]
 8016bb0:	2300      	movs	r3, #0
 8016bb2:	9306      	str	r3, [sp, #24]
 8016bb4:	2300      	movs	r3, #0
 8016bb6:	9305      	str	r3, [sp, #20]
 8016bb8:	2301      	movs	r3, #1
 8016bba:	9304      	str	r3, [sp, #16]
 8016bbc:	2300      	movs	r3, #0
 8016bbe:	9303      	str	r3, [sp, #12]
 8016bc0:	2305      	movs	r3, #5
 8016bc2:	9302      	str	r3, [sp, #8]
 8016bc4:	2300      	movs	r3, #0
 8016bc6:	9301      	str	r3, [sp, #4]
 8016bc8:	9200      	str	r2, [sp, #0]
 8016bca:	69bb      	ldr	r3, [r7, #24]
 8016bcc:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8016bd0:	47a0      	blx	r4
 8016bd2:	e01d      	b.n	8016c10 <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 8016bd4:	2301      	movs	r3, #1
 8016bd6:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8016bd8:	4b28      	ldr	r3, [pc, #160]	@ (8016c7c <RegionEU868TxConfig+0x19c>)
 8016bda:	69dc      	ldr	r4, [r3, #28]
 8016bdc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8016be0:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8016be4:	7ff8      	ldrb	r0, [r7, #31]
 8016be6:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8016bea:	9208      	str	r2, [sp, #32]
 8016bec:	2200      	movs	r2, #0
 8016bee:	9207      	str	r2, [sp, #28]
 8016bf0:	2200      	movs	r2, #0
 8016bf2:	9206      	str	r2, [sp, #24]
 8016bf4:	2200      	movs	r2, #0
 8016bf6:	9205      	str	r2, [sp, #20]
 8016bf8:	2201      	movs	r2, #1
 8016bfa:	9204      	str	r2, [sp, #16]
 8016bfc:	2200      	movs	r2, #0
 8016bfe:	9203      	str	r2, [sp, #12]
 8016c00:	2208      	movs	r2, #8
 8016c02:	9202      	str	r2, [sp, #8]
 8016c04:	2201      	movs	r2, #1
 8016c06:	9201      	str	r2, [sp, #4]
 8016c08:	9300      	str	r3, [sp, #0]
 8016c0a:	69bb      	ldr	r3, [r7, #24]
 8016c0c:	2200      	movs	r2, #0
 8016c0e:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8016c10:	4b18      	ldr	r3, [pc, #96]	@ (8016c74 <RegionEU868TxConfig+0x194>)
 8016c12:	681a      	ldr	r2, [r3, #0]
 8016c14:	68fb      	ldr	r3, [r7, #12]
 8016c16:	781b      	ldrb	r3, [r3, #0]
 8016c18:	4619      	mov	r1, r3
 8016c1a:	460b      	mov	r3, r1
 8016c1c:	005b      	lsls	r3, r3, #1
 8016c1e:	440b      	add	r3, r1
 8016c20:	009b      	lsls	r3, r3, #2
 8016c22:	4413      	add	r3, r2
 8016c24:	681a      	ldr	r2, [r3, #0]
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016c2c:	4619      	mov	r1, r3
 8016c2e:	4610      	mov	r0, r2
 8016c30:	f7ff fa1e 	bl	8016070 <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8016c34:	68fb      	ldr	r3, [r7, #12]
 8016c36:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8016c3a:	68fb      	ldr	r3, [r7, #12]
 8016c3c:	899b      	ldrh	r3, [r3, #12]
 8016c3e:	4619      	mov	r1, r3
 8016c40:	4610      	mov	r0, r2
 8016c42:	f7ff faa3 	bl	801618c <GetTimeOnAir>
 8016c46:	4602      	mov	r2, r0
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8016c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8016c7c <RegionEU868TxConfig+0x19c>)
 8016c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016c50:	68fa      	ldr	r2, [r7, #12]
 8016c52:	8992      	ldrh	r2, [r2, #12]
 8016c54:	b2d1      	uxtb	r1, r2
 8016c56:	7ffa      	ldrb	r2, [r7, #31]
 8016c58:	4610      	mov	r0, r2
 8016c5a:	4798      	blx	r3

    *txPower = txPowerLimited;
 8016c5c:	68bb      	ldr	r3, [r7, #8]
 8016c5e:	7f7a      	ldrb	r2, [r7, #29]
 8016c60:	701a      	strb	r2, [r3, #0]
    return true;
 8016c62:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8016c64:	4618      	mov	r0, r3
 8016c66:	3724      	adds	r7, #36	@ 0x24
 8016c68:	46bd      	mov	sp, r7
 8016c6a:	bd90      	pop	{r4, r7, pc}
 8016c6c:	0801d9c4 	.word	0x0801d9c4
 8016c70:	20001c90 	.word	0x20001c90
 8016c74:	20001c94 	.word	0x20001c94
 8016c78:	0801d9cc 	.word	0x0801d9cc
 8016c7c:	0801da80 	.word	0x0801da80

08016c80 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8016c80:	b590      	push	{r4, r7, lr}
 8016c82:	b093      	sub	sp, #76	@ 0x4c
 8016c84:	af00      	add	r7, sp, #0
 8016c86:	60f8      	str	r0, [r7, #12]
 8016c88:	60b9      	str	r1, [r7, #8]
 8016c8a:	607a      	str	r2, [r7, #4]
 8016c8c:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8016c8e:	2307      	movs	r3, #7
 8016c90:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8016c94:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8016c98:	2200      	movs	r2, #0
 8016c9a:	601a      	str	r2, [r3, #0]
 8016c9c:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8016c9e:	2300      	movs	r3, #0
 8016ca0:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t bytesProcessed = 0;
 8016ca4:	2300      	movs	r3, #0
 8016ca6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    uint16_t chMask = 0;
 8016caa:	2300      	movs	r3, #0
 8016cac:	877b      	strh	r3, [r7, #58]	@ 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8016cae:	e085      	b.n	8016dbc <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8016cb0:	68fb      	ldr	r3, [r7, #12]
 8016cb2:	685a      	ldr	r2, [r3, #4]
 8016cb4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8016cb8:	4413      	add	r3, r2
 8016cba:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8016cbe:	4611      	mov	r1, r2
 8016cc0:	4618      	mov	r0, r3
 8016cc2:	f7fe fe29 	bl	8015918 <RegionCommonParseLinkAdrReq>
 8016cc6:	4603      	mov	r3, r0
 8016cc8:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

        if( nextIndex == 0 )
 8016ccc:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	d07b      	beq.n	8016dcc <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8016cd4:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8016cd8:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8016cdc:	4413      	add	r3, r2
 8016cde:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8016ce2:	2307      	movs	r3, #7
 8016ce4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8016ce8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016cec:	877b      	strh	r3, [r7, #58]	@ 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8016cee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	d109      	bne.n	8016d0a <RegionEU868LinkAdrReq+0x8a>
 8016cf6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d106      	bne.n	8016d0a <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8016cfc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016d00:	f023 0301 	bic.w	r3, r3, #1
 8016d04:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8016d08:	e058      	b.n	8016dbc <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8016d0a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d003      	beq.n	8016d1a <RegionEU868LinkAdrReq+0x9a>
 8016d12:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8016d16:	2b05      	cmp	r3, #5
 8016d18:	d903      	bls.n	8016d22 <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8016d1a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8016d1e:	2b06      	cmp	r3, #6
 8016d20:	d906      	bls.n	8016d30 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8016d22:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016d26:	f023 0301 	bic.w	r3, r3, #1
 8016d2a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8016d2e:	e045      	b.n	8016dbc <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8016d30:	2300      	movs	r3, #0
 8016d32:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8016d36:	e03d      	b.n	8016db4 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8016d38:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8016d3c:	2b06      	cmp	r3, #6
 8016d3e:	d118      	bne.n	8016d72 <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8016d40:	4b5f      	ldr	r3, [pc, #380]	@ (8016ec0 <RegionEU868LinkAdrReq+0x240>)
 8016d42:	6819      	ldr	r1, [r3, #0]
 8016d44:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8016d48:	4613      	mov	r3, r2
 8016d4a:	005b      	lsls	r3, r3, #1
 8016d4c:	4413      	add	r3, r2
 8016d4e:	009b      	lsls	r3, r3, #2
 8016d50:	440b      	add	r3, r1
 8016d52:	681b      	ldr	r3, [r3, #0]
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d028      	beq.n	8016daa <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8016d58:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8016d5c:	2201      	movs	r2, #1
 8016d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8016d62:	b21a      	sxth	r2, r3
 8016d64:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016d66:	b21b      	sxth	r3, r3
 8016d68:	4313      	orrs	r3, r2
 8016d6a:	b21b      	sxth	r3, r3
 8016d6c:	b29b      	uxth	r3, r3
 8016d6e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8016d70:	e01b      	b.n	8016daa <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8016d72:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016d74:	461a      	mov	r2, r3
 8016d76:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8016d7a:	fa42 f303 	asr.w	r3, r2, r3
 8016d7e:	f003 0301 	and.w	r3, r3, #1
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	d011      	beq.n	8016daa <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8016d86:	4b4e      	ldr	r3, [pc, #312]	@ (8016ec0 <RegionEU868LinkAdrReq+0x240>)
 8016d88:	6819      	ldr	r1, [r3, #0]
 8016d8a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8016d8e:	4613      	mov	r3, r2
 8016d90:	005b      	lsls	r3, r3, #1
 8016d92:	4413      	add	r3, r2
 8016d94:	009b      	lsls	r3, r3, #2
 8016d96:	440b      	add	r3, r1
 8016d98:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	d105      	bne.n	8016daa <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8016d9e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016da2:	f023 0301 	bic.w	r3, r3, #1
 8016da6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8016daa:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8016dae:	3301      	adds	r3, #1
 8016db0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8016db4:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8016db8:	2b0f      	cmp	r3, #15
 8016dba:	d9bd      	bls.n	8016d38 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8016dbc:	68fb      	ldr	r3, [r7, #12]
 8016dbe:	7a1b      	ldrb	r3, [r3, #8]
 8016dc0:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8016dc4:	429a      	cmp	r2, r3
 8016dc6:	f4ff af73 	bcc.w	8016cb0 <RegionEU868LinkAdrReq+0x30>
 8016dca:	e000      	b.n	8016dce <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8016dcc:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8016dce:	2302      	movs	r3, #2
 8016dd0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8016dd4:	68fb      	ldr	r3, [r7, #12]
 8016dd6:	7a5b      	ldrb	r3, [r3, #9]
 8016dd8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8016ddc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8016de0:	4618      	mov	r0, r3
 8016de2:	f7ff fa23 	bl	801622c <RegionEU868GetPhyParam>
 8016de6:	4603      	mov	r3, r0
 8016de8:	633b      	str	r3, [r7, #48]	@ 0x30

    linkAdrVerifyParams.Status = status;
 8016dea:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016dee:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8016df0:	68fb      	ldr	r3, [r7, #12]
 8016df2:	7a9b      	ldrb	r3, [r3, #10]
 8016df4:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8016df6:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 8016dfa:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8016dfc:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 8016e00:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8016e02:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8016e06:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8016e08:	68fb      	ldr	r3, [r7, #12]
 8016e0a:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8016e0e:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8016e10:	68fb      	ldr	r3, [r7, #12]
 8016e12:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8016e16:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8016e18:	68fb      	ldr	r3, [r7, #12]
 8016e1a:	7b5b      	ldrb	r3, [r3, #13]
 8016e1c:	b25b      	sxtb	r3, r3
 8016e1e:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8016e20:	2310      	movs	r3, #16
 8016e22:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8016e24:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 8016e28:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8016e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e2c:	b25b      	sxtb	r3, r3
 8016e2e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8016e32:	2307      	movs	r3, #7
 8016e34:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8016e38:	4b21      	ldr	r3, [pc, #132]	@ (8016ec0 <RegionEU868LinkAdrReq+0x240>)
 8016e3a:	681b      	ldr	r3, [r3, #0]
 8016e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8016e3e:	2307      	movs	r3, #7
 8016e40:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8016e44:	2300      	movs	r3, #0
 8016e46:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8016e4a:	68fb      	ldr	r3, [r7, #12]
 8016e4c:	681b      	ldr	r3, [r3, #0]
 8016e4e:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8016e50:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8016e54:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8016e58:	1c9a      	adds	r2, r3, #2
 8016e5a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8016e5e:	1c59      	adds	r1, r3, #1
 8016e60:	f107 0010 	add.w	r0, r7, #16
 8016e64:	4623      	mov	r3, r4
 8016e66:	f7fe fda8 	bl	80159ba <RegionCommonLinkAdrReqVerifyParams>
 8016e6a:	4603      	mov	r3, r0
 8016e6c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8016e70:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016e74:	2b07      	cmp	r3, #7
 8016e76:	d10d      	bne.n	8016e94 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8016e78:	4b11      	ldr	r3, [pc, #68]	@ (8016ec0 <RegionEU868LinkAdrReq+0x240>)
 8016e7a:	681b      	ldr	r3, [r3, #0]
 8016e7c:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8016e80:	220c      	movs	r2, #12
 8016e82:	2100      	movs	r1, #0
 8016e84:	4618      	mov	r0, r3
 8016e86:	f001 fde7 	bl	8018a58 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8016e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8016ec0 <RegionEU868LinkAdrReq+0x240>)
 8016e8c:	681b      	ldr	r3, [r3, #0]
 8016e8e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8016e90:	f8a3 2480 	strh.w	r2, [r3, #1152]	@ 0x480
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8016e94:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 8016e98:	68bb      	ldr	r3, [r7, #8]
 8016e9a:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8016e9c:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8016ea4:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8016ea8:	683b      	ldr	r3, [r7, #0]
 8016eaa:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8016eac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016eae:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8016eb2:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8016eb4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8016eb8:	4618      	mov	r0, r3
 8016eba:	374c      	adds	r7, #76	@ 0x4c
 8016ebc:	46bd      	mov	sp, r7
 8016ebe:	bd90      	pop	{r4, r7, pc}
 8016ec0:	20001c94 	.word	0x20001c94

08016ec4 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8016ec4:	b580      	push	{r7, lr}
 8016ec6:	b084      	sub	sp, #16
 8016ec8:	af00      	add	r7, sp, #0
 8016eca:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8016ecc:	2307      	movs	r3, #7
 8016ece:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8016ed0:	2300      	movs	r3, #0
 8016ed2:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	685b      	ldr	r3, [r3, #4]
 8016ed8:	f107 020e 	add.w	r2, r7, #14
 8016edc:	4611      	mov	r1, r2
 8016ede:	4618      	mov	r0, r3
 8016ee0:	f7ff f8de 	bl	80160a0 <VerifyRfFreq>
 8016ee4:	4603      	mov	r3, r0
 8016ee6:	f083 0301 	eor.w	r3, r3, #1
 8016eea:	b2db      	uxtb	r3, r3
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	d003      	beq.n	8016ef8 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8016ef0:	7bfb      	ldrb	r3, [r7, #15]
 8016ef2:	f023 0301 	bic.w	r3, r3, #1
 8016ef6:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	f993 3000 	ldrsb.w	r3, [r3]
 8016efe:	2207      	movs	r2, #7
 8016f00:	2100      	movs	r1, #0
 8016f02:	4618      	mov	r0, r3
 8016f04:	f7fe fb47 	bl	8015596 <RegionCommonValueInRange>
 8016f08:	4603      	mov	r3, r0
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d103      	bne.n	8016f16 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 8016f0e:	7bfb      	ldrb	r3, [r7, #15]
 8016f10:	f023 0302 	bic.w	r3, r3, #2
 8016f14:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016f1c:	2205      	movs	r2, #5
 8016f1e:	2100      	movs	r1, #0
 8016f20:	4618      	mov	r0, r3
 8016f22:	f7fe fb38 	bl	8015596 <RegionCommonValueInRange>
 8016f26:	4603      	mov	r3, r0
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	d103      	bne.n	8016f34 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8016f2c:	7bfb      	ldrb	r3, [r7, #15]
 8016f2e:	f023 0304 	bic.w	r3, r3, #4
 8016f32:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8016f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8016f36:	4618      	mov	r0, r3
 8016f38:	3710      	adds	r7, #16
 8016f3a:	46bd      	mov	sp, r7
 8016f3c:	bd80      	pop	{r7, pc}
	...

08016f40 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8016f40:	b580      	push	{r7, lr}
 8016f42:	b086      	sub	sp, #24
 8016f44:	af00      	add	r7, sp, #0
 8016f46:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8016f48:	2303      	movs	r3, #3
 8016f4a:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	681b      	ldr	r3, [r3, #0]
 8016f50:	681b      	ldr	r3, [r3, #0]
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d114      	bne.n	8016f80 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8016f5c:	b2db      	uxtb	r3, r3
 8016f5e:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8016f60:	f107 0308 	add.w	r3, r7, #8
 8016f64:	4618      	mov	r0, r3
 8016f66:	f000 f9ff 	bl	8017368 <RegionEU868ChannelsRemove>
 8016f6a:	4603      	mov	r3, r0
 8016f6c:	f083 0301 	eor.w	r3, r3, #1
 8016f70:	b2db      	uxtb	r3, r3
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d03b      	beq.n	8016fee <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8016f76:	7dfb      	ldrb	r3, [r7, #23]
 8016f78:	f023 0303 	bic.w	r3, r3, #3
 8016f7c:	75fb      	strb	r3, [r7, #23]
 8016f7e:	e036      	b.n	8016fee <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	681b      	ldr	r3, [r3, #0]
 8016f84:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8016f8c:	b2db      	uxtb	r3, r3
 8016f8e:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8016f90:	f107 030c 	add.w	r3, r7, #12
 8016f94:	4618      	mov	r0, r3
 8016f96:	f000 f945 	bl	8017224 <RegionEU868ChannelAdd>
 8016f9a:	4603      	mov	r3, r0
 8016f9c:	2b06      	cmp	r3, #6
 8016f9e:	d820      	bhi.n	8016fe2 <RegionEU868NewChannelReq+0xa2>
 8016fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8016fa8 <RegionEU868NewChannelReq+0x68>)
 8016fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016fa6:	bf00      	nop
 8016fa8:	08016fed 	.word	0x08016fed
 8016fac:	08016fe3 	.word	0x08016fe3
 8016fb0:	08016fe3 	.word	0x08016fe3
 8016fb4:	08016fe3 	.word	0x08016fe3
 8016fb8:	08016fc5 	.word	0x08016fc5
 8016fbc:	08016fcf 	.word	0x08016fcf
 8016fc0:	08016fd9 	.word	0x08016fd9
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8016fc4:	7dfb      	ldrb	r3, [r7, #23]
 8016fc6:	f023 0301 	bic.w	r3, r3, #1
 8016fca:	75fb      	strb	r3, [r7, #23]
                break;
 8016fcc:	e00f      	b.n	8016fee <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8016fce:	7dfb      	ldrb	r3, [r7, #23]
 8016fd0:	f023 0302 	bic.w	r3, r3, #2
 8016fd4:	75fb      	strb	r3, [r7, #23]
                break;
 8016fd6:	e00a      	b.n	8016fee <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8016fd8:	7dfb      	ldrb	r3, [r7, #23]
 8016fda:	f023 0303 	bic.w	r3, r3, #3
 8016fde:	75fb      	strb	r3, [r7, #23]
                break;
 8016fe0:	e005      	b.n	8016fee <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8016fe2:	7dfb      	ldrb	r3, [r7, #23]
 8016fe4:	f023 0303 	bic.w	r3, r3, #3
 8016fe8:	75fb      	strb	r3, [r7, #23]
                break;
 8016fea:	e000      	b.n	8016fee <RegionEU868NewChannelReq+0xae>
                break;
 8016fec:	bf00      	nop
            }
        }
    }

    return status;
 8016fee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016ff2:	4618      	mov	r0, r3
 8016ff4:	3718      	adds	r7, #24
 8016ff6:	46bd      	mov	sp, r7
 8016ff8:	bd80      	pop	{r7, pc}
 8016ffa:	bf00      	nop

08016ffc <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8016ffc:	b480      	push	{r7}
 8016ffe:	b083      	sub	sp, #12
 8017000:	af00      	add	r7, sp, #0
 8017002:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8017004:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017008:	4618      	mov	r0, r3
 801700a:	370c      	adds	r7, #12
 801700c:	46bd      	mov	sp, r7
 801700e:	bc80      	pop	{r7}
 8017010:	4770      	bx	lr
	...

08017014 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8017014:	b580      	push	{r7, lr}
 8017016:	b084      	sub	sp, #16
 8017018:	af00      	add	r7, sp, #0
 801701a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 801701c:	2303      	movs	r3, #3
 801701e:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_EU868 )
    uint8_t band = 0;
 8017020:	2300      	movs	r3, #0
 8017022:	73bb      	strb	r3, [r7, #14]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	781b      	ldrb	r3, [r3, #0]
 8017028:	2b0f      	cmp	r3, #15
 801702a:	d901      	bls.n	8017030 <RegionEU868DlChannelReq+0x1c>
    {
        return 0;
 801702c:	2300      	movs	r3, #0
 801702e:	e035      	b.n	801709c <RegionEU868DlChannelReq+0x88>
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	685b      	ldr	r3, [r3, #4]
 8017034:	f107 020e 	add.w	r2, r7, #14
 8017038:	4611      	mov	r1, r2
 801703a:	4618      	mov	r0, r3
 801703c:	f7ff f830 	bl	80160a0 <VerifyRfFreq>
 8017040:	4603      	mov	r3, r0
 8017042:	f083 0301 	eor.w	r3, r3, #1
 8017046:	b2db      	uxtb	r3, r3
 8017048:	2b00      	cmp	r3, #0
 801704a:	d003      	beq.n	8017054 <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 801704c:	7bfb      	ldrb	r3, [r7, #15]
 801704e:	f023 0301 	bic.w	r3, r3, #1
 8017052:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8017054:	4b13      	ldr	r3, [pc, #76]	@ (80170a4 <RegionEU868DlChannelReq+0x90>)
 8017056:	681a      	ldr	r2, [r3, #0]
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	781b      	ldrb	r3, [r3, #0]
 801705c:	4619      	mov	r1, r3
 801705e:	460b      	mov	r3, r1
 8017060:	005b      	lsls	r3, r3, #1
 8017062:	440b      	add	r3, r1
 8017064:	009b      	lsls	r3, r3, #2
 8017066:	4413      	add	r3, r2
 8017068:	681b      	ldr	r3, [r3, #0]
 801706a:	2b00      	cmp	r3, #0
 801706c:	d103      	bne.n	8017076 <RegionEU868DlChannelReq+0x62>
    {
        status &= 0xFD;
 801706e:	7bfb      	ldrb	r3, [r7, #15]
 8017070:	f023 0302 	bic.w	r3, r3, #2
 8017074:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8017076:	7bfb      	ldrb	r3, [r7, #15]
 8017078:	2b03      	cmp	r3, #3
 801707a:	d10d      	bne.n	8017098 <RegionEU868DlChannelReq+0x84>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 801707c:	4b09      	ldr	r3, [pc, #36]	@ (80170a4 <RegionEU868DlChannelReq+0x90>)
 801707e:	6819      	ldr	r1, [r3, #0]
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	781b      	ldrb	r3, [r3, #0]
 8017084:	4618      	mov	r0, r3
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	685a      	ldr	r2, [r3, #4]
 801708a:	4603      	mov	r3, r0
 801708c:	005b      	lsls	r3, r3, #1
 801708e:	4403      	add	r3, r0
 8017090:	009b      	lsls	r3, r3, #2
 8017092:	440b      	add	r3, r1
 8017094:	3304      	adds	r3, #4
 8017096:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8017098:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801709c:	4618      	mov	r0, r3
 801709e:	3710      	adds	r7, #16
 80170a0:	46bd      	mov	sp, r7
 80170a2:	bd80      	pop	{r7, pc}
 80170a4:	20001c94 	.word	0x20001c94

080170a8 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 80170a8:	b480      	push	{r7}
 80170aa:	b083      	sub	sp, #12
 80170ac:	af00      	add	r7, sp, #0
 80170ae:	4603      	mov	r3, r0
 80170b0:	460a      	mov	r2, r1
 80170b2:	71fb      	strb	r3, [r7, #7]
 80170b4:	4613      	mov	r3, r2
 80170b6:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 80170b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 80170bc:	4618      	mov	r0, r3
 80170be:	370c      	adds	r7, #12
 80170c0:	46bd      	mov	sp, r7
 80170c2:	bc80      	pop	{r7}
 80170c4:	4770      	bx	lr
	...

080170c8 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80170c8:	b580      	push	{r7, lr}
 80170ca:	b09a      	sub	sp, #104	@ 0x68
 80170cc:	af02      	add	r7, sp, #8
 80170ce:	60f8      	str	r0, [r7, #12]
 80170d0:	60b9      	str	r1, [r7, #8]
 80170d2:	607a      	str	r2, [r7, #4]
 80170d4:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 80170d6:	2300      	movs	r3, #0
 80170d8:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    uint8_t nbRestrictedChannels = 0;
 80170dc:	2300      	movs	r3, #0
 80170de:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 80170e2:	2300      	movs	r3, #0
 80170e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80170e6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80170ea:	2200      	movs	r2, #0
 80170ec:	601a      	str	r2, [r3, #0]
 80170ee:	605a      	str	r2, [r3, #4]
 80170f0:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80170f2:	230c      	movs	r3, #12
 80170f4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 80170f8:	2307      	movs	r3, #7
 80170fa:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 80170fc:	4b47      	ldr	r3, [pc, #284]	@ (801721c <RegionEU868NextChannel+0x154>)
 80170fe:	681b      	ldr	r3, [r3, #0]
 8017100:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8017104:	2201      	movs	r2, #1
 8017106:	2100      	movs	r1, #0
 8017108:	4618      	mov	r0, r3
 801710a:	f7fe fa95 	bl	8015638 <RegionCommonCountChannels>
 801710e:	4603      	mov	r3, r0
 8017110:	2b00      	cmp	r3, #0
 8017112:	d10a      	bne.n	801712a <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8017114:	4b41      	ldr	r3, [pc, #260]	@ (801721c <RegionEU868NextChannel+0x154>)
 8017116:	681b      	ldr	r3, [r3, #0]
 8017118:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	@ 0x480
 801711c:	4b3f      	ldr	r3, [pc, #252]	@ (801721c <RegionEU868NextChannel+0x154>)
 801711e:	681b      	ldr	r3, [r3, #0]
 8017120:	f042 0207 	orr.w	r2, r2, #7
 8017124:	b292      	uxth	r2, r2
 8017126:	f8a3 2480 	strh.w	r2, [r3, #1152]	@ 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801712a:	68fb      	ldr	r3, [r7, #12]
 801712c:	7a5b      	ldrb	r3, [r3, #9]
 801712e:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8017130:	68fb      	ldr	r3, [r7, #12]
 8017132:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017136:	b2db      	uxtb	r3, r3
 8017138:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801713a:	4b38      	ldr	r3, [pc, #224]	@ (801721c <RegionEU868NextChannel+0x154>)
 801713c:	681b      	ldr	r3, [r3, #0]
 801713e:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8017142:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8017144:	4b35      	ldr	r3, [pc, #212]	@ (801721c <RegionEU868NextChannel+0x154>)
 8017146:	681b      	ldr	r3, [r3, #0]
 8017148:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 801714a:	4b35      	ldr	r3, [pc, #212]	@ (8017220 <RegionEU868NextChannel+0x158>)
 801714c:	681b      	ldr	r3, [r3, #0]
 801714e:	623b      	str	r3, [r7, #32]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8017150:	2310      	movs	r3, #16
 8017152:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8017154:	f107 0312 	add.w	r3, r7, #18
 8017158:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801715a:	68fb      	ldr	r3, [r7, #12]
 801715c:	681b      	ldr	r3, [r3, #0]
 801715e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8017160:	68fb      	ldr	r3, [r7, #12]
 8017162:	685b      	ldr	r3, [r3, #4]
 8017164:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8017166:	68fb      	ldr	r3, [r7, #12]
 8017168:	7a9b      	ldrb	r3, [r3, #10]
 801716a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 801716e:	2306      	movs	r3, #6
 8017170:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8017174:	68fa      	ldr	r2, [r7, #12]
 8017176:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801717a:	320c      	adds	r2, #12
 801717c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017180:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8017184:	68fb      	ldr	r3, [r7, #12]
 8017186:	7d1b      	ldrb	r3, [r3, #20]
 8017188:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801718c:	68fb      	ldr	r3, [r7, #12]
 801718e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	8adb      	ldrh	r3, [r3, #22]
 8017196:	4619      	mov	r1, r3
 8017198:	4610      	mov	r0, r2
 801719a:	f7fe fff7 	bl	801618c <GetTimeOnAir>
 801719e:	4603      	mov	r3, r0
 80171a0:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 80171a2:	f107 0314 	add.w	r3, r7, #20
 80171a6:	64bb      	str	r3, [r7, #72]	@ 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 80171a8:	f107 015e 	add.w	r1, r7, #94	@ 0x5e
 80171ac:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80171b0:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	9301      	str	r3, [sp, #4]
 80171b8:	f107 035d 	add.w	r3, r7, #93	@ 0x5d
 80171bc:	9300      	str	r3, [sp, #0]
 80171be:	460b      	mov	r3, r1
 80171c0:	6839      	ldr	r1, [r7, #0]
 80171c2:	f7fe fe50 	bl	8015e66 <RegionCommonIdentifyChannels>
 80171c6:	4603      	mov	r3, r0
 80171c8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 80171cc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	d10e      	bne.n	80171f2 <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 80171d4:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80171d8:	3b01      	subs	r3, #1
 80171da:	4619      	mov	r1, r3
 80171dc:	2000      	movs	r0, #0
 80171de:	f001 fbe9 	bl	80189b4 <randr>
 80171e2:	4603      	mov	r3, r0
 80171e4:	3360      	adds	r3, #96	@ 0x60
 80171e6:	443b      	add	r3, r7
 80171e8:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80171ec:	68bb      	ldr	r3, [r7, #8]
 80171ee:	701a      	strb	r2, [r3, #0]
 80171f0:	e00e      	b.n	8017210 <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 80171f2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80171f6:	2b0c      	cmp	r3, #12
 80171f8:	d10a      	bne.n	8017210 <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80171fa:	4b08      	ldr	r3, [pc, #32]	@ (801721c <RegionEU868NextChannel+0x154>)
 80171fc:	681b      	ldr	r3, [r3, #0]
 80171fe:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	@ 0x480
 8017202:	4b06      	ldr	r3, [pc, #24]	@ (801721c <RegionEU868NextChannel+0x154>)
 8017204:	681b      	ldr	r3, [r3, #0]
 8017206:	f042 0207 	orr.w	r2, r2, #7
 801720a:	b292      	uxth	r2, r2
 801720c:	f8a3 2480 	strh.w	r2, [r3, #1152]	@ 0x480
    }
    return status;
 8017210:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8017214:	4618      	mov	r0, r3
 8017216:	3760      	adds	r7, #96	@ 0x60
 8017218:	46bd      	mov	sp, r7
 801721a:	bd80      	pop	{r7, pc}
 801721c:	20001c94 	.word	0x20001c94
 8017220:	20001c90 	.word	0x20001c90

08017224 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8017224:	b580      	push	{r7, lr}
 8017226:	b084      	sub	sp, #16
 8017228:	af00      	add	r7, sp, #0
 801722a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 801722c:	2300      	movs	r3, #0
 801722e:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8017230:	2300      	movs	r3, #0
 8017232:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8017234:	2300      	movs	r3, #0
 8017236:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	791b      	ldrb	r3, [r3, #4]
 801723c:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801723e:	7b7b      	ldrb	r3, [r7, #13]
 8017240:	2b02      	cmp	r3, #2
 8017242:	d801      	bhi.n	8017248 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8017244:	2306      	movs	r3, #6
 8017246:	e089      	b.n	801735c <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8017248:	7b7b      	ldrb	r3, [r7, #13]
 801724a:	2b0f      	cmp	r3, #15
 801724c:	d901      	bls.n	8017252 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801724e:	2303      	movs	r3, #3
 8017250:	e084      	b.n	801735c <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	681b      	ldr	r3, [r3, #0]
 8017256:	7a1b      	ldrb	r3, [r3, #8]
 8017258:	f343 0303 	sbfx	r3, r3, #0, #4
 801725c:	b25b      	sxtb	r3, r3
 801725e:	2207      	movs	r2, #7
 8017260:	2100      	movs	r1, #0
 8017262:	4618      	mov	r0, r3
 8017264:	f7fe f997 	bl	8015596 <RegionCommonValueInRange>
 8017268:	4603      	mov	r3, r0
 801726a:	2b00      	cmp	r3, #0
 801726c:	d101      	bne.n	8017272 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 801726e:	2301      	movs	r3, #1
 8017270:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	681b      	ldr	r3, [r3, #0]
 8017276:	7a1b      	ldrb	r3, [r3, #8]
 8017278:	f343 1303 	sbfx	r3, r3, #4, #4
 801727c:	b25b      	sxtb	r3, r3
 801727e:	2207      	movs	r2, #7
 8017280:	2100      	movs	r1, #0
 8017282:	4618      	mov	r0, r3
 8017284:	f7fe f987 	bl	8015596 <RegionCommonValueInRange>
 8017288:	4603      	mov	r3, r0
 801728a:	2b00      	cmp	r3, #0
 801728c:	d101      	bne.n	8017292 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 801728e:	2301      	movs	r3, #1
 8017290:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	681b      	ldr	r3, [r3, #0]
 8017296:	7a1b      	ldrb	r3, [r3, #8]
 8017298:	f343 0303 	sbfx	r3, r3, #0, #4
 801729c:	b25a      	sxtb	r2, r3
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	681b      	ldr	r3, [r3, #0]
 80172a2:	7a1b      	ldrb	r3, [r3, #8]
 80172a4:	f343 1303 	sbfx	r3, r3, #4, #4
 80172a8:	b25b      	sxtb	r3, r3
 80172aa:	429a      	cmp	r2, r3
 80172ac:	dd01      	ble.n	80172b2 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 80172ae:	2301      	movs	r3, #1
 80172b0:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 80172b2:	7bbb      	ldrb	r3, [r7, #14]
 80172b4:	f083 0301 	eor.w	r3, r3, #1
 80172b8:	b2db      	uxtb	r3, r3
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	d010      	beq.n	80172e0 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	681b      	ldr	r3, [r3, #0]
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	f107 020c 	add.w	r2, r7, #12
 80172c8:	4611      	mov	r1, r2
 80172ca:	4618      	mov	r0, r3
 80172cc:	f7fe fee8 	bl	80160a0 <VerifyRfFreq>
 80172d0:	4603      	mov	r3, r0
 80172d2:	f083 0301 	eor.w	r3, r3, #1
 80172d6:	b2db      	uxtb	r3, r3
 80172d8:	2b00      	cmp	r3, #0
 80172da:	d001      	beq.n	80172e0 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 80172dc:	2301      	movs	r3, #1
 80172de:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 80172e0:	7bfb      	ldrb	r3, [r7, #15]
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	d004      	beq.n	80172f0 <RegionEU868ChannelAdd+0xcc>
 80172e6:	7bbb      	ldrb	r3, [r7, #14]
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	d001      	beq.n	80172f0 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80172ec:	2306      	movs	r3, #6
 80172ee:	e035      	b.n	801735c <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 80172f0:	7bfb      	ldrb	r3, [r7, #15]
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	d001      	beq.n	80172fa <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 80172f6:	2305      	movs	r3, #5
 80172f8:	e030      	b.n	801735c <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 80172fa:	7bbb      	ldrb	r3, [r7, #14]
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	d001      	beq.n	8017304 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8017300:	2304      	movs	r3, #4
 8017302:	e02b      	b.n	801735c <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8017304:	4b17      	ldr	r3, [pc, #92]	@ (8017364 <RegionEU868ChannelAdd+0x140>)
 8017306:	6819      	ldr	r1, [r3, #0]
 8017308:	7b7a      	ldrb	r2, [r7, #13]
 801730a:	4613      	mov	r3, r2
 801730c:	005b      	lsls	r3, r3, #1
 801730e:	4413      	add	r3, r2
 8017310:	009b      	lsls	r3, r3, #2
 8017312:	18c8      	adds	r0, r1, r3
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	681b      	ldr	r3, [r3, #0]
 8017318:	220c      	movs	r2, #12
 801731a:	4619      	mov	r1, r3
 801731c:	f001 fb61 	bl	80189e2 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8017320:	4b10      	ldr	r3, [pc, #64]	@ (8017364 <RegionEU868ChannelAdd+0x140>)
 8017322:	6819      	ldr	r1, [r3, #0]
 8017324:	7b7a      	ldrb	r2, [r7, #13]
 8017326:	7b38      	ldrb	r0, [r7, #12]
 8017328:	4613      	mov	r3, r2
 801732a:	005b      	lsls	r3, r3, #1
 801732c:	4413      	add	r3, r2
 801732e:	009b      	lsls	r3, r3, #2
 8017330:	440b      	add	r3, r1
 8017332:	3309      	adds	r3, #9
 8017334:	4602      	mov	r2, r0
 8017336:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8017338:	4b0a      	ldr	r3, [pc, #40]	@ (8017364 <RegionEU868ChannelAdd+0x140>)
 801733a:	681b      	ldr	r3, [r3, #0]
 801733c:	f8b3 3480 	ldrh.w	r3, [r3, #1152]	@ 0x480
 8017340:	b21a      	sxth	r2, r3
 8017342:	7b7b      	ldrb	r3, [r7, #13]
 8017344:	2101      	movs	r1, #1
 8017346:	fa01 f303 	lsl.w	r3, r1, r3
 801734a:	b21b      	sxth	r3, r3
 801734c:	4313      	orrs	r3, r2
 801734e:	b21a      	sxth	r2, r3
 8017350:	4b04      	ldr	r3, [pc, #16]	@ (8017364 <RegionEU868ChannelAdd+0x140>)
 8017352:	681b      	ldr	r3, [r3, #0]
 8017354:	b292      	uxth	r2, r2
 8017356:	f8a3 2480 	strh.w	r2, [r3, #1152]	@ 0x480
    return LORAMAC_STATUS_OK;
 801735a:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 801735c:	4618      	mov	r0, r3
 801735e:	3710      	adds	r7, #16
 8017360:	46bd      	mov	sp, r7
 8017362:	bd80      	pop	{r7, pc}
 8017364:	20001c94 	.word	0x20001c94

08017368 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8017368:	b580      	push	{r7, lr}
 801736a:	b086      	sub	sp, #24
 801736c:	af00      	add	r7, sp, #0
 801736e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	781b      	ldrb	r3, [r3, #0]
 8017374:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8017376:	7dfb      	ldrb	r3, [r7, #23]
 8017378:	2b02      	cmp	r3, #2
 801737a:	d801      	bhi.n	8017380 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 801737c:	2300      	movs	r3, #0
 801737e:	e016      	b.n	80173ae <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8017380:	4b0d      	ldr	r3, [pc, #52]	@ (80173b8 <RegionEU868ChannelsRemove+0x50>)
 8017382:	6819      	ldr	r1, [r3, #0]
 8017384:	7dfa      	ldrb	r2, [r7, #23]
 8017386:	4613      	mov	r3, r2
 8017388:	005b      	lsls	r3, r3, #1
 801738a:	4413      	add	r3, r2
 801738c:	009b      	lsls	r3, r3, #2
 801738e:	440b      	add	r3, r1
 8017390:	461a      	mov	r2, r3
 8017392:	2300      	movs	r3, #0
 8017394:	6013      	str	r3, [r2, #0]
 8017396:	6053      	str	r3, [r2, #4]
 8017398:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 801739a:	4b07      	ldr	r3, [pc, #28]	@ (80173b8 <RegionEU868ChannelsRemove+0x50>)
 801739c:	681b      	ldr	r3, [r3, #0]
 801739e:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 80173a2:	7df9      	ldrb	r1, [r7, #23]
 80173a4:	2210      	movs	r2, #16
 80173a6:	4618      	mov	r0, r3
 80173a8:	f7fe f912 	bl	80155d0 <RegionCommonChanDisable>
 80173ac:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 80173ae:	4618      	mov	r0, r3
 80173b0:	3718      	adds	r7, #24
 80173b2:	46bd      	mov	sp, r7
 80173b4:	bd80      	pop	{r7, pc}
 80173b6:	bf00      	nop
 80173b8:	20001c94 	.word	0x20001c94

080173bc <RegionEU868SetContinuousWave>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 80173bc:	b590      	push	{r4, r7, lr}
 80173be:	b085      	sub	sp, #20
 80173c0:	af00      	add	r7, sp, #0
 80173c2:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80173ca:	4b20      	ldr	r3, [pc, #128]	@ (801744c <RegionEU868SetContinuousWave+0x90>)
 80173cc:	681a      	ldr	r2, [r3, #0]
 80173ce:	4b20      	ldr	r3, [pc, #128]	@ (8017450 <RegionEU868SetContinuousWave+0x94>)
 80173d0:	6819      	ldr	r1, [r3, #0]
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	781b      	ldrb	r3, [r3, #0]
 80173d6:	461c      	mov	r4, r3
 80173d8:	4623      	mov	r3, r4
 80173da:	005b      	lsls	r3, r3, #1
 80173dc:	4423      	add	r3, r4
 80173de:	009b      	lsls	r3, r3, #2
 80173e0:	440b      	add	r3, r1
 80173e2:	3309      	adds	r3, #9
 80173e4:	781b      	ldrb	r3, [r3, #0]
 80173e6:	4619      	mov	r1, r3
 80173e8:	460b      	mov	r3, r1
 80173ea:	005b      	lsls	r3, r3, #1
 80173ec:	440b      	add	r3, r1
 80173ee:	00db      	lsls	r3, r3, #3
 80173f0:	4413      	add	r3, r2
 80173f2:	3302      	adds	r3, #2
 80173f4:	f993 3000 	ldrsb.w	r3, [r3]
 80173f8:	4619      	mov	r1, r3
 80173fa:	f7fe fdd4 	bl	8015fa6 <RegionCommonLimitTxPower>
 80173fe:	4603      	mov	r3, r0
 8017400:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8017402:	2300      	movs	r3, #0
 8017404:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8017406:	4b12      	ldr	r3, [pc, #72]	@ (8017450 <RegionEU868SetContinuousWave+0x94>)
 8017408:	681a      	ldr	r2, [r3, #0]
 801740a:	687b      	ldr	r3, [r7, #4]
 801740c:	781b      	ldrb	r3, [r3, #0]
 801740e:	4619      	mov	r1, r3
 8017410:	460b      	mov	r3, r1
 8017412:	005b      	lsls	r3, r3, #1
 8017414:	440b      	add	r3, r1
 8017416:	009b      	lsls	r3, r3, #2
 8017418:	4413      	add	r3, r2
 801741a:	681b      	ldr	r3, [r3, #0]
 801741c:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	6859      	ldr	r1, [r3, #4]
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	689a      	ldr	r2, [r3, #8]
 8017426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801742a:	4618      	mov	r0, r3
 801742c:	f7fe fc2c 	bl	8015c88 <RegionCommonComputeTxPower>
 8017430:	4603      	mov	r3, r0
 8017432:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8017434:	4b07      	ldr	r3, [pc, #28]	@ (8017454 <RegionEU868SetContinuousWave+0x98>)
 8017436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017438:	687a      	ldr	r2, [r7, #4]
 801743a:	8992      	ldrh	r2, [r2, #12]
 801743c:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8017440:	68b8      	ldr	r0, [r7, #8]
 8017442:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 8017444:	bf00      	nop
 8017446:	3714      	adds	r7, #20
 8017448:	46bd      	mov	sp, r7
 801744a:	bd90      	pop	{r4, r7, pc}
 801744c:	20001c90 	.word	0x20001c90
 8017450:	20001c94 	.word	0x20001c94
 8017454:	0801da80 	.word	0x0801da80

08017458 <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8017458:	b480      	push	{r7}
 801745a:	b085      	sub	sp, #20
 801745c:	af00      	add	r7, sp, #0
 801745e:	4603      	mov	r3, r0
 8017460:	71fb      	strb	r3, [r7, #7]
 8017462:	460b      	mov	r3, r1
 8017464:	71bb      	strb	r3, [r7, #6]
 8017466:	4613      	mov	r3, r2
 8017468:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 801746a:	79ba      	ldrb	r2, [r7, #6]
 801746c:	797b      	ldrb	r3, [r7, #5]
 801746e:	1ad3      	subs	r3, r2, r3
 8017470:	b2db      	uxtb	r3, r3
 8017472:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8017474:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017478:	2b00      	cmp	r3, #0
 801747a:	da01      	bge.n	8017480 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 801747c:	2300      	movs	r3, #0
 801747e:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8017480:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8017482:	4618      	mov	r0, r3
 8017484:	3714      	adds	r7, #20
 8017486:	46bd      	mov	sp, r7
 8017488:	bc80      	pop	{r7}
 801748a:	4770      	bx	lr

0801748c <LimitTxPower>:
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
static Band_t* RegionBands;
#endif /* REGION_VERSION */

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 801748c:	b580      	push	{r7, lr}
 801748e:	b084      	sub	sp, #16
 8017490:	af00      	add	r7, sp, #0
 8017492:	603b      	str	r3, [r7, #0]
 8017494:	4603      	mov	r3, r0
 8017496:	71fb      	strb	r3, [r7, #7]
 8017498:	460b      	mov	r3, r1
 801749a:	71bb      	strb	r3, [r7, #6]
 801749c:	4613      	mov	r3, r2
 801749e:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 80174a0:	79fb      	ldrb	r3, [r7, #7]
 80174a2:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 80174a4:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80174a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80174ac:	4611      	mov	r1, r2
 80174ae:	4618      	mov	r0, r3
 80174b0:	f7fe fd79 	bl	8015fa6 <RegionCommonLimitTxPower>
 80174b4:	4603      	mov	r3, r0
 80174b6:	73fb      	strb	r3, [r7, #15]

    if( datarate == DR_4 )
 80174b8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80174bc:	2b04      	cmp	r3, #4
 80174be:	d106      	bne.n	80174ce <LimitTxPower+0x42>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 80174c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80174c4:	2b02      	cmp	r3, #2
 80174c6:	bfb8      	it	lt
 80174c8:	2302      	movlt	r3, #2
 80174ca:	73fb      	strb	r3, [r7, #15]
 80174cc:	e00d      	b.n	80174ea <LimitTxPower+0x5e>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 80174ce:	2204      	movs	r2, #4
 80174d0:	2100      	movs	r1, #0
 80174d2:	6838      	ldr	r0, [r7, #0]
 80174d4:	f7fe f8b0 	bl	8015638 <RegionCommonCountChannels>
 80174d8:	4603      	mov	r3, r0
 80174da:	2b31      	cmp	r3, #49	@ 0x31
 80174dc:	d805      	bhi.n	80174ea <LimitTxPower+0x5e>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 80174de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80174e2:	2b05      	cmp	r3, #5
 80174e4:	bfb8      	it	lt
 80174e6:	2305      	movlt	r3, #5
 80174e8:	73fb      	strb	r3, [r7, #15]
        }
    }
    return txPowerResult;
 80174ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80174ee:	4618      	mov	r0, r3
 80174f0:	3710      	adds	r7, #16
 80174f2:	46bd      	mov	sp, r7
 80174f4:	bd80      	pop	{r7, pc}
	...

080174f8 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 80174f8:	b580      	push	{r7, lr}
 80174fa:	b082      	sub	sp, #8
 80174fc:	af00      	add	r7, sp, #0
 80174fe:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8017500:	4b18      	ldr	r3, [pc, #96]	@ (8017564 <VerifyRfFreq+0x6c>)
 8017502:	6a1b      	ldr	r3, [r3, #32]
 8017504:	6878      	ldr	r0, [r7, #4]
 8017506:	4798      	blx	r3
 8017508:	4603      	mov	r3, r0
 801750a:	f083 0301 	eor.w	r3, r3, #1
 801750e:	b2db      	uxtb	r3, r3
 8017510:	2b00      	cmp	r3, #0
 8017512:	d001      	beq.n	8017518 <VerifyRfFreq+0x20>
    {
        return false;
 8017514:	2300      	movs	r3, #0
 8017516:	e021      	b.n	801755c <VerifyRfFreq+0x64>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	4a13      	ldr	r2, [pc, #76]	@ (8017568 <VerifyRfFreq+0x70>)
 801751c:	4293      	cmp	r3, r2
 801751e:	d910      	bls.n	8017542 <VerifyRfFreq+0x4a>
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	4a12      	ldr	r2, [pc, #72]	@ (801756c <VerifyRfFreq+0x74>)
 8017524:	4293      	cmp	r3, r2
 8017526:	d80c      	bhi.n	8017542 <VerifyRfFreq+0x4a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 8017528:	687a      	ldr	r2, [r7, #4]
 801752a:	4b11      	ldr	r3, [pc, #68]	@ (8017570 <VerifyRfFreq+0x78>)
 801752c:	4413      	add	r3, r2
 801752e:	4a11      	ldr	r2, [pc, #68]	@ (8017574 <VerifyRfFreq+0x7c>)
 8017530:	fba2 1203 	umull	r1, r2, r2, r3
 8017534:	0c92      	lsrs	r2, r2, #18
 8017536:	4910      	ldr	r1, [pc, #64]	@ (8017578 <VerifyRfFreq+0x80>)
 8017538:	fb01 f202 	mul.w	r2, r1, r2
 801753c:	1a9a      	subs	r2, r3, r2
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 801753e:	2a00      	cmp	r2, #0
 8017540:	d001      	beq.n	8017546 <VerifyRfFreq+0x4e>
    {
        return false;
 8017542:	2300      	movs	r3, #0
 8017544:	e00a      	b.n	801755c <VerifyRfFreq+0x64>
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	4a0c      	ldr	r2, [pc, #48]	@ (801757c <VerifyRfFreq+0x84>)
 801754a:	4293      	cmp	r3, r2
 801754c:	d903      	bls.n	8017556 <VerifyRfFreq+0x5e>
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	4a06      	ldr	r2, [pc, #24]	@ (801756c <VerifyRfFreq+0x74>)
 8017552:	4293      	cmp	r3, r2
 8017554:	d901      	bls.n	801755a <VerifyRfFreq+0x62>
    {
        return false;
 8017556:	2300      	movs	r3, #0
 8017558:	e000      	b.n	801755c <VerifyRfFreq+0x64>
    }
    return true;
 801755a:	2301      	movs	r3, #1
}
 801755c:	4618      	mov	r0, r3
 801755e:	3708      	adds	r7, #8
 8017560:	46bd      	mov	sp, r7
 8017562:	bd80      	pop	{r7, pc}
 8017564:	0801da80 	.word	0x0801da80
 8017568:	3708709f 	.word	0x3708709f
 801756c:	374886e0 	.word	0x374886e0
 8017570:	c8f78f60 	.word	0xc8f78f60
 8017574:	6fd91d85 	.word	0x6fd91d85
 8017578:	000927c0 	.word	0x000927c0
 801757c:	35c8015f 	.word	0x35c8015f

08017580 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8017580:	b590      	push	{r4, r7, lr}
 8017582:	b089      	sub	sp, #36	@ 0x24
 8017584:	af04      	add	r7, sp, #16
 8017586:	4603      	mov	r3, r0
 8017588:	460a      	mov	r2, r1
 801758a:	71fb      	strb	r3, [r7, #7]
 801758c:	4613      	mov	r3, r2
 801758e:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesUS915[datarate];
 8017590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017594:	4a0f      	ldr	r2, [pc, #60]	@ (80175d4 <GetTimeOnAir+0x54>)
 8017596:	5cd3      	ldrb	r3, [r2, r3]
 8017598:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 801759a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801759e:	490e      	ldr	r1, [pc, #56]	@ (80175d8 <GetTimeOnAir+0x58>)
 80175a0:	4618      	mov	r0, r3
 80175a2:	f7fe fd15 	bl	8015fd0 <RegionCommonGetBandwidth>
 80175a6:	60b8      	str	r0, [r7, #8]

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80175a8:	4b0c      	ldr	r3, [pc, #48]	@ (80175dc <GetTimeOnAir+0x5c>)
 80175aa:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80175ac:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80175b0:	88bb      	ldrh	r3, [r7, #4]
 80175b2:	b2db      	uxtb	r3, r3
 80175b4:	2101      	movs	r1, #1
 80175b6:	9103      	str	r1, [sp, #12]
 80175b8:	9302      	str	r3, [sp, #8]
 80175ba:	2300      	movs	r3, #0
 80175bc:	9301      	str	r3, [sp, #4]
 80175be:	2308      	movs	r3, #8
 80175c0:	9300      	str	r3, [sp, #0]
 80175c2:	2301      	movs	r3, #1
 80175c4:	68b9      	ldr	r1, [r7, #8]
 80175c6:	2001      	movs	r0, #1
 80175c8:	47a0      	blx	r4
 80175ca:	4603      	mov	r3, r0
}
 80175cc:	4618      	mov	r0, r3
 80175ce:	3714      	adds	r7, #20
 80175d0:	46bd      	mov	sp, r7
 80175d2:	bd90      	pop	{r4, r7, pc}
 80175d4:	0801d9fc 	.word	0x0801d9fc
 80175d8:	0801da0c 	.word	0x0801da0c
 80175dc:	0801da80 	.word	0x0801da80

080175e0 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 80175e0:	b580      	push	{r7, lr}
 80175e2:	b088      	sub	sp, #32
 80175e4:	af00      	add	r7, sp, #0
 80175e6:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 80175e8:	2300      	movs	r3, #0
 80175ea:	61bb      	str	r3, [r7, #24]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	781b      	ldrb	r3, [r3, #0]
 80175f0:	3b01      	subs	r3, #1
 80175f2:	2b38      	cmp	r3, #56	@ 0x38
 80175f4:	f200 813c 	bhi.w	8017870 <RegionUS915GetPhyParam+0x290>
 80175f8:	a201      	add	r2, pc, #4	@ (adr r2, 8017600 <RegionUS915GetPhyParam+0x20>)
 80175fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80175fe:	bf00      	nop
 8017600:	080176e5 	.word	0x080176e5
 8017604:	080176eb 	.word	0x080176eb
 8017608:	08017871 	.word	0x08017871
 801760c:	08017871 	.word	0x08017871
 8017610:	08017871 	.word	0x08017871
 8017614:	080176f1 	.word	0x080176f1
 8017618:	08017871 	.word	0x08017871
 801761c:	0801772b 	.word	0x0801772b
 8017620:	08017871 	.word	0x08017871
 8017624:	08017731 	.word	0x08017731
 8017628:	08017737 	.word	0x08017737
 801762c:	0801773d 	.word	0x0801773d
 8017630:	08017743 	.word	0x08017743
 8017634:	08017753 	.word	0x08017753
 8017638:	08017763 	.word	0x08017763
 801763c:	08017769 	.word	0x08017769
 8017640:	08017771 	.word	0x08017771
 8017644:	08017779 	.word	0x08017779
 8017648:	08017781 	.word	0x08017781
 801764c:	08017789 	.word	0x08017789
 8017650:	08017791 	.word	0x08017791
 8017654:	08017799 	.word	0x08017799
 8017658:	080177ad 	.word	0x080177ad
 801765c:	080177b3 	.word	0x080177b3
 8017660:	080177b9 	.word	0x080177b9
 8017664:	080177bf 	.word	0x080177bf
 8017668:	080177cb 	.word	0x080177cb
 801766c:	080177d7 	.word	0x080177d7
 8017670:	080177dd 	.word	0x080177dd
 8017674:	080177e5 	.word	0x080177e5
 8017678:	080177eb 	.word	0x080177eb
 801767c:	080177f1 	.word	0x080177f1
 8017680:	080177f7 	.word	0x080177f7
 8017684:	080176f7 	.word	0x080176f7
 8017688:	08017871 	.word	0x08017871
 801768c:	08017871 	.word	0x08017871
 8017690:	08017871 	.word	0x08017871
 8017694:	08017871 	.word	0x08017871
 8017698:	08017871 	.word	0x08017871
 801769c:	08017871 	.word	0x08017871
 80176a0:	08017871 	.word	0x08017871
 80176a4:	08017871 	.word	0x08017871
 80176a8:	08017871 	.word	0x08017871
 80176ac:	08017871 	.word	0x08017871
 80176b0:	08017871 	.word	0x08017871
 80176b4:	08017871 	.word	0x08017871
 80176b8:	08017871 	.word	0x08017871
 80176bc:	080177ff 	.word	0x080177ff
 80176c0:	08017813 	.word	0x08017813
 80176c4:	08017821 	.word	0x08017821
 80176c8:	08017827 	.word	0x08017827
 80176cc:	08017871 	.word	0x08017871
 80176d0:	0801782d 	.word	0x0801782d
 80176d4:	08017841 	.word	0x08017841
 80176d8:	08017847 	.word	0x08017847
 80176dc:	0801784d 	.word	0x0801784d
 80176e0:	0801785d 	.word	0x0801785d
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 80176e4:	2308      	movs	r3, #8
 80176e6:	61bb      	str	r3, [r7, #24]
            break;
 80176e8:	e0c3      	b.n	8017872 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 80176ea:	2300      	movs	r3, #0
 80176ec:	61bb      	str	r3, [r7, #24]
            break;
 80176ee:	e0c0      	b.n	8017872 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 80176f0:	2300      	movs	r3, #0
 80176f2:	61bb      	str	r3, [r7, #24]
            break;
 80176f4:	e0bd      	b.n	8017872 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80176fc:	733b      	strb	r3, [r7, #12]
 80176fe:	2304      	movs	r3, #4
 8017700:	737b      	strb	r3, [r7, #13]
 8017702:	2300      	movs	r3, #0
 8017704:	73bb      	strb	r3, [r7, #14]
 8017706:	2348      	movs	r3, #72	@ 0x48
 8017708:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )US915_TX_MAX_DATARATE,
                .MinDr = ( int8_t )US915_TX_MIN_DATARATE,
                .NbChannels = US915_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801770a:	4b5d      	ldr	r3, [pc, #372]	@ (8017880 <RegionUS915GetPhyParam+0x2a0>)
 801770c:	681b      	ldr	r3, [r3, #0]
 801770e:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017712:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8017714:	4b5a      	ldr	r3, [pc, #360]	@ (8017880 <RegionUS915GetPhyParam+0x2a0>)
 8017716:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017718:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801771a:	f107 030c 	add.w	r3, r7, #12
 801771e:	4618      	mov	r0, r3
 8017720:	f7fe fc03 	bl	8015f2a <RegionCommonGetNextLowerTxDr>
 8017724:	4603      	mov	r3, r0
 8017726:	61bb      	str	r3, [r7, #24]
            break;
 8017728:	e0a3      	b.n	8017872 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 801772a:	2300      	movs	r3, #0
 801772c:	61bb      	str	r3, [r7, #24]
            break;
 801772e:	e0a0      	b.n	8017872 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 8017730:	2300      	movs	r3, #0
 8017732:	61bb      	str	r3, [r7, #24]
            break;
 8017734:	e09d      	b.n	8017872 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8017736:	2340      	movs	r3, #64	@ 0x40
 8017738:	61bb      	str	r3, [r7, #24]
            break;
 801773a:	e09a      	b.n	8017872 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 801773c:	2320      	movs	r3, #32
 801773e:	61bb      	str	r3, [r7, #24]
            break;
 8017740:	e097      	b.n	8017872 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017748:	461a      	mov	r2, r3
 801774a:	4b4e      	ldr	r3, [pc, #312]	@ (8017884 <RegionUS915GetPhyParam+0x2a4>)
 801774c:	5c9b      	ldrb	r3, [r3, r2]
 801774e:	61bb      	str	r3, [r7, #24]
            break;
 8017750:	e08f      	b.n	8017872 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017758:	461a      	mov	r2, r3
 801775a:	4b4b      	ldr	r3, [pc, #300]	@ (8017888 <RegionUS915GetPhyParam+0x2a8>)
 801775c:	5c9b      	ldrb	r3, [r3, r2]
 801775e:	61bb      	str	r3, [r7, #24]
            break;
 8017760:	e087      	b.n	8017872 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 8017762:	2300      	movs	r3, #0
 8017764:	61bb      	str	r3, [r7, #24]
            break;
 8017766:	e084      	b.n	8017872 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 8017768:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 801776c:	61bb      	str	r3, [r7, #24]
            break;
 801776e:	e080      	b.n	8017872 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8017770:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017774:	61bb      	str	r3, [r7, #24]
            break;
 8017776:	e07c      	b.n	8017872 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8017778:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 801777c:	61bb      	str	r3, [r7, #24]
            break;
 801777e:	e078      	b.n	8017872 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8017780:	f241 3388 	movw	r3, #5000	@ 0x1388
 8017784:	61bb      	str	r3, [r7, #24]
            break;
 8017786:	e074      	b.n	8017872 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8017788:	f241 7370 	movw	r3, #6000	@ 0x1770
 801778c:	61bb      	str	r3, [r7, #24]
            break;
 801778e:	e070      	b.n	8017872 <RegionUS915GetPhyParam+0x292>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8017790:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8017794:	61bb      	str	r3, [r7, #24]
            break;
 8017796:	e06c      	b.n	8017872 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8017798:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801779c:	483b      	ldr	r0, [pc, #236]	@ (801788c <RegionUS915GetPhyParam+0x2ac>)
 801779e:	f001 f909 	bl	80189b4 <randr>
 80177a2:	4603      	mov	r3, r0
 80177a4:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80177a8:	61bb      	str	r3, [r7, #24]
            break;
 80177aa:	e062      	b.n	8017872 <RegionUS915GetPhyParam+0x292>
            break;
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 80177ac:	2300      	movs	r3, #0
 80177ae:	61bb      	str	r3, [r7, #24]
            break;
 80177b0:	e05f      	b.n	8017872 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 80177b2:	4b37      	ldr	r3, [pc, #220]	@ (8017890 <RegionUS915GetPhyParam+0x2b0>)
 80177b4:	61bb      	str	r3, [r7, #24]
            break;
 80177b6:	e05c      	b.n	8017872 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 80177b8:	2308      	movs	r3, #8
 80177ba:	61bb      	str	r3, [r7, #24]
            break;
 80177bc:	e059      	b.n	8017872 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80177be:	4b30      	ldr	r3, [pc, #192]	@ (8017880 <RegionUS915GetPhyParam+0x2a0>)
 80177c0:	681b      	ldr	r3, [r3, #0]
 80177c2:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 80177c6:	61bb      	str	r3, [r7, #24]
            break;
 80177c8:	e053      	b.n	8017872 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 80177ca:	4b2d      	ldr	r3, [pc, #180]	@ (8017880 <RegionUS915GetPhyParam+0x2a0>)
 80177cc:	681b      	ldr	r3, [r3, #0]
 80177ce:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 80177d2:	61bb      	str	r3, [r7, #24]
            break;
 80177d4:	e04d      	b.n	8017872 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 80177d6:	2348      	movs	r3, #72	@ 0x48
 80177d8:	61bb      	str	r3, [r7, #24]
            break;
 80177da:	e04a      	b.n	8017872 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 80177dc:	4b28      	ldr	r3, [pc, #160]	@ (8017880 <RegionUS915GetPhyParam+0x2a0>)
 80177de:	681b      	ldr	r3, [r3, #0]
 80177e0:	61bb      	str	r3, [r7, #24]
            break;
 80177e2:	e046      	b.n	8017872 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = US915_DEFAULT_UPLINK_DWELL_TIME;
 80177e4:	2300      	movs	r3, #0
 80177e6:	61bb      	str	r3, [r7, #24]
            break;
 80177e8:	e043      	b.n	8017872 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 80177ea:	2300      	movs	r3, #0
 80177ec:	61bb      	str	r3, [r7, #24]
            break;
 80177ee:	e040      	b.n	8017872 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 80177f0:	4b28      	ldr	r3, [pc, #160]	@ (8017894 <RegionUS915GetPhyParam+0x2b4>)
 80177f2:	61bb      	str	r3, [r7, #24]
            break;
 80177f4:	e03d      	b.n	8017872 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 80177f6:	f04f 0300 	mov.w	r3, #0
 80177fa:	61bb      	str	r3, [r7, #24]
            break;
 80177fc:	e039      	b.n	8017872 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	791b      	ldrb	r3, [r3, #4]
 8017802:	4a25      	ldr	r2, [pc, #148]	@ (8017898 <RegionUS915GetPhyParam+0x2b8>)
 8017804:	4922      	ldr	r1, [pc, #136]	@ (8017890 <RegionUS915GetPhyParam+0x2b0>)
 8017806:	4618      	mov	r0, r3
 8017808:	f7fd fcf1 	bl	80151ee <RegionBaseUSCalcDownlinkFrequency>
 801780c:	4603      	mov	r3, r0
 801780e:	61bb      	str	r3, [r7, #24]
                                                                US915_BEACON_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 8017810:	e02f      	b.n	8017872 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 8017812:	2317      	movs	r3, #23
 8017814:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 8017816:	2305      	movs	r3, #5
 8017818:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 801781a:	2303      	movs	r3, #3
 801781c:	76bb      	strb	r3, [r7, #26]
            break;
 801781e:	e028      	b.n	8017872 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 8017820:	2308      	movs	r3, #8
 8017822:	61bb      	str	r3, [r7, #24]
            break;
 8017824:	e025      	b.n	8017872 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8017826:	2308      	movs	r3, #8
 8017828:	61bb      	str	r3, [r7, #24]
            break;
 801782a:	e022      	b.n	8017872 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	791b      	ldrb	r3, [r3, #4]
 8017830:	4a19      	ldr	r2, [pc, #100]	@ (8017898 <RegionUS915GetPhyParam+0x2b8>)
 8017832:	4917      	ldr	r1, [pc, #92]	@ (8017890 <RegionUS915GetPhyParam+0x2b0>)
 8017834:	4618      	mov	r0, r3
 8017836:	f7fd fcda 	bl	80151ee <RegionBaseUSCalcDownlinkFrequency>
 801783a:	4603      	mov	r3, r0
 801783c:	61bb      	str	r3, [r7, #24]
                                                                US915_PING_SLOT_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 801783e:	e018      	b.n	8017872 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 8017840:	2308      	movs	r3, #8
 8017842:	61bb      	str	r3, [r7, #24]
            break;
 8017844:	e015      	b.n	8017872 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_PING_SLOT_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8017846:	2308      	movs	r3, #8
 8017848:	61bb      	str	r3, [r7, #24]
            break;
 801784a:	e012      	b.n	8017872 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017852:	461a      	mov	r2, r3
 8017854:	4b11      	ldr	r3, [pc, #68]	@ (801789c <RegionUS915GetPhyParam+0x2bc>)
 8017856:	5c9b      	ldrb	r3, [r3, r2]
 8017858:	61bb      	str	r3, [r7, #24]
            break;
 801785a:	e00a      	b.n	8017872 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017862:	490f      	ldr	r1, [pc, #60]	@ (80178a0 <RegionUS915GetPhyParam+0x2c0>)
 8017864:	4618      	mov	r0, r3
 8017866:	f7fe fbb3 	bl	8015fd0 <RegionCommonGetBandwidth>
 801786a:	4603      	mov	r3, r0
 801786c:	61bb      	str	r3, [r7, #24]
            break;
 801786e:	e000      	b.n	8017872 <RegionUS915GetPhyParam+0x292>
        }
        default:
        {
            break;
 8017870:	bf00      	nop
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 8017872:	69bb      	ldr	r3, [r7, #24]
 8017874:	61fb      	str	r3, [r7, #28]
 8017876:	69fb      	ldr	r3, [r7, #28]
}
 8017878:	4618      	mov	r0, r3
 801787a:	3720      	adds	r7, #32
 801787c:	46bd      	mov	sp, r7
 801787e:	bd80      	pop	{r7, pc}
 8017880:	20001c9c 	.word	0x20001c9c
 8017884:	0801da60 	.word	0x0801da60
 8017888:	0801da70 	.word	0x0801da70
 801788c:	fffffc18 	.word	0xfffffc18
 8017890:	370870a0 	.word	0x370870a0
 8017894:	4200999a 	.word	0x4200999a
 8017898:	000927c0 	.word	0x000927c0
 801789c:	0801d9fc 	.word	0x0801d9fc
 80178a0:	0801da0c 	.word	0x0801da0c

080178a4 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 80178a4:	b590      	push	{r4, r7, lr}
 80178a6:	b085      	sub	sp, #20
 80178a8:	af02      	add	r7, sp, #8
 80178aa:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 80178ac:	4b11      	ldr	r3, [pc, #68]	@ (80178f4 <RegionUS915SetBandTxDone+0x50>)
 80178ae:	681a      	ldr	r2, [r3, #0]
 80178b0:	4b11      	ldr	r3, [pc, #68]	@ (80178f8 <RegionUS915SetBandTxDone+0x54>)
 80178b2:	6819      	ldr	r1, [r3, #0]
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	781b      	ldrb	r3, [r3, #0]
 80178b8:	4618      	mov	r0, r3
 80178ba:	4603      	mov	r3, r0
 80178bc:	005b      	lsls	r3, r3, #1
 80178be:	4403      	add	r3, r0
 80178c0:	009b      	lsls	r3, r3, #2
 80178c2:	440b      	add	r3, r1
 80178c4:	3309      	adds	r3, #9
 80178c6:	781b      	ldrb	r3, [r3, #0]
 80178c8:	4619      	mov	r1, r3
 80178ca:	460b      	mov	r3, r1
 80178cc:	005b      	lsls	r3, r3, #1
 80178ce:	440b      	add	r3, r1
 80178d0:	00db      	lsls	r3, r3, #3
 80178d2:	18d0      	adds	r0, r2, r3
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	6899      	ldr	r1, [r3, #8]
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	785c      	ldrb	r4, [r3, #1]
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	691a      	ldr	r2, [r3, #16]
 80178e0:	9200      	str	r2, [sp, #0]
 80178e2:	68db      	ldr	r3, [r3, #12]
 80178e4:	4622      	mov	r2, r4
 80178e6:	f7fd fef9 	bl	80156dc <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 80178ea:	bf00      	nop
 80178ec:	370c      	adds	r7, #12
 80178ee:	46bd      	mov	sp, r7
 80178f0:	bd90      	pop	{r4, r7, pc}
 80178f2:	bf00      	nop
 80178f4:	20001c98 	.word	0x20001c98
 80178f8:	20001c9c 	.word	0x20001c9c

080178fc <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 80178fc:	b580      	push	{r7, lr}
 80178fe:	b08a      	sub	sp, #40	@ 0x28
 8017900:	af00      	add	r7, sp, #0
 8017902:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 8017904:	2301      	movs	r3, #1
 8017906:	81bb      	strh	r3, [r7, #12]
 8017908:	2300      	movs	r3, #0
 801790a:	73bb      	strb	r3, [r7, #14]
 801790c:	2300      	movs	r3, #0
 801790e:	613b      	str	r3, [r7, #16]
 8017910:	2300      	movs	r3, #0
 8017912:	617b      	str	r3, [r7, #20]
 8017914:	2300      	movs	r3, #0
 8017916:	61bb      	str	r3, [r7, #24]
 8017918:	2300      	movs	r3, #0
 801791a:	61fb      	str	r3, [r7, #28]
 801791c:	2300      	movs	r3, #0
 801791e:	f887 3020 	strb.w	r3, [r7, #32]
    {
       US915_BAND0
    };

    switch( params->Type )
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	7a1b      	ldrb	r3, [r3, #8]
 8017926:	2b00      	cmp	r3, #0
 8017928:	d007      	beq.n	801793a <RegionUS915InitDefaults+0x3e>
 801792a:	2b00      	cmp	r3, #0
 801792c:	f2c0 8106 	blt.w	8017b3c <RegionUS915InitDefaults+0x240>
 8017930:	3b01      	subs	r3, #1
 8017932:	2b01      	cmp	r3, #1
 8017934:	f200 8102 	bhi.w	8017b3c <RegionUS915InitDefaults+0x240>
 8017938:	e0ce      	b.n	8017ad8 <RegionUS915InitDefaults+0x1dc>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	681b      	ldr	r3, [r3, #0]
 801793e:	2b00      	cmp	r3, #0
 8017940:	f000 80fe 	beq.w	8017b40 <RegionUS915InitDefaults+0x244>
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	685b      	ldr	r3, [r3, #4]
 8017948:	2b00      	cmp	r3, #0
 801794a:	f000 80f9 	beq.w	8017b40 <RegionUS915InitDefaults+0x244>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	681b      	ldr	r3, [r3, #0]
 8017952:	4a7d      	ldr	r2, [pc, #500]	@ (8017b48 <RegionUS915InitDefaults+0x24c>)
 8017954:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	685b      	ldr	r3, [r3, #4]
 801795a:	4a7c      	ldr	r2, [pc, #496]	@ (8017b4c <RegionUS915InitDefaults+0x250>)
 801795c:	6013      	str	r3, [r2, #0]

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            // Initialize 8 bit channel groups index
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 801795e:	4b7a      	ldr	r3, [pc, #488]	@ (8017b48 <RegionUS915InitDefaults+0x24c>)
 8017960:	681b      	ldr	r3, [r3, #0]
 8017962:	2200      	movs	r2, #0
 8017964:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

            // Initialize the join trials counter
            RegionNvmGroup1->JoinTrialsCounter = 0;
 8017968:	4b77      	ldr	r3, [pc, #476]	@ (8017b48 <RegionUS915InitDefaults+0x24c>)
 801796a:	681b      	ldr	r3, [r3, #0]
 801796c:	2200      	movs	r2, #0
 801796e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 8017972:	4b75      	ldr	r3, [pc, #468]	@ (8017b48 <RegionUS915InitDefaults+0x24c>)
 8017974:	681b      	ldr	r3, [r3, #0]
 8017976:	4618      	mov	r0, r3
 8017978:	f107 030c 	add.w	r3, r7, #12
 801797c:	2218      	movs	r2, #24
 801797e:	4619      	mov	r1, r3
 8017980:	f001 f82f 	bl	80189e2 <memcpy1>
            // Default bands
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
#endif /* REGION_VERSION */

            // Default channels
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8017984:	2300      	movs	r3, #0
 8017986:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801798a:	e02e      	b.n	80179ea <RegionUS915InitDefaults+0xee>
            {
                // 125 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 801798c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017990:	4a6f      	ldr	r2, [pc, #444]	@ (8017b50 <RegionUS915InitDefaults+0x254>)
 8017992:	fb03 f202 	mul.w	r2, r3, r2
 8017996:	4b6f      	ldr	r3, [pc, #444]	@ (8017b54 <RegionUS915InitDefaults+0x258>)
 8017998:	4413      	add	r3, r2
 801799a:	4a6c      	ldr	r2, [pc, #432]	@ (8017b4c <RegionUS915InitDefaults+0x250>)
 801799c:	6811      	ldr	r1, [r2, #0]
 801799e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80179a2:	4618      	mov	r0, r3
 80179a4:	4613      	mov	r3, r2
 80179a6:	005b      	lsls	r3, r3, #1
 80179a8:	4413      	add	r3, r2
 80179aa:	009b      	lsls	r3, r3, #2
 80179ac:	440b      	add	r3, r1
 80179ae:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 80179b0:	4b66      	ldr	r3, [pc, #408]	@ (8017b4c <RegionUS915InitDefaults+0x250>)
 80179b2:	6819      	ldr	r1, [r3, #0]
 80179b4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80179b8:	4613      	mov	r3, r2
 80179ba:	005b      	lsls	r3, r3, #1
 80179bc:	4413      	add	r3, r2
 80179be:	009b      	lsls	r3, r3, #2
 80179c0:	440b      	add	r3, r1
 80179c2:	3308      	adds	r3, #8
 80179c4:	2230      	movs	r2, #48	@ 0x30
 80179c6:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 80179c8:	4b60      	ldr	r3, [pc, #384]	@ (8017b4c <RegionUS915InitDefaults+0x250>)
 80179ca:	6819      	ldr	r1, [r3, #0]
 80179cc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80179d0:	4613      	mov	r3, r2
 80179d2:	005b      	lsls	r3, r3, #1
 80179d4:	4413      	add	r3, r2
 80179d6:	009b      	lsls	r3, r3, #2
 80179d8:	440b      	add	r3, r1
 80179da:	3309      	adds	r3, #9
 80179dc:	2200      	movs	r2, #0
 80179de:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 80179e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80179e4:	3301      	adds	r3, #1
 80179e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80179ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80179ee:	2b3f      	cmp	r3, #63	@ 0x3f
 80179f0:	d9cc      	bls.n	801798c <RegionUS915InitDefaults+0x90>
            }
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 80179f2:	2340      	movs	r3, #64	@ 0x40
 80179f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80179f8:	e02f      	b.n	8017a5a <RegionUS915InitDefaults+0x15e>
            {
                // 500 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 80179fa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80179fe:	3b40      	subs	r3, #64	@ 0x40
 8017a00:	4a55      	ldr	r2, [pc, #340]	@ (8017b58 <RegionUS915InitDefaults+0x25c>)
 8017a02:	fb03 f202 	mul.w	r2, r3, r2
 8017a06:	4b55      	ldr	r3, [pc, #340]	@ (8017b5c <RegionUS915InitDefaults+0x260>)
 8017a08:	4413      	add	r3, r2
 8017a0a:	4a50      	ldr	r2, [pc, #320]	@ (8017b4c <RegionUS915InitDefaults+0x250>)
 8017a0c:	6811      	ldr	r1, [r2, #0]
 8017a0e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8017a12:	4618      	mov	r0, r3
 8017a14:	4613      	mov	r3, r2
 8017a16:	005b      	lsls	r3, r3, #1
 8017a18:	4413      	add	r3, r2
 8017a1a:	009b      	lsls	r3, r3, #2
 8017a1c:	440b      	add	r3, r1
 8017a1e:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 8017a20:	4b4a      	ldr	r3, [pc, #296]	@ (8017b4c <RegionUS915InitDefaults+0x250>)
 8017a22:	6819      	ldr	r1, [r3, #0]
 8017a24:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8017a28:	4613      	mov	r3, r2
 8017a2a:	005b      	lsls	r3, r3, #1
 8017a2c:	4413      	add	r3, r2
 8017a2e:	009b      	lsls	r3, r3, #2
 8017a30:	440b      	add	r3, r1
 8017a32:	3308      	adds	r3, #8
 8017a34:	2244      	movs	r2, #68	@ 0x44
 8017a36:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 8017a38:	4b44      	ldr	r3, [pc, #272]	@ (8017b4c <RegionUS915InitDefaults+0x250>)
 8017a3a:	6819      	ldr	r1, [r3, #0]
 8017a3c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8017a40:	4613      	mov	r3, r2
 8017a42:	005b      	lsls	r3, r3, #1
 8017a44:	4413      	add	r3, r2
 8017a46:	009b      	lsls	r3, r3, #2
 8017a48:	440b      	add	r3, r1
 8017a4a:	3309      	adds	r3, #9
 8017a4c:	2200      	movs	r2, #0
 8017a4e:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8017a50:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017a54:	3301      	adds	r3, #1
 8017a56:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8017a5a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017a5e:	2b47      	cmp	r3, #71	@ 0x47
 8017a60:	d9cb      	bls.n	80179fa <RegionUS915InitDefaults+0xfe>
            RegionNvmGroup2->ChannelsDefaultMask[2] = HYBRID_DEFAULT_MASK2;
            RegionNvmGroup2->ChannelsDefaultMask[3] = HYBRID_DEFAULT_MASK3;
            RegionNvmGroup2->ChannelsDefaultMask[4] = HYBRID_DEFAULT_MASK4;
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
#else
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 8017a62:	4b3a      	ldr	r3, [pc, #232]	@ (8017b4c <RegionUS915InitDefaults+0x250>)
 8017a64:	681b      	ldr	r3, [r3, #0]
 8017a66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017a6a:	f8a3 248c 	strh.w	r2, [r3, #1164]	@ 0x48c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 8017a6e:	4b37      	ldr	r3, [pc, #220]	@ (8017b4c <RegionUS915InitDefaults+0x250>)
 8017a70:	681b      	ldr	r3, [r3, #0]
 8017a72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017a76:	f8a3 248e 	strh.w	r2, [r3, #1166]	@ 0x48e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 8017a7a:	4b34      	ldr	r3, [pc, #208]	@ (8017b4c <RegionUS915InitDefaults+0x250>)
 8017a7c:	681b      	ldr	r3, [r3, #0]
 8017a7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017a82:	f8a3 2490 	strh.w	r2, [r3, #1168]	@ 0x490
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 8017a86:	4b31      	ldr	r3, [pc, #196]	@ (8017b4c <RegionUS915InitDefaults+0x250>)
 8017a88:	681b      	ldr	r3, [r3, #0]
 8017a8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017a8e:	f8a3 2492 	strh.w	r2, [r3, #1170]	@ 0x492
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 8017a92:	4b2e      	ldr	r3, [pc, #184]	@ (8017b4c <RegionUS915InitDefaults+0x250>)
 8017a94:	681b      	ldr	r3, [r3, #0]
 8017a96:	22ff      	movs	r2, #255	@ 0xff
 8017a98:	f8a3 2494 	strh.w	r2, [r3, #1172]	@ 0x494
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8017a9c:	4b2b      	ldr	r3, [pc, #172]	@ (8017b4c <RegionUS915InitDefaults+0x250>)
 8017a9e:	681b      	ldr	r3, [r3, #0]
 8017aa0:	2200      	movs	r2, #0
 8017aa2:	f8a3 2496 	strh.w	r2, [r3, #1174]	@ 0x496
#endif /* HYBRID_ENABLED == 1 */

            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8017aa6:	4b29      	ldr	r3, [pc, #164]	@ (8017b4c <RegionUS915InitDefaults+0x250>)
 8017aa8:	681b      	ldr	r3, [r3, #0]
 8017aaa:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 8017aae:	4b27      	ldr	r3, [pc, #156]	@ (8017b4c <RegionUS915InitDefaults+0x250>)
 8017ab0:	681b      	ldr	r3, [r3, #0]
 8017ab2:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 8017ab6:	2206      	movs	r2, #6
 8017ab8:	4619      	mov	r1, r3
 8017aba:	f7fd fde9 	bl	8015690 <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8017abe:	4b22      	ldr	r3, [pc, #136]	@ (8017b48 <RegionUS915InitDefaults+0x24c>)
 8017ac0:	681b      	ldr	r3, [r3, #0]
 8017ac2:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 8017ac6:	4b21      	ldr	r3, [pc, #132]	@ (8017b4c <RegionUS915InitDefaults+0x250>)
 8017ac8:	681b      	ldr	r3, [r3, #0]
 8017aca:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8017ace:	2206      	movs	r2, #6
 8017ad0:	4619      	mov	r1, r3
 8017ad2:	f7fd fddd 	bl	8015690 <RegionCommonChanMaskCopy>
            break;
 8017ad6:	e034      	b.n	8017b42 <RegionUS915InitDefaults+0x246>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8017ad8:	4b1c      	ldr	r3, [pc, #112]	@ (8017b4c <RegionUS915InitDefaults+0x250>)
 8017ada:	681b      	ldr	r3, [r3, #0]
 8017adc:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 8017ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8017b4c <RegionUS915InitDefaults+0x250>)
 8017ae2:	681b      	ldr	r3, [r3, #0]
 8017ae4:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 8017ae8:	2206      	movs	r2, #6
 8017aea:	4619      	mov	r1, r3
 8017aec:	f7fd fdd0 	bl	8015690 <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8017af0:	2300      	movs	r3, #0
 8017af2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8017af6:	e01c      	b.n	8017b32 <RegionUS915InitDefaults+0x236>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8017af8:	4b13      	ldr	r3, [pc, #76]	@ (8017b48 <RegionUS915InitDefaults+0x24c>)
 8017afa:	681b      	ldr	r3, [r3, #0]
 8017afc:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8017b00:	3248      	adds	r2, #72	@ 0x48
 8017b02:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8017b06:	4b11      	ldr	r3, [pc, #68]	@ (8017b4c <RegionUS915InitDefaults+0x250>)
 8017b08:	681b      	ldr	r3, [r3, #0]
 8017b0a:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8017b0e:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 8017b12:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8017b16:	4b0c      	ldr	r3, [pc, #48]	@ (8017b48 <RegionUS915InitDefaults+0x24c>)
 8017b18:	681b      	ldr	r3, [r3, #0]
 8017b1a:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8017b1e:	4001      	ands	r1, r0
 8017b20:	b289      	uxth	r1, r1
 8017b22:	3248      	adds	r2, #72	@ 0x48
 8017b24:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8017b28:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8017b2c:	3301      	adds	r3, #1
 8017b2e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8017b32:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8017b36:	2b05      	cmp	r3, #5
 8017b38:	d9de      	bls.n	8017af8 <RegionUS915InitDefaults+0x1fc>
            }
            break;
 8017b3a:	e002      	b.n	8017b42 <RegionUS915InitDefaults+0x246>
        }
        default:
        {
            break;
 8017b3c:	bf00      	nop
 8017b3e:	e000      	b.n	8017b42 <RegionUS915InitDefaults+0x246>
                return;
 8017b40:	bf00      	nop
        }
    }
#endif /* REGION_US915 */
}
 8017b42:	3728      	adds	r7, #40	@ 0x28
 8017b44:	46bd      	mov	sp, r7
 8017b46:	bd80      	pop	{r7, pc}
 8017b48:	20001c98 	.word	0x20001c98
 8017b4c:	20001c9c 	.word	0x20001c9c
 8017b50:	00030d40 	.word	0x00030d40
 8017b54:	35c80160 	.word	0x35c80160
 8017b58:	00186a00 	.word	0x00186a00
 8017b5c:	35d2afc0 	.word	0x35d2afc0

08017b60 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8017b60:	b580      	push	{r7, lr}
 8017b62:	b082      	sub	sp, #8
 8017b64:	af00      	add	r7, sp, #0
 8017b66:	6078      	str	r0, [r7, #4]
 8017b68:	460b      	mov	r3, r1
 8017b6a:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_US915 )
    switch( phyAttribute )
 8017b6c:	78fb      	ldrb	r3, [r7, #3]
 8017b6e:	2b0f      	cmp	r3, #15
 8017b70:	d858      	bhi.n	8017c24 <RegionUS915Verify+0xc4>
 8017b72:	a201      	add	r2, pc, #4	@ (adr r2, 8017b78 <RegionUS915Verify+0x18>)
 8017b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017b78:	08017bb9 	.word	0x08017bb9
 8017b7c:	08017c25 	.word	0x08017c25
 8017b80:	08017c25 	.word	0x08017c25
 8017b84:	08017c25 	.word	0x08017c25
 8017b88:	08017c25 	.word	0x08017c25
 8017b8c:	08017bc7 	.word	0x08017bc7
 8017b90:	08017bc7 	.word	0x08017bc7
 8017b94:	08017be5 	.word	0x08017be5
 8017b98:	08017c25 	.word	0x08017c25
 8017b9c:	08017c03 	.word	0x08017c03
 8017ba0:	08017c03 	.word	0x08017c03
 8017ba4:	08017c25 	.word	0x08017c25
 8017ba8:	08017c25 	.word	0x08017c25
 8017bac:	08017c25 	.word	0x08017c25
 8017bb0:	08017c25 	.word	0x08017c25
 8017bb4:	08017c21 	.word	0x08017c21
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	681b      	ldr	r3, [r3, #0]
 8017bbc:	4618      	mov	r0, r3
 8017bbe:	f7ff fc9b 	bl	80174f8 <VerifyRfFreq>
 8017bc2:	4603      	mov	r3, r0
 8017bc4:	e02f      	b.n	8017c26 <RegionUS915Verify+0xc6>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_TX_DR:
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 8017bc6:	687b      	ldr	r3, [r7, #4]
 8017bc8:	f993 3000 	ldrsb.w	r3, [r3]
 8017bcc:	2204      	movs	r2, #4
 8017bce:	2100      	movs	r1, #0
 8017bd0:	4618      	mov	r0, r3
 8017bd2:	f7fd fce0 	bl	8015596 <RegionCommonValueInRange>
 8017bd6:	4603      	mov	r3, r0
 8017bd8:	2b00      	cmp	r3, #0
 8017bda:	bf14      	ite	ne
 8017bdc:	2301      	movne	r3, #1
 8017bde:	2300      	moveq	r3, #0
 8017be0:	b2db      	uxtb	r3, r3
 8017be2:	e020      	b.n	8017c26 <RegionUS915Verify+0xc6>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	f993 3000 	ldrsb.w	r3, [r3]
 8017bea:	220d      	movs	r2, #13
 8017bec:	2108      	movs	r1, #8
 8017bee:	4618      	mov	r0, r3
 8017bf0:	f7fd fcd1 	bl	8015596 <RegionCommonValueInRange>
 8017bf4:	4603      	mov	r3, r0
 8017bf6:	2b00      	cmp	r3, #0
 8017bf8:	bf14      	ite	ne
 8017bfa:	2301      	movne	r3, #1
 8017bfc:	2300      	moveq	r3, #0
 8017bfe:	b2db      	uxtb	r3, r3
 8017c00:	e011      	b.n	8017c26 <RegionUS915Verify+0xc6>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 8017c02:	687b      	ldr	r3, [r7, #4]
 8017c04:	f993 3000 	ldrsb.w	r3, [r3]
 8017c08:	220e      	movs	r2, #14
 8017c0a:	2100      	movs	r1, #0
 8017c0c:	4618      	mov	r0, r3
 8017c0e:	f7fd fcc2 	bl	8015596 <RegionCommonValueInRange>
 8017c12:	4603      	mov	r3, r0
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	bf14      	ite	ne
 8017c18:	2301      	movne	r3, #1
 8017c1a:	2300      	moveq	r3, #0
 8017c1c:	b2db      	uxtb	r3, r3
 8017c1e:	e002      	b.n	8017c26 <RegionUS915Verify+0xc6>
        }
        case PHY_DUTY_CYCLE:
        {
            return US915_DUTY_CYCLE_ENABLED;
 8017c20:	2300      	movs	r3, #0
 8017c22:	e000      	b.n	8017c26 <RegionUS915Verify+0xc6>
        }
        default:
            return false;
 8017c24:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_US915 */
}
 8017c26:	4618      	mov	r0, r3
 8017c28:	3708      	adds	r7, #8
 8017c2a:	46bd      	mov	sp, r7
 8017c2c:	bd80      	pop	{r7, pc}
 8017c2e:	bf00      	nop

08017c30 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8017c30:	b480      	push	{r7}
 8017c32:	b085      	sub	sp, #20
 8017c34:	af00      	add	r7, sp, #0
 8017c36:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	791b      	ldrb	r3, [r3, #4]
 8017c3c:	2b10      	cmp	r3, #16
 8017c3e:	d160      	bne.n	8017d02 <RegionUS915ApplyCFList+0xd2>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	681b      	ldr	r3, [r3, #0]
 8017c44:	330f      	adds	r3, #15
 8017c46:	781b      	ldrb	r3, [r3, #0]
 8017c48:	2b01      	cmp	r3, #1
 8017c4a:	d15c      	bne.n	8017d06 <RegionUS915ApplyCFList+0xd6>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8017c4c:	2300      	movs	r3, #0
 8017c4e:	73fb      	strb	r3, [r7, #15]
 8017c50:	2300      	movs	r3, #0
 8017c52:	73bb      	strb	r3, [r7, #14]
 8017c54:	e051      	b.n	8017cfa <RegionUS915ApplyCFList+0xca>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	681a      	ldr	r2, [r3, #0]
 8017c5a:	7bbb      	ldrb	r3, [r7, #14]
 8017c5c:	4413      	add	r3, r2
 8017c5e:	7819      	ldrb	r1, [r3, #0]
 8017c60:	4b2b      	ldr	r3, [pc, #172]	@ (8017d10 <RegionUS915ApplyCFList+0xe0>)
 8017c62:	681b      	ldr	r3, [r3, #0]
 8017c64:	7bfa      	ldrb	r2, [r7, #15]
 8017c66:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 8017c6a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 8017c6e:	4b28      	ldr	r3, [pc, #160]	@ (8017d10 <RegionUS915ApplyCFList+0xe0>)
 8017c70:	681b      	ldr	r3, [r3, #0]
 8017c72:	7bfa      	ldrb	r2, [r7, #15]
 8017c74:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 8017c78:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	681a      	ldr	r2, [r3, #0]
 8017c80:	7bbb      	ldrb	r3, [r7, #14]
 8017c82:	3301      	adds	r3, #1
 8017c84:	4413      	add	r3, r2
 8017c86:	781b      	ldrb	r3, [r3, #0]
 8017c88:	021b      	lsls	r3, r3, #8
 8017c8a:	b299      	uxth	r1, r3
 8017c8c:	4b20      	ldr	r3, [pc, #128]	@ (8017d10 <RegionUS915ApplyCFList+0xe0>)
 8017c8e:	681b      	ldr	r3, [r3, #0]
 8017c90:	7bfa      	ldrb	r2, [r7, #15]
 8017c92:	4301      	orrs	r1, r0
 8017c94:	b289      	uxth	r1, r1
 8017c96:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 8017c9a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if( chMaskItr == 4 )
 8017c9e:	7bfb      	ldrb	r3, [r7, #15]
 8017ca0:	2b04      	cmp	r3, #4
 8017ca2:	d10f      	bne.n	8017cc4 <RegionUS915ApplyCFList+0x94>
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 8017ca4:	4b1a      	ldr	r3, [pc, #104]	@ (8017d10 <RegionUS915ApplyCFList+0xe0>)
 8017ca6:	681b      	ldr	r3, [r3, #0]
 8017ca8:	7bfa      	ldrb	r2, [r7, #15]
 8017caa:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 8017cae:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8017cb2:	4b17      	ldr	r3, [pc, #92]	@ (8017d10 <RegionUS915ApplyCFList+0xe0>)
 8017cb4:	681b      	ldr	r3, [r3, #0]
 8017cb6:	7bfa      	ldrb	r2, [r7, #15]
 8017cb8:	b2c9      	uxtb	r1, r1
 8017cba:	b289      	uxth	r1, r1
 8017cbc:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 8017cc0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 8017cc4:	4b13      	ldr	r3, [pc, #76]	@ (8017d14 <RegionUS915ApplyCFList+0xe4>)
 8017cc6:	681b      	ldr	r3, [r3, #0]
 8017cc8:	7bfa      	ldrb	r2, [r7, #15]
 8017cca:	3248      	adds	r2, #72	@ 0x48
 8017ccc:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8017cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8017d10 <RegionUS915ApplyCFList+0xe0>)
 8017cd2:	681b      	ldr	r3, [r3, #0]
 8017cd4:	7bfa      	ldrb	r2, [r7, #15]
 8017cd6:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 8017cda:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8017cde:	4b0d      	ldr	r3, [pc, #52]	@ (8017d14 <RegionUS915ApplyCFList+0xe4>)
 8017ce0:	681b      	ldr	r3, [r3, #0]
 8017ce2:	7bfa      	ldrb	r2, [r7, #15]
 8017ce4:	4001      	ands	r1, r0
 8017ce6:	b289      	uxth	r1, r1
 8017ce8:	3248      	adds	r2, #72	@ 0x48
 8017cea:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8017cee:	7bfb      	ldrb	r3, [r7, #15]
 8017cf0:	3301      	adds	r3, #1
 8017cf2:	73fb      	strb	r3, [r7, #15]
 8017cf4:	7bbb      	ldrb	r3, [r7, #14]
 8017cf6:	3302      	adds	r3, #2
 8017cf8:	73bb      	strb	r3, [r7, #14]
 8017cfa:	7bfb      	ldrb	r3, [r7, #15]
 8017cfc:	2b04      	cmp	r3, #4
 8017cfe:	d9aa      	bls.n	8017c56 <RegionUS915ApplyCFList+0x26>
 8017d00:	e002      	b.n	8017d08 <RegionUS915ApplyCFList+0xd8>
        return;
 8017d02:	bf00      	nop
 8017d04:	e000      	b.n	8017d08 <RegionUS915ApplyCFList+0xd8>
        return;
 8017d06:	bf00      	nop
    }
#endif /* REGION_US915 */
}
 8017d08:	3714      	adds	r7, #20
 8017d0a:	46bd      	mov	sp, r7
 8017d0c:	bc80      	pop	{r7}
 8017d0e:	4770      	bx	lr
 8017d10:	20001c9c 	.word	0x20001c9c
 8017d14:	20001c98 	.word	0x20001c98

08017d18 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8017d18:	b580      	push	{r7, lr}
 8017d1a:	b084      	sub	sp, #16
 8017d1c:	af00      	add	r7, sp, #0
 8017d1e:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	681b      	ldr	r3, [r3, #0]
 8017d24:	2204      	movs	r2, #4
 8017d26:	2100      	movs	r1, #0
 8017d28:	4618      	mov	r0, r3
 8017d2a:	f7fd fc85 	bl	8015638 <RegionCommonCountChannels>
 8017d2e:	4603      	mov	r3, r0
 8017d30:	73bb      	strb	r3, [r7, #14]

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 8017d32:	7bbb      	ldrb	r3, [r7, #14]
 8017d34:	2b01      	cmp	r3, #1
 8017d36:	d804      	bhi.n	8017d42 <RegionUS915ChanMaskSet+0x2a>
 8017d38:	7bbb      	ldrb	r3, [r7, #14]
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d001      	beq.n	8017d42 <RegionUS915ChanMaskSet+0x2a>
        ( nbChannels > 0 ) )
    {
        return false;
 8017d3e:	2300      	movs	r3, #0
 8017d40:	e04c      	b.n	8017ddc <RegionUS915ChanMaskSet+0xc4>
    }

    switch( chanMaskSet->ChannelsMaskType )
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	791b      	ldrb	r3, [r3, #4]
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	d002      	beq.n	8017d50 <RegionUS915ChanMaskSet+0x38>
 8017d4a:	2b01      	cmp	r3, #1
 8017d4c:	d038      	beq.n	8017dc0 <RegionUS915ChanMaskSet+0xa8>
 8017d4e:	e042      	b.n	8017dd6 <RegionUS915ChanMaskSet+0xbe>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8017d50:	4b24      	ldr	r3, [pc, #144]	@ (8017de4 <RegionUS915ChanMaskSet+0xcc>)
 8017d52:	681b      	ldr	r3, [r3, #0]
 8017d54:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	681b      	ldr	r3, [r3, #0]
 8017d5c:	2206      	movs	r2, #6
 8017d5e:	4619      	mov	r1, r3
 8017d60:	f7fd fc96 	bl	8015690 <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 8017d64:	4b1f      	ldr	r3, [pc, #124]	@ (8017de4 <RegionUS915ChanMaskSet+0xcc>)
 8017d66:	681b      	ldr	r3, [r3, #0]
 8017d68:	f8b3 2494 	ldrh.w	r2, [r3, #1172]	@ 0x494
 8017d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8017de4 <RegionUS915ChanMaskSet+0xcc>)
 8017d6e:	681b      	ldr	r3, [r3, #0]
 8017d70:	b2d2      	uxtb	r2, r2
 8017d72:	b292      	uxth	r2, r2
 8017d74:	f8a3 2494 	strh.w	r2, [r3, #1172]	@ 0x494
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8017d78:	4b1a      	ldr	r3, [pc, #104]	@ (8017de4 <RegionUS915ChanMaskSet+0xcc>)
 8017d7a:	681b      	ldr	r3, [r3, #0]
 8017d7c:	2200      	movs	r2, #0
 8017d7e:	f8a3 2496 	strh.w	r2, [r3, #1174]	@ 0x496

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8017d82:	2300      	movs	r3, #0
 8017d84:	73fb      	strb	r3, [r7, #15]
 8017d86:	e017      	b.n	8017db8 <RegionUS915ChanMaskSet+0xa0>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8017d88:	4b17      	ldr	r3, [pc, #92]	@ (8017de8 <RegionUS915ChanMaskSet+0xd0>)
 8017d8a:	681b      	ldr	r3, [r3, #0]
 8017d8c:	7bfa      	ldrb	r2, [r7, #15]
 8017d8e:	3248      	adds	r2, #72	@ 0x48
 8017d90:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8017d94:	4b13      	ldr	r3, [pc, #76]	@ (8017de4 <RegionUS915ChanMaskSet+0xcc>)
 8017d96:	681b      	ldr	r3, [r3, #0]
 8017d98:	7bfa      	ldrb	r2, [r7, #15]
 8017d9a:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 8017d9e:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8017da2:	4b11      	ldr	r3, [pc, #68]	@ (8017de8 <RegionUS915ChanMaskSet+0xd0>)
 8017da4:	681b      	ldr	r3, [r3, #0]
 8017da6:	7bfa      	ldrb	r2, [r7, #15]
 8017da8:	4001      	ands	r1, r0
 8017daa:	b289      	uxth	r1, r1
 8017dac:	3248      	adds	r2, #72	@ 0x48
 8017dae:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8017db2:	7bfb      	ldrb	r3, [r7, #15]
 8017db4:	3301      	adds	r3, #1
 8017db6:	73fb      	strb	r3, [r7, #15]
 8017db8:	7bfb      	ldrb	r3, [r7, #15]
 8017dba:	2b05      	cmp	r3, #5
 8017dbc:	d9e4      	bls.n	8017d88 <RegionUS915ChanMaskSet+0x70>
            }
            break;
 8017dbe:	e00c      	b.n	8017dda <RegionUS915ChanMaskSet+0xc2>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8017dc0:	4b08      	ldr	r3, [pc, #32]	@ (8017de4 <RegionUS915ChanMaskSet+0xcc>)
 8017dc2:	681b      	ldr	r3, [r3, #0]
 8017dc4:	f203 408c 	addw	r0, r3, #1164	@ 0x48c
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	681b      	ldr	r3, [r3, #0]
 8017dcc:	2206      	movs	r2, #6
 8017dce:	4619      	mov	r1, r3
 8017dd0:	f7fd fc5e 	bl	8015690 <RegionCommonChanMaskCopy>
            break;
 8017dd4:	e001      	b.n	8017dda <RegionUS915ChanMaskSet+0xc2>
        }
        default:
            return false;
 8017dd6:	2300      	movs	r3, #0
 8017dd8:	e000      	b.n	8017ddc <RegionUS915ChanMaskSet+0xc4>
    }
    return true;
 8017dda:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8017ddc:	4618      	mov	r0, r3
 8017dde:	3710      	adds	r7, #16
 8017de0:	46bd      	mov	sp, r7
 8017de2:	bd80      	pop	{r7, pc}
 8017de4:	20001c9c 	.word	0x20001c9c
 8017de8:	20001c98 	.word	0x20001c98

08017dec <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8017dec:	b580      	push	{r7, lr}
 8017dee:	b088      	sub	sp, #32
 8017df0:	af02      	add	r7, sp, #8
 8017df2:	60ba      	str	r2, [r7, #8]
 8017df4:	607b      	str	r3, [r7, #4]
 8017df6:	4603      	mov	r3, r0
 8017df8:	73fb      	strb	r3, [r7, #15]
 8017dfa:	460b      	mov	r3, r1
 8017dfc:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;
 8017dfe:	2300      	movs	r3, #0
 8017e00:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 8017e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017e06:	2b0d      	cmp	r3, #13
 8017e08:	bfa8      	it	ge
 8017e0a:	230d      	movge	r3, #13
 8017e0c:	b25a      	sxtb	r2, r3
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 8017e12:	687b      	ldr	r3, [r7, #4]
 8017e14:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017e18:	4916      	ldr	r1, [pc, #88]	@ (8017e74 <RegionUS915ComputeRxWindowParameters+0x88>)
 8017e1a:	4618      	mov	r0, r3
 8017e1c:	f7fe f8d8 	bl	8015fd0 <RegionCommonGetBandwidth>
 8017e20:	4603      	mov	r3, r0
 8017e22:	b2da      	uxtb	r2, r3
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	709a      	strb	r2, [r3, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017e2e:	461a      	mov	r2, r3
 8017e30:	4b11      	ldr	r3, [pc, #68]	@ (8017e78 <RegionUS915ComputeRxWindowParameters+0x8c>)
 8017e32:	5c9a      	ldrb	r2, [r3, r2]
 8017e34:	687b      	ldr	r3, [r7, #4]
 8017e36:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017e3a:	4619      	mov	r1, r3
 8017e3c:	4b0d      	ldr	r3, [pc, #52]	@ (8017e74 <RegionUS915ComputeRxWindowParameters+0x88>)
 8017e3e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017e42:	4619      	mov	r1, r3
 8017e44:	4610      	mov	r0, r2
 8017e46:	f7fd fe41 	bl	8015acc <RegionCommonComputeSymbolTimeLoRa>
 8017e4a:	6178      	str	r0, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8017e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8017e7c <RegionUS915ComputeRxWindowParameters+0x90>)
 8017e4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8017e50:	4798      	blx	r3
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	3308      	adds	r3, #8
 8017e56:	687a      	ldr	r2, [r7, #4]
 8017e58:	320c      	adds	r2, #12
 8017e5a:	7bb9      	ldrb	r1, [r7, #14]
 8017e5c:	9201      	str	r2, [sp, #4]
 8017e5e:	9300      	str	r3, [sp, #0]
 8017e60:	4603      	mov	r3, r0
 8017e62:	68ba      	ldr	r2, [r7, #8]
 8017e64:	6978      	ldr	r0, [r7, #20]
 8017e66:	f7fd fe57 	bl	8015b18 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 8017e6a:	bf00      	nop
 8017e6c:	3718      	adds	r7, #24
 8017e6e:	46bd      	mov	sp, r7
 8017e70:	bd80      	pop	{r7, pc}
 8017e72:	bf00      	nop
 8017e74:	0801da0c 	.word	0x0801da0c
 8017e78:	0801d9fc 	.word	0x0801d9fc
 8017e7c:	0801da80 	.word	0x0801da80

08017e80 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8017e80:	b590      	push	{r4, r7, lr}
 8017e82:	b091      	sub	sp, #68	@ 0x44
 8017e84:	af0a      	add	r7, sp, #40	@ 0x28
 8017e86:	6078      	str	r0, [r7, #4]
 8017e88:	6039      	str	r1, [r7, #0]
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	785b      	ldrb	r3, [r3, #1]
 8017e8e:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8017e90:	2300      	movs	r3, #0
 8017e92:	75fb      	strb	r3, [r7, #23]
    int8_t phyDr = 0;
 8017e94:	2300      	movs	r3, #0
 8017e96:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8017e98:	687b      	ldr	r3, [r7, #4]
 8017e9a:	685b      	ldr	r3, [r3, #4]
 8017e9c:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8017e9e:	4b34      	ldr	r3, [pc, #208]	@ (8017f70 <RegionUS915RxConfig+0xf0>)
 8017ea0:	685b      	ldr	r3, [r3, #4]
 8017ea2:	4798      	blx	r3
 8017ea4:	4603      	mov	r3, r0
 8017ea6:	2b00      	cmp	r3, #0
 8017ea8:	d001      	beq.n	8017eae <RegionUS915RxConfig+0x2e>
    {
        return false;
 8017eaa:	2300      	movs	r3, #0
 8017eac:	e05c      	b.n	8017f68 <RegionUS915RxConfig+0xe8>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	7cdb      	ldrb	r3, [r3, #19]
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	d109      	bne.n	8017eca <RegionUS915RxConfig+0x4a>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	781b      	ldrb	r3, [r3, #0]
 8017eba:	f003 0307 	and.w	r3, r3, #7
 8017ebe:	4a2d      	ldr	r2, [pc, #180]	@ (8017f74 <RegionUS915RxConfig+0xf4>)
 8017ec0:	fb03 f202 	mul.w	r2, r3, r2
 8017ec4:	4b2c      	ldr	r3, [pc, #176]	@ (8017f78 <RegionUS915RxConfig+0xf8>)
 8017ec6:	4413      	add	r3, r2
 8017ec8:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 8017eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017ece:	4a2b      	ldr	r2, [pc, #172]	@ (8017f7c <RegionUS915RxConfig+0xfc>)
 8017ed0:	5cd3      	ldrb	r3, [r2, r3]
 8017ed2:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8017ed4:	4b26      	ldr	r3, [pc, #152]	@ (8017f70 <RegionUS915RxConfig+0xf0>)
 8017ed6:	68db      	ldr	r3, [r3, #12]
 8017ed8:	6938      	ldr	r0, [r7, #16]
 8017eda:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8017edc:	4b24      	ldr	r3, [pc, #144]	@ (8017f70 <RegionUS915RxConfig+0xf0>)
 8017ede:	699c      	ldr	r4, [r3, #24]
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	789b      	ldrb	r3, [r3, #2]
 8017ee4:	4618      	mov	r0, r3
 8017ee6:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	689b      	ldr	r3, [r3, #8]
 8017eee:	b29b      	uxth	r3, r3
 8017ef0:	687a      	ldr	r2, [r7, #4]
 8017ef2:	7c92      	ldrb	r2, [r2, #18]
 8017ef4:	9209      	str	r2, [sp, #36]	@ 0x24
 8017ef6:	2201      	movs	r2, #1
 8017ef8:	9208      	str	r2, [sp, #32]
 8017efa:	2200      	movs	r2, #0
 8017efc:	9207      	str	r2, [sp, #28]
 8017efe:	2200      	movs	r2, #0
 8017f00:	9206      	str	r2, [sp, #24]
 8017f02:	2200      	movs	r2, #0
 8017f04:	9205      	str	r2, [sp, #20]
 8017f06:	2200      	movs	r2, #0
 8017f08:	9204      	str	r2, [sp, #16]
 8017f0a:	2200      	movs	r2, #0
 8017f0c:	9203      	str	r2, [sp, #12]
 8017f0e:	9302      	str	r3, [sp, #8]
 8017f10:	2308      	movs	r3, #8
 8017f12:	9301      	str	r3, [sp, #4]
 8017f14:	2300      	movs	r3, #0
 8017f16:	9300      	str	r3, [sp, #0]
 8017f18:	2301      	movs	r3, #1
 8017f1a:	460a      	mov	r2, r1
 8017f1c:	4601      	mov	r1, r0
 8017f1e:	2001      	movs	r0, #1
 8017f20:	47a0      	blx	r4

    if( rxConfig->RepeaterSupport == true )
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	7c5b      	ldrb	r3, [r3, #17]
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d005      	beq.n	8017f36 <RegionUS915RxConfig+0xb6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 8017f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017f2e:	4a14      	ldr	r2, [pc, #80]	@ (8017f80 <RegionUS915RxConfig+0x100>)
 8017f30:	5cd3      	ldrb	r3, [r2, r3]
 8017f32:	75fb      	strb	r3, [r7, #23]
 8017f34:	e004      	b.n	8017f40 <RegionUS915RxConfig+0xc0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 8017f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017f3a:	4a12      	ldr	r2, [pc, #72]	@ (8017f84 <RegionUS915RxConfig+0x104>)
 8017f3c:	5cd3      	ldrb	r3, [r2, r3]
 8017f3e:	75fb      	strb	r3, [r7, #23]
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8017f40:	4b0b      	ldr	r3, [pc, #44]	@ (8017f70 <RegionUS915RxConfig+0xf0>)
 8017f42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017f44:	7dfa      	ldrb	r2, [r7, #23]
 8017f46:	320d      	adds	r2, #13
 8017f48:	b2d2      	uxtb	r2, r2
 8017f4a:	4611      	mov	r1, r2
 8017f4c:	2001      	movs	r0, #1
 8017f4e:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	7cdb      	ldrb	r3, [r3, #19]
 8017f54:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8017f58:	6939      	ldr	r1, [r7, #16]
 8017f5a:	4618      	mov	r0, r3
 8017f5c:	f7fe f856 	bl	801600c <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 8017f60:	683b      	ldr	r3, [r7, #0]
 8017f62:	7bfa      	ldrb	r2, [r7, #15]
 8017f64:	701a      	strb	r2, [r3, #0]
    return true;
 8017f66:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8017f68:	4618      	mov	r0, r3
 8017f6a:	371c      	adds	r7, #28
 8017f6c:	46bd      	mov	sp, r7
 8017f6e:	bd90      	pop	{r4, r7, pc}
 8017f70:	0801da80 	.word	0x0801da80
 8017f74:	000927c0 	.word	0x000927c0
 8017f78:	370870a0 	.word	0x370870a0
 8017f7c:	0801d9fc 	.word	0x0801d9fc
 8017f80:	0801da70 	.word	0x0801da70
 8017f84:	0801da60 	.word	0x0801da60

08017f88 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8017f88:	b590      	push	{r4, r7, lr}
 8017f8a:	b093      	sub	sp, #76	@ 0x4c
 8017f8c:	af0a      	add	r7, sp, #40	@ 0x28
 8017f8e:	60f8      	str	r0, [r7, #12]
 8017f90:	60b9      	str	r1, [r7, #8]
 8017f92:	607a      	str	r2, [r7, #4]
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 8017f94:	68fb      	ldr	r3, [r7, #12]
 8017f96:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017f9a:	461a      	mov	r2, r3
 8017f9c:	4b4a      	ldr	r3, [pc, #296]	@ (80180c8 <RegionUS915TxConfig+0x140>)
 8017f9e:	5c9b      	ldrb	r3, [r3, r2]
 8017fa0:	77fb      	strb	r3, [r7, #31]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 8017fa2:	68fb      	ldr	r3, [r7, #12]
 8017fa4:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8017fa8:	4b48      	ldr	r3, [pc, #288]	@ (80180cc <RegionUS915TxConfig+0x144>)
 8017faa:	681a      	ldr	r2, [r3, #0]
 8017fac:	4b48      	ldr	r3, [pc, #288]	@ (80180d0 <RegionUS915TxConfig+0x148>)
 8017fae:	6819      	ldr	r1, [r3, #0]
 8017fb0:	68fb      	ldr	r3, [r7, #12]
 8017fb2:	781b      	ldrb	r3, [r3, #0]
 8017fb4:	461c      	mov	r4, r3
 8017fb6:	4623      	mov	r3, r4
 8017fb8:	005b      	lsls	r3, r3, #1
 8017fba:	4423      	add	r3, r4
 8017fbc:	009b      	lsls	r3, r3, #2
 8017fbe:	440b      	add	r3, r1
 8017fc0:	3309      	adds	r3, #9
 8017fc2:	781b      	ldrb	r3, [r3, #0]
 8017fc4:	4619      	mov	r1, r3
 8017fc6:	460b      	mov	r3, r1
 8017fc8:	005b      	lsls	r3, r3, #1
 8017fca:	440b      	add	r3, r1
 8017fcc:	00db      	lsls	r3, r3, #3
 8017fce:	4413      	add	r3, r2
 8017fd0:	3302      	adds	r3, #2
 8017fd2:	f993 1000 	ldrsb.w	r1, [r3]
 8017fd6:	68fb      	ldr	r3, [r7, #12]
 8017fd8:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8017fdc:	4b3c      	ldr	r3, [pc, #240]	@ (80180d0 <RegionUS915TxConfig+0x148>)
 8017fde:	681b      	ldr	r3, [r3, #0]
 8017fe0:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8017fe4:	f7ff fa52 	bl	801748c <LimitTxPower>
 8017fe8:	4603      	mov	r3, r0
 8017fea:	77bb      	strb	r3, [r7, #30]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 8017fec:	68fb      	ldr	r3, [r7, #12]
 8017fee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017ff2:	4938      	ldr	r1, [pc, #224]	@ (80180d4 <RegionUS915TxConfig+0x14c>)
 8017ff4:	4618      	mov	r0, r3
 8017ff6:	f7fd ffeb 	bl	8015fd0 <RegionCommonGetBandwidth>
 8017ffa:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8017ffc:	2300      	movs	r3, #0
 8017ffe:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8018000:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8018004:	f04f 0200 	mov.w	r2, #0
 8018008:	4933      	ldr	r1, [pc, #204]	@ (80180d8 <RegionUS915TxConfig+0x150>)
 801800a:	4618      	mov	r0, r3
 801800c:	f7fd fe3c 	bl	8015c88 <RegionCommonComputeTxPower>
 8018010:	4603      	mov	r3, r0
 8018012:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8018014:	4b31      	ldr	r3, [pc, #196]	@ (80180dc <RegionUS915TxConfig+0x154>)
 8018016:	68da      	ldr	r2, [r3, #12]
 8018018:	4b2d      	ldr	r3, [pc, #180]	@ (80180d0 <RegionUS915TxConfig+0x148>)
 801801a:	6819      	ldr	r1, [r3, #0]
 801801c:	68fb      	ldr	r3, [r7, #12]
 801801e:	781b      	ldrb	r3, [r3, #0]
 8018020:	4618      	mov	r0, r3
 8018022:	4603      	mov	r3, r0
 8018024:	005b      	lsls	r3, r3, #1
 8018026:	4403      	add	r3, r0
 8018028:	009b      	lsls	r3, r3, #2
 801802a:	440b      	add	r3, r1
 801802c:	681b      	ldr	r3, [r3, #0]
 801802e:	4618      	mov	r0, r3
 8018030:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8018032:	4b2a      	ldr	r3, [pc, #168]	@ (80180dc <RegionUS915TxConfig+0x154>)
 8018034:	69dc      	ldr	r4, [r3, #28]
 8018036:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801803a:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801803e:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8018042:	9208      	str	r2, [sp, #32]
 8018044:	2200      	movs	r2, #0
 8018046:	9207      	str	r2, [sp, #28]
 8018048:	2200      	movs	r2, #0
 801804a:	9206      	str	r2, [sp, #24]
 801804c:	2200      	movs	r2, #0
 801804e:	9205      	str	r2, [sp, #20]
 8018050:	2201      	movs	r2, #1
 8018052:	9204      	str	r2, [sp, #16]
 8018054:	2200      	movs	r2, #0
 8018056:	9203      	str	r2, [sp, #12]
 8018058:	2208      	movs	r2, #8
 801805a:	9202      	str	r2, [sp, #8]
 801805c:	2201      	movs	r2, #1
 801805e:	9201      	str	r2, [sp, #4]
 8018060:	9300      	str	r3, [sp, #0]
 8018062:	69bb      	ldr	r3, [r7, #24]
 8018064:	2200      	movs	r2, #0
 8018066:	2001      	movs	r0, #1
 8018068:	47a0      	blx	r4
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 801806a:	4b19      	ldr	r3, [pc, #100]	@ (80180d0 <RegionUS915TxConfig+0x148>)
 801806c:	681a      	ldr	r2, [r3, #0]
 801806e:	68fb      	ldr	r3, [r7, #12]
 8018070:	781b      	ldrb	r3, [r3, #0]
 8018072:	4619      	mov	r1, r3
 8018074:	460b      	mov	r3, r1
 8018076:	005b      	lsls	r3, r3, #1
 8018078:	440b      	add	r3, r1
 801807a:	009b      	lsls	r3, r3, #2
 801807c:	4413      	add	r3, r2
 801807e:	681a      	ldr	r2, [r3, #0]
 8018080:	68fb      	ldr	r3, [r7, #12]
 8018082:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018086:	4619      	mov	r1, r3
 8018088:	4610      	mov	r0, r2
 801808a:	f7fd fff1 	bl	8016070 <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 801808e:	4b13      	ldr	r3, [pc, #76]	@ (80180dc <RegionUS915TxConfig+0x154>)
 8018090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018092:	68fa      	ldr	r2, [r7, #12]
 8018094:	8992      	ldrh	r2, [r2, #12]
 8018096:	b2d2      	uxtb	r2, r2
 8018098:	4611      	mov	r1, r2
 801809a:	2001      	movs	r0, #1
 801809c:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 801809e:	68fb      	ldr	r3, [r7, #12]
 80180a0:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80180a4:	68fb      	ldr	r3, [r7, #12]
 80180a6:	899b      	ldrh	r3, [r3, #12]
 80180a8:	4619      	mov	r1, r3
 80180aa:	4610      	mov	r0, r2
 80180ac:	f7ff fa68 	bl	8017580 <GetTimeOnAir>
 80180b0:	4602      	mov	r2, r0
 80180b2:	687b      	ldr	r3, [r7, #4]
 80180b4:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 80180b6:	68bb      	ldr	r3, [r7, #8]
 80180b8:	7fba      	ldrb	r2, [r7, #30]
 80180ba:	701a      	strb	r2, [r3, #0]
    return true;
 80180bc:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 80180be:	4618      	mov	r0, r3
 80180c0:	3724      	adds	r7, #36	@ 0x24
 80180c2:	46bd      	mov	sp, r7
 80180c4:	bd90      	pop	{r4, r7, pc}
 80180c6:	bf00      	nop
 80180c8:	0801d9fc 	.word	0x0801d9fc
 80180cc:	20001c98 	.word	0x20001c98
 80180d0:	20001c9c 	.word	0x20001c9c
 80180d4:	0801da0c 	.word	0x0801da0c
 80180d8:	41f00000 	.word	0x41f00000
 80180dc:	0801da80 	.word	0x0801da80

080180e0 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80180e0:	b590      	push	{r4, r7, lr}
 80180e2:	b097      	sub	sp, #92	@ 0x5c
 80180e4:	af00      	add	r7, sp, #0
 80180e6:	60f8      	str	r0, [r7, #12]
 80180e8:	60b9      	str	r1, [r7, #8]
 80180ea:	607a      	str	r2, [r7, #4]
 80180ec:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 80180ee:	2307      	movs	r3, #7
 80180f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 80180f4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80180f8:	2200      	movs	r2, #0
 80180fa:	601a      	str	r2, [r3, #0]
 80180fc:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 80180fe:	2300      	movs	r3, #0
 8018100:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    uint8_t bytesProcessed = 0;
 8018104:	2300      	movs	r3, #0
 8018106:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
 801810a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801810e:	2200      	movs	r2, #0
 8018110:	601a      	str	r2, [r3, #0]
 8018112:	605a      	str	r2, [r3, #4]
 8018114:	609a      	str	r2, [r3, #8]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8018116:	4b97      	ldr	r3, [pc, #604]	@ (8018374 <RegionUS915LinkAdrReq+0x294>)
 8018118:	681b      	ldr	r3, [r3, #0]
 801811a:	f503 6190 	add.w	r1, r3, #1152	@ 0x480
 801811e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8018122:	2206      	movs	r2, #6
 8018124:	4618      	mov	r0, r3
 8018126:	f7fd fab3 	bl	8015690 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801812a:	e11b      	b.n	8018364 <RegionUS915LinkAdrReq+0x284>
    {
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801812c:	68fb      	ldr	r3, [r7, #12]
 801812e:	685a      	ldr	r2, [r3, #4]
 8018130:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8018134:	4413      	add	r3, r2
 8018136:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 801813a:	4611      	mov	r1, r2
 801813c:	4618      	mov	r0, r3
 801813e:	f7fd fbeb 	bl	8015918 <RegionCommonParseLinkAdrReq>
 8018142:	4603      	mov	r3, r0
 8018144:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

        if( nextIndex == 0 )
 8018148:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 801814c:	2b00      	cmp	r3, #0
 801814e:	f000 8113 	beq.w	8018378 <RegionUS915LinkAdrReq+0x298>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8018152:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8018156:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 801815a:	4413      	add	r3, r2
 801815c:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8018160:	2307      	movs	r3, #7
 8018162:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

        if( linkAdrParams.ChMaskCtrl == 6 )
 8018166:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801816a:	2b06      	cmp	r3, #6
 801816c:	d116      	bne.n	801819c <RegionUS915LinkAdrReq+0xbc>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 801816e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018172:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
            channelsMask[1] = 0xFFFF;
 8018176:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801817a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            channelsMask[2] = 0xFFFF;
 801817e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018182:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            channelsMask[3] = 0xFFFF;
 8018186:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801818a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 801818e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8018192:	b2db      	uxtb	r3, r3
 8018194:	b29b      	uxth	r3, r3
 8018196:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 801819a:	e0e3      	b.n	8018364 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 801819c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80181a0:	2b07      	cmp	r3, #7
 80181a2:	d112      	bne.n	80181ca <RegionUS915LinkAdrReq+0xea>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 80181a4:	2300      	movs	r3, #0
 80181a6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
            channelsMask[1] = 0x0000;
 80181aa:	2300      	movs	r3, #0
 80181ac:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            channelsMask[2] = 0x0000;
 80181b0:	2300      	movs	r3, #0
 80181b2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            channelsMask[3] = 0x0000;
 80181b6:	2300      	movs	r3, #0
 80181b8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 80181bc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80181c0:	b2db      	uxtb	r3, r3
 80181c2:	b29b      	uxth	r3, r3
 80181c4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80181c8:	e0cc      	b.n	8018364 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 80181ca:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80181ce:	2b05      	cmp	r3, #5
 80181d0:	f040 80bf 	bne.w	8018352 <RegionUS915LinkAdrReq+0x272>
        {
            // Start value for comparison
            uint8_t bitMask = 1;
 80181d4:	2301      	movs	r3, #1
 80181d6:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 80181da:	2300      	movs	r3, #0
 80181dc:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 80181e0:	2300      	movs	r3, #0
 80181e2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 80181e6:	e0ae      	b.n	8018346 <RegionUS915LinkAdrReq+0x266>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 80181e8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80181ec:	b2da      	uxtb	r2, r3
 80181ee:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 80181f2:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80181f6:	fa01 f303 	lsl.w	r3, r1, r3
 80181fa:	4013      	ands	r3, r2
 80181fc:	2b00      	cmp	r3, #0
 80181fe:	d04d      	beq.n	801829c <RegionUS915LinkAdrReq+0x1bc>
                {
                    if( ( i % 2 ) == 0 )
 8018200:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8018204:	f003 0301 	and.w	r3, r3, #1
 8018208:	b2db      	uxtb	r3, r3
 801820a:	2b00      	cmp	r3, #0
 801820c:	d120      	bne.n	8018250 <RegionUS915LinkAdrReq+0x170>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 801820e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8018212:	005b      	lsls	r3, r3, #1
 8018214:	3358      	adds	r3, #88	@ 0x58
 8018216:	443b      	add	r3, r7
 8018218:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801821c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8018220:	f042 02ff 	orr.w	r2, r2, #255	@ 0xff
 8018224:	b292      	uxth	r2, r2
 8018226:	005b      	lsls	r3, r3, #1
 8018228:	3358      	adds	r3, #88	@ 0x58
 801822a:	443b      	add	r3, r7
 801822c:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 8018230:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8018234:	b21a      	sxth	r2, r3
 8018236:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 801823a:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801823e:	fa01 f303 	lsl.w	r3, r1, r3
 8018242:	b21b      	sxth	r3, r3
 8018244:	4313      	orrs	r3, r2
 8018246:	b21b      	sxth	r3, r3
 8018248:	b29b      	uxth	r3, r3
 801824a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 801824e:	e075      	b.n	801833c <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 8018250:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8018254:	005b      	lsls	r3, r3, #1
 8018256:	3358      	adds	r3, #88	@ 0x58
 8018258:	443b      	add	r3, r7
 801825a:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801825e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8018262:	f062 02ff 	orn	r2, r2, #255	@ 0xff
 8018266:	b292      	uxth	r2, r2
 8018268:	005b      	lsls	r3, r3, #1
 801826a:	3358      	adds	r3, #88	@ 0x58
 801826c:	443b      	add	r3, r7
 801826e:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 8018272:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8018276:	b21a      	sxth	r2, r3
 8018278:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 801827c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8018280:	fa01 f303 	lsl.w	r3, r1, r3
 8018284:	b21b      	sxth	r3, r3
 8018286:	4313      	orrs	r3, r2
 8018288:	b21b      	sxth	r3, r3
 801828a:	b29b      	uxth	r3, r3
 801828c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8018290:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8018294:	3301      	adds	r3, #1
 8018296:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 801829a:	e04f      	b.n	801833c <RegionUS915LinkAdrReq+0x25c>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 801829c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80182a0:	f003 0301 	and.w	r3, r3, #1
 80182a4:	b2db      	uxtb	r3, r3
 80182a6:	2b00      	cmp	r3, #0
 80182a8:	d122      	bne.n	80182f0 <RegionUS915LinkAdrReq+0x210>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 80182aa:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80182ae:	005b      	lsls	r3, r3, #1
 80182b0:	3358      	adds	r3, #88	@ 0x58
 80182b2:	443b      	add	r3, r7
 80182b4:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80182b8:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80182bc:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80182c0:	b292      	uxth	r2, r2
 80182c2:	005b      	lsls	r3, r3, #1
 80182c4:	3358      	adds	r3, #88	@ 0x58
 80182c6:	443b      	add	r3, r7
 80182c8:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 80182cc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80182d0:	b21a      	sxth	r2, r3
 80182d2:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 80182d6:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80182da:	fa01 f303 	lsl.w	r3, r1, r3
 80182de:	b21b      	sxth	r3, r3
 80182e0:	43db      	mvns	r3, r3
 80182e2:	b21b      	sxth	r3, r3
 80182e4:	4013      	ands	r3, r2
 80182e6:	b21b      	sxth	r3, r3
 80182e8:	b29b      	uxth	r3, r3
 80182ea:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80182ee:	e025      	b.n	801833c <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 80182f0:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80182f4:	005b      	lsls	r3, r3, #1
 80182f6:	3358      	adds	r3, #88	@ 0x58
 80182f8:	443b      	add	r3, r7
 80182fa:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80182fe:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8018302:	b2d2      	uxtb	r2, r2
 8018304:	b292      	uxth	r2, r2
 8018306:	005b      	lsls	r3, r3, #1
 8018308:	3358      	adds	r3, #88	@ 0x58
 801830a:	443b      	add	r3, r7
 801830c:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 8018310:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8018314:	b21a      	sxth	r2, r3
 8018316:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 801831a:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801831e:	fa01 f303 	lsl.w	r3, r1, r3
 8018322:	b21b      	sxth	r3, r3
 8018324:	43db      	mvns	r3, r3
 8018326:	b21b      	sxth	r3, r3
 8018328:	4013      	ands	r3, r2
 801832a:	b21b      	sxth	r3, r3
 801832c:	b29b      	uxth	r3, r3
 801832e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8018332:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8018336:	3301      	adds	r3, #1
 8018338:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
            for( uint8_t i = 0; i <= 7; i++ )
 801833c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8018340:	3301      	adds	r3, #1
 8018342:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 8018346:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801834a:	2b07      	cmp	r3, #7
 801834c:	f67f af4c 	bls.w	80181e8 <RegionUS915LinkAdrReq+0x108>
 8018350:	e008      	b.n	8018364 <RegionUS915LinkAdrReq+0x284>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 8018352:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8018356:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 801835a:	005b      	lsls	r3, r3, #1
 801835c:	3358      	adds	r3, #88	@ 0x58
 801835e:	443b      	add	r3, r7
 8018360:	f823 2c18 	strh.w	r2, [r3, #-24]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8018364:	68fb      	ldr	r3, [r7, #12]
 8018366:	7a1b      	ldrb	r3, [r3, #8]
 8018368:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 801836c:	429a      	cmp	r2, r3
 801836e:	f4ff aedd 	bcc.w	801812c <RegionUS915LinkAdrReq+0x4c>
 8018372:	e002      	b.n	801837a <RegionUS915LinkAdrReq+0x29a>
 8018374:	20001c9c 	.word	0x20001c9c
            break; // break loop, since no more request has been found
 8018378:	bf00      	nop
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 801837a:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 801837e:	2b03      	cmp	r3, #3
 8018380:	dc0f      	bgt.n	80183a2 <RegionUS915LinkAdrReq+0x2c2>
 8018382:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8018386:	2204      	movs	r2, #4
 8018388:	2100      	movs	r1, #0
 801838a:	4618      	mov	r0, r3
 801838c:	f7fd f954 	bl	8015638 <RegionCommonCountChannels>
 8018390:	4603      	mov	r3, r0
 8018392:	2b01      	cmp	r3, #1
 8018394:	d805      	bhi.n	80183a2 <RegionUS915LinkAdrReq+0x2c2>
    {
        status &= 0xFE; // Channel mask KO
 8018396:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801839a:	f023 0301 	bic.w	r3, r3, #1
 801839e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80183a2:	2302      	movs	r3, #2
 80183a4:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80183a8:	68fb      	ldr	r3, [r7, #12]
 80183aa:	7a5b      	ldrb	r3, [r3, #9]
 80183ac:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    phyParam = RegionUS915GetPhyParam( &getPhy );
 80183b0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80183b4:	4618      	mov	r0, r3
 80183b6:	f7ff f913 	bl	80175e0 <RegionUS915GetPhyParam>
 80183ba:	4603      	mov	r3, r0
 80183bc:	637b      	str	r3, [r7, #52]	@ 0x34

    linkAdrVerifyParams.Status = status;
 80183be:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80183c2:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80183c4:	68fb      	ldr	r3, [r7, #12]
 80183c6:	7a9b      	ldrb	r3, [r3, #10]
 80183c8:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80183ca:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 80183ce:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80183d0:	f997 304e 	ldrsb.w	r3, [r7, #78]	@ 0x4e
 80183d4:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80183d6:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80183da:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80183dc:	68fb      	ldr	r3, [r7, #12]
 80183de:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80183e2:	777b      	strb	r3, [r7, #29]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80183e4:	68fb      	ldr	r3, [r7, #12]
 80183e6:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80183ea:	77bb      	strb	r3, [r7, #30]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 80183ec:	68fb      	ldr	r3, [r7, #12]
 80183ee:	7b5b      	ldrb	r3, [r3, #13]
 80183f0:	b25b      	sxtb	r3, r3
 80183f2:	77fb      	strb	r3, [r7, #31]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 80183f4:	2348      	movs	r3, #72	@ 0x48
 80183f6:	f887 3020 	strb.w	r3, [r7, #32]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 80183fa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80183fe:	627b      	str	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8018400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018402:	b25b      	sxtb	r3, r3
 8018404:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 8018408:	2304      	movs	r3, #4
 801840a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801840e:	4b44      	ldr	r3, [pc, #272]	@ (8018520 <RegionUS915LinkAdrReq+0x440>)
 8018410:	681b      	ldr	r3, [r3, #0]
 8018412:	62fb      	str	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 8018414:	230e      	movs	r3, #14
 8018416:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 801841a:	2300      	movs	r3, #0
 801841c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8018420:	68fb      	ldr	r3, [r7, #12]
 8018422:	681b      	ldr	r3, [r3, #0]
 8018424:	617b      	str	r3, [r7, #20]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8018426:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 801842a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801842e:	1c9a      	adds	r2, r3, #2
 8018430:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8018434:	1c59      	adds	r1, r3, #1
 8018436:	f107 0014 	add.w	r0, r7, #20
 801843a:	4623      	mov	r3, r4
 801843c:	f7fd fabd 	bl	80159ba <RegionCommonLinkAdrReqVerifyParams>
 8018440:	4603      	mov	r3, r0
 8018442:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8018446:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801844a:	2b07      	cmp	r3, #7
 801844c:	d151      	bne.n	80184f2 <RegionUS915LinkAdrReq+0x412>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 801844e:	4b34      	ldr	r3, [pc, #208]	@ (8018520 <RegionUS915LinkAdrReq+0x440>)
 8018450:	681b      	ldr	r3, [r3, #0]
 8018452:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8018456:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 801845a:	2206      	movs	r2, #6
 801845c:	4618      	mov	r0, r3
 801845e:	f7fd f917 	bl	8015690 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 8018462:	4b30      	ldr	r3, [pc, #192]	@ (8018524 <RegionUS915LinkAdrReq+0x444>)
 8018464:	681b      	ldr	r3, [r3, #0]
 8018466:	f8b3 1090 	ldrh.w	r1, [r3, #144]	@ 0x90
 801846a:	4b2d      	ldr	r3, [pc, #180]	@ (8018520 <RegionUS915LinkAdrReq+0x440>)
 801846c:	681b      	ldr	r3, [r3, #0]
 801846e:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	@ 0x480
 8018472:	4b2c      	ldr	r3, [pc, #176]	@ (8018524 <RegionUS915LinkAdrReq+0x444>)
 8018474:	681b      	ldr	r3, [r3, #0]
 8018476:	400a      	ands	r2, r1
 8018478:	b292      	uxth	r2, r2
 801847a:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 801847e:	4b29      	ldr	r3, [pc, #164]	@ (8018524 <RegionUS915LinkAdrReq+0x444>)
 8018480:	681b      	ldr	r3, [r3, #0]
 8018482:	f8b3 1092 	ldrh.w	r1, [r3, #146]	@ 0x92
 8018486:	4b26      	ldr	r3, [pc, #152]	@ (8018520 <RegionUS915LinkAdrReq+0x440>)
 8018488:	681b      	ldr	r3, [r3, #0]
 801848a:	f8b3 2482 	ldrh.w	r2, [r3, #1154]	@ 0x482
 801848e:	4b25      	ldr	r3, [pc, #148]	@ (8018524 <RegionUS915LinkAdrReq+0x444>)
 8018490:	681b      	ldr	r3, [r3, #0]
 8018492:	400a      	ands	r2, r1
 8018494:	b292      	uxth	r2, r2
 8018496:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 801849a:	4b22      	ldr	r3, [pc, #136]	@ (8018524 <RegionUS915LinkAdrReq+0x444>)
 801849c:	681b      	ldr	r3, [r3, #0]
 801849e:	f8b3 1094 	ldrh.w	r1, [r3, #148]	@ 0x94
 80184a2:	4b1f      	ldr	r3, [pc, #124]	@ (8018520 <RegionUS915LinkAdrReq+0x440>)
 80184a4:	681b      	ldr	r3, [r3, #0]
 80184a6:	f8b3 2484 	ldrh.w	r2, [r3, #1156]	@ 0x484
 80184aa:	4b1e      	ldr	r3, [pc, #120]	@ (8018524 <RegionUS915LinkAdrReq+0x444>)
 80184ac:	681b      	ldr	r3, [r3, #0]
 80184ae:	400a      	ands	r2, r1
 80184b0:	b292      	uxth	r2, r2
 80184b2:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 80184b6:	4b1b      	ldr	r3, [pc, #108]	@ (8018524 <RegionUS915LinkAdrReq+0x444>)
 80184b8:	681b      	ldr	r3, [r3, #0]
 80184ba:	f8b3 1096 	ldrh.w	r1, [r3, #150]	@ 0x96
 80184be:	4b18      	ldr	r3, [pc, #96]	@ (8018520 <RegionUS915LinkAdrReq+0x440>)
 80184c0:	681b      	ldr	r3, [r3, #0]
 80184c2:	f8b3 2486 	ldrh.w	r2, [r3, #1158]	@ 0x486
 80184c6:	4b17      	ldr	r3, [pc, #92]	@ (8018524 <RegionUS915LinkAdrReq+0x444>)
 80184c8:	681b      	ldr	r3, [r3, #0]
 80184ca:	400a      	ands	r2, r1
 80184cc:	b292      	uxth	r2, r2
 80184ce:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 80184d2:	4b13      	ldr	r3, [pc, #76]	@ (8018520 <RegionUS915LinkAdrReq+0x440>)
 80184d4:	681a      	ldr	r2, [r3, #0]
 80184d6:	4b13      	ldr	r3, [pc, #76]	@ (8018524 <RegionUS915LinkAdrReq+0x444>)
 80184d8:	681b      	ldr	r3, [r3, #0]
 80184da:	f8b2 2488 	ldrh.w	r2, [r2, #1160]	@ 0x488
 80184de:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 80184e2:	4b0f      	ldr	r3, [pc, #60]	@ (8018520 <RegionUS915LinkAdrReq+0x440>)
 80184e4:	681a      	ldr	r2, [r3, #0]
 80184e6:	4b0f      	ldr	r3, [pc, #60]	@ (8018524 <RegionUS915LinkAdrReq+0x444>)
 80184e8:	681b      	ldr	r3, [r3, #0]
 80184ea:	f8b2 248a 	ldrh.w	r2, [r2, #1162]	@ 0x48a
 80184ee:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80184f2:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 80184f6:	68bb      	ldr	r3, [r7, #8]
 80184f8:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 80184fa:	f997 204e 	ldrsb.w	r2, [r7, #78]	@ 0x4e
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8018502:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8018506:	683b      	ldr	r3, [r7, #0]
 8018508:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 801850a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801850c:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8018510:	701a      	strb	r2, [r3, #0]

#endif /* REGION_US915 */
    return status;
 8018512:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 8018516:	4618      	mov	r0, r3
 8018518:	375c      	adds	r7, #92	@ 0x5c
 801851a:	46bd      	mov	sp, r7
 801851c:	bd90      	pop	{r4, r7, pc}
 801851e:	bf00      	nop
 8018520:	20001c9c 	.word	0x20001c9c
 8018524:	20001c98 	.word	0x20001c98

08018528 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8018528:	b580      	push	{r7, lr}
 801852a:	b084      	sub	sp, #16
 801852c:	af00      	add	r7, sp, #0
 801852e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8018530:	2307      	movs	r3, #7
 8018532:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	685b      	ldr	r3, [r3, #4]
 8018538:	4618      	mov	r0, r3
 801853a:	f7fe ffdd 	bl	80174f8 <VerifyRfFreq>
 801853e:	4603      	mov	r3, r0
 8018540:	f083 0301 	eor.w	r3, r3, #1
 8018544:	b2db      	uxtb	r3, r3
 8018546:	2b00      	cmp	r3, #0
 8018548:	d003      	beq.n	8018552 <RegionUS915RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 801854a:	7bfb      	ldrb	r3, [r7, #15]
 801854c:	f023 0301 	bic.w	r3, r3, #1
 8018550:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 8018552:	687b      	ldr	r3, [r7, #4]
 8018554:	f993 3000 	ldrsb.w	r3, [r3]
 8018558:	220d      	movs	r2, #13
 801855a:	2108      	movs	r1, #8
 801855c:	4618      	mov	r0, r3
 801855e:	f7fd f81a 	bl	8015596 <RegionCommonValueInRange>
 8018562:	4603      	mov	r3, r0
 8018564:	2b00      	cmp	r3, #0
 8018566:	d103      	bne.n	8018570 <RegionUS915RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 8018568:	7bfb      	ldrb	r3, [r7, #15]
 801856a:	f023 0302 	bic.w	r3, r3, #2
 801856e:	73fb      	strb	r3, [r7, #15]
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	f993 3000 	ldrsb.w	r3, [r3]
 8018576:	2207      	movs	r2, #7
 8018578:	2105      	movs	r1, #5
 801857a:	4618      	mov	r0, r3
 801857c:	f7fd f80b 	bl	8015596 <RegionCommonValueInRange>
 8018580:	4603      	mov	r3, r0
 8018582:	2b01      	cmp	r3, #1
 8018584:	d004      	beq.n	8018590 <RegionUS915RxParamSetupReq+0x68>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	f993 3000 	ldrsb.w	r3, [r3]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 801858c:	2b0d      	cmp	r3, #13
 801858e:	dd03      	ble.n	8018598 <RegionUS915RxParamSetupReq+0x70>
    {
        status &= 0xFD; // Datarate KO
 8018590:	7bfb      	ldrb	r3, [r7, #15]
 8018592:	f023 0302 	bic.w	r3, r3, #2
 8018596:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 8018598:	687b      	ldr	r3, [r7, #4]
 801859a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801859e:	2203      	movs	r2, #3
 80185a0:	2100      	movs	r1, #0
 80185a2:	4618      	mov	r0, r3
 80185a4:	f7fc fff7 	bl	8015596 <RegionCommonValueInRange>
 80185a8:	4603      	mov	r3, r0
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	d103      	bne.n	80185b6 <RegionUS915RxParamSetupReq+0x8e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80185ae:	7bfb      	ldrb	r3, [r7, #15]
 80185b0:	f023 0304 	bic.w	r3, r3, #4
 80185b4:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_US915 */
    return status;
 80185b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80185b8:	4618      	mov	r0, r3
 80185ba:	3710      	adds	r7, #16
 80185bc:	46bd      	mov	sp, r7
 80185be:	bd80      	pop	{r7, pc}

080185c0 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 80185c0:	b480      	push	{r7}
 80185c2:	b083      	sub	sp, #12
 80185c4:	af00      	add	r7, sp, #0
 80185c6:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 80185c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80185cc:	4618      	mov	r0, r3
 80185ce:	370c      	adds	r7, #12
 80185d0:	46bd      	mov	sp, r7
 80185d2:	bc80      	pop	{r7}
 80185d4:	4770      	bx	lr

080185d6 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 80185d6:	b480      	push	{r7}
 80185d8:	b083      	sub	sp, #12
 80185da:	af00      	add	r7, sp, #0
 80185dc:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 80185de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80185e2:	4618      	mov	r0, r3
 80185e4:	370c      	adds	r7, #12
 80185e6:	46bd      	mov	sp, r7
 80185e8:	bc80      	pop	{r7}
 80185ea:	4770      	bx	lr

080185ec <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 80185ec:	b480      	push	{r7}
 80185ee:	b083      	sub	sp, #12
 80185f0:	af00      	add	r7, sp, #0
 80185f2:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 80185f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80185f8:	4618      	mov	r0, r3
 80185fa:	370c      	adds	r7, #12
 80185fc:	46bd      	mov	sp, r7
 80185fe:	bc80      	pop	{r7}
 8018600:	4770      	bx	lr
	...

08018604 <RegionUS915AlternateDr>:

int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8018604:	b480      	push	{r7}
 8018606:	b083      	sub	sp, #12
 8018608:	af00      	add	r7, sp, #0
 801860a:	4603      	mov	r3, r0
 801860c:	460a      	mov	r2, r1
 801860e:	71fb      	strb	r3, [r7, #7]
 8018610:	4613      	mov	r3, r2
 8018612:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 8018614:	79bb      	ldrb	r3, [r7, #6]
 8018616:	2b00      	cmp	r3, #0
 8018618:	d108      	bne.n	801862c <RegionUS915AlternateDr+0x28>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 801861a:	4b16      	ldr	r3, [pc, #88]	@ (8018674 <RegionUS915AlternateDr+0x70>)
 801861c:	681b      	ldr	r3, [r3, #0]
 801861e:	f893 209d 	ldrb.w	r2, [r3, #157]	@ 0x9d
 8018622:	3201      	adds	r2, #1
 8018624:	b2d2      	uxtb	r2, r2
 8018626:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
 801862a:	e007      	b.n	801863c <RegionUS915AlternateDr+0x38>
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 801862c:	4b11      	ldr	r3, [pc, #68]	@ (8018674 <RegionUS915AlternateDr+0x70>)
 801862e:	681b      	ldr	r3, [r3, #0]
 8018630:	f893 209d 	ldrb.w	r2, [r3, #157]	@ 0x9d
 8018634:	3a01      	subs	r2, #1
 8018636:	b2d2      	uxtb	r2, r2
 8018638:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 801863c:	4b0d      	ldr	r3, [pc, #52]	@ (8018674 <RegionUS915AlternateDr+0x70>)
 801863e:	681b      	ldr	r3, [r3, #0]
 8018640:	f893 209d 	ldrb.w	r2, [r3, #157]	@ 0x9d
 8018644:	4b0c      	ldr	r3, [pc, #48]	@ (8018678 <RegionUS915AlternateDr+0x74>)
 8018646:	fba3 1302 	umull	r1, r3, r3, r2
 801864a:	0859      	lsrs	r1, r3, #1
 801864c:	460b      	mov	r3, r1
 801864e:	00db      	lsls	r3, r3, #3
 8018650:	440b      	add	r3, r1
 8018652:	1ad3      	subs	r3, r2, r3
 8018654:	b2db      	uxtb	r3, r3
 8018656:	2b00      	cmp	r3, #0
 8018658:	d102      	bne.n	8018660 <RegionUS915AlternateDr+0x5c>
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 801865a:	2304      	movs	r3, #4
 801865c:	71fb      	strb	r3, [r7, #7]
 801865e:	e001      	b.n	8018664 <RegionUS915AlternateDr+0x60>
    }
    else
    {
        currentDr = DR_0;
 8018660:	2300      	movs	r3, #0
 8018662:	71fb      	strb	r3, [r7, #7]
    }
    return currentDr;
 8018664:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_US915 */
}
 8018668:	4618      	mov	r0, r3
 801866a:	370c      	adds	r7, #12
 801866c:	46bd      	mov	sp, r7
 801866e:	bc80      	pop	{r7}
 8018670:	4770      	bx	lr
 8018672:	bf00      	nop
 8018674:	20001c98 	.word	0x20001c98
 8018678:	38e38e39 	.word	0x38e38e39

0801867c <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801867c:	b580      	push	{r7, lr}
 801867e:	b0a8      	sub	sp, #160	@ 0xa0
 8018680:	af02      	add	r7, sp, #8
 8018682:	60f8      	str	r0, [r7, #12]
 8018684:	60b9      	str	r1, [r7, #8]
 8018686:	607a      	str	r2, [r7, #4]
 8018688:	603b      	str	r3, [r7, #0]
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 801868a:	2300      	movs	r3, #0
 801868c:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
    uint8_t nbRestrictedChannels = 0;
 8018690:	2300      	movs	r3, #0
 8018692:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 8018696:	2300      	movs	r3, #0
 8018698:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801869a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 801869e:	2244      	movs	r2, #68	@ 0x44
 80186a0:	2100      	movs	r1, #0
 80186a2:	4618      	mov	r0, r3
 80186a4:	f004 fa36 	bl	801cb14 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80186a8:	230c      	movs	r3, #12
 80186aa:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 80186ae:	4b6b      	ldr	r3, [pc, #428]	@ (801885c <RegionUS915NextChannel+0x1e0>)
 80186b0:	681b      	ldr	r3, [r3, #0]
 80186b2:	3390      	adds	r3, #144	@ 0x90
 80186b4:	2204      	movs	r2, #4
 80186b6:	2100      	movs	r1, #0
 80186b8:	4618      	mov	r0, r3
 80186ba:	f7fc ffbd 	bl	8015638 <RegionCommonCountChannels>
 80186be:	4603      	mov	r3, r0
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	d110      	bne.n	80186e6 <RegionUS915NextChannel+0x6a>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 80186c4:	4b65      	ldr	r3, [pc, #404]	@ (801885c <RegionUS915NextChannel+0x1e0>)
 80186c6:	681b      	ldr	r3, [r3, #0]
 80186c8:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 80186cc:	4b64      	ldr	r3, [pc, #400]	@ (8018860 <RegionUS915NextChannel+0x1e4>)
 80186ce:	681b      	ldr	r3, [r3, #0]
 80186d0:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 80186d4:	2204      	movs	r2, #4
 80186d6:	4619      	mov	r1, r3
 80186d8:	f7fc ffda 	bl	8015690 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 80186dc:	4b5f      	ldr	r3, [pc, #380]	@ (801885c <RegionUS915NextChannel+0x1e0>)
 80186de:	681b      	ldr	r3, [r3, #0]
 80186e0:	2200      	movs	r2, #0
 80186e2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 80186e6:	68fb      	ldr	r3, [r7, #12]
 80186e8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80186ec:	2b03      	cmp	r3, #3
 80186ee:	dd0e      	ble.n	801870e <RegionUS915NextChannel+0x92>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 80186f0:	4b5a      	ldr	r3, [pc, #360]	@ (801885c <RegionUS915NextChannel+0x1e0>)
 80186f2:	681b      	ldr	r3, [r3, #0]
 80186f4:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 80186f8:	b2db      	uxtb	r3, r3
 80186fa:	2b00      	cmp	r3, #0
 80186fc:	d107      	bne.n	801870e <RegionUS915NextChannel+0x92>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 80186fe:	4b58      	ldr	r3, [pc, #352]	@ (8018860 <RegionUS915NextChannel+0x1e4>)
 8018700:	681a      	ldr	r2, [r3, #0]
 8018702:	4b56      	ldr	r3, [pc, #344]	@ (801885c <RegionUS915NextChannel+0x1e0>)
 8018704:	681b      	ldr	r3, [r3, #0]
 8018706:	f8b2 2488 	ldrh.w	r2, [r2, #1160]	@ 0x488
 801870a:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801870e:	68fb      	ldr	r3, [r7, #12]
 8018710:	7a5b      	ldrb	r3, [r3, #9]
 8018712:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8018714:	68fb      	ldr	r3, [r7, #12]
 8018716:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801871a:	b2db      	uxtb	r3, r3
 801871c:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 801871e:	4b4f      	ldr	r3, [pc, #316]	@ (801885c <RegionUS915NextChannel+0x1e0>)
 8018720:	681b      	ldr	r3, [r3, #0]
 8018722:	3390      	adds	r3, #144	@ 0x90
 8018724:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8018726:	4b4e      	ldr	r3, [pc, #312]	@ (8018860 <RegionUS915NextChannel+0x1e4>)
 8018728:	681b      	ldr	r3, [r3, #0]
 801872a:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 801872c:	4b4b      	ldr	r3, [pc, #300]	@ (801885c <RegionUS915NextChannel+0x1e0>)
 801872e:	681b      	ldr	r3, [r3, #0]
 8018730:	623b      	str	r3, [r7, #32]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 8018732:	2348      	movs	r3, #72	@ 0x48
 8018734:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = NULL;
 8018736:	2300      	movs	r3, #0
 8018738:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801873a:	68fb      	ldr	r3, [r7, #12]
 801873c:	681b      	ldr	r3, [r3, #0]
 801873e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8018740:	68fb      	ldr	r3, [r7, #12]
 8018742:	685b      	ldr	r3, [r3, #4]
 8018744:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8018746:	68fb      	ldr	r3, [r7, #12]
 8018748:	7a9b      	ldrb	r3, [r3, #10]
 801874a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 801874e:	2301      	movs	r3, #1
 8018750:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8018754:	68fa      	ldr	r2, [r7, #12]
 8018756:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801875a:	320c      	adds	r2, #12
 801875c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018760:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8018764:	68fb      	ldr	r3, [r7, #12]
 8018766:	7d1b      	ldrb	r3, [r3, #20]
 8018768:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801876c:	68fb      	ldr	r3, [r7, #12]
 801876e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8018772:	68fb      	ldr	r3, [r7, #12]
 8018774:	8adb      	ldrh	r3, [r3, #22]
 8018776:	4619      	mov	r1, r3
 8018778:	4610      	mov	r0, r2
 801877a:	f7fe ff01 	bl	8017580 <GetTimeOnAir>
 801877e:	4603      	mov	r3, r0
 8018780:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8018782:	f107 0314 	add.w	r3, r7, #20
 8018786:	64bb      	str	r3, [r7, #72]	@ 0x48
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8018788:	f107 0195 	add.w	r1, r7, #149	@ 0x95
 801878c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8018790:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	9301      	str	r3, [sp, #4]
 8018798:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 801879c:	9300      	str	r3, [sp, #0]
 801879e:	460b      	mov	r3, r1
 80187a0:	6839      	ldr	r1, [r7, #0]
 80187a2:	f7fd fb60 	bl	8015e66 <RegionCommonIdentifyChannels>
 80187a6:	4603      	mov	r3, r0
 80187a8:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 80187ac:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	d14d      	bne.n	8018850 <RegionUS915NextChannel+0x1d4>
    {
        if( nextChanParams->Joined == true )
 80187b4:	68fb      	ldr	r3, [r7, #12]
 80187b6:	7a5b      	ldrb	r3, [r3, #9]
 80187b8:	2b00      	cmp	r3, #0
 80187ba:	d00e      	beq.n	80187da <RegionUS915NextChannel+0x15e>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 80187bc:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 80187c0:	3b01      	subs	r3, #1
 80187c2:	4619      	mov	r1, r3
 80187c4:	2000      	movs	r0, #0
 80187c6:	f000 f8f5 	bl	80189b4 <randr>
 80187ca:	4603      	mov	r3, r0
 80187cc:	3398      	adds	r3, #152	@ 0x98
 80187ce:	443b      	add	r3, r7
 80187d0:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 80187d4:	68bb      	ldr	r3, [r7, #8]
 80187d6:	701a      	strb	r2, [r3, #0]
 80187d8:	e030      	b.n	801883c <RegionUS915NextChannel+0x1c0>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 80187da:	68fb      	ldr	r3, [r7, #12]
 80187dc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80187e0:	2b00      	cmp	r3, #0
 80187e2:	d10f      	bne.n	8018804 <RegionUS915NextChannel+0x188>
            {
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 80187e4:	4b1d      	ldr	r3, [pc, #116]	@ (801885c <RegionUS915NextChannel+0x1e0>)
 80187e6:	681b      	ldr	r3, [r3, #0]
 80187e8:	f103 0090 	add.w	r0, r3, #144	@ 0x90
                    &RegionNvmGroup1->JoinChannelGroupsCurrentIndex, channel ) == LORAMAC_STATUS_PARAMETER_INVALID )
 80187ec:	4b1b      	ldr	r3, [pc, #108]	@ (801885c <RegionUS915NextChannel+0x1e0>)
 80187ee:	681b      	ldr	r3, [r3, #0]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 80187f0:	339c      	adds	r3, #156	@ 0x9c
 80187f2:	68ba      	ldr	r2, [r7, #8]
 80187f4:	4619      	mov	r1, r3
 80187f6:	f7fc fc89 	bl	801510c <RegionBaseUSComputeNext125kHzJoinChannel>
 80187fa:	4603      	mov	r3, r0
 80187fc:	2b03      	cmp	r3, #3
 80187fe:	d11d      	bne.n	801883c <RegionUS915NextChannel+0x1c0>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 8018800:	2303      	movs	r3, #3
 8018802:	e027      	b.n	8018854 <RegionUS915NextChannel+0x1d8>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 8018804:	2300      	movs	r3, #0
 8018806:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 801880a:	e004      	b.n	8018816 <RegionUS915NextChannel+0x19a>
                {
                    i++;
 801880c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8018810:	3301      	adds	r3, #1
 8018812:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8018816:	4b11      	ldr	r3, [pc, #68]	@ (801885c <RegionUS915NextChannel+0x1e0>)
 8018818:	681b      	ldr	r3, [r3, #0]
 801881a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 801881e:	b2da      	uxtb	r2, r3
 8018820:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8018824:	fa42 f303 	asr.w	r3, r2, r3
 8018828:	f003 0301 	and.w	r3, r3, #1
 801882c:	2b00      	cmp	r3, #0
 801882e:	d0ed      	beq.n	801880c <RegionUS915NextChannel+0x190>
                }
                *channel = 64 + i;
 8018830:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8018834:	3340      	adds	r3, #64	@ 0x40
 8018836:	b2da      	uxtb	r2, r3
 8018838:	68bb      	ldr	r3, [r7, #8]
 801883a:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 801883c:	4b07      	ldr	r3, [pc, #28]	@ (801885c <RegionUS915NextChannel+0x1e0>)
 801883e:	681b      	ldr	r3, [r3, #0]
 8018840:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 8018844:	68bb      	ldr	r3, [r7, #8]
 8018846:	781b      	ldrb	r3, [r3, #0]
 8018848:	2248      	movs	r2, #72	@ 0x48
 801884a:	4619      	mov	r1, r3
 801884c:	f7fc fec0 	bl	80155d0 <RegionCommonChanDisable>
    }
    return status;
 8018850:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 8018854:	4618      	mov	r0, r3
 8018856:	3798      	adds	r7, #152	@ 0x98
 8018858:	46bd      	mov	sp, r7
 801885a:	bd80      	pop	{r7, pc}
 801885c:	20001c98 	.word	0x20001c98
 8018860:	20001c9c 	.word	0x20001c9c

08018864 <RegionUS915SetContinuousWave>:
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionUS915SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8018864:	b590      	push	{r4, r7, lr}
 8018866:	b085      	sub	sp, #20
 8018868:	af00      	add	r7, sp, #0
 801886a:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, RegionNvmGroup2->ChannelsMask );
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8018872:	4b23      	ldr	r3, [pc, #140]	@ (8018900 <RegionUS915SetContinuousWave+0x9c>)
 8018874:	681a      	ldr	r2, [r3, #0]
 8018876:	4b23      	ldr	r3, [pc, #140]	@ (8018904 <RegionUS915SetContinuousWave+0xa0>)
 8018878:	6819      	ldr	r1, [r3, #0]
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	781b      	ldrb	r3, [r3, #0]
 801887e:	461c      	mov	r4, r3
 8018880:	4623      	mov	r3, r4
 8018882:	005b      	lsls	r3, r3, #1
 8018884:	4423      	add	r3, r4
 8018886:	009b      	lsls	r3, r3, #2
 8018888:	440b      	add	r3, r1
 801888a:	3309      	adds	r3, #9
 801888c:	781b      	ldrb	r3, [r3, #0]
 801888e:	4619      	mov	r1, r3
 8018890:	460b      	mov	r3, r1
 8018892:	005b      	lsls	r3, r3, #1
 8018894:	440b      	add	r3, r1
 8018896:	00db      	lsls	r3, r3, #3
 8018898:	4413      	add	r3, r2
 801889a:	3302      	adds	r3, #2
 801889c:	f993 1000 	ldrsb.w	r1, [r3]
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80188a6:	4b17      	ldr	r3, [pc, #92]	@ (8018904 <RegionUS915SetContinuousWave+0xa0>)
 80188a8:	681b      	ldr	r3, [r3, #0]
 80188aa:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 80188ae:	f7fe fded 	bl	801748c <LimitTxPower>
 80188b2:	4603      	mov	r3, r0
 80188b4:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 80188b6:	2300      	movs	r3, #0
 80188b8:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 80188ba:	4b12      	ldr	r3, [pc, #72]	@ (8018904 <RegionUS915SetContinuousWave+0xa0>)
 80188bc:	681a      	ldr	r2, [r3, #0]
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	781b      	ldrb	r3, [r3, #0]
 80188c2:	4619      	mov	r1, r3
 80188c4:	460b      	mov	r3, r1
 80188c6:	005b      	lsls	r3, r3, #1
 80188c8:	440b      	add	r3, r1
 80188ca:	009b      	lsls	r3, r3, #2
 80188cc:	4413      	add	r3, r2
 80188ce:	681b      	ldr	r3, [r3, #0]
 80188d0:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 80188d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80188d6:	f04f 0200 	mov.w	r2, #0
 80188da:	490b      	ldr	r1, [pc, #44]	@ (8018908 <RegionUS915SetContinuousWave+0xa4>)
 80188dc:	4618      	mov	r0, r3
 80188de:	f7fd f9d3 	bl	8015c88 <RegionCommonComputeTxPower>
 80188e2:	4603      	mov	r3, r0
 80188e4:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 80188e6:	4b09      	ldr	r3, [pc, #36]	@ (801890c <RegionUS915SetContinuousWave+0xa8>)
 80188e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80188ea:	687a      	ldr	r2, [r7, #4]
 80188ec:	8992      	ldrh	r2, [r2, #12]
 80188ee:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80188f2:	68b8      	ldr	r0, [r7, #8]
 80188f4:	4798      	blx	r3
#endif /* REGION_US915 */
}
 80188f6:	bf00      	nop
 80188f8:	3714      	adds	r7, #20
 80188fa:	46bd      	mov	sp, r7
 80188fc:	bd90      	pop	{r4, r7, pc}
 80188fe:	bf00      	nop
 8018900:	20001c98 	.word	0x20001c98
 8018904:	20001c9c 	.word	0x20001c9c
 8018908:	41f00000 	.word	0x41f00000
 801890c:	0801da80 	.word	0x0801da80

08018910 <RegionUS915ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8018910:	b480      	push	{r7}
 8018912:	b085      	sub	sp, #20
 8018914:	af00      	add	r7, sp, #0
 8018916:	4603      	mov	r3, r0
 8018918:	71fb      	strb	r3, [r7, #7]
 801891a:	460b      	mov	r3, r1
 801891c:	71bb      	strb	r3, [r7, #6]
 801891e:	4613      	mov	r3, r2
 8018920:	717b      	strb	r3, [r7, #5]
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 8018922:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8018926:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801892a:	4909      	ldr	r1, [pc, #36]	@ (8018950 <RegionUS915ApplyDrOffset+0x40>)
 801892c:	0092      	lsls	r2, r2, #2
 801892e:	440a      	add	r2, r1
 8018930:	4413      	add	r3, r2
 8018932:	781b      	ldrb	r3, [r3, #0]
 8018934:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8018936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801893a:	2b00      	cmp	r3, #0
 801893c:	da01      	bge.n	8018942 <RegionUS915ApplyDrOffset+0x32>
    {
        datarate = DR_0;
 801893e:	2300      	movs	r3, #0
 8018940:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8018942:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_US915 */
}
 8018944:	4618      	mov	r0, r3
 8018946:	3714      	adds	r7, #20
 8018948:	46bd      	mov	sp, r7
 801894a:	bc80      	pop	{r7}
 801894c:	4770      	bx	lr
 801894e:	bf00      	nop
 8018950:	0801da4c 	.word	0x0801da4c

08018954 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8018954:	b480      	push	{r7}
 8018956:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8018958:	4b0d      	ldr	r3, [pc, #52]	@ (8018990 <rand1+0x3c>)
 801895a:	681b      	ldr	r3, [r3, #0]
 801895c:	4a0d      	ldr	r2, [pc, #52]	@ (8018994 <rand1+0x40>)
 801895e:	fb02 f303 	mul.w	r3, r2, r3
 8018962:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8018966:	3339      	adds	r3, #57	@ 0x39
 8018968:	4a09      	ldr	r2, [pc, #36]	@ (8018990 <rand1+0x3c>)
 801896a:	6013      	str	r3, [r2, #0]
 801896c:	4b08      	ldr	r3, [pc, #32]	@ (8018990 <rand1+0x3c>)
 801896e:	681a      	ldr	r2, [r3, #0]
 8018970:	2303      	movs	r3, #3
 8018972:	fba3 1302 	umull	r1, r3, r3, r2
 8018976:	1ad1      	subs	r1, r2, r3
 8018978:	0849      	lsrs	r1, r1, #1
 801897a:	440b      	add	r3, r1
 801897c:	0f99      	lsrs	r1, r3, #30
 801897e:	460b      	mov	r3, r1
 8018980:	07db      	lsls	r3, r3, #31
 8018982:	1a5b      	subs	r3, r3, r1
 8018984:	1ad1      	subs	r1, r2, r3
 8018986:	460b      	mov	r3, r1
}
 8018988:	4618      	mov	r0, r3
 801898a:	46bd      	mov	sp, r7
 801898c:	bc80      	pop	{r7}
 801898e:	4770      	bx	lr
 8018990:	20000144 	.word	0x20000144
 8018994:	41c64e6d 	.word	0x41c64e6d

08018998 <srand1>:

void srand1( uint32_t seed )
{
 8018998:	b480      	push	{r7}
 801899a:	b083      	sub	sp, #12
 801899c:	af00      	add	r7, sp, #0
 801899e:	6078      	str	r0, [r7, #4]
    next = seed;
 80189a0:	4a03      	ldr	r2, [pc, #12]	@ (80189b0 <srand1+0x18>)
 80189a2:	687b      	ldr	r3, [r7, #4]
 80189a4:	6013      	str	r3, [r2, #0]
}
 80189a6:	bf00      	nop
 80189a8:	370c      	adds	r7, #12
 80189aa:	46bd      	mov	sp, r7
 80189ac:	bc80      	pop	{r7}
 80189ae:	4770      	bx	lr
 80189b0:	20000144 	.word	0x20000144

080189b4 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80189b4:	b580      	push	{r7, lr}
 80189b6:	b082      	sub	sp, #8
 80189b8:	af00      	add	r7, sp, #0
 80189ba:	6078      	str	r0, [r7, #4]
 80189bc:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80189be:	f7ff ffc9 	bl	8018954 <rand1>
 80189c2:	4602      	mov	r2, r0
 80189c4:	6839      	ldr	r1, [r7, #0]
 80189c6:	687b      	ldr	r3, [r7, #4]
 80189c8:	1acb      	subs	r3, r1, r3
 80189ca:	3301      	adds	r3, #1
 80189cc:	fb92 f1f3 	sdiv	r1, r2, r3
 80189d0:	fb01 f303 	mul.w	r3, r1, r3
 80189d4:	1ad2      	subs	r2, r2, r3
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	4413      	add	r3, r2
}
 80189da:	4618      	mov	r0, r3
 80189dc:	3708      	adds	r7, #8
 80189de:	46bd      	mov	sp, r7
 80189e0:	bd80      	pop	{r7, pc}

080189e2 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80189e2:	b480      	push	{r7}
 80189e4:	b085      	sub	sp, #20
 80189e6:	af00      	add	r7, sp, #0
 80189e8:	60f8      	str	r0, [r7, #12]
 80189ea:	60b9      	str	r1, [r7, #8]
 80189ec:	4613      	mov	r3, r2
 80189ee:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 80189f0:	e007      	b.n	8018a02 <memcpy1+0x20>
    {
        *dst++ = *src++;
 80189f2:	68ba      	ldr	r2, [r7, #8]
 80189f4:	1c53      	adds	r3, r2, #1
 80189f6:	60bb      	str	r3, [r7, #8]
 80189f8:	68fb      	ldr	r3, [r7, #12]
 80189fa:	1c59      	adds	r1, r3, #1
 80189fc:	60f9      	str	r1, [r7, #12]
 80189fe:	7812      	ldrb	r2, [r2, #0]
 8018a00:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018a02:	88fb      	ldrh	r3, [r7, #6]
 8018a04:	1e5a      	subs	r2, r3, #1
 8018a06:	80fa      	strh	r2, [r7, #6]
 8018a08:	2b00      	cmp	r3, #0
 8018a0a:	d1f2      	bne.n	80189f2 <memcpy1+0x10>
    }
}
 8018a0c:	bf00      	nop
 8018a0e:	bf00      	nop
 8018a10:	3714      	adds	r7, #20
 8018a12:	46bd      	mov	sp, r7
 8018a14:	bc80      	pop	{r7}
 8018a16:	4770      	bx	lr

08018a18 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8018a18:	b480      	push	{r7}
 8018a1a:	b085      	sub	sp, #20
 8018a1c:	af00      	add	r7, sp, #0
 8018a1e:	60f8      	str	r0, [r7, #12]
 8018a20:	60b9      	str	r1, [r7, #8]
 8018a22:	4613      	mov	r3, r2
 8018a24:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8018a26:	88fb      	ldrh	r3, [r7, #6]
 8018a28:	3b01      	subs	r3, #1
 8018a2a:	68fa      	ldr	r2, [r7, #12]
 8018a2c:	4413      	add	r3, r2
 8018a2e:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8018a30:	e007      	b.n	8018a42 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8018a32:	68ba      	ldr	r2, [r7, #8]
 8018a34:	1c53      	adds	r3, r2, #1
 8018a36:	60bb      	str	r3, [r7, #8]
 8018a38:	68fb      	ldr	r3, [r7, #12]
 8018a3a:	1e59      	subs	r1, r3, #1
 8018a3c:	60f9      	str	r1, [r7, #12]
 8018a3e:	7812      	ldrb	r2, [r2, #0]
 8018a40:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018a42:	88fb      	ldrh	r3, [r7, #6]
 8018a44:	1e5a      	subs	r2, r3, #1
 8018a46:	80fa      	strh	r2, [r7, #6]
 8018a48:	2b00      	cmp	r3, #0
 8018a4a:	d1f2      	bne.n	8018a32 <memcpyr+0x1a>
    }
}
 8018a4c:	bf00      	nop
 8018a4e:	bf00      	nop
 8018a50:	3714      	adds	r7, #20
 8018a52:	46bd      	mov	sp, r7
 8018a54:	bc80      	pop	{r7}
 8018a56:	4770      	bx	lr

08018a58 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8018a58:	b480      	push	{r7}
 8018a5a:	b083      	sub	sp, #12
 8018a5c:	af00      	add	r7, sp, #0
 8018a5e:	6078      	str	r0, [r7, #4]
 8018a60:	460b      	mov	r3, r1
 8018a62:	70fb      	strb	r3, [r7, #3]
 8018a64:	4613      	mov	r3, r2
 8018a66:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8018a68:	e004      	b.n	8018a74 <memset1+0x1c>
    {
        *dst++ = value;
 8018a6a:	687b      	ldr	r3, [r7, #4]
 8018a6c:	1c5a      	adds	r2, r3, #1
 8018a6e:	607a      	str	r2, [r7, #4]
 8018a70:	78fa      	ldrb	r2, [r7, #3]
 8018a72:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018a74:	883b      	ldrh	r3, [r7, #0]
 8018a76:	1e5a      	subs	r2, r3, #1
 8018a78:	803a      	strh	r2, [r7, #0]
 8018a7a:	2b00      	cmp	r3, #0
 8018a7c:	d1f5      	bne.n	8018a6a <memset1+0x12>
    }
}
 8018a7e:	bf00      	nop
 8018a80:	bf00      	nop
 8018a82:	370c      	adds	r7, #12
 8018a84:	46bd      	mov	sp, r7
 8018a86:	bc80      	pop	{r7}
 8018a88:	4770      	bx	lr
	...

08018a8c <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8018a8c:	b480      	push	{r7}
 8018a8e:	b085      	sub	sp, #20
 8018a90:	af00      	add	r7, sp, #0
 8018a92:	6078      	str	r0, [r7, #4]
 8018a94:	460b      	mov	r3, r1
 8018a96:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8018a98:	f04f 33ff 	mov.w	r3, #4294967295
 8018a9c:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 8018a9e:	687b      	ldr	r3, [r7, #4]
 8018aa0:	2b00      	cmp	r3, #0
 8018aa2:	d101      	bne.n	8018aa8 <Crc32+0x1c>
    {
        return 0;
 8018aa4:	2300      	movs	r3, #0
 8018aa6:	e026      	b.n	8018af6 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8018aa8:	2300      	movs	r3, #0
 8018aaa:	817b      	strh	r3, [r7, #10]
 8018aac:	e01d      	b.n	8018aea <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 8018aae:	897b      	ldrh	r3, [r7, #10]
 8018ab0:	687a      	ldr	r2, [r7, #4]
 8018ab2:	4413      	add	r3, r2
 8018ab4:	781b      	ldrb	r3, [r3, #0]
 8018ab6:	461a      	mov	r2, r3
 8018ab8:	68fb      	ldr	r3, [r7, #12]
 8018aba:	4053      	eors	r3, r2
 8018abc:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8018abe:	2300      	movs	r3, #0
 8018ac0:	813b      	strh	r3, [r7, #8]
 8018ac2:	e00c      	b.n	8018ade <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8018ac4:	68fb      	ldr	r3, [r7, #12]
 8018ac6:	085a      	lsrs	r2, r3, #1
 8018ac8:	68fb      	ldr	r3, [r7, #12]
 8018aca:	f003 0301 	and.w	r3, r3, #1
 8018ace:	425b      	negs	r3, r3
 8018ad0:	490b      	ldr	r1, [pc, #44]	@ (8018b00 <Crc32+0x74>)
 8018ad2:	400b      	ands	r3, r1
 8018ad4:	4053      	eors	r3, r2
 8018ad6:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8018ad8:	893b      	ldrh	r3, [r7, #8]
 8018ada:	3301      	adds	r3, #1
 8018adc:	813b      	strh	r3, [r7, #8]
 8018ade:	893b      	ldrh	r3, [r7, #8]
 8018ae0:	2b07      	cmp	r3, #7
 8018ae2:	d9ef      	bls.n	8018ac4 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8018ae4:	897b      	ldrh	r3, [r7, #10]
 8018ae6:	3301      	adds	r3, #1
 8018ae8:	817b      	strh	r3, [r7, #10]
 8018aea:	897a      	ldrh	r2, [r7, #10]
 8018aec:	887b      	ldrh	r3, [r7, #2]
 8018aee:	429a      	cmp	r2, r3
 8018af0:	d3dd      	bcc.n	8018aae <Crc32+0x22>
        }
    }

    return ~crc;
 8018af2:	68fb      	ldr	r3, [r7, #12]
 8018af4:	43db      	mvns	r3, r3
}
 8018af6:	4618      	mov	r0, r3
 8018af8:	3714      	adds	r7, #20
 8018afa:	46bd      	mov	sp, r7
 8018afc:	bc80      	pop	{r7}
 8018afe:	4770      	bx	lr
 8018b00:	edb88320 	.word	0xedb88320

08018b04 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8018b04:	b480      	push	{r7}
 8018b06:	b083      	sub	sp, #12
 8018b08:	af00      	add	r7, sp, #0
 8018b0a:	6078      	str	r0, [r7, #4]
 8018b0c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	683a      	ldr	r2, [r7, #0]
 8018b12:	619a      	str	r2, [r3, #24]
}
 8018b14:	bf00      	nop
 8018b16:	370c      	adds	r7, #12
 8018b18:	46bd      	mov	sp, r7
 8018b1a:	bc80      	pop	{r7}
 8018b1c:	4770      	bx	lr

08018b1e <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8018b1e:	b480      	push	{r7}
 8018b20:	b083      	sub	sp, #12
 8018b22:	af00      	add	r7, sp, #0
 8018b24:	6078      	str	r0, [r7, #4]
 8018b26:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	683a      	ldr	r2, [r7, #0]
 8018b2c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8018b2e:	bf00      	nop
 8018b30:	370c      	adds	r7, #12
 8018b32:	46bd      	mov	sp, r7
 8018b34:	bc80      	pop	{r7}
 8018b36:	4770      	bx	lr

08018b38 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8018b38:	b580      	push	{r7, lr}
 8018b3a:	b084      	sub	sp, #16
 8018b3c:	af02      	add	r7, sp, #8
 8018b3e:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8018b40:	4a24      	ldr	r2, [pc, #144]	@ (8018bd4 <RadioInit+0x9c>)
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8018b46:	4b24      	ldr	r3, [pc, #144]	@ (8018bd8 <RadioInit+0xa0>)
 8018b48:	2200      	movs	r2, #0
 8018b4a:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8018b4c:	4b22      	ldr	r3, [pc, #136]	@ (8018bd8 <RadioInit+0xa0>)
 8018b4e:	2200      	movs	r2, #0
 8018b50:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8018b52:	4b21      	ldr	r3, [pc, #132]	@ (8018bd8 <RadioInit+0xa0>)
 8018b54:	2200      	movs	r2, #0
 8018b56:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8018b58:	4b1f      	ldr	r3, [pc, #124]	@ (8018bd8 <RadioInit+0xa0>)
 8018b5a:	2200      	movs	r2, #0
 8018b5c:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8018b5e:	481f      	ldr	r0, [pc, #124]	@ (8018bdc <RadioInit+0xa4>)
 8018b60:	f001 fa34 	bl	8019fcc <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8018b64:	4b1c      	ldr	r3, [pc, #112]	@ (8018bd8 <RadioInit+0xa0>)
 8018b66:	2200      	movs	r2, #0
 8018b68:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8018b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8018bd8 <RadioInit+0xa0>)
 8018b6c:	2200      	movs	r2, #0
 8018b6e:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8018b70:	f001 fcc8 	bl	801a504 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8018b74:	2100      	movs	r1, #0
 8018b76:	2000      	movs	r0, #0
 8018b78:	f002 f894 	bl	801aca4 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8018b7c:	2204      	movs	r2, #4
 8018b7e:	2100      	movs	r1, #0
 8018b80:	2001      	movs	r0, #1
 8018b82:	f001 fe51 	bl	801a828 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8018b86:	2300      	movs	r3, #0
 8018b88:	2200      	movs	r2, #0
 8018b8a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8018b8e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8018b92:	f001 fd81 	bl	801a698 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8018b96:	f000 fd4d 	bl	8019634 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8018b9a:	2300      	movs	r3, #0
 8018b9c:	9300      	str	r3, [sp, #0]
 8018b9e:	4b10      	ldr	r3, [pc, #64]	@ (8018be0 <RadioInit+0xa8>)
 8018ba0:	2200      	movs	r2, #0
 8018ba2:	f04f 31ff 	mov.w	r1, #4294967295
 8018ba6:	480f      	ldr	r0, [pc, #60]	@ (8018be4 <RadioInit+0xac>)
 8018ba8:	f003 fa8e 	bl	801c0c8 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8018bac:	2300      	movs	r3, #0
 8018bae:	9300      	str	r3, [sp, #0]
 8018bb0:	4b0d      	ldr	r3, [pc, #52]	@ (8018be8 <RadioInit+0xb0>)
 8018bb2:	2200      	movs	r2, #0
 8018bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8018bb8:	480c      	ldr	r0, [pc, #48]	@ (8018bec <RadioInit+0xb4>)
 8018bba:	f003 fa85 	bl	801c0c8 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8018bbe:	4809      	ldr	r0, [pc, #36]	@ (8018be4 <RadioInit+0xac>)
 8018bc0:	f003 fb26 	bl	801c210 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8018bc4:	4809      	ldr	r0, [pc, #36]	@ (8018bec <RadioInit+0xb4>)
 8018bc6:	f003 fb23 	bl	801c210 <UTIL_TIMER_Stop>
}
 8018bca:	bf00      	nop
 8018bcc:	3708      	adds	r7, #8
 8018bce:	46bd      	mov	sp, r7
 8018bd0:	bd80      	pop	{r7, pc}
 8018bd2:	bf00      	nop
 8018bd4:	20001da0 	.word	0x20001da0
 8018bd8:	20001da4 	.word	0x20001da4
 8018bdc:	08019a59 	.word	0x08019a59
 8018be0:	080199c9 	.word	0x080199c9
 8018be4:	20001e00 	.word	0x20001e00
 8018be8:	080199dd 	.word	0x080199dd
 8018bec:	20001e18 	.word	0x20001e18

08018bf0 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8018bf0:	b580      	push	{r7, lr}
 8018bf2:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8018bf4:	f001 fa32 	bl	801a05c <SUBGRF_GetOperatingMode>
 8018bf8:	4603      	mov	r3, r0
 8018bfa:	2b07      	cmp	r3, #7
 8018bfc:	d00a      	beq.n	8018c14 <RadioGetStatus+0x24>
 8018bfe:	2b07      	cmp	r3, #7
 8018c00:	dc0a      	bgt.n	8018c18 <RadioGetStatus+0x28>
 8018c02:	2b04      	cmp	r3, #4
 8018c04:	d002      	beq.n	8018c0c <RadioGetStatus+0x1c>
 8018c06:	2b05      	cmp	r3, #5
 8018c08:	d002      	beq.n	8018c10 <RadioGetStatus+0x20>
 8018c0a:	e005      	b.n	8018c18 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8018c0c:	2302      	movs	r3, #2
 8018c0e:	e004      	b.n	8018c1a <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8018c10:	2301      	movs	r3, #1
 8018c12:	e002      	b.n	8018c1a <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8018c14:	2303      	movs	r3, #3
 8018c16:	e000      	b.n	8018c1a <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8018c18:	2300      	movs	r3, #0
    }
}
 8018c1a:	4618      	mov	r0, r3
 8018c1c:	bd80      	pop	{r7, pc}
	...

08018c20 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8018c20:	b580      	push	{r7, lr}
 8018c22:	b082      	sub	sp, #8
 8018c24:	af00      	add	r7, sp, #0
 8018c26:	4603      	mov	r3, r0
 8018c28:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8018c2a:	4a1e      	ldr	r2, [pc, #120]	@ (8018ca4 <RadioSetModem+0x84>)
 8018c2c:	79fb      	ldrb	r3, [r7, #7]
 8018c2e:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8018c30:	79fb      	ldrb	r3, [r7, #7]
 8018c32:	4618      	mov	r0, r3
 8018c34:	f002 fbfc 	bl	801b430 <RFW_SetRadioModem>
    switch( modem )
 8018c38:	79fb      	ldrb	r3, [r7, #7]
 8018c3a:	2b03      	cmp	r3, #3
 8018c3c:	d026      	beq.n	8018c8c <RadioSetModem+0x6c>
 8018c3e:	2b03      	cmp	r3, #3
 8018c40:	dc03      	bgt.n	8018c4a <RadioSetModem+0x2a>
 8018c42:	2b00      	cmp	r3, #0
 8018c44:	d008      	beq.n	8018c58 <RadioSetModem+0x38>
 8018c46:	2b01      	cmp	r3, #1
 8018c48:	d00d      	beq.n	8018c66 <RadioSetModem+0x46>
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8018c4a:	2003      	movs	r0, #3
 8018c4c:	f001 fdc6 	bl	801a7dc <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018c50:	4b14      	ldr	r3, [pc, #80]	@ (8018ca4 <RadioSetModem+0x84>)
 8018c52:	2200      	movs	r2, #0
 8018c54:	735a      	strb	r2, [r3, #13]
        break;
 8018c56:	e021      	b.n	8018c9c <RadioSetModem+0x7c>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8018c58:	2000      	movs	r0, #0
 8018c5a:	f001 fdbf 	bl	801a7dc <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018c5e:	4b11      	ldr	r3, [pc, #68]	@ (8018ca4 <RadioSetModem+0x84>)
 8018c60:	2200      	movs	r2, #0
 8018c62:	735a      	strb	r2, [r3, #13]
        break;
 8018c64:	e01a      	b.n	8018c9c <RadioSetModem+0x7c>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8018c66:	2001      	movs	r0, #1
 8018c68:	f001 fdb8 	bl	801a7dc <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8018c6c:	4b0d      	ldr	r3, [pc, #52]	@ (8018ca4 <RadioSetModem+0x84>)
 8018c6e:	7b5a      	ldrb	r2, [r3, #13]
 8018c70:	4b0c      	ldr	r3, [pc, #48]	@ (8018ca4 <RadioSetModem+0x84>)
 8018c72:	7b1b      	ldrb	r3, [r3, #12]
 8018c74:	429a      	cmp	r2, r3
 8018c76:	d010      	beq.n	8018c9a <RadioSetModem+0x7a>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8018c78:	4b0a      	ldr	r3, [pc, #40]	@ (8018ca4 <RadioSetModem+0x84>)
 8018c7a:	7b1a      	ldrb	r2, [r3, #12]
 8018c7c:	4b09      	ldr	r3, [pc, #36]	@ (8018ca4 <RadioSetModem+0x84>)
 8018c7e:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8018c80:	4b08      	ldr	r3, [pc, #32]	@ (8018ca4 <RadioSetModem+0x84>)
 8018c82:	7b5b      	ldrb	r3, [r3, #13]
 8018c84:	4618      	mov	r0, r3
 8018c86:	f000 fe69 	bl	801995c <RadioSetPublicNetwork>
        }
        break;
 8018c8a:	e006      	b.n	8018c9a <RadioSetModem+0x7a>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8018c8c:	2002      	movs	r0, #2
 8018c8e:	f001 fda5 	bl	801a7dc <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018c92:	4b04      	ldr	r3, [pc, #16]	@ (8018ca4 <RadioSetModem+0x84>)
 8018c94:	2200      	movs	r2, #0
 8018c96:	735a      	strb	r2, [r3, #13]
        break;
 8018c98:	e000      	b.n	8018c9c <RadioSetModem+0x7c>
        break;
 8018c9a:	bf00      	nop
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
        break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8018c9c:	bf00      	nop
 8018c9e:	3708      	adds	r7, #8
 8018ca0:	46bd      	mov	sp, r7
 8018ca2:	bd80      	pop	{r7, pc}
 8018ca4:	20001da4 	.word	0x20001da4

08018ca8 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8018ca8:	b580      	push	{r7, lr}
 8018caa:	b082      	sub	sp, #8
 8018cac:	af00      	add	r7, sp, #0
 8018cae:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8018cb0:	6878      	ldr	r0, [r7, #4]
 8018cb2:	f001 fd4d 	bl	801a750 <SUBGRF_SetRfFrequency>
}
 8018cb6:	bf00      	nop
 8018cb8:	3708      	adds	r7, #8
 8018cba:	46bd      	mov	sp, r7
 8018cbc:	bd80      	pop	{r7, pc}

08018cbe <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8018cbe:	b580      	push	{r7, lr}
 8018cc0:	b090      	sub	sp, #64	@ 0x40
 8018cc2:	af0a      	add	r7, sp, #40	@ 0x28
 8018cc4:	60f8      	str	r0, [r7, #12]
 8018cc6:	60b9      	str	r1, [r7, #8]
 8018cc8:	603b      	str	r3, [r7, #0]
 8018cca:	4613      	mov	r3, r2
 8018ccc:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8018cce:	2301      	movs	r3, #1
 8018cd0:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8018cd2:	2300      	movs	r3, #0
 8018cd4:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8018cd6:	2300      	movs	r3, #0
 8018cd8:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 8018cda:	f000 fcbe 	bl	801965a <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8018cde:	2000      	movs	r0, #0
 8018ce0:	f7ff ff9e 	bl	8018c20 <RadioSetModem>

    RadioSetChannel( freq );
 8018ce4:	68f8      	ldr	r0, [r7, #12]
 8018ce6:	f7ff ffdf 	bl	8018ca8 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8018cea:	2301      	movs	r3, #1
 8018cec:	9309      	str	r3, [sp, #36]	@ 0x24
 8018cee:	2300      	movs	r3, #0
 8018cf0:	9308      	str	r3, [sp, #32]
 8018cf2:	2300      	movs	r3, #0
 8018cf4:	9307      	str	r3, [sp, #28]
 8018cf6:	2300      	movs	r3, #0
 8018cf8:	9306      	str	r3, [sp, #24]
 8018cfa:	2300      	movs	r3, #0
 8018cfc:	9305      	str	r3, [sp, #20]
 8018cfe:	2300      	movs	r3, #0
 8018d00:	9304      	str	r3, [sp, #16]
 8018d02:	2300      	movs	r3, #0
 8018d04:	9303      	str	r3, [sp, #12]
 8018d06:	2300      	movs	r3, #0
 8018d08:	9302      	str	r3, [sp, #8]
 8018d0a:	2303      	movs	r3, #3
 8018d0c:	9301      	str	r3, [sp, #4]
 8018d0e:	68bb      	ldr	r3, [r7, #8]
 8018d10:	9300      	str	r3, [sp, #0]
 8018d12:	2300      	movs	r3, #0
 8018d14:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8018d18:	68b9      	ldr	r1, [r7, #8]
 8018d1a:	2000      	movs	r0, #0
 8018d1c:	f000 f83c 	bl	8018d98 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8018d20:	2000      	movs	r0, #0
 8018d22:	f000 fca1 	bl	8019668 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8018d26:	f000 fe47 	bl	80199b8 <RadioGetWakeupTime>
 8018d2a:	4603      	mov	r3, r0
 8018d2c:	4618      	mov	r0, r3
 8018d2e:	f7e9 f94d 	bl	8001fcc <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8018d32:	f003 fb87 	bl	801c444 <UTIL_TIMER_GetCurrentTime>
 8018d36:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8018d38:	e00d      	b.n	8018d56 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8018d3a:	2000      	movs	r0, #0
 8018d3c:	f000 fd8e 	bl	801985c <RadioRssi>
 8018d40:	4603      	mov	r3, r0
 8018d42:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8018d44:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8018d48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018d4c:	429a      	cmp	r2, r3
 8018d4e:	dd02      	ble.n	8018d56 <RadioIsChannelFree+0x98>
        {
            status = false;
 8018d50:	2300      	movs	r3, #0
 8018d52:	75fb      	strb	r3, [r7, #23]
            break;
 8018d54:	e006      	b.n	8018d64 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8018d56:	6938      	ldr	r0, [r7, #16]
 8018d58:	f003 fb86 	bl	801c468 <UTIL_TIMER_GetElapsedTime>
 8018d5c:	4602      	mov	r2, r0
 8018d5e:	683b      	ldr	r3, [r7, #0]
 8018d60:	4293      	cmp	r3, r2
 8018d62:	d8ea      	bhi.n	8018d3a <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8018d64:	f000 fc79 	bl	801965a <RadioStandby>

    return status;
 8018d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8018d6a:	4618      	mov	r0, r3
 8018d6c:	3718      	adds	r7, #24
 8018d6e:	46bd      	mov	sp, r7
 8018d70:	bd80      	pop	{r7, pc}

08018d72 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8018d72:	b580      	push	{r7, lr}
 8018d74:	b082      	sub	sp, #8
 8018d76:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8018d78:	2300      	movs	r3, #0
 8018d7a:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8018d7c:	2300      	movs	r3, #0
 8018d7e:	2200      	movs	r2, #0
 8018d80:	2100      	movs	r1, #0
 8018d82:	2000      	movs	r0, #0
 8018d84:	f001 fc88 	bl	801a698 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8018d88:	f001 fa39 	bl	801a1fe <SUBGRF_GetRandom>
 8018d8c:	6078      	str	r0, [r7, #4]

    return rnd;
 8018d8e:	687b      	ldr	r3, [r7, #4]
}
 8018d90:	4618      	mov	r0, r3
 8018d92:	3708      	adds	r7, #8
 8018d94:	46bd      	mov	sp, r7
 8018d96:	bd80      	pop	{r7, pc}

08018d98 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8018d98:	b580      	push	{r7, lr}
 8018d9a:	b086      	sub	sp, #24
 8018d9c:	af00      	add	r7, sp, #0
 8018d9e:	60b9      	str	r1, [r7, #8]
 8018da0:	607a      	str	r2, [r7, #4]
 8018da2:	461a      	mov	r2, r3
 8018da4:	4603      	mov	r3, r0
 8018da6:	73fb      	strb	r3, [r7, #15]
 8018da8:	4613      	mov	r3, r2
 8018daa:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8018dac:	4a93      	ldr	r2, [pc, #588]	@ (8018ffc <RadioSetRxConfig+0x264>)
 8018dae:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8018db2:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8018db4:	f002 fafa 	bl	801b3ac <RFW_DeInit>
    if( rxContinuous == true )
 8018db8:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8018dbc:	2b00      	cmp	r3, #0
 8018dbe:	d001      	beq.n	8018dc4 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8018dc0:	2300      	movs	r3, #0
 8018dc2:	853b      	strh	r3, [r7, #40]	@ 0x28
    }
    if( fixLen == true )
 8018dc4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8018dc8:	2b00      	cmp	r3, #0
 8018dca:	d004      	beq.n	8018dd6 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8018dcc:	4a8c      	ldr	r2, [pc, #560]	@ (8019000 <RadioSetRxConfig+0x268>)
 8018dce:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8018dd2:	7013      	strb	r3, [r2, #0]
 8018dd4:	e002      	b.n	8018ddc <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8018dd6:	4b8a      	ldr	r3, [pc, #552]	@ (8019000 <RadioSetRxConfig+0x268>)
 8018dd8:	22ff      	movs	r2, #255	@ 0xff
 8018dda:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8018ddc:	7bfb      	ldrb	r3, [r7, #15]
 8018dde:	2b00      	cmp	r3, #0
 8018de0:	d002      	beq.n	8018de8 <RadioSetRxConfig+0x50>
 8018de2:	2b01      	cmp	r3, #1
 8018de4:	d068      	beq.n	8018eb8 <RadioSetRxConfig+0x120>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8018de6:	e105      	b.n	8018ff4 <RadioSetRxConfig+0x25c>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8018de8:	2000      	movs	r0, #0
 8018dea:	f001 fb4d 	bl	801a488 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018dee:	4b83      	ldr	r3, [pc, #524]	@ (8018ffc <RadioSetRxConfig+0x264>)
 8018df0:	2200      	movs	r2, #0
 8018df2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8018df6:	4a81      	ldr	r2, [pc, #516]	@ (8018ffc <RadioSetRxConfig+0x264>)
 8018df8:	687b      	ldr	r3, [r7, #4]
 8018dfa:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8018dfc:	4b7f      	ldr	r3, [pc, #508]	@ (8018ffc <RadioSetRxConfig+0x264>)
 8018dfe:	220b      	movs	r2, #11
 8018e00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8018e04:	68b8      	ldr	r0, [r7, #8]
 8018e06:	f002 fa11 	bl	801b22c <SUBGRF_GetFskBandwidthRegValue>
 8018e0a:	4603      	mov	r3, r0
 8018e0c:	461a      	mov	r2, r3
 8018e0e:	4b7b      	ldr	r3, [pc, #492]	@ (8018ffc <RadioSetRxConfig+0x264>)
 8018e10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018e14:	4b79      	ldr	r3, [pc, #484]	@ (8018ffc <RadioSetRxConfig+0x264>)
 8018e16:	2200      	movs	r2, #0
 8018e18:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8018e1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018e1c:	00db      	lsls	r3, r3, #3
 8018e1e:	b29a      	uxth	r2, r3
 8018e20:	4b76      	ldr	r3, [pc, #472]	@ (8018ffc <RadioSetRxConfig+0x264>)
 8018e22:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8018e24:	4b75      	ldr	r3, [pc, #468]	@ (8018ffc <RadioSetRxConfig+0x264>)
 8018e26:	2204      	movs	r2, #4
 8018e28:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8018e2a:	4b74      	ldr	r3, [pc, #464]	@ (8018ffc <RadioSetRxConfig+0x264>)
 8018e2c:	2218      	movs	r2, #24
 8018e2e:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8018e30:	4b72      	ldr	r3, [pc, #456]	@ (8018ffc <RadioSetRxConfig+0x264>)
 8018e32:	2200      	movs	r2, #0
 8018e34:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8018e36:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8018e3a:	f083 0301 	eor.w	r3, r3, #1
 8018e3e:	b2db      	uxtb	r3, r3
 8018e40:	461a      	mov	r2, r3
 8018e42:	4b6e      	ldr	r3, [pc, #440]	@ (8018ffc <RadioSetRxConfig+0x264>)
 8018e44:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8018e46:	4b6e      	ldr	r3, [pc, #440]	@ (8019000 <RadioSetRxConfig+0x268>)
 8018e48:	781a      	ldrb	r2, [r3, #0]
 8018e4a:	4b6c      	ldr	r3, [pc, #432]	@ (8018ffc <RadioSetRxConfig+0x264>)
 8018e4c:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8018e4e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8018e52:	2b00      	cmp	r3, #0
 8018e54:	d003      	beq.n	8018e5e <RadioSetRxConfig+0xc6>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8018e56:	4b69      	ldr	r3, [pc, #420]	@ (8018ffc <RadioSetRxConfig+0x264>)
 8018e58:	22f2      	movs	r2, #242	@ 0xf2
 8018e5a:	75da      	strb	r2, [r3, #23]
 8018e5c:	e002      	b.n	8018e64 <RadioSetRxConfig+0xcc>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8018e5e:	4b67      	ldr	r3, [pc, #412]	@ (8018ffc <RadioSetRxConfig+0x264>)
 8018e60:	2201      	movs	r2, #1
 8018e62:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8018e64:	4b65      	ldr	r3, [pc, #404]	@ (8018ffc <RadioSetRxConfig+0x264>)
 8018e66:	2201      	movs	r2, #1
 8018e68:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8018e6a:	f000 fbf6 	bl	801965a <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8018e6e:	2000      	movs	r0, #0
 8018e70:	f7ff fed6 	bl	8018c20 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018e74:	4863      	ldr	r0, [pc, #396]	@ (8019004 <RadioSetRxConfig+0x26c>)
 8018e76:	f001 fda5 	bl	801a9c4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018e7a:	4863      	ldr	r0, [pc, #396]	@ (8019008 <RadioSetRxConfig+0x270>)
 8018e7c:	f001 fe74 	bl	801ab68 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8018e80:	4a62      	ldr	r2, [pc, #392]	@ (801900c <RadioSetRxConfig+0x274>)
 8018e82:	f107 0310 	add.w	r3, r7, #16
 8018e86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018e8a:	e883 0003 	stmia.w	r3, {r0, r1}
 8018e8e:	f107 0310 	add.w	r3, r7, #16
 8018e92:	4618      	mov	r0, r3
 8018e94:	f001 f931 	bl	801a0fa <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8018e98:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8018e9c:	f001 f97c 	bl	801a198 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8018ea0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8018ea2:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8018ea6:	fb02 f303 	mul.w	r3, r2, r3
 8018eaa:	461a      	mov	r2, r3
 8018eac:	687b      	ldr	r3, [r7, #4]
 8018eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8018eb2:	4a52      	ldr	r2, [pc, #328]	@ (8018ffc <RadioSetRxConfig+0x264>)
 8018eb4:	6093      	str	r3, [r2, #8]
            break;
 8018eb6:	e09d      	b.n	8018ff4 <RadioSetRxConfig+0x25c>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8018eb8:	2000      	movs	r0, #0
 8018eba:	f001 fae5 	bl	801a488 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018ebe:	4b4f      	ldr	r3, [pc, #316]	@ (8018ffc <RadioSetRxConfig+0x264>)
 8018ec0:	2201      	movs	r2, #1
 8018ec2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8018ec6:	687b      	ldr	r3, [r7, #4]
 8018ec8:	b2da      	uxtb	r2, r3
 8018eca:	4b4c      	ldr	r3, [pc, #304]	@ (8018ffc <RadioSetRxConfig+0x264>)
 8018ecc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8018ed0:	4a4f      	ldr	r2, [pc, #316]	@ (8019010 <RadioSetRxConfig+0x278>)
 8018ed2:	68bb      	ldr	r3, [r7, #8]
 8018ed4:	4413      	add	r3, r2
 8018ed6:	781a      	ldrb	r2, [r3, #0]
 8018ed8:	4b48      	ldr	r3, [pc, #288]	@ (8018ffc <RadioSetRxConfig+0x264>)
 8018eda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8018ede:	4a47      	ldr	r2, [pc, #284]	@ (8018ffc <RadioSetRxConfig+0x264>)
 8018ee0:	7bbb      	ldrb	r3, [r7, #14]
 8018ee2:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8018ee6:	68bb      	ldr	r3, [r7, #8]
 8018ee8:	2b00      	cmp	r3, #0
 8018eea:	d105      	bne.n	8018ef8 <RadioSetRxConfig+0x160>
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	2b0b      	cmp	r3, #11
 8018ef0:	d008      	beq.n	8018f04 <RadioSetRxConfig+0x16c>
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	2b0c      	cmp	r3, #12
 8018ef6:	d005      	beq.n	8018f04 <RadioSetRxConfig+0x16c>
 8018ef8:	68bb      	ldr	r3, [r7, #8]
 8018efa:	2b01      	cmp	r3, #1
 8018efc:	d107      	bne.n	8018f0e <RadioSetRxConfig+0x176>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8018efe:	687b      	ldr	r3, [r7, #4]
 8018f00:	2b0c      	cmp	r3, #12
 8018f02:	d104      	bne.n	8018f0e <RadioSetRxConfig+0x176>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8018f04:	4b3d      	ldr	r3, [pc, #244]	@ (8018ffc <RadioSetRxConfig+0x264>)
 8018f06:	2201      	movs	r2, #1
 8018f08:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8018f0c:	e003      	b.n	8018f16 <RadioSetRxConfig+0x17e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8018f0e:	4b3b      	ldr	r3, [pc, #236]	@ (8018ffc <RadioSetRxConfig+0x264>)
 8018f10:	2200      	movs	r2, #0
 8018f12:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018f16:	4b39      	ldr	r3, [pc, #228]	@ (8018ffc <RadioSetRxConfig+0x264>)
 8018f18:	2201      	movs	r2, #1
 8018f1a:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018f1c:	4b37      	ldr	r3, [pc, #220]	@ (8018ffc <RadioSetRxConfig+0x264>)
 8018f1e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8018f22:	2b05      	cmp	r3, #5
 8018f24:	d004      	beq.n	8018f30 <RadioSetRxConfig+0x198>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8018f26:	4b35      	ldr	r3, [pc, #212]	@ (8018ffc <RadioSetRxConfig+0x264>)
 8018f28:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018f2c:	2b06      	cmp	r3, #6
 8018f2e:	d10a      	bne.n	8018f46 <RadioSetRxConfig+0x1ae>
                if( preambleLen < 12 )
 8018f30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018f32:	2b0b      	cmp	r3, #11
 8018f34:	d803      	bhi.n	8018f3e <RadioSetRxConfig+0x1a6>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8018f36:	4b31      	ldr	r3, [pc, #196]	@ (8018ffc <RadioSetRxConfig+0x264>)
 8018f38:	220c      	movs	r2, #12
 8018f3a:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8018f3c:	e006      	b.n	8018f4c <RadioSetRxConfig+0x1b4>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018f3e:	4a2f      	ldr	r2, [pc, #188]	@ (8018ffc <RadioSetRxConfig+0x264>)
 8018f40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018f42:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8018f44:	e002      	b.n	8018f4c <RadioSetRxConfig+0x1b4>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018f46:	4a2d      	ldr	r2, [pc, #180]	@ (8018ffc <RadioSetRxConfig+0x264>)
 8018f48:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018f4a:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8018f4c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8018f50:	4b2a      	ldr	r3, [pc, #168]	@ (8018ffc <RadioSetRxConfig+0x264>)
 8018f52:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8018f54:	4b2a      	ldr	r3, [pc, #168]	@ (8019000 <RadioSetRxConfig+0x268>)
 8018f56:	781a      	ldrb	r2, [r3, #0]
 8018f58:	4b28      	ldr	r3, [pc, #160]	@ (8018ffc <RadioSetRxConfig+0x264>)
 8018f5a:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8018f5c:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8018f60:	4b26      	ldr	r3, [pc, #152]	@ (8018ffc <RadioSetRxConfig+0x264>)
 8018f62:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8018f66:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8018f6a:	4b24      	ldr	r3, [pc, #144]	@ (8018ffc <RadioSetRxConfig+0x264>)
 8018f6c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8018f70:	f000 fb73 	bl	801965a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8018f74:	2001      	movs	r0, #1
 8018f76:	f7ff fe53 	bl	8018c20 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018f7a:	4822      	ldr	r0, [pc, #136]	@ (8019004 <RadioSetRxConfig+0x26c>)
 8018f7c:	f001 fd22 	bl	801a9c4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018f80:	4821      	ldr	r0, [pc, #132]	@ (8019008 <RadioSetRxConfig+0x270>)
 8018f82:	f001 fdf1 	bl	801ab68 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8018f86:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8018f88:	b2db      	uxtb	r3, r3
 8018f8a:	4618      	mov	r0, r3
 8018f8c:	f001 fa8b 	bl	801a4a6 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8018f90:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8018f94:	f001 ff44 	bl	801ae20 <SUBGRF_ReadRegister>
 8018f98:	4603      	mov	r3, r0
 8018f9a:	f003 0301 	and.w	r3, r3, #1
 8018f9e:	b2db      	uxtb	r3, r3
 8018fa0:	4619      	mov	r1, r3
 8018fa2:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8018fa6:	f001 ff27 	bl	801adf8 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8018faa:	4b14      	ldr	r3, [pc, #80]	@ (8018ffc <RadioSetRxConfig+0x264>)
 8018fac:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8018fb0:	2b01      	cmp	r3, #1
 8018fb2:	d10d      	bne.n	8018fd0 <RadioSetRxConfig+0x238>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8018fb4:	f240 7036 	movw	r0, #1846	@ 0x736
 8018fb8:	f001 ff32 	bl	801ae20 <SUBGRF_ReadRegister>
 8018fbc:	4603      	mov	r3, r0
 8018fbe:	f023 0304 	bic.w	r3, r3, #4
 8018fc2:	b2db      	uxtb	r3, r3
 8018fc4:	4619      	mov	r1, r3
 8018fc6:	f240 7036 	movw	r0, #1846	@ 0x736
 8018fca:	f001 ff15 	bl	801adf8 <SUBGRF_WriteRegister>
 8018fce:	e00c      	b.n	8018fea <RadioSetRxConfig+0x252>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8018fd0:	f240 7036 	movw	r0, #1846	@ 0x736
 8018fd4:	f001 ff24 	bl	801ae20 <SUBGRF_ReadRegister>
 8018fd8:	4603      	mov	r3, r0
 8018fda:	f043 0304 	orr.w	r3, r3, #4
 8018fde:	b2db      	uxtb	r3, r3
 8018fe0:	4619      	mov	r1, r3
 8018fe2:	f240 7036 	movw	r0, #1846	@ 0x736
 8018fe6:	f001 ff07 	bl	801adf8 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8018fea:	4b04      	ldr	r3, [pc, #16]	@ (8018ffc <RadioSetRxConfig+0x264>)
 8018fec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018ff0:	609a      	str	r2, [r3, #8]
            break;
 8018ff2:	bf00      	nop
    }
}
 8018ff4:	bf00      	nop
 8018ff6:	3718      	adds	r7, #24
 8018ff8:	46bd      	mov	sp, r7
 8018ffa:	bd80      	pop	{r7, pc}
 8018ffc:	20001da4 	.word	0x20001da4
 8019000:	20000148 	.word	0x20000148
 8019004:	20001ddc 	.word	0x20001ddc
 8019008:	20001db2 	.word	0x20001db2
 801900c:	0801d420 	.word	0x0801d420
 8019010:	0801db0c 	.word	0x0801db0c

08019014 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8019014:	b580      	push	{r7, lr}
 8019016:	b086      	sub	sp, #24
 8019018:	af00      	add	r7, sp, #0
 801901a:	60ba      	str	r2, [r7, #8]
 801901c:	607b      	str	r3, [r7, #4]
 801901e:	4603      	mov	r3, r0
 8019020:	73fb      	strb	r3, [r7, #15]
 8019022:	460b      	mov	r3, r1
 8019024:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 8019026:	f002 f9c1 	bl	801b3ac <RFW_DeInit>
    switch( modem )
 801902a:	7bfb      	ldrb	r3, [r7, #15]
 801902c:	2b00      	cmp	r3, #0
 801902e:	d002      	beq.n	8019036 <RadioSetTxConfig+0x22>
 8019030:	2b01      	cmp	r3, #1
 8019032:	d059      	beq.n	80190e8 <RadioSetTxConfig+0xd4>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8019034:	e0be      	b.n	80191b4 <RadioSetTxConfig+0x1a0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019036:	4b6d      	ldr	r3, [pc, #436]	@ (80191ec <RadioSetTxConfig+0x1d8>)
 8019038:	2200      	movs	r2, #0
 801903a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801903e:	4a6b      	ldr	r2, [pc, #428]	@ (80191ec <RadioSetTxConfig+0x1d8>)
 8019040:	6a3b      	ldr	r3, [r7, #32]
 8019042:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8019044:	4b69      	ldr	r3, [pc, #420]	@ (80191ec <RadioSetTxConfig+0x1d8>)
 8019046:	220b      	movs	r2, #11
 8019048:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801904c:	6878      	ldr	r0, [r7, #4]
 801904e:	f002 f8ed 	bl	801b22c <SUBGRF_GetFskBandwidthRegValue>
 8019052:	4603      	mov	r3, r0
 8019054:	461a      	mov	r2, r3
 8019056:	4b65      	ldr	r3, [pc, #404]	@ (80191ec <RadioSetTxConfig+0x1d8>)
 8019058:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 801905c:	4a63      	ldr	r2, [pc, #396]	@ (80191ec <RadioSetTxConfig+0x1d8>)
 801905e:	68bb      	ldr	r3, [r7, #8]
 8019060:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019062:	4b62      	ldr	r3, [pc, #392]	@ (80191ec <RadioSetTxConfig+0x1d8>)
 8019064:	2200      	movs	r2, #0
 8019066:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8019068:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801906a:	00db      	lsls	r3, r3, #3
 801906c:	b29a      	uxth	r2, r3
 801906e:	4b5f      	ldr	r3, [pc, #380]	@ (80191ec <RadioSetTxConfig+0x1d8>)
 8019070:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8019072:	4b5e      	ldr	r3, [pc, #376]	@ (80191ec <RadioSetTxConfig+0x1d8>)
 8019074:	2204      	movs	r2, #4
 8019076:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8019078:	4b5c      	ldr	r3, [pc, #368]	@ (80191ec <RadioSetTxConfig+0x1d8>)
 801907a:	2218      	movs	r2, #24
 801907c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801907e:	4b5b      	ldr	r3, [pc, #364]	@ (80191ec <RadioSetTxConfig+0x1d8>)
 8019080:	2200      	movs	r2, #0
 8019082:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8019084:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8019088:	f083 0301 	eor.w	r3, r3, #1
 801908c:	b2db      	uxtb	r3, r3
 801908e:	461a      	mov	r2, r3
 8019090:	4b56      	ldr	r3, [pc, #344]	@ (80191ec <RadioSetTxConfig+0x1d8>)
 8019092:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8019094:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8019098:	2b00      	cmp	r3, #0
 801909a:	d003      	beq.n	80190a4 <RadioSetTxConfig+0x90>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801909c:	4b53      	ldr	r3, [pc, #332]	@ (80191ec <RadioSetTxConfig+0x1d8>)
 801909e:	22f2      	movs	r2, #242	@ 0xf2
 80190a0:	75da      	strb	r2, [r3, #23]
 80190a2:	e002      	b.n	80190aa <RadioSetTxConfig+0x96>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80190a4:	4b51      	ldr	r3, [pc, #324]	@ (80191ec <RadioSetTxConfig+0x1d8>)
 80190a6:	2201      	movs	r2, #1
 80190a8:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80190aa:	4b50      	ldr	r3, [pc, #320]	@ (80191ec <RadioSetTxConfig+0x1d8>)
 80190ac:	2201      	movs	r2, #1
 80190ae:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80190b0:	f000 fad3 	bl	801965a <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 80190b4:	2000      	movs	r0, #0
 80190b6:	f7ff fdb3 	bl	8018c20 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80190ba:	484d      	ldr	r0, [pc, #308]	@ (80191f0 <RadioSetTxConfig+0x1dc>)
 80190bc:	f001 fc82 	bl	801a9c4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80190c0:	484c      	ldr	r0, [pc, #304]	@ (80191f4 <RadioSetTxConfig+0x1e0>)
 80190c2:	f001 fd51 	bl	801ab68 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80190c6:	4a4c      	ldr	r2, [pc, #304]	@ (80191f8 <RadioSetTxConfig+0x1e4>)
 80190c8:	f107 0310 	add.w	r3, r7, #16
 80190cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80190d0:	e883 0003 	stmia.w	r3, {r0, r1}
 80190d4:	f107 0310 	add.w	r3, r7, #16
 80190d8:	4618      	mov	r0, r3
 80190da:	f001 f80e 	bl	801a0fa <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80190de:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80190e2:	f001 f859 	bl	801a198 <SUBGRF_SetWhiteningSeed>
            break;
 80190e6:	e065      	b.n	80191b4 <RadioSetTxConfig+0x1a0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80190e8:	4b40      	ldr	r3, [pc, #256]	@ (80191ec <RadioSetTxConfig+0x1d8>)
 80190ea:	2201      	movs	r2, #1
 80190ec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80190f0:	6a3b      	ldr	r3, [r7, #32]
 80190f2:	b2da      	uxtb	r2, r3
 80190f4:	4b3d      	ldr	r3, [pc, #244]	@ (80191ec <RadioSetTxConfig+0x1d8>)
 80190f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80190fa:	4a40      	ldr	r2, [pc, #256]	@ (80191fc <RadioSetTxConfig+0x1e8>)
 80190fc:	687b      	ldr	r3, [r7, #4]
 80190fe:	4413      	add	r3, r2
 8019100:	781a      	ldrb	r2, [r3, #0]
 8019102:	4b3a      	ldr	r3, [pc, #232]	@ (80191ec <RadioSetTxConfig+0x1d8>)
 8019104:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8019108:	4a38      	ldr	r2, [pc, #224]	@ (80191ec <RadioSetTxConfig+0x1d8>)
 801910a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801910e:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019112:	687b      	ldr	r3, [r7, #4]
 8019114:	2b00      	cmp	r3, #0
 8019116:	d105      	bne.n	8019124 <RadioSetTxConfig+0x110>
 8019118:	6a3b      	ldr	r3, [r7, #32]
 801911a:	2b0b      	cmp	r3, #11
 801911c:	d008      	beq.n	8019130 <RadioSetTxConfig+0x11c>
 801911e:	6a3b      	ldr	r3, [r7, #32]
 8019120:	2b0c      	cmp	r3, #12
 8019122:	d005      	beq.n	8019130 <RadioSetTxConfig+0x11c>
 8019124:	687b      	ldr	r3, [r7, #4]
 8019126:	2b01      	cmp	r3, #1
 8019128:	d107      	bne.n	801913a <RadioSetTxConfig+0x126>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801912a:	6a3b      	ldr	r3, [r7, #32]
 801912c:	2b0c      	cmp	r3, #12
 801912e:	d104      	bne.n	801913a <RadioSetTxConfig+0x126>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8019130:	4b2e      	ldr	r3, [pc, #184]	@ (80191ec <RadioSetTxConfig+0x1d8>)
 8019132:	2201      	movs	r2, #1
 8019134:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8019138:	e003      	b.n	8019142 <RadioSetTxConfig+0x12e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801913a:	4b2c      	ldr	r3, [pc, #176]	@ (80191ec <RadioSetTxConfig+0x1d8>)
 801913c:	2200      	movs	r2, #0
 801913e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8019142:	4b2a      	ldr	r3, [pc, #168]	@ (80191ec <RadioSetTxConfig+0x1d8>)
 8019144:	2201      	movs	r2, #1
 8019146:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8019148:	4b28      	ldr	r3, [pc, #160]	@ (80191ec <RadioSetTxConfig+0x1d8>)
 801914a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801914e:	2b05      	cmp	r3, #5
 8019150:	d004      	beq.n	801915c <RadioSetTxConfig+0x148>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8019152:	4b26      	ldr	r3, [pc, #152]	@ (80191ec <RadioSetTxConfig+0x1d8>)
 8019154:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8019158:	2b06      	cmp	r3, #6
 801915a:	d10a      	bne.n	8019172 <RadioSetTxConfig+0x15e>
                if( preambleLen < 12 )
 801915c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801915e:	2b0b      	cmp	r3, #11
 8019160:	d803      	bhi.n	801916a <RadioSetTxConfig+0x156>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8019162:	4b22      	ldr	r3, [pc, #136]	@ (80191ec <RadioSetTxConfig+0x1d8>)
 8019164:	220c      	movs	r2, #12
 8019166:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8019168:	e006      	b.n	8019178 <RadioSetTxConfig+0x164>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801916a:	4a20      	ldr	r2, [pc, #128]	@ (80191ec <RadioSetTxConfig+0x1d8>)
 801916c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801916e:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8019170:	e002      	b.n	8019178 <RadioSetTxConfig+0x164>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8019172:	4a1e      	ldr	r2, [pc, #120]	@ (80191ec <RadioSetTxConfig+0x1d8>)
 8019174:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8019176:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8019178:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801917c:	4b1b      	ldr	r3, [pc, #108]	@ (80191ec <RadioSetTxConfig+0x1d8>)
 801917e:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8019180:	4b1f      	ldr	r3, [pc, #124]	@ (8019200 <RadioSetTxConfig+0x1ec>)
 8019182:	781a      	ldrb	r2, [r3, #0]
 8019184:	4b19      	ldr	r3, [pc, #100]	@ (80191ec <RadioSetTxConfig+0x1d8>)
 8019186:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8019188:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 801918c:	4b17      	ldr	r3, [pc, #92]	@ (80191ec <RadioSetTxConfig+0x1d8>)
 801918e:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8019192:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8019196:	4b15      	ldr	r3, [pc, #84]	@ (80191ec <RadioSetTxConfig+0x1d8>)
 8019198:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 801919c:	f000 fa5d 	bl	801965a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80191a0:	2001      	movs	r0, #1
 80191a2:	f7ff fd3d 	bl	8018c20 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80191a6:	4812      	ldr	r0, [pc, #72]	@ (80191f0 <RadioSetTxConfig+0x1dc>)
 80191a8:	f001 fc0c 	bl	801a9c4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80191ac:	4811      	ldr	r0, [pc, #68]	@ (80191f4 <RadioSetTxConfig+0x1e0>)
 80191ae:	f001 fcdb 	bl	801ab68 <SUBGRF_SetPacketParams>
            break;
 80191b2:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80191b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80191b8:	4618      	mov	r0, r3
 80191ba:	f001 ff39 	bl	801b030 <SUBGRF_SetRfTxPower>
 80191be:	4603      	mov	r3, r0
 80191c0:	461a      	mov	r2, r3
 80191c2:	4b0a      	ldr	r3, [pc, #40]	@ (80191ec <RadioSetTxConfig+0x1d8>)
 80191c4:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80191c8:	210e      	movs	r1, #14
 80191ca:	f640 101f 	movw	r0, #2335	@ 0x91f
 80191ce:	f001 fe13 	bl	801adf8 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80191d2:	4b06      	ldr	r3, [pc, #24]	@ (80191ec <RadioSetTxConfig+0x1d8>)
 80191d4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80191d8:	4618      	mov	r0, r3
 80191da:	f002 f8fb 	bl	801b3d4 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80191de:	4a03      	ldr	r2, [pc, #12]	@ (80191ec <RadioSetTxConfig+0x1d8>)
 80191e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80191e2:	6053      	str	r3, [r2, #4]
}
 80191e4:	bf00      	nop
 80191e6:	3718      	adds	r7, #24
 80191e8:	46bd      	mov	sp, r7
 80191ea:	bd80      	pop	{r7, pc}
 80191ec:	20001da4 	.word	0x20001da4
 80191f0:	20001ddc 	.word	0x20001ddc
 80191f4:	20001db2 	.word	0x20001db2
 80191f8:	0801d420 	.word	0x0801d420
 80191fc:	0801db0c 	.word	0x0801db0c
 8019200:	20000148 	.word	0x20000148

08019204 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8019204:	b480      	push	{r7}
 8019206:	b083      	sub	sp, #12
 8019208:	af00      	add	r7, sp, #0
 801920a:	6078      	str	r0, [r7, #4]
    return true;
 801920c:	2301      	movs	r3, #1
}
 801920e:	4618      	mov	r0, r3
 8019210:	370c      	adds	r7, #12
 8019212:	46bd      	mov	sp, r7
 8019214:	bc80      	pop	{r7}
 8019216:	4770      	bx	lr

08019218 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8019218:	b480      	push	{r7}
 801921a:	b085      	sub	sp, #20
 801921c:	af00      	add	r7, sp, #0
 801921e:	4603      	mov	r3, r0
 8019220:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8019222:	2300      	movs	r3, #0
 8019224:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8019226:	79fb      	ldrb	r3, [r7, #7]
 8019228:	2b0a      	cmp	r3, #10
 801922a:	d83e      	bhi.n	80192aa <RadioGetLoRaBandwidthInHz+0x92>
 801922c:	a201      	add	r2, pc, #4	@ (adr r2, 8019234 <RadioGetLoRaBandwidthInHz+0x1c>)
 801922e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019232:	bf00      	nop
 8019234:	08019261 	.word	0x08019261
 8019238:	08019271 	.word	0x08019271
 801923c:	08019281 	.word	0x08019281
 8019240:	08019291 	.word	0x08019291
 8019244:	08019299 	.word	0x08019299
 8019248:	0801929f 	.word	0x0801929f
 801924c:	080192a5 	.word	0x080192a5
 8019250:	080192ab 	.word	0x080192ab
 8019254:	08019269 	.word	0x08019269
 8019258:	08019279 	.word	0x08019279
 801925c:	08019289 	.word	0x08019289
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8019260:	f641 6384 	movw	r3, #7812	@ 0x1e84
 8019264:	60fb      	str	r3, [r7, #12]
        break;
 8019266:	e020      	b.n	80192aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8019268:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 801926c:	60fb      	str	r3, [r7, #12]
        break;
 801926e:	e01c      	b.n	80192aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8019270:	f643 5309 	movw	r3, #15625	@ 0x3d09
 8019274:	60fb      	str	r3, [r7, #12]
        break;
 8019276:	e018      	b.n	80192aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8019278:	f245 1361 	movw	r3, #20833	@ 0x5161
 801927c:	60fb      	str	r3, [r7, #12]
        break;
 801927e:	e014      	b.n	80192aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8019280:	f647 2312 	movw	r3, #31250	@ 0x7a12
 8019284:	60fb      	str	r3, [r7, #12]
        break;
 8019286:	e010      	b.n	80192aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8019288:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 801928c:	60fb      	str	r3, [r7, #12]
        break;
 801928e:	e00c      	b.n	80192aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8019290:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8019294:	60fb      	str	r3, [r7, #12]
        break;
 8019296:	e008      	b.n	80192aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8019298:	4b07      	ldr	r3, [pc, #28]	@ (80192b8 <RadioGetLoRaBandwidthInHz+0xa0>)
 801929a:	60fb      	str	r3, [r7, #12]
        break;
 801929c:	e005      	b.n	80192aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801929e:	4b07      	ldr	r3, [pc, #28]	@ (80192bc <RadioGetLoRaBandwidthInHz+0xa4>)
 80192a0:	60fb      	str	r3, [r7, #12]
        break;
 80192a2:	e002      	b.n	80192aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80192a4:	4b06      	ldr	r3, [pc, #24]	@ (80192c0 <RadioGetLoRaBandwidthInHz+0xa8>)
 80192a6:	60fb      	str	r3, [r7, #12]
        break;
 80192a8:	bf00      	nop
    }

    return bandwidthInHz;
 80192aa:	68fb      	ldr	r3, [r7, #12]
}
 80192ac:	4618      	mov	r0, r3
 80192ae:	3714      	adds	r7, #20
 80192b0:	46bd      	mov	sp, r7
 80192b2:	bc80      	pop	{r7}
 80192b4:	4770      	bx	lr
 80192b6:	bf00      	nop
 80192b8:	0001e848 	.word	0x0001e848
 80192bc:	0003d090 	.word	0x0003d090
 80192c0:	0007a120 	.word	0x0007a120

080192c4 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80192c4:	b480      	push	{r7}
 80192c6:	b083      	sub	sp, #12
 80192c8:	af00      	add	r7, sp, #0
 80192ca:	6078      	str	r0, [r7, #4]
 80192cc:	4608      	mov	r0, r1
 80192ce:	4611      	mov	r1, r2
 80192d0:	461a      	mov	r2, r3
 80192d2:	4603      	mov	r3, r0
 80192d4:	70fb      	strb	r3, [r7, #3]
 80192d6:	460b      	mov	r3, r1
 80192d8:	803b      	strh	r3, [r7, #0]
 80192da:	4613      	mov	r3, r2
 80192dc:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 80192de:	883b      	ldrh	r3, [r7, #0]
 80192e0:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80192e2:	78ba      	ldrb	r2, [r7, #2]
 80192e4:	f082 0201 	eor.w	r2, r2, #1
 80192e8:	b2d2      	uxtb	r2, r2
 80192ea:	2a00      	cmp	r2, #0
 80192ec:	d001      	beq.n	80192f2 <RadioGetGfskTimeOnAirNumerator+0x2e>
 80192ee:	2208      	movs	r2, #8
 80192f0:	e000      	b.n	80192f4 <RadioGetGfskTimeOnAirNumerator+0x30>
 80192f2:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 80192f4:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80192f6:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80192fa:	7c3b      	ldrb	r3, [r7, #16]
 80192fc:	7d39      	ldrb	r1, [r7, #20]
 80192fe:	2900      	cmp	r1, #0
 8019300:	d001      	beq.n	8019306 <RadioGetGfskTimeOnAirNumerator+0x42>
 8019302:	2102      	movs	r1, #2
 8019304:	e000      	b.n	8019308 <RadioGetGfskTimeOnAirNumerator+0x44>
 8019306:	2100      	movs	r1, #0
 8019308:	440b      	add	r3, r1
 801930a:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801930c:	4413      	add	r3, r2
}
 801930e:	4618      	mov	r0, r3
 8019310:	370c      	adds	r7, #12
 8019312:	46bd      	mov	sp, r7
 8019314:	bc80      	pop	{r7}
 8019316:	4770      	bx	lr

08019318 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8019318:	b480      	push	{r7}
 801931a:	b08b      	sub	sp, #44	@ 0x2c
 801931c:	af00      	add	r7, sp, #0
 801931e:	60f8      	str	r0, [r7, #12]
 8019320:	60b9      	str	r1, [r7, #8]
 8019322:	4611      	mov	r1, r2
 8019324:	461a      	mov	r2, r3
 8019326:	460b      	mov	r3, r1
 8019328:	71fb      	strb	r3, [r7, #7]
 801932a:	4613      	mov	r3, r2
 801932c:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 801932e:	79fb      	ldrb	r3, [r7, #7]
 8019330:	3304      	adds	r3, #4
 8019332:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8019334:	2300      	movs	r3, #0
 8019336:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801933a:	68bb      	ldr	r3, [r7, #8]
 801933c:	2b05      	cmp	r3, #5
 801933e:	d002      	beq.n	8019346 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8019340:	68bb      	ldr	r3, [r7, #8]
 8019342:	2b06      	cmp	r3, #6
 8019344:	d104      	bne.n	8019350 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8019346:	88bb      	ldrh	r3, [r7, #4]
 8019348:	2b0b      	cmp	r3, #11
 801934a:	d801      	bhi.n	8019350 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 801934c:	230c      	movs	r3, #12
 801934e:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019350:	68fb      	ldr	r3, [r7, #12]
 8019352:	2b00      	cmp	r3, #0
 8019354:	d105      	bne.n	8019362 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8019356:	68bb      	ldr	r3, [r7, #8]
 8019358:	2b0b      	cmp	r3, #11
 801935a:	d008      	beq.n	801936e <RadioGetLoRaTimeOnAirNumerator+0x56>
 801935c:	68bb      	ldr	r3, [r7, #8]
 801935e:	2b0c      	cmp	r3, #12
 8019360:	d005      	beq.n	801936e <RadioGetLoRaTimeOnAirNumerator+0x56>
 8019362:	68fb      	ldr	r3, [r7, #12]
 8019364:	2b01      	cmp	r3, #1
 8019366:	d105      	bne.n	8019374 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8019368:	68bb      	ldr	r3, [r7, #8]
 801936a:	2b0c      	cmp	r3, #12
 801936c:	d102      	bne.n	8019374 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 801936e:	2301      	movs	r3, #1
 8019370:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8019374:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8019378:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801937a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 801937e:	2a00      	cmp	r2, #0
 8019380:	d001      	beq.n	8019386 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8019382:	2210      	movs	r2, #16
 8019384:	e000      	b.n	8019388 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8019386:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8019388:	4413      	add	r3, r2
 801938a:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 801938c:	68bb      	ldr	r3, [r7, #8]
 801938e:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8019390:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8019392:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8019396:	2a00      	cmp	r2, #0
 8019398:	d001      	beq.n	801939e <RadioGetLoRaTimeOnAirNumerator+0x86>
 801939a:	2200      	movs	r2, #0
 801939c:	e000      	b.n	80193a0 <RadioGetLoRaTimeOnAirNumerator+0x88>
 801939e:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 80193a0:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80193a2:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 80193a4:	68bb      	ldr	r3, [r7, #8]
 80193a6:	2b06      	cmp	r3, #6
 80193a8:	d803      	bhi.n	80193b2 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 80193aa:	68bb      	ldr	r3, [r7, #8]
 80193ac:	009b      	lsls	r3, r3, #2
 80193ae:	623b      	str	r3, [r7, #32]
 80193b0:	e00e      	b.n	80193d0 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 80193b2:	69fb      	ldr	r3, [r7, #28]
 80193b4:	3308      	adds	r3, #8
 80193b6:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 80193b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80193bc:	2b00      	cmp	r3, #0
 80193be:	d004      	beq.n	80193ca <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80193c0:	68bb      	ldr	r3, [r7, #8]
 80193c2:	3b02      	subs	r3, #2
 80193c4:	009b      	lsls	r3, r3, #2
 80193c6:	623b      	str	r3, [r7, #32]
 80193c8:	e002      	b.n	80193d0 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 80193ca:	68bb      	ldr	r3, [r7, #8]
 80193cc:	009b      	lsls	r3, r3, #2
 80193ce:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 80193d0:	69fb      	ldr	r3, [r7, #28]
 80193d2:	2b00      	cmp	r3, #0
 80193d4:	da01      	bge.n	80193da <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 80193d6:	2300      	movs	r3, #0
 80193d8:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80193da:	69fa      	ldr	r2, [r7, #28]
 80193dc:	6a3b      	ldr	r3, [r7, #32]
 80193de:	4413      	add	r3, r2
 80193e0:	1e5a      	subs	r2, r3, #1
 80193e2:	6a3b      	ldr	r3, [r7, #32]
 80193e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80193e8:	697a      	ldr	r2, [r7, #20]
 80193ea:	fb03 f202 	mul.w	r2, r3, r2
 80193ee:	88bb      	ldrh	r3, [r7, #4]
 80193f0:	4413      	add	r3, r2
    int32_t intermediate =
 80193f2:	330c      	adds	r3, #12
 80193f4:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 80193f6:	68bb      	ldr	r3, [r7, #8]
 80193f8:	2b06      	cmp	r3, #6
 80193fa:	d802      	bhi.n	8019402 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 80193fc:	69bb      	ldr	r3, [r7, #24]
 80193fe:	3302      	adds	r3, #2
 8019400:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8019402:	69bb      	ldr	r3, [r7, #24]
 8019404:	009b      	lsls	r3, r3, #2
 8019406:	1c5a      	adds	r2, r3, #1
 8019408:	68bb      	ldr	r3, [r7, #8]
 801940a:	3b02      	subs	r3, #2
 801940c:	fa02 f303 	lsl.w	r3, r2, r3
}
 8019410:	4618      	mov	r0, r3
 8019412:	372c      	adds	r7, #44	@ 0x2c
 8019414:	46bd      	mov	sp, r7
 8019416:	bc80      	pop	{r7}
 8019418:	4770      	bx	lr
	...

0801941c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 801941c:	b580      	push	{r7, lr}
 801941e:	b08a      	sub	sp, #40	@ 0x28
 8019420:	af04      	add	r7, sp, #16
 8019422:	60b9      	str	r1, [r7, #8]
 8019424:	607a      	str	r2, [r7, #4]
 8019426:	461a      	mov	r2, r3
 8019428:	4603      	mov	r3, r0
 801942a:	73fb      	strb	r3, [r7, #15]
 801942c:	4613      	mov	r3, r2
 801942e:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8019430:	2300      	movs	r3, #0
 8019432:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8019434:	2301      	movs	r3, #1
 8019436:	613b      	str	r3, [r7, #16]

    switch( modem )
 8019438:	7bfb      	ldrb	r3, [r7, #15]
 801943a:	2b00      	cmp	r3, #0
 801943c:	d002      	beq.n	8019444 <RadioTimeOnAir+0x28>
 801943e:	2b01      	cmp	r3, #1
 8019440:	d017      	beq.n	8019472 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8019442:	e035      	b.n	80194b0 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8019444:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 8019448:	8c3a      	ldrh	r2, [r7, #32]
 801944a:	7bb9      	ldrb	r1, [r7, #14]
 801944c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8019450:	9301      	str	r3, [sp, #4]
 8019452:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8019456:	9300      	str	r3, [sp, #0]
 8019458:	4603      	mov	r3, r0
 801945a:	6878      	ldr	r0, [r7, #4]
 801945c:	f7ff ff32 	bl	80192c4 <RadioGetGfskTimeOnAirNumerator>
 8019460:	4603      	mov	r3, r0
 8019462:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8019466:	fb02 f303 	mul.w	r3, r2, r3
 801946a:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	613b      	str	r3, [r7, #16]
        break;
 8019470:	e01e      	b.n	80194b0 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8019472:	8c39      	ldrh	r1, [r7, #32]
 8019474:	7bba      	ldrb	r2, [r7, #14]
 8019476:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801947a:	9302      	str	r3, [sp, #8]
 801947c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8019480:	9301      	str	r3, [sp, #4]
 8019482:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8019486:	9300      	str	r3, [sp, #0]
 8019488:	460b      	mov	r3, r1
 801948a:	6879      	ldr	r1, [r7, #4]
 801948c:	68b8      	ldr	r0, [r7, #8]
 801948e:	f7ff ff43 	bl	8019318 <RadioGetLoRaTimeOnAirNumerator>
 8019492:	4603      	mov	r3, r0
 8019494:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8019498:	fb02 f303 	mul.w	r3, r2, r3
 801949c:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801949e:	4a0a      	ldr	r2, [pc, #40]	@ (80194c8 <RadioTimeOnAir+0xac>)
 80194a0:	68bb      	ldr	r3, [r7, #8]
 80194a2:	4413      	add	r3, r2
 80194a4:	781b      	ldrb	r3, [r3, #0]
 80194a6:	4618      	mov	r0, r3
 80194a8:	f7ff feb6 	bl	8019218 <RadioGetLoRaBandwidthInHz>
 80194ac:	6138      	str	r0, [r7, #16]
        break;
 80194ae:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 80194b0:	697a      	ldr	r2, [r7, #20]
 80194b2:	693b      	ldr	r3, [r7, #16]
 80194b4:	4413      	add	r3, r2
 80194b6:	1e5a      	subs	r2, r3, #1
 80194b8:	693b      	ldr	r3, [r7, #16]
 80194ba:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80194be:	4618      	mov	r0, r3
 80194c0:	3718      	adds	r7, #24
 80194c2:	46bd      	mov	sp, r7
 80194c4:	bd80      	pop	{r7, pc}
 80194c6:	bf00      	nop
 80194c8:	0801db0c 	.word	0x0801db0c

080194cc <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 80194cc:	b580      	push	{r7, lr}
 80194ce:	b084      	sub	sp, #16
 80194d0:	af00      	add	r7, sp, #0
 80194d2:	6078      	str	r0, [r7, #4]
 80194d4:	460b      	mov	r3, r1
 80194d6:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80194d8:	2300      	movs	r3, #0
 80194da:	2200      	movs	r2, #0
 80194dc:	f240 2101 	movw	r1, #513	@ 0x201
 80194e0:	f240 2001 	movw	r0, #513	@ 0x201
 80194e4:	f001 f8d8 	bl	801a698 <SUBGRF_SetDioIrqParams>
                            IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );
 80194e8:	2180      	movs	r1, #128	@ 0x80
 80194ea:	484d      	ldr	r0, [pc, #308]	@ (8019620 <RadioSend+0x154>)
 80194ec:	f7ff fb0a 	bl	8018b04 <LL_GPIO_SetOutputPin>

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80194f0:	4b4c      	ldr	r3, [pc, #304]	@ (8019624 <RadioSend+0x158>)
 80194f2:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80194f6:	2101      	movs	r1, #1
 80194f8:	4618      	mov	r0, r3
 80194fa:	f001 fd71 	bl	801afe0 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 80194fe:	4b49      	ldr	r3, [pc, #292]	@ (8019624 <RadioSend+0x158>)
 8019500:	781b      	ldrb	r3, [r3, #0]
 8019502:	2b01      	cmp	r3, #1
 8019504:	d112      	bne.n	801952c <RadioSend+0x60>
 8019506:	4b47      	ldr	r3, [pc, #284]	@ (8019624 <RadioSend+0x158>)
 8019508:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801950c:	2b06      	cmp	r3, #6
 801950e:	d10d      	bne.n	801952c <RadioSend+0x60>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8019510:	f640 0089 	movw	r0, #2185	@ 0x889
 8019514:	f001 fc84 	bl	801ae20 <SUBGRF_ReadRegister>
 8019518:	4603      	mov	r3, r0
 801951a:	f023 0304 	bic.w	r3, r3, #4
 801951e:	b2db      	uxtb	r3, r3
 8019520:	4619      	mov	r1, r3
 8019522:	f640 0089 	movw	r0, #2185	@ 0x889
 8019526:	f001 fc67 	bl	801adf8 <SUBGRF_WriteRegister>
 801952a:	e00c      	b.n	8019546 <RadioSend+0x7a>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801952c:	f640 0089 	movw	r0, #2185	@ 0x889
 8019530:	f001 fc76 	bl	801ae20 <SUBGRF_ReadRegister>
 8019534:	4603      	mov	r3, r0
 8019536:	f043 0304 	orr.w	r3, r3, #4
 801953a:	b2db      	uxtb	r3, r3
 801953c:	4619      	mov	r1, r3
 801953e:	f640 0089 	movw	r0, #2185	@ 0x889
 8019542:	f001 fc59 	bl	801adf8 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8019546:	4b37      	ldr	r3, [pc, #220]	@ (8019624 <RadioSend+0x158>)
 8019548:	781b      	ldrb	r3, [r3, #0]
 801954a:	2b03      	cmp	r3, #3
 801954c:	d858      	bhi.n	8019600 <RadioSend+0x134>
 801954e:	a201      	add	r2, pc, #4	@ (adr r2, 8019554 <RadioSend+0x88>)
 8019550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019554:	0801957f 	.word	0x0801957f
 8019558:	08019565 	.word	0x08019565
 801955c:	0801957f 	.word	0x0801957f
 8019560:	080195e1 	.word	0x080195e1
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8019564:	4a2f      	ldr	r2, [pc, #188]	@ (8019624 <RadioSend+0x158>)
 8019566:	78fb      	ldrb	r3, [r7, #3]
 8019568:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801956a:	482f      	ldr	r0, [pc, #188]	@ (8019628 <RadioSend+0x15c>)
 801956c:	f001 fafc 	bl	801ab68 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8019570:	78fb      	ldrb	r3, [r7, #3]
 8019572:	2200      	movs	r2, #0
 8019574:	4619      	mov	r1, r3
 8019576:	6878      	ldr	r0, [r7, #4]
 8019578:	f000 fdac 	bl	801a0d4 <SUBGRF_SendPayload>
            break;
 801957c:	e041      	b.n	8019602 <RadioSend+0x136>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 801957e:	f001 ff1b 	bl	801b3b8 <RFW_Is_Init>
 8019582:	4603      	mov	r3, r0
 8019584:	2b01      	cmp	r3, #1
 8019586:	d11e      	bne.n	80195c6 <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8019588:	f107 020f 	add.w	r2, r7, #15
 801958c:	78fb      	ldrb	r3, [r7, #3]
 801958e:	4619      	mov	r1, r3
 8019590:	6878      	ldr	r0, [r7, #4]
 8019592:	f001 ff29 	bl	801b3e8 <RFW_TransmitInit>
 8019596:	4603      	mov	r3, r0
 8019598:	2b00      	cmp	r3, #0
 801959a:	d10c      	bne.n	80195b6 <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 801959c:	7bfa      	ldrb	r2, [r7, #15]
 801959e:	4b21      	ldr	r3, [pc, #132]	@ (8019624 <RadioSend+0x158>)
 80195a0:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80195a2:	4821      	ldr	r0, [pc, #132]	@ (8019628 <RadioSend+0x15c>)
 80195a4:	f001 fae0 	bl	801ab68 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 80195a8:	7bfb      	ldrb	r3, [r7, #15]
 80195aa:	2200      	movs	r2, #0
 80195ac:	4619      	mov	r1, r3
 80195ae:	6878      	ldr	r0, [r7, #4]
 80195b0:	f000 fd90 	bl	801a0d4 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 80195b4:	e025      	b.n	8019602 <RadioSend+0x136>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 80195b6:	4b1d      	ldr	r3, [pc, #116]	@ (801962c <RadioSend+0x160>)
 80195b8:	2201      	movs	r2, #1
 80195ba:	2100      	movs	r1, #0
 80195bc:	2002      	movs	r0, #2
 80195be:	f003 f831 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 80195c2:	2303      	movs	r3, #3
 80195c4:	e027      	b.n	8019616 <RadioSend+0x14a>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80195c6:	4a17      	ldr	r2, [pc, #92]	@ (8019624 <RadioSend+0x158>)
 80195c8:	78fb      	ldrb	r3, [r7, #3]
 80195ca:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80195cc:	4816      	ldr	r0, [pc, #88]	@ (8019628 <RadioSend+0x15c>)
 80195ce:	f001 facb 	bl	801ab68 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 80195d2:	78fb      	ldrb	r3, [r7, #3]
 80195d4:	2200      	movs	r2, #0
 80195d6:	4619      	mov	r1, r3
 80195d8:	6878      	ldr	r0, [r7, #4]
 80195da:	f000 fd7b 	bl	801a0d4 <SUBGRF_SendPayload>
            break;
 80195de:	e010      	b.n	8019602 <RadioSend+0x136>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80195e0:	4b10      	ldr	r3, [pc, #64]	@ (8019624 <RadioSend+0x158>)
 80195e2:	2202      	movs	r2, #2
 80195e4:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80195e6:	4a0f      	ldr	r2, [pc, #60]	@ (8019624 <RadioSend+0x158>)
 80195e8:	78fb      	ldrb	r3, [r7, #3]
 80195ea:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80195ec:	480e      	ldr	r0, [pc, #56]	@ (8019628 <RadioSend+0x15c>)
 80195ee:	f001 fabb 	bl	801ab68 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80195f2:	78fb      	ldrb	r3, [r7, #3]
 80195f4:	2200      	movs	r2, #0
 80195f6:	4619      	mov	r1, r3
 80195f8:	6878      	ldr	r0, [r7, #4]
 80195fa:	f000 fd6b 	bl	801a0d4 <SUBGRF_SendPayload>
            break;
 80195fe:	e000      	b.n	8019602 <RadioSend+0x136>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
            break;
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8019600:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8019602:	4b08      	ldr	r3, [pc, #32]	@ (8019624 <RadioSend+0x158>)
 8019604:	685b      	ldr	r3, [r3, #4]
 8019606:	4619      	mov	r1, r3
 8019608:	4809      	ldr	r0, [pc, #36]	@ (8019630 <RadioSend+0x164>)
 801960a:	f002 fe71 	bl	801c2f0 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 801960e:	4808      	ldr	r0, [pc, #32]	@ (8019630 <RadioSend+0x164>)
 8019610:	f002 fd90 	bl	801c134 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8019614:	2300      	movs	r3, #0
}
 8019616:	4618      	mov	r0, r3
 8019618:	3710      	adds	r7, #16
 801961a:	46bd      	mov	sp, r7
 801961c:	bd80      	pop	{r7, pc}
 801961e:	bf00      	nop
 8019620:	48000400 	.word	0x48000400
 8019624:	20001da4 	.word	0x20001da4
 8019628:	20001db2 	.word	0x20001db2
 801962c:	0801d428 	.word	0x0801d428
 8019630:	20001e00 	.word	0x20001e00

08019634 <RadioSleep>:

static void RadioSleep( void )
{
 8019634:	b580      	push	{r7, lr}
 8019636:	b082      	sub	sp, #8
 8019638:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801963a:	2300      	movs	r3, #0
 801963c:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 801963e:	793b      	ldrb	r3, [r7, #4]
 8019640:	f043 0304 	orr.w	r3, r3, #4
 8019644:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8019646:	7938      	ldrb	r0, [r7, #4]
 8019648:	f000 fe20 	bl	801a28c <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 801964c:	2002      	movs	r0, #2
 801964e:	f7e8 fcbd 	bl	8001fcc <HAL_Delay>
}
 8019652:	bf00      	nop
 8019654:	3708      	adds	r7, #8
 8019656:	46bd      	mov	sp, r7
 8019658:	bd80      	pop	{r7, pc}

0801965a <RadioStandby>:

static void RadioStandby( void )
{
 801965a:	b580      	push	{r7, lr}
 801965c:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801965e:	2000      	movs	r0, #0
 8019660:	f000 fe46 	bl	801a2f0 <SUBGRF_SetStandby>
}
 8019664:	bf00      	nop
 8019666:	bd80      	pop	{r7, pc}

08019668 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8019668:	b580      	push	{r7, lr}
 801966a:	b082      	sub	sp, #8
 801966c:	af00      	add	r7, sp, #0
 801966e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8019670:	f001 fea2 	bl	801b3b8 <RFW_Is_Init>
 8019674:	4603      	mov	r3, r0
 8019676:	2b01      	cmp	r3, #1
 8019678:	d102      	bne.n	8019680 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801967a:	f001 fec5 	bl	801b408 <RFW_ReceiveInit>
 801967e:	e007      	b.n	8019690 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8019680:	2300      	movs	r3, #0
 8019682:	2200      	movs	r2, #0
 8019684:	f240 2162 	movw	r1, #610	@ 0x262
 8019688:	f240 2062 	movw	r0, #610	@ 0x262
 801968c:	f001 f804 	bl	801a698 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8019690:	687b      	ldr	r3, [r7, #4]
 8019692:	2b00      	cmp	r3, #0
 8019694:	d006      	beq.n	80196a4 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8019696:	6879      	ldr	r1, [r7, #4]
 8019698:	4813      	ldr	r0, [pc, #76]	@ (80196e8 <RadioRx+0x80>)
 801969a:	f002 fe29 	bl	801c2f0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801969e:	4812      	ldr	r0, [pc, #72]	@ (80196e8 <RadioRx+0x80>)
 80196a0:	f002 fd48 	bl	801c134 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80196a4:	4b11      	ldr	r3, [pc, #68]	@ (80196ec <RadioRx+0x84>)
 80196a6:	2200      	movs	r2, #0
 80196a8:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
 80196aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80196ae:	4810      	ldr	r0, [pc, #64]	@ (80196f0 <RadioRx+0x88>)
 80196b0:	f7ff fa28 	bl	8018b04 <LL_GPIO_SetOutputPin>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80196b4:	4b0d      	ldr	r3, [pc, #52]	@ (80196ec <RadioRx+0x84>)
 80196b6:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80196ba:	2100      	movs	r1, #0
 80196bc:	4618      	mov	r0, r3
 80196be:	f001 fc8f 	bl	801afe0 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 80196c2:	4b0a      	ldr	r3, [pc, #40]	@ (80196ec <RadioRx+0x84>)
 80196c4:	785b      	ldrb	r3, [r3, #1]
 80196c6:	2b00      	cmp	r3, #0
 80196c8:	d004      	beq.n	80196d4 <RadioRx+0x6c>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80196ca:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80196ce:	f000 fe4b 	bl	801a368 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 80196d2:	e005      	b.n	80196e0 <RadioRx+0x78>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 80196d4:	4b05      	ldr	r3, [pc, #20]	@ (80196ec <RadioRx+0x84>)
 80196d6:	689b      	ldr	r3, [r3, #8]
 80196d8:	019b      	lsls	r3, r3, #6
 80196da:	4618      	mov	r0, r3
 80196dc:	f000 fe44 	bl	801a368 <SUBGRF_SetRx>
}
 80196e0:	bf00      	nop
 80196e2:	3708      	adds	r7, #8
 80196e4:	46bd      	mov	sp, r7
 80196e6:	bd80      	pop	{r7, pc}
 80196e8:	20001e18 	.word	0x20001e18
 80196ec:	20001da4 	.word	0x20001da4
 80196f0:	48000400 	.word	0x48000400

080196f4 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 80196f4:	b580      	push	{r7, lr}
 80196f6:	b082      	sub	sp, #8
 80196f8:	af00      	add	r7, sp, #0
 80196fa:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 80196fc:	f001 fe5c 	bl	801b3b8 <RFW_Is_Init>
 8019700:	4603      	mov	r3, r0
 8019702:	2b01      	cmp	r3, #1
 8019704:	d102      	bne.n	801970c <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8019706:	f001 fe7f 	bl	801b408 <RFW_ReceiveInit>
 801970a:	e007      	b.n	801971c <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801970c:	2300      	movs	r3, #0
 801970e:	2200      	movs	r2, #0
 8019710:	f240 2162 	movw	r1, #610	@ 0x262
 8019714:	f240 2062 	movw	r0, #610	@ 0x262
 8019718:	f000 ffbe 	bl	801a698 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 801971c:	687b      	ldr	r3, [r7, #4]
 801971e:	2b00      	cmp	r3, #0
 8019720:	d006      	beq.n	8019730 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8019722:	6879      	ldr	r1, [r7, #4]
 8019724:	4813      	ldr	r0, [pc, #76]	@ (8019774 <RadioRxBoosted+0x80>)
 8019726:	f002 fde3 	bl	801c2f0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801972a:	4812      	ldr	r0, [pc, #72]	@ (8019774 <RadioRxBoosted+0x80>)
 801972c:	f002 fd02 	bl	801c134 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019730:	4b11      	ldr	r3, [pc, #68]	@ (8019778 <RadioRxBoosted+0x84>)
 8019732:	2200      	movs	r2, #0
 8019734:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
 8019736:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801973a:	4810      	ldr	r0, [pc, #64]	@ (801977c <RadioRxBoosted+0x88>)
 801973c:	f7ff f9e2 	bl	8018b04 <LL_GPIO_SetOutputPin>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019740:	4b0d      	ldr	r3, [pc, #52]	@ (8019778 <RadioRxBoosted+0x84>)
 8019742:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019746:	2100      	movs	r1, #0
 8019748:	4618      	mov	r0, r3
 801974a:	f001 fc49 	bl	801afe0 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801974e:	4b0a      	ldr	r3, [pc, #40]	@ (8019778 <RadioRxBoosted+0x84>)
 8019750:	785b      	ldrb	r3, [r3, #1]
 8019752:	2b00      	cmp	r3, #0
 8019754:	d004      	beq.n	8019760 <RadioRxBoosted+0x6c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8019756:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 801975a:	f000 fe25 	bl	801a3a8 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 801975e:	e005      	b.n	801976c <RadioRxBoosted+0x78>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8019760:	4b05      	ldr	r3, [pc, #20]	@ (8019778 <RadioRxBoosted+0x84>)
 8019762:	689b      	ldr	r3, [r3, #8]
 8019764:	019b      	lsls	r3, r3, #6
 8019766:	4618      	mov	r0, r3
 8019768:	f000 fe1e 	bl	801a3a8 <SUBGRF_SetRxBoosted>
}
 801976c:	bf00      	nop
 801976e:	3708      	adds	r7, #8
 8019770:	46bd      	mov	sp, r7
 8019772:	bd80      	pop	{r7, pc}
 8019774:	20001e18 	.word	0x20001e18
 8019778:	20001da4 	.word	0x20001da4
 801977c:	48000400 	.word	0x48000400

08019780 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8019780:	b580      	push	{r7, lr}
 8019782:	b082      	sub	sp, #8
 8019784:	af00      	add	r7, sp, #0
 8019786:	6078      	str	r0, [r7, #4]
 8019788:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 801978a:	687b      	ldr	r3, [r7, #4]
 801978c:	005a      	lsls	r2, r3, #1
 801978e:	683b      	ldr	r3, [r7, #0]
 8019790:	4413      	add	r3, r2
 8019792:	4a0c      	ldr	r2, [pc, #48]	@ (80197c4 <RadioSetRxDutyCycle+0x44>)
 8019794:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8019796:	2300      	movs	r3, #0
 8019798:	2200      	movs	r2, #0
 801979a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801979e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80197a2:	f000 ff79 	bl	801a698 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80197a6:	4b07      	ldr	r3, [pc, #28]	@ (80197c4 <RadioSetRxDutyCycle+0x44>)
 80197a8:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80197ac:	2100      	movs	r1, #0
 80197ae:	4618      	mov	r0, r3
 80197b0:	f001 fc16 	bl	801afe0 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 80197b4:	6839      	ldr	r1, [r7, #0]
 80197b6:	6878      	ldr	r0, [r7, #4]
 80197b8:	f000 fe1a 	bl	801a3f0 <SUBGRF_SetRxDutyCycle>
}
 80197bc:	bf00      	nop
 80197be:	3708      	adds	r7, #8
 80197c0:	46bd      	mov	sp, r7
 80197c2:	bd80      	pop	{r7, pc}
 80197c4:	20001da4 	.word	0x20001da4

080197c8 <RadioStartCad>:

static void RadioStartCad( void )
{
 80197c8:	b580      	push	{r7, lr}
 80197ca:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80197cc:	4b09      	ldr	r3, [pc, #36]	@ (80197f4 <RadioStartCad+0x2c>)
 80197ce:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80197d2:	2100      	movs	r1, #0
 80197d4:	4618      	mov	r0, r3
 80197d6:	f001 fc03 	bl	801afe0 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 80197da:	2300      	movs	r3, #0
 80197dc:	2200      	movs	r2, #0
 80197de:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80197e2:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 80197e6:	f000 ff57 	bl	801a698 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 80197ea:	f000 fe2d 	bl	801a448 <SUBGRF_SetCad>
}
 80197ee:	bf00      	nop
 80197f0:	bd80      	pop	{r7, pc}
 80197f2:	bf00      	nop
 80197f4:	20001da4 	.word	0x20001da4

080197f8 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 80197f8:	b580      	push	{r7, lr}
 80197fa:	b084      	sub	sp, #16
 80197fc:	af00      	add	r7, sp, #0
 80197fe:	6078      	str	r0, [r7, #4]
 8019800:	460b      	mov	r3, r1
 8019802:	70fb      	strb	r3, [r7, #3]
 8019804:	4613      	mov	r3, r2
 8019806:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8019808:	883b      	ldrh	r3, [r7, #0]
 801980a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801980e:	fb02 f303 	mul.w	r3, r2, r3
 8019812:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8019814:	6878      	ldr	r0, [r7, #4]
 8019816:	f000 ff9b 	bl	801a750 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801981a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801981e:	4618      	mov	r0, r3
 8019820:	f001 fc06 	bl	801b030 <SUBGRF_SetRfTxPower>
 8019824:	4603      	mov	r3, r0
 8019826:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8019828:	210e      	movs	r1, #14
 801982a:	f640 101f 	movw	r0, #2335	@ 0x91f
 801982e:	f001 fae3 	bl	801adf8 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8019832:	7afb      	ldrb	r3, [r7, #11]
 8019834:	2101      	movs	r1, #1
 8019836:	4618      	mov	r0, r3
 8019838:	f001 fbd2 	bl	801afe0 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 801983c:	f000 fe12 	bl	801a464 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8019840:	68f9      	ldr	r1, [r7, #12]
 8019842:	4805      	ldr	r0, [pc, #20]	@ (8019858 <RadioSetTxContinuousWave+0x60>)
 8019844:	f002 fd54 	bl	801c2f0 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8019848:	4803      	ldr	r0, [pc, #12]	@ (8019858 <RadioSetTxContinuousWave+0x60>)
 801984a:	f002 fc73 	bl	801c134 <UTIL_TIMER_Start>
}
 801984e:	bf00      	nop
 8019850:	3710      	adds	r7, #16
 8019852:	46bd      	mov	sp, r7
 8019854:	bd80      	pop	{r7, pc}
 8019856:	bf00      	nop
 8019858:	20001e00 	.word	0x20001e00

0801985c <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 801985c:	b580      	push	{r7, lr}
 801985e:	b082      	sub	sp, #8
 8019860:	af00      	add	r7, sp, #0
 8019862:	4603      	mov	r3, r0
 8019864:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8019866:	f001 fa34 	bl	801acd2 <SUBGRF_GetRssiInst>
 801986a:	4603      	mov	r3, r0
}
 801986c:	4618      	mov	r0, r3
 801986e:	3708      	adds	r7, #8
 8019870:	46bd      	mov	sp, r7
 8019872:	bd80      	pop	{r7, pc}

08019874 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8019874:	b580      	push	{r7, lr}
 8019876:	b082      	sub	sp, #8
 8019878:	af00      	add	r7, sp, #0
 801987a:	4603      	mov	r3, r0
 801987c:	460a      	mov	r2, r1
 801987e:	80fb      	strh	r3, [r7, #6]
 8019880:	4613      	mov	r3, r2
 8019882:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8019884:	797a      	ldrb	r2, [r7, #5]
 8019886:	88fb      	ldrh	r3, [r7, #6]
 8019888:	4611      	mov	r1, r2
 801988a:	4618      	mov	r0, r3
 801988c:	f001 fab4 	bl	801adf8 <SUBGRF_WriteRegister>
}
 8019890:	bf00      	nop
 8019892:	3708      	adds	r7, #8
 8019894:	46bd      	mov	sp, r7
 8019896:	bd80      	pop	{r7, pc}

08019898 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8019898:	b580      	push	{r7, lr}
 801989a:	b082      	sub	sp, #8
 801989c:	af00      	add	r7, sp, #0
 801989e:	4603      	mov	r3, r0
 80198a0:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 80198a2:	88fb      	ldrh	r3, [r7, #6]
 80198a4:	4618      	mov	r0, r3
 80198a6:	f001 fabb 	bl	801ae20 <SUBGRF_ReadRegister>
 80198aa:	4603      	mov	r3, r0
}
 80198ac:	4618      	mov	r0, r3
 80198ae:	3708      	adds	r7, #8
 80198b0:	46bd      	mov	sp, r7
 80198b2:	bd80      	pop	{r7, pc}

080198b4 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80198b4:	b580      	push	{r7, lr}
 80198b6:	b082      	sub	sp, #8
 80198b8:	af00      	add	r7, sp, #0
 80198ba:	4603      	mov	r3, r0
 80198bc:	6039      	str	r1, [r7, #0]
 80198be:	80fb      	strh	r3, [r7, #6]
 80198c0:	4613      	mov	r3, r2
 80198c2:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 80198c4:	797b      	ldrb	r3, [r7, #5]
 80198c6:	b29a      	uxth	r2, r3
 80198c8:	88fb      	ldrh	r3, [r7, #6]
 80198ca:	6839      	ldr	r1, [r7, #0]
 80198cc:	4618      	mov	r0, r3
 80198ce:	f001 fabb 	bl	801ae48 <SUBGRF_WriteRegisters>
}
 80198d2:	bf00      	nop
 80198d4:	3708      	adds	r7, #8
 80198d6:	46bd      	mov	sp, r7
 80198d8:	bd80      	pop	{r7, pc}

080198da <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80198da:	b580      	push	{r7, lr}
 80198dc:	b082      	sub	sp, #8
 80198de:	af00      	add	r7, sp, #0
 80198e0:	4603      	mov	r3, r0
 80198e2:	6039      	str	r1, [r7, #0]
 80198e4:	80fb      	strh	r3, [r7, #6]
 80198e6:	4613      	mov	r3, r2
 80198e8:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 80198ea:	797b      	ldrb	r3, [r7, #5]
 80198ec:	b29a      	uxth	r2, r3
 80198ee:	88fb      	ldrh	r3, [r7, #6]
 80198f0:	6839      	ldr	r1, [r7, #0]
 80198f2:	4618      	mov	r0, r3
 80198f4:	f001 faca 	bl	801ae8c <SUBGRF_ReadRegisters>
}
 80198f8:	bf00      	nop
 80198fa:	3708      	adds	r7, #8
 80198fc:	46bd      	mov	sp, r7
 80198fe:	bd80      	pop	{r7, pc}

08019900 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8019900:	b580      	push	{r7, lr}
 8019902:	b082      	sub	sp, #8
 8019904:	af00      	add	r7, sp, #0
 8019906:	4603      	mov	r3, r0
 8019908:	460a      	mov	r2, r1
 801990a:	71fb      	strb	r3, [r7, #7]
 801990c:	4613      	mov	r3, r2
 801990e:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8019910:	79fb      	ldrb	r3, [r7, #7]
 8019912:	2b01      	cmp	r3, #1
 8019914:	d10a      	bne.n	801992c <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8019916:	4a0e      	ldr	r2, [pc, #56]	@ (8019950 <RadioSetMaxPayloadLength+0x50>)
 8019918:	79bb      	ldrb	r3, [r7, #6]
 801991a:	7013      	strb	r3, [r2, #0]
 801991c:	4b0c      	ldr	r3, [pc, #48]	@ (8019950 <RadioSetMaxPayloadLength+0x50>)
 801991e:	781a      	ldrb	r2, [r3, #0]
 8019920:	4b0c      	ldr	r3, [pc, #48]	@ (8019954 <RadioSetMaxPayloadLength+0x54>)
 8019922:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019924:	480c      	ldr	r0, [pc, #48]	@ (8019958 <RadioSetMaxPayloadLength+0x58>)
 8019926:	f001 f91f 	bl	801ab68 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801992a:	e00d      	b.n	8019948 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801992c:	4b09      	ldr	r3, [pc, #36]	@ (8019954 <RadioSetMaxPayloadLength+0x54>)
 801992e:	7d5b      	ldrb	r3, [r3, #21]
 8019930:	2b01      	cmp	r3, #1
 8019932:	d109      	bne.n	8019948 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8019934:	4a06      	ldr	r2, [pc, #24]	@ (8019950 <RadioSetMaxPayloadLength+0x50>)
 8019936:	79bb      	ldrb	r3, [r7, #6]
 8019938:	7013      	strb	r3, [r2, #0]
 801993a:	4b05      	ldr	r3, [pc, #20]	@ (8019950 <RadioSetMaxPayloadLength+0x50>)
 801993c:	781a      	ldrb	r2, [r3, #0]
 801993e:	4b05      	ldr	r3, [pc, #20]	@ (8019954 <RadioSetMaxPayloadLength+0x54>)
 8019940:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019942:	4805      	ldr	r0, [pc, #20]	@ (8019958 <RadioSetMaxPayloadLength+0x58>)
 8019944:	f001 f910 	bl	801ab68 <SUBGRF_SetPacketParams>
}
 8019948:	bf00      	nop
 801994a:	3708      	adds	r7, #8
 801994c:	46bd      	mov	sp, r7
 801994e:	bd80      	pop	{r7, pc}
 8019950:	20000148 	.word	0x20000148
 8019954:	20001da4 	.word	0x20001da4
 8019958:	20001db2 	.word	0x20001db2

0801995c <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 801995c:	b580      	push	{r7, lr}
 801995e:	b082      	sub	sp, #8
 8019960:	af00      	add	r7, sp, #0
 8019962:	4603      	mov	r3, r0
 8019964:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8019966:	4a13      	ldr	r2, [pc, #76]	@ (80199b4 <RadioSetPublicNetwork+0x58>)
 8019968:	79fb      	ldrb	r3, [r7, #7]
 801996a:	7313      	strb	r3, [r2, #12]
 801996c:	4b11      	ldr	r3, [pc, #68]	@ (80199b4 <RadioSetPublicNetwork+0x58>)
 801996e:	7b1a      	ldrb	r2, [r3, #12]
 8019970:	4b10      	ldr	r3, [pc, #64]	@ (80199b4 <RadioSetPublicNetwork+0x58>)
 8019972:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8019974:	2001      	movs	r0, #1
 8019976:	f7ff f953 	bl	8018c20 <RadioSetModem>
    if( enable == true )
 801997a:	79fb      	ldrb	r3, [r7, #7]
 801997c:	2b00      	cmp	r3, #0
 801997e:	d00a      	beq.n	8019996 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8019980:	2134      	movs	r1, #52	@ 0x34
 8019982:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8019986:	f001 fa37 	bl	801adf8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801998a:	2144      	movs	r1, #68	@ 0x44
 801998c:	f240 7041 	movw	r0, #1857	@ 0x741
 8019990:	f001 fa32 	bl	801adf8 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8019994:	e009      	b.n	80199aa <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8019996:	2114      	movs	r1, #20
 8019998:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 801999c:	f001 fa2c 	bl	801adf8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80199a0:	2124      	movs	r1, #36	@ 0x24
 80199a2:	f240 7041 	movw	r0, #1857	@ 0x741
 80199a6:	f001 fa27 	bl	801adf8 <SUBGRF_WriteRegister>
}
 80199aa:	bf00      	nop
 80199ac:	3708      	adds	r7, #8
 80199ae:	46bd      	mov	sp, r7
 80199b0:	bd80      	pop	{r7, pc}
 80199b2:	bf00      	nop
 80199b4:	20001da4 	.word	0x20001da4

080199b8 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 80199b8:	b580      	push	{r7, lr}
 80199ba:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 80199bc:	f001 fb6c 	bl	801b098 <SUBGRF_GetRadioWakeUpTime>
 80199c0:	4603      	mov	r3, r0
 80199c2:	3303      	adds	r3, #3
}
 80199c4:	4618      	mov	r0, r3
 80199c6:	bd80      	pop	{r7, pc}

080199c8 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 80199c8:	b580      	push	{r7, lr}
 80199ca:	b082      	sub	sp, #8
 80199cc:	af00      	add	r7, sp, #0
 80199ce:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 80199d0:	f000 f80e 	bl	80199f0 <RadioOnTxTimeoutProcess>
}
 80199d4:	bf00      	nop
 80199d6:	3708      	adds	r7, #8
 80199d8:	46bd      	mov	sp, r7
 80199da:	bd80      	pop	{r7, pc}

080199dc <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 80199dc:	b580      	push	{r7, lr}
 80199de:	b082      	sub	sp, #8
 80199e0:	af00      	add	r7, sp, #0
 80199e2:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 80199e4:	f000 f81e 	bl	8019a24 <RadioOnRxTimeoutProcess>
}
 80199e8:	bf00      	nop
 80199ea:	3708      	adds	r7, #8
 80199ec:	46bd      	mov	sp, r7
 80199ee:	bd80      	pop	{r7, pc}

080199f0 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 80199f0:	b580      	push	{r7, lr}
 80199f2:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );
 80199f4:	2180      	movs	r1, #128	@ 0x80
 80199f6:	4809      	ldr	r0, [pc, #36]	@ (8019a1c <RadioOnTxTimeoutProcess+0x2c>)
 80199f8:	f7ff f891 	bl	8018b1e <LL_GPIO_ResetOutputPin>

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80199fc:	4b08      	ldr	r3, [pc, #32]	@ (8019a20 <RadioOnTxTimeoutProcess+0x30>)
 80199fe:	681b      	ldr	r3, [r3, #0]
 8019a00:	2b00      	cmp	r3, #0
 8019a02:	d008      	beq.n	8019a16 <RadioOnTxTimeoutProcess+0x26>
 8019a04:	4b06      	ldr	r3, [pc, #24]	@ (8019a20 <RadioOnTxTimeoutProcess+0x30>)
 8019a06:	681b      	ldr	r3, [r3, #0]
 8019a08:	685b      	ldr	r3, [r3, #4]
 8019a0a:	2b00      	cmp	r3, #0
 8019a0c:	d003      	beq.n	8019a16 <RadioOnTxTimeoutProcess+0x26>
    {
        RadioEvents->TxTimeout( );
 8019a0e:	4b04      	ldr	r3, [pc, #16]	@ (8019a20 <RadioOnTxTimeoutProcess+0x30>)
 8019a10:	681b      	ldr	r3, [r3, #0]
 8019a12:	685b      	ldr	r3, [r3, #4]
 8019a14:	4798      	blx	r3
    }
}
 8019a16:	bf00      	nop
 8019a18:	bd80      	pop	{r7, pc}
 8019a1a:	bf00      	nop
 8019a1c:	48000400 	.word	0x48000400
 8019a20:	20001da0 	.word	0x20001da0

08019a24 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8019a24:	b580      	push	{r7, lr}
 8019a26:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );
 8019a28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8019a2c:	4808      	ldr	r0, [pc, #32]	@ (8019a50 <RadioOnRxTimeoutProcess+0x2c>)
 8019a2e:	f7ff f876 	bl	8018b1e <LL_GPIO_ResetOutputPin>

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8019a32:	4b08      	ldr	r3, [pc, #32]	@ (8019a54 <RadioOnRxTimeoutProcess+0x30>)
 8019a34:	681b      	ldr	r3, [r3, #0]
 8019a36:	2b00      	cmp	r3, #0
 8019a38:	d008      	beq.n	8019a4c <RadioOnRxTimeoutProcess+0x28>
 8019a3a:	4b06      	ldr	r3, [pc, #24]	@ (8019a54 <RadioOnRxTimeoutProcess+0x30>)
 8019a3c:	681b      	ldr	r3, [r3, #0]
 8019a3e:	68db      	ldr	r3, [r3, #12]
 8019a40:	2b00      	cmp	r3, #0
 8019a42:	d003      	beq.n	8019a4c <RadioOnRxTimeoutProcess+0x28>
    {
        RadioEvents->RxTimeout( );
 8019a44:	4b03      	ldr	r3, [pc, #12]	@ (8019a54 <RadioOnRxTimeoutProcess+0x30>)
 8019a46:	681b      	ldr	r3, [r3, #0]
 8019a48:	68db      	ldr	r3, [r3, #12]
 8019a4a:	4798      	blx	r3
    }
}
 8019a4c:	bf00      	nop
 8019a4e:	bd80      	pop	{r7, pc}
 8019a50:	48000400 	.word	0x48000400
 8019a54:	20001da0 	.word	0x20001da0

08019a58 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8019a58:	b580      	push	{r7, lr}
 8019a5a:	b082      	sub	sp, #8
 8019a5c:	af00      	add	r7, sp, #0
 8019a5e:	4603      	mov	r3, r0
 8019a60:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8019a62:	4a05      	ldr	r2, [pc, #20]	@ (8019a78 <RadioOnDioIrq+0x20>)
 8019a64:	88fb      	ldrh	r3, [r7, #6]
 8019a66:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 8019a6a:	f000 f807 	bl	8019a7c <RadioIrqProcess>
}
 8019a6e:	bf00      	nop
 8019a70:	3708      	adds	r7, #8
 8019a72:	46bd      	mov	sp, r7
 8019a74:	bd80      	pop	{r7, pc}
 8019a76:	bf00      	nop
 8019a78:	20001da4 	.word	0x20001da4

08019a7c <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8019a7c:	b5b0      	push	{r4, r5, r7, lr}
 8019a7e:	b082      	sub	sp, #8
 8019a80:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8019a82:	2300      	movs	r3, #0
 8019a84:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8019a86:	2300      	movs	r3, #0
 8019a88:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8019a8a:	4bb1      	ldr	r3, [pc, #708]	@ (8019d50 <RadioIrqProcess+0x2d4>)
 8019a8c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8019a90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019a94:	f000 8116 	beq.w	8019cc4 <RadioIrqProcess+0x248>
 8019a98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019a9c:	f300 81fc 	bgt.w	8019e98 <RadioIrqProcess+0x41c>
 8019aa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019aa4:	f000 80fa 	beq.w	8019c9c <RadioIrqProcess+0x220>
 8019aa8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019aac:	f300 81f4 	bgt.w	8019e98 <RadioIrqProcess+0x41c>
 8019ab0:	2b80      	cmp	r3, #128	@ 0x80
 8019ab2:	f000 80df 	beq.w	8019c74 <RadioIrqProcess+0x1f8>
 8019ab6:	2b80      	cmp	r3, #128	@ 0x80
 8019ab8:	f300 81ee 	bgt.w	8019e98 <RadioIrqProcess+0x41c>
 8019abc:	2b20      	cmp	r3, #32
 8019abe:	dc49      	bgt.n	8019b54 <RadioIrqProcess+0xd8>
 8019ac0:	2b00      	cmp	r3, #0
 8019ac2:	f340 81e9 	ble.w	8019e98 <RadioIrqProcess+0x41c>
 8019ac6:	3b01      	subs	r3, #1
 8019ac8:	2b1f      	cmp	r3, #31
 8019aca:	f200 81e5 	bhi.w	8019e98 <RadioIrqProcess+0x41c>
 8019ace:	a201      	add	r2, pc, #4	@ (adr r2, 8019ad4 <RadioIrqProcess+0x58>)
 8019ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019ad4:	08019b5d 	.word	0x08019b5d
 8019ad8:	08019b9f 	.word	0x08019b9f
 8019adc:	08019e99 	.word	0x08019e99
 8019ae0:	08019d75 	.word	0x08019d75
 8019ae4:	08019e99 	.word	0x08019e99
 8019ae8:	08019e99 	.word	0x08019e99
 8019aec:	08019e99 	.word	0x08019e99
 8019af0:	08019df1 	.word	0x08019df1
 8019af4:	08019e99 	.word	0x08019e99
 8019af8:	08019e99 	.word	0x08019e99
 8019afc:	08019e99 	.word	0x08019e99
 8019b00:	08019e99 	.word	0x08019e99
 8019b04:	08019e99 	.word	0x08019e99
 8019b08:	08019e99 	.word	0x08019e99
 8019b0c:	08019e99 	.word	0x08019e99
 8019b10:	08019e0d 	.word	0x08019e0d
 8019b14:	08019e99 	.word	0x08019e99
 8019b18:	08019e99 	.word	0x08019e99
 8019b1c:	08019e99 	.word	0x08019e99
 8019b20:	08019e99 	.word	0x08019e99
 8019b24:	08019e99 	.word	0x08019e99
 8019b28:	08019e99 	.word	0x08019e99
 8019b2c:	08019e99 	.word	0x08019e99
 8019b30:	08019e99 	.word	0x08019e99
 8019b34:	08019e99 	.word	0x08019e99
 8019b38:	08019e99 	.word	0x08019e99
 8019b3c:	08019e99 	.word	0x08019e99
 8019b40:	08019e99 	.word	0x08019e99
 8019b44:	08019e99 	.word	0x08019e99
 8019b48:	08019e99 	.word	0x08019e99
 8019b4c:	08019e99 	.word	0x08019e99
 8019b50:	08019e1b 	.word	0x08019e1b
 8019b54:	2b40      	cmp	r3, #64	@ 0x40
 8019b56:	f000 8181 	beq.w	8019e5c <RadioIrqProcess+0x3e0>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 8019b5a:	e19d      	b.n	8019e98 <RadioIrqProcess+0x41c>
        DBG_GPIO_RADIO_TX( RST );
 8019b5c:	2180      	movs	r1, #128	@ 0x80
 8019b5e:	487d      	ldr	r0, [pc, #500]	@ (8019d54 <RadioIrqProcess+0x2d8>)
 8019b60:	f7fe ffdd 	bl	8018b1e <LL_GPIO_ResetOutputPin>
        TimerStop( &TxTimeoutTimer );
 8019b64:	487c      	ldr	r0, [pc, #496]	@ (8019d58 <RadioIrqProcess+0x2dc>)
 8019b66:	f002 fb53 	bl	801c210 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8019b6a:	2000      	movs	r0, #0
 8019b6c:	f000 fbc0 	bl	801a2f0 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8019b70:	f001 fc29 	bl	801b3c6 <RFW_Is_LongPacketModeEnabled>
 8019b74:	4603      	mov	r3, r0
 8019b76:	2b01      	cmp	r3, #1
 8019b78:	d101      	bne.n	8019b7e <RadioIrqProcess+0x102>
            RFW_DeInit_TxLongPacket( );
 8019b7a:	f001 fc4d 	bl	801b418 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8019b7e:	4b77      	ldr	r3, [pc, #476]	@ (8019d5c <RadioIrqProcess+0x2e0>)
 8019b80:	681b      	ldr	r3, [r3, #0]
 8019b82:	2b00      	cmp	r3, #0
 8019b84:	f000 818a 	beq.w	8019e9c <RadioIrqProcess+0x420>
 8019b88:	4b74      	ldr	r3, [pc, #464]	@ (8019d5c <RadioIrqProcess+0x2e0>)
 8019b8a:	681b      	ldr	r3, [r3, #0]
 8019b8c:	681b      	ldr	r3, [r3, #0]
 8019b8e:	2b00      	cmp	r3, #0
 8019b90:	f000 8184 	beq.w	8019e9c <RadioIrqProcess+0x420>
            RadioEvents->TxDone( );
 8019b94:	4b71      	ldr	r3, [pc, #452]	@ (8019d5c <RadioIrqProcess+0x2e0>)
 8019b96:	681b      	ldr	r3, [r3, #0]
 8019b98:	681b      	ldr	r3, [r3, #0]
 8019b9a:	4798      	blx	r3
        break;
 8019b9c:	e17e      	b.n	8019e9c <RadioIrqProcess+0x420>
        DBG_GPIO_RADIO_RX( RST );
 8019b9e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8019ba2:	486c      	ldr	r0, [pc, #432]	@ (8019d54 <RadioIrqProcess+0x2d8>)
 8019ba4:	f7fe ffbb 	bl	8018b1e <LL_GPIO_ResetOutputPin>
        TimerStop( &RxTimeoutTimer );
 8019ba8:	486d      	ldr	r0, [pc, #436]	@ (8019d60 <RadioIrqProcess+0x2e4>)
 8019baa:	f002 fb31 	bl	801c210 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8019bae:	4b68      	ldr	r3, [pc, #416]	@ (8019d50 <RadioIrqProcess+0x2d4>)
 8019bb0:	785b      	ldrb	r3, [r3, #1]
 8019bb2:	f083 0301 	eor.w	r3, r3, #1
 8019bb6:	b2db      	uxtb	r3, r3
 8019bb8:	2b00      	cmp	r3, #0
 8019bba:	d014      	beq.n	8019be6 <RadioIrqProcess+0x16a>
            SUBGRF_SetStandby( STDBY_RC );
 8019bbc:	2000      	movs	r0, #0
 8019bbe:	f000 fb97 	bl	801a2f0 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8019bc2:	2100      	movs	r1, #0
 8019bc4:	f640 1002 	movw	r0, #2306	@ 0x902
 8019bc8:	f001 f916 	bl	801adf8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8019bcc:	f640 1044 	movw	r0, #2372	@ 0x944
 8019bd0:	f001 f926 	bl	801ae20 <SUBGRF_ReadRegister>
 8019bd4:	4603      	mov	r3, r0
 8019bd6:	f043 0302 	orr.w	r3, r3, #2
 8019bda:	b2db      	uxtb	r3, r3
 8019bdc:	4619      	mov	r1, r3
 8019bde:	f640 1044 	movw	r0, #2372	@ 0x944
 8019be2:	f001 f909 	bl	801adf8 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8019be6:	1dfb      	adds	r3, r7, #7
 8019be8:	22ff      	movs	r2, #255	@ 0xff
 8019bea:	4619      	mov	r1, r3
 8019bec:	485d      	ldr	r0, [pc, #372]	@ (8019d64 <RadioIrqProcess+0x2e8>)
 8019bee:	f000 fa4f 	bl	801a090 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8019bf2:	485d      	ldr	r0, [pc, #372]	@ (8019d68 <RadioIrqProcess+0x2ec>)
 8019bf4:	f001 f8ae 	bl	801ad54 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8019bf8:	4b58      	ldr	r3, [pc, #352]	@ (8019d5c <RadioIrqProcess+0x2e0>)
 8019bfa:	681b      	ldr	r3, [r3, #0]
 8019bfc:	2b00      	cmp	r3, #0
 8019bfe:	f000 814f 	beq.w	8019ea0 <RadioIrqProcess+0x424>
 8019c02:	4b56      	ldr	r3, [pc, #344]	@ (8019d5c <RadioIrqProcess+0x2e0>)
 8019c04:	681b      	ldr	r3, [r3, #0]
 8019c06:	689b      	ldr	r3, [r3, #8]
 8019c08:	2b00      	cmp	r3, #0
 8019c0a:	f000 8149 	beq.w	8019ea0 <RadioIrqProcess+0x424>
            switch( SubgRf.PacketStatus.packetType )
 8019c0e:	4b50      	ldr	r3, [pc, #320]	@ (8019d50 <RadioIrqProcess+0x2d4>)
 8019c10:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8019c14:	2b01      	cmp	r3, #1
 8019c16:	d10e      	bne.n	8019c36 <RadioIrqProcess+0x1ba>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8019c18:	4b50      	ldr	r3, [pc, #320]	@ (8019d5c <RadioIrqProcess+0x2e0>)
 8019c1a:	681b      	ldr	r3, [r3, #0]
 8019c1c:	689c      	ldr	r4, [r3, #8]
 8019c1e:	79fb      	ldrb	r3, [r7, #7]
 8019c20:	4619      	mov	r1, r3
 8019c22:	4b4b      	ldr	r3, [pc, #300]	@ (8019d50 <RadioIrqProcess+0x2d4>)
 8019c24:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8019c28:	461a      	mov	r2, r3
 8019c2a:	4b49      	ldr	r3, [pc, #292]	@ (8019d50 <RadioIrqProcess+0x2d4>)
 8019c2c:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 8019c30:	484c      	ldr	r0, [pc, #304]	@ (8019d64 <RadioIrqProcess+0x2e8>)
 8019c32:	47a0      	blx	r4
                break;
 8019c34:	e01d      	b.n	8019c72 <RadioIrqProcess+0x1f6>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8019c36:	4b46      	ldr	r3, [pc, #280]	@ (8019d50 <RadioIrqProcess+0x2d4>)
 8019c38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019c3a:	463a      	mov	r2, r7
 8019c3c:	4611      	mov	r1, r2
 8019c3e:	4618      	mov	r0, r3
 8019c40:	f001 fb1c 	bl	801b27c <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8019c44:	4b45      	ldr	r3, [pc, #276]	@ (8019d5c <RadioIrqProcess+0x2e0>)
 8019c46:	681b      	ldr	r3, [r3, #0]
 8019c48:	689c      	ldr	r4, [r3, #8]
 8019c4a:	79fb      	ldrb	r3, [r7, #7]
 8019c4c:	4619      	mov	r1, r3
 8019c4e:	4b40      	ldr	r3, [pc, #256]	@ (8019d50 <RadioIrqProcess+0x2d4>)
 8019c50:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 8019c54:	4618      	mov	r0, r3
 8019c56:	683b      	ldr	r3, [r7, #0]
 8019c58:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8019c5c:	4a43      	ldr	r2, [pc, #268]	@ (8019d6c <RadioIrqProcess+0x2f0>)
 8019c5e:	fb82 5203 	smull	r5, r2, r2, r3
 8019c62:	1192      	asrs	r2, r2, #6
 8019c64:	17db      	asrs	r3, r3, #31
 8019c66:	1ad3      	subs	r3, r2, r3
 8019c68:	b25b      	sxtb	r3, r3
 8019c6a:	4602      	mov	r2, r0
 8019c6c:	483d      	ldr	r0, [pc, #244]	@ (8019d64 <RadioIrqProcess+0x2e8>)
 8019c6e:	47a0      	blx	r4
                break;
 8019c70:	bf00      	nop
        break;
 8019c72:	e115      	b.n	8019ea0 <RadioIrqProcess+0x424>
        SUBGRF_SetStandby( STDBY_RC );
 8019c74:	2000      	movs	r0, #0
 8019c76:	f000 fb3b 	bl	801a2f0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8019c7a:	4b38      	ldr	r3, [pc, #224]	@ (8019d5c <RadioIrqProcess+0x2e0>)
 8019c7c:	681b      	ldr	r3, [r3, #0]
 8019c7e:	2b00      	cmp	r3, #0
 8019c80:	f000 8110 	beq.w	8019ea4 <RadioIrqProcess+0x428>
 8019c84:	4b35      	ldr	r3, [pc, #212]	@ (8019d5c <RadioIrqProcess+0x2e0>)
 8019c86:	681b      	ldr	r3, [r3, #0]
 8019c88:	699b      	ldr	r3, [r3, #24]
 8019c8a:	2b00      	cmp	r3, #0
 8019c8c:	f000 810a 	beq.w	8019ea4 <RadioIrqProcess+0x428>
            RadioEvents->CadDone( false );
 8019c90:	4b32      	ldr	r3, [pc, #200]	@ (8019d5c <RadioIrqProcess+0x2e0>)
 8019c92:	681b      	ldr	r3, [r3, #0]
 8019c94:	699b      	ldr	r3, [r3, #24]
 8019c96:	2000      	movs	r0, #0
 8019c98:	4798      	blx	r3
        break;
 8019c9a:	e103      	b.n	8019ea4 <RadioIrqProcess+0x428>
        SUBGRF_SetStandby( STDBY_RC );
 8019c9c:	2000      	movs	r0, #0
 8019c9e:	f000 fb27 	bl	801a2f0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8019ca2:	4b2e      	ldr	r3, [pc, #184]	@ (8019d5c <RadioIrqProcess+0x2e0>)
 8019ca4:	681b      	ldr	r3, [r3, #0]
 8019ca6:	2b00      	cmp	r3, #0
 8019ca8:	f000 80fe 	beq.w	8019ea8 <RadioIrqProcess+0x42c>
 8019cac:	4b2b      	ldr	r3, [pc, #172]	@ (8019d5c <RadioIrqProcess+0x2e0>)
 8019cae:	681b      	ldr	r3, [r3, #0]
 8019cb0:	699b      	ldr	r3, [r3, #24]
 8019cb2:	2b00      	cmp	r3, #0
 8019cb4:	f000 80f8 	beq.w	8019ea8 <RadioIrqProcess+0x42c>
            RadioEvents->CadDone( true );
 8019cb8:	4b28      	ldr	r3, [pc, #160]	@ (8019d5c <RadioIrqProcess+0x2e0>)
 8019cba:	681b      	ldr	r3, [r3, #0]
 8019cbc:	699b      	ldr	r3, [r3, #24]
 8019cbe:	2001      	movs	r0, #1
 8019cc0:	4798      	blx	r3
        break;
 8019cc2:	e0f1      	b.n	8019ea8 <RadioIrqProcess+0x42c>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8019cc4:	4b2a      	ldr	r3, [pc, #168]	@ (8019d70 <RadioIrqProcess+0x2f4>)
 8019cc6:	2201      	movs	r2, #1
 8019cc8:	2100      	movs	r1, #0
 8019cca:	2002      	movs	r0, #2
 8019ccc:	f002 fcaa 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8019cd0:	f000 f9c4 	bl	801a05c <SUBGRF_GetOperatingMode>
 8019cd4:	4603      	mov	r3, r0
 8019cd6:	2b04      	cmp	r3, #4
 8019cd8:	d119      	bne.n	8019d0e <RadioIrqProcess+0x292>
            DBG_GPIO_RADIO_TX( RST );
 8019cda:	2180      	movs	r1, #128	@ 0x80
 8019cdc:	481d      	ldr	r0, [pc, #116]	@ (8019d54 <RadioIrqProcess+0x2d8>)
 8019cde:	f7fe ff1e 	bl	8018b1e <LL_GPIO_ResetOutputPin>
            TimerStop( &TxTimeoutTimer );
 8019ce2:	481d      	ldr	r0, [pc, #116]	@ (8019d58 <RadioIrqProcess+0x2dc>)
 8019ce4:	f002 fa94 	bl	801c210 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8019ce8:	2000      	movs	r0, #0
 8019cea:	f000 fb01 	bl	801a2f0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8019cee:	4b1b      	ldr	r3, [pc, #108]	@ (8019d5c <RadioIrqProcess+0x2e0>)
 8019cf0:	681b      	ldr	r3, [r3, #0]
 8019cf2:	2b00      	cmp	r3, #0
 8019cf4:	f000 80da 	beq.w	8019eac <RadioIrqProcess+0x430>
 8019cf8:	4b18      	ldr	r3, [pc, #96]	@ (8019d5c <RadioIrqProcess+0x2e0>)
 8019cfa:	681b      	ldr	r3, [r3, #0]
 8019cfc:	685b      	ldr	r3, [r3, #4]
 8019cfe:	2b00      	cmp	r3, #0
 8019d00:	f000 80d4 	beq.w	8019eac <RadioIrqProcess+0x430>
                RadioEvents->TxTimeout( );
 8019d04:	4b15      	ldr	r3, [pc, #84]	@ (8019d5c <RadioIrqProcess+0x2e0>)
 8019d06:	681b      	ldr	r3, [r3, #0]
 8019d08:	685b      	ldr	r3, [r3, #4]
 8019d0a:	4798      	blx	r3
        break;
 8019d0c:	e0ce      	b.n	8019eac <RadioIrqProcess+0x430>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8019d0e:	f000 f9a5 	bl	801a05c <SUBGRF_GetOperatingMode>
 8019d12:	4603      	mov	r3, r0
 8019d14:	2b05      	cmp	r3, #5
 8019d16:	f040 80c9 	bne.w	8019eac <RadioIrqProcess+0x430>
            DBG_GPIO_RADIO_RX( RST );
 8019d1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8019d1e:	480d      	ldr	r0, [pc, #52]	@ (8019d54 <RadioIrqProcess+0x2d8>)
 8019d20:	f7fe fefd 	bl	8018b1e <LL_GPIO_ResetOutputPin>
            TimerStop( &RxTimeoutTimer );
 8019d24:	480e      	ldr	r0, [pc, #56]	@ (8019d60 <RadioIrqProcess+0x2e4>)
 8019d26:	f002 fa73 	bl	801c210 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8019d2a:	2000      	movs	r0, #0
 8019d2c:	f000 fae0 	bl	801a2f0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8019d30:	4b0a      	ldr	r3, [pc, #40]	@ (8019d5c <RadioIrqProcess+0x2e0>)
 8019d32:	681b      	ldr	r3, [r3, #0]
 8019d34:	2b00      	cmp	r3, #0
 8019d36:	f000 80b9 	beq.w	8019eac <RadioIrqProcess+0x430>
 8019d3a:	4b08      	ldr	r3, [pc, #32]	@ (8019d5c <RadioIrqProcess+0x2e0>)
 8019d3c:	681b      	ldr	r3, [r3, #0]
 8019d3e:	68db      	ldr	r3, [r3, #12]
 8019d40:	2b00      	cmp	r3, #0
 8019d42:	f000 80b3 	beq.w	8019eac <RadioIrqProcess+0x430>
                RadioEvents->RxTimeout( );
 8019d46:	4b05      	ldr	r3, [pc, #20]	@ (8019d5c <RadioIrqProcess+0x2e0>)
 8019d48:	681b      	ldr	r3, [r3, #0]
 8019d4a:	68db      	ldr	r3, [r3, #12]
 8019d4c:	4798      	blx	r3
        break;
 8019d4e:	e0ad      	b.n	8019eac <RadioIrqProcess+0x430>
 8019d50:	20001da4 	.word	0x20001da4
 8019d54:	48000400 	.word	0x48000400
 8019d58:	20001e00 	.word	0x20001e00
 8019d5c:	20001da0 	.word	0x20001da0
 8019d60:	20001e18 	.word	0x20001e18
 8019d64:	20001ca0 	.word	0x20001ca0
 8019d68:	20001dc8 	.word	0x20001dc8
 8019d6c:	10624dd3 	.word	0x10624dd3
 8019d70:	0801d440 	.word	0x0801d440
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8019d74:	4b54      	ldr	r3, [pc, #336]	@ (8019ec8 <RadioIrqProcess+0x44c>)
 8019d76:	2201      	movs	r2, #1
 8019d78:	2100      	movs	r1, #0
 8019d7a:	2002      	movs	r0, #2
 8019d7c:	f002 fc52 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8019d80:	4b52      	ldr	r3, [pc, #328]	@ (8019ecc <RadioIrqProcess+0x450>)
 8019d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	f000 8093 	beq.w	8019eb0 <RadioIrqProcess+0x434>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8019d8a:	4a51      	ldr	r2, [pc, #324]	@ (8019ed0 <RadioIrqProcess+0x454>)
 8019d8c:	4b4f      	ldr	r3, [pc, #316]	@ (8019ecc <RadioIrqProcess+0x450>)
 8019d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019d90:	0c1b      	lsrs	r3, r3, #16
 8019d92:	b2db      	uxtb	r3, r3
 8019d94:	4619      	mov	r1, r3
 8019d96:	f640 1003 	movw	r0, #2307	@ 0x903
 8019d9a:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8019d9c:	4a4c      	ldr	r2, [pc, #304]	@ (8019ed0 <RadioIrqProcess+0x454>)
 8019d9e:	4b4b      	ldr	r3, [pc, #300]	@ (8019ecc <RadioIrqProcess+0x450>)
 8019da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019da2:	0a1b      	lsrs	r3, r3, #8
 8019da4:	b2db      	uxtb	r3, r3
 8019da6:	4619      	mov	r1, r3
 8019da8:	f640 1004 	movw	r0, #2308	@ 0x904
 8019dac:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8019dae:	4a48      	ldr	r2, [pc, #288]	@ (8019ed0 <RadioIrqProcess+0x454>)
 8019db0:	4b46      	ldr	r3, [pc, #280]	@ (8019ecc <RadioIrqProcess+0x450>)
 8019db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019db4:	b2db      	uxtb	r3, r3
 8019db6:	4619      	mov	r1, r3
 8019db8:	f640 1005 	movw	r0, #2309	@ 0x905
 8019dbc:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8019dbe:	4c44      	ldr	r4, [pc, #272]	@ (8019ed0 <RadioIrqProcess+0x454>)
 8019dc0:	4b44      	ldr	r3, [pc, #272]	@ (8019ed4 <RadioIrqProcess+0x458>)
 8019dc2:	f640 1002 	movw	r0, #2306	@ 0x902
 8019dc6:	4798      	blx	r3
 8019dc8:	4603      	mov	r3, r0
 8019dca:	f043 0301 	orr.w	r3, r3, #1
 8019dce:	b2db      	uxtb	r3, r3
 8019dd0:	4619      	mov	r1, r3
 8019dd2:	f640 1002 	movw	r0, #2306	@ 0x902
 8019dd6:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8019dd8:	4b3c      	ldr	r3, [pc, #240]	@ (8019ecc <RadioIrqProcess+0x450>)
 8019dda:	2200      	movs	r2, #0
 8019ddc:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8019dde:	2300      	movs	r3, #0
 8019de0:	2200      	movs	r2, #0
 8019de2:	f240 2162 	movw	r1, #610	@ 0x262
 8019de6:	f240 2062 	movw	r0, #610	@ 0x262
 8019dea:	f000 fc55 	bl	801a698 <SUBGRF_SetDioIrqParams>
        break;
 8019dee:	e05f      	b.n	8019eb0 <RadioIrqProcess+0x434>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8019df0:	4b39      	ldr	r3, [pc, #228]	@ (8019ed8 <RadioIrqProcess+0x45c>)
 8019df2:	2201      	movs	r2, #1
 8019df4:	2100      	movs	r1, #0
 8019df6:	2002      	movs	r0, #2
 8019df8:	f002 fc14 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8019dfc:	f001 fadc 	bl	801b3b8 <RFW_Is_Init>
 8019e00:	4603      	mov	r3, r0
 8019e02:	2b01      	cmp	r3, #1
 8019e04:	d156      	bne.n	8019eb4 <RadioIrqProcess+0x438>
            RFW_ReceivePayload( );
 8019e06:	f001 fb0d 	bl	801b424 <RFW_ReceivePayload>
        break;
 8019e0a:	e053      	b.n	8019eb4 <RadioIrqProcess+0x438>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8019e0c:	4b33      	ldr	r3, [pc, #204]	@ (8019edc <RadioIrqProcess+0x460>)
 8019e0e:	2201      	movs	r2, #1
 8019e10:	2100      	movs	r1, #0
 8019e12:	2002      	movs	r0, #2
 8019e14:	f002 fc06 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8019e18:	e051      	b.n	8019ebe <RadioIrqProcess+0x442>
        TimerStop( &RxTimeoutTimer );
 8019e1a:	4831      	ldr	r0, [pc, #196]	@ (8019ee0 <RadioIrqProcess+0x464>)
 8019e1c:	f002 f9f8 	bl	801c210 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8019e20:	4b2a      	ldr	r3, [pc, #168]	@ (8019ecc <RadioIrqProcess+0x450>)
 8019e22:	785b      	ldrb	r3, [r3, #1]
 8019e24:	f083 0301 	eor.w	r3, r3, #1
 8019e28:	b2db      	uxtb	r3, r3
 8019e2a:	2b00      	cmp	r3, #0
 8019e2c:	d002      	beq.n	8019e34 <RadioIrqProcess+0x3b8>
            SUBGRF_SetStandby( STDBY_RC );
 8019e2e:	2000      	movs	r0, #0
 8019e30:	f000 fa5e 	bl	801a2f0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8019e34:	4b2b      	ldr	r3, [pc, #172]	@ (8019ee4 <RadioIrqProcess+0x468>)
 8019e36:	681b      	ldr	r3, [r3, #0]
 8019e38:	2b00      	cmp	r3, #0
 8019e3a:	d03d      	beq.n	8019eb8 <RadioIrqProcess+0x43c>
 8019e3c:	4b29      	ldr	r3, [pc, #164]	@ (8019ee4 <RadioIrqProcess+0x468>)
 8019e3e:	681b      	ldr	r3, [r3, #0]
 8019e40:	68db      	ldr	r3, [r3, #12]
 8019e42:	2b00      	cmp	r3, #0
 8019e44:	d038      	beq.n	8019eb8 <RadioIrqProcess+0x43c>
            RadioEvents->RxTimeout( );
 8019e46:	4b27      	ldr	r3, [pc, #156]	@ (8019ee4 <RadioIrqProcess+0x468>)
 8019e48:	681b      	ldr	r3, [r3, #0]
 8019e4a:	68db      	ldr	r3, [r3, #12]
 8019e4c:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8019e4e:	4b26      	ldr	r3, [pc, #152]	@ (8019ee8 <RadioIrqProcess+0x46c>)
 8019e50:	2201      	movs	r2, #1
 8019e52:	2100      	movs	r1, #0
 8019e54:	2002      	movs	r0, #2
 8019e56:	f002 fbe5 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8019e5a:	e02d      	b.n	8019eb8 <RadioIrqProcess+0x43c>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8019e5c:	4b23      	ldr	r3, [pc, #140]	@ (8019eec <RadioIrqProcess+0x470>)
 8019e5e:	2201      	movs	r2, #1
 8019e60:	2100      	movs	r1, #0
 8019e62:	2002      	movs	r0, #2
 8019e64:	f002 fbde 	bl	801c624 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8019e68:	4b18      	ldr	r3, [pc, #96]	@ (8019ecc <RadioIrqProcess+0x450>)
 8019e6a:	785b      	ldrb	r3, [r3, #1]
 8019e6c:	f083 0301 	eor.w	r3, r3, #1
 8019e70:	b2db      	uxtb	r3, r3
 8019e72:	2b00      	cmp	r3, #0
 8019e74:	d002      	beq.n	8019e7c <RadioIrqProcess+0x400>
            SUBGRF_SetStandby( STDBY_RC );
 8019e76:	2000      	movs	r0, #0
 8019e78:	f000 fa3a 	bl	801a2f0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8019e7c:	4b19      	ldr	r3, [pc, #100]	@ (8019ee4 <RadioIrqProcess+0x468>)
 8019e7e:	681b      	ldr	r3, [r3, #0]
 8019e80:	2b00      	cmp	r3, #0
 8019e82:	d01b      	beq.n	8019ebc <RadioIrqProcess+0x440>
 8019e84:	4b17      	ldr	r3, [pc, #92]	@ (8019ee4 <RadioIrqProcess+0x468>)
 8019e86:	681b      	ldr	r3, [r3, #0]
 8019e88:	691b      	ldr	r3, [r3, #16]
 8019e8a:	2b00      	cmp	r3, #0
 8019e8c:	d016      	beq.n	8019ebc <RadioIrqProcess+0x440>
            RadioEvents->RxError( );
 8019e8e:	4b15      	ldr	r3, [pc, #84]	@ (8019ee4 <RadioIrqProcess+0x468>)
 8019e90:	681b      	ldr	r3, [r3, #0]
 8019e92:	691b      	ldr	r3, [r3, #16]
 8019e94:	4798      	blx	r3
        break;
 8019e96:	e011      	b.n	8019ebc <RadioIrqProcess+0x440>
        break;
 8019e98:	bf00      	nop
 8019e9a:	e010      	b.n	8019ebe <RadioIrqProcess+0x442>
        break;
 8019e9c:	bf00      	nop
 8019e9e:	e00e      	b.n	8019ebe <RadioIrqProcess+0x442>
        break;
 8019ea0:	bf00      	nop
 8019ea2:	e00c      	b.n	8019ebe <RadioIrqProcess+0x442>
        break;
 8019ea4:	bf00      	nop
 8019ea6:	e00a      	b.n	8019ebe <RadioIrqProcess+0x442>
        break;
 8019ea8:	bf00      	nop
 8019eaa:	e008      	b.n	8019ebe <RadioIrqProcess+0x442>
        break;
 8019eac:	bf00      	nop
 8019eae:	e006      	b.n	8019ebe <RadioIrqProcess+0x442>
        break;
 8019eb0:	bf00      	nop
 8019eb2:	e004      	b.n	8019ebe <RadioIrqProcess+0x442>
        break;
 8019eb4:	bf00      	nop
 8019eb6:	e002      	b.n	8019ebe <RadioIrqProcess+0x442>
        break;
 8019eb8:	bf00      	nop
 8019eba:	e000      	b.n	8019ebe <RadioIrqProcess+0x442>
        break;
 8019ebc:	bf00      	nop
    }
}
 8019ebe:	bf00      	nop
 8019ec0:	3708      	adds	r7, #8
 8019ec2:	46bd      	mov	sp, r7
 8019ec4:	bdb0      	pop	{r4, r5, r7, pc}
 8019ec6:	bf00      	nop
 8019ec8:	0801d454 	.word	0x0801d454
 8019ecc:	20001da4 	.word	0x20001da4
 8019ed0:	08019875 	.word	0x08019875
 8019ed4:	08019899 	.word	0x08019899
 8019ed8:	0801d460 	.word	0x0801d460
 8019edc:	0801d46c 	.word	0x0801d46c
 8019ee0:	20001e18 	.word	0x20001e18
 8019ee4:	20001da0 	.word	0x20001da0
 8019ee8:	0801d478 	.word	0x0801d478
 8019eec:	0801d484 	.word	0x0801d484

08019ef0 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8019ef0:	b580      	push	{r7, lr}
 8019ef2:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8019ef4:	4b09      	ldr	r3, [pc, #36]	@ (8019f1c <RadioTxPrbs+0x2c>)
 8019ef6:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019efa:	2101      	movs	r1, #1
 8019efc:	4618      	mov	r0, r3
 8019efe:	f001 f86f 	bl	801afe0 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8019f02:	4b07      	ldr	r3, [pc, #28]	@ (8019f20 <RadioTxPrbs+0x30>)
 8019f04:	212d      	movs	r1, #45	@ 0x2d
 8019f06:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8019f0a:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8019f0c:	f000 fab3 	bl	801a476 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8019f10:	4804      	ldr	r0, [pc, #16]	@ (8019f24 <RadioTxPrbs+0x34>)
 8019f12:	f000 fa09 	bl	801a328 <SUBGRF_SetTx>
}
 8019f16:	bf00      	nop
 8019f18:	bd80      	pop	{r7, pc}
 8019f1a:	bf00      	nop
 8019f1c:	20001da4 	.word	0x20001da4
 8019f20:	08019875 	.word	0x08019875
 8019f24:	000fffff 	.word	0x000fffff

08019f28 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8019f28:	b580      	push	{r7, lr}
 8019f2a:	b084      	sub	sp, #16
 8019f2c:	af00      	add	r7, sp, #0
 8019f2e:	4603      	mov	r3, r0
 8019f30:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8019f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019f36:	4618      	mov	r0, r3
 8019f38:	f001 f87a 	bl	801b030 <SUBGRF_SetRfTxPower>
 8019f3c:	4603      	mov	r3, r0
 8019f3e:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8019f40:	210e      	movs	r1, #14
 8019f42:	f640 101f 	movw	r0, #2335	@ 0x91f
 8019f46:	f000 ff57 	bl	801adf8 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8019f4a:	7bfb      	ldrb	r3, [r7, #15]
 8019f4c:	2101      	movs	r1, #1
 8019f4e:	4618      	mov	r0, r3
 8019f50:	f001 f846 	bl	801afe0 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8019f54:	f000 fa86 	bl	801a464 <SUBGRF_SetTxContinuousWave>
}
 8019f58:	bf00      	nop
 8019f5a:	3710      	adds	r7, #16
 8019f5c:	46bd      	mov	sp, r7
 8019f5e:	bd80      	pop	{r7, pc}

08019f60 <RadioSetRxGenericConfig>:
}
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 8019f60:	b480      	push	{r7}
 8019f62:	b085      	sub	sp, #20
 8019f64:	af00      	add	r7, sp, #0
 8019f66:	60b9      	str	r1, [r7, #8]
 8019f68:	607a      	str	r2, [r7, #4]
 8019f6a:	603b      	str	r3, [r7, #0]
 8019f6c:	4603      	mov	r3, r0
 8019f6e:	73fb      	strb	r3, [r7, #15]
    default:
        break;
    }
    return status;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
 8019f70:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8019f74:	4618      	mov	r0, r3
 8019f76:	3714      	adds	r7, #20
 8019f78:	46bd      	mov	sp, r7
 8019f7a:	bc80      	pop	{r7}
 8019f7c:	4770      	bx	lr

08019f7e <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 8019f7e:	b480      	push	{r7}
 8019f80:	b085      	sub	sp, #20
 8019f82:	af00      	add	r7, sp, #0
 8019f84:	60b9      	str	r1, [r7, #8]
 8019f86:	607b      	str	r3, [r7, #4]
 8019f88:	4603      	mov	r3, r0
 8019f8a:	73fb      	strb	r3, [r7, #15]
 8019f8c:	4613      	mov	r3, r2
 8019f8e:	73bb      	strb	r3, [r7, #14]
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
    SubgRf.TxTimeout = timeout;
    return 0;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
 8019f90:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8019f94:	4618      	mov	r0, r3
 8019f96:	3714      	adds	r7, #20
 8019f98:	46bd      	mov	sp, r7
 8019f9a:	bc80      	pop	{r7}
 8019f9c:	4770      	bx	lr

08019f9e <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 8019f9e:	b480      	push	{r7}
 8019fa0:	b085      	sub	sp, #20
 8019fa2:	af00      	add	r7, sp, #0
 8019fa4:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 8019fa6:	2301      	movs	r3, #1
 8019fa8:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 8019faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8019fac:	4618      	mov	r0, r3
 8019fae:	3714      	adds	r7, #20
 8019fb0:	46bd      	mov	sp, r7
 8019fb2:	bc80      	pop	{r7}
 8019fb4:	4770      	bx	lr

08019fb6 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 8019fb6:	b480      	push	{r7}
 8019fb8:	b083      	sub	sp, #12
 8019fba:	af00      	add	r7, sp, #0
 8019fbc:	6078      	str	r0, [r7, #4]
 8019fbe:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 8019fc0:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 8019fc2:	4618      	mov	r0, r3
 8019fc4:	370c      	adds	r7, #12
 8019fc6:	46bd      	mov	sp, r7
 8019fc8:	bc80      	pop	{r7}
 8019fca:	4770      	bx	lr

08019fcc <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8019fcc:	b580      	push	{r7, lr}
 8019fce:	b084      	sub	sp, #16
 8019fd0:	af00      	add	r7, sp, #0
 8019fd2:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8019fd4:	687b      	ldr	r3, [r7, #4]
 8019fd6:	2b00      	cmp	r3, #0
 8019fd8:	d002      	beq.n	8019fe0 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8019fda:	4a1d      	ldr	r2, [pc, #116]	@ (801a050 <SUBGRF_Init+0x84>)
 8019fdc:	687b      	ldr	r3, [r7, #4]
 8019fde:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8019fe0:	f7e7 fe2c 	bl	8001c3c <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8019fe4:	2002      	movs	r0, #2
 8019fe6:	f001 f8ff 	bl	801b1e8 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8019fea:	4b1a      	ldr	r3, [pc, #104]	@ (801a054 <SUBGRF_Init+0x88>)
 8019fec:	2200      	movs	r2, #0
 8019fee:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8019ff0:	2000      	movs	r0, #0
 8019ff2:	f000 f97d 	bl	801a2f0 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8019ff6:	f7f0 ff09 	bl	800ae0c <RBI_IsTCXO>
 8019ffa:	4603      	mov	r3, r0
 8019ffc:	2b01      	cmp	r3, #1
 8019ffe:	d10e      	bne.n	801a01e <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801a000:	2140      	movs	r1, #64	@ 0x40
 801a002:	2001      	movs	r0, #1
 801a004:	f000 fb82 	bl	801a70c <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801a008:	2100      	movs	r1, #0
 801a00a:	f640 1011 	movw	r0, #2321	@ 0x911
 801a00e:	f000 fef3 	bl	801adf8 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801a012:	237f      	movs	r3, #127	@ 0x7f
 801a014:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801a016:	7b38      	ldrb	r0, [r7, #12]
 801a018:	f000 fa8b 	bl	801a532 <SUBGRF_Calibrate>
 801a01c:	e009      	b.n	801a032 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801a01e:	2120      	movs	r1, #32
 801a020:	f640 1011 	movw	r0, #2321	@ 0x911
 801a024:	f000 fee8 	bl	801adf8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801a028:	2120      	movs	r1, #32
 801a02a:	f640 1012 	movw	r0, #2322	@ 0x912
 801a02e:	f000 fee3 	bl	801adf8 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801a032:	210e      	movs	r1, #14
 801a034:	f640 101f 	movw	r0, #2335	@ 0x91f
 801a038:	f000 fede 	bl	801adf8 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 801a03c:	f7f0 feca 	bl	800add4 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801a040:	4b05      	ldr	r3, [pc, #20]	@ (801a058 <SUBGRF_Init+0x8c>)
 801a042:	2201      	movs	r2, #1
 801a044:	701a      	strb	r2, [r3, #0]
}
 801a046:	bf00      	nop
 801a048:	3710      	adds	r7, #16
 801a04a:	46bd      	mov	sp, r7
 801a04c:	bd80      	pop	{r7, pc}
 801a04e:	bf00      	nop
 801a050:	20001e3c 	.word	0x20001e3c
 801a054:	20001e38 	.word	0x20001e38
 801a058:	20001e30 	.word	0x20001e30

0801a05c <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801a05c:	b480      	push	{r7}
 801a05e:	af00      	add	r7, sp, #0
    return OperatingMode;
 801a060:	4b02      	ldr	r3, [pc, #8]	@ (801a06c <SUBGRF_GetOperatingMode+0x10>)
 801a062:	781b      	ldrb	r3, [r3, #0]
}
 801a064:	4618      	mov	r0, r3
 801a066:	46bd      	mov	sp, r7
 801a068:	bc80      	pop	{r7}
 801a06a:	4770      	bx	lr
 801a06c:	20001e30 	.word	0x20001e30

0801a070 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801a070:	b580      	push	{r7, lr}
 801a072:	b082      	sub	sp, #8
 801a074:	af00      	add	r7, sp, #0
 801a076:	6078      	str	r0, [r7, #4]
 801a078:	460b      	mov	r3, r1
 801a07a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801a07c:	78fb      	ldrb	r3, [r7, #3]
 801a07e:	461a      	mov	r2, r3
 801a080:	6879      	ldr	r1, [r7, #4]
 801a082:	2000      	movs	r0, #0
 801a084:	f000 ff24 	bl	801aed0 <SUBGRF_WriteBuffer>
}
 801a088:	bf00      	nop
 801a08a:	3708      	adds	r7, #8
 801a08c:	46bd      	mov	sp, r7
 801a08e:	bd80      	pop	{r7, pc}

0801a090 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801a090:	b580      	push	{r7, lr}
 801a092:	b086      	sub	sp, #24
 801a094:	af00      	add	r7, sp, #0
 801a096:	60f8      	str	r0, [r7, #12]
 801a098:	60b9      	str	r1, [r7, #8]
 801a09a:	4613      	mov	r3, r2
 801a09c:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801a09e:	2300      	movs	r3, #0
 801a0a0:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801a0a2:	f107 0317 	add.w	r3, r7, #23
 801a0a6:	4619      	mov	r1, r3
 801a0a8:	68b8      	ldr	r0, [r7, #8]
 801a0aa:	f000 fe27 	bl	801acfc <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801a0ae:	68bb      	ldr	r3, [r7, #8]
 801a0b0:	781b      	ldrb	r3, [r3, #0]
 801a0b2:	79fa      	ldrb	r2, [r7, #7]
 801a0b4:	429a      	cmp	r2, r3
 801a0b6:	d201      	bcs.n	801a0bc <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801a0b8:	2301      	movs	r3, #1
 801a0ba:	e007      	b.n	801a0cc <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801a0bc:	7df8      	ldrb	r0, [r7, #23]
 801a0be:	68bb      	ldr	r3, [r7, #8]
 801a0c0:	781b      	ldrb	r3, [r3, #0]
 801a0c2:	461a      	mov	r2, r3
 801a0c4:	68f9      	ldr	r1, [r7, #12]
 801a0c6:	f000 ff25 	bl	801af14 <SUBGRF_ReadBuffer>

    return 0;
 801a0ca:	2300      	movs	r3, #0
}
 801a0cc:	4618      	mov	r0, r3
 801a0ce:	3718      	adds	r7, #24
 801a0d0:	46bd      	mov	sp, r7
 801a0d2:	bd80      	pop	{r7, pc}

0801a0d4 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801a0d4:	b580      	push	{r7, lr}
 801a0d6:	b084      	sub	sp, #16
 801a0d8:	af00      	add	r7, sp, #0
 801a0da:	60f8      	str	r0, [r7, #12]
 801a0dc:	460b      	mov	r3, r1
 801a0de:	607a      	str	r2, [r7, #4]
 801a0e0:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801a0e2:	7afb      	ldrb	r3, [r7, #11]
 801a0e4:	4619      	mov	r1, r3
 801a0e6:	68f8      	ldr	r0, [r7, #12]
 801a0e8:	f7ff ffc2 	bl	801a070 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801a0ec:	6878      	ldr	r0, [r7, #4]
 801a0ee:	f000 f91b 	bl	801a328 <SUBGRF_SetTx>
}
 801a0f2:	bf00      	nop
 801a0f4:	3710      	adds	r7, #16
 801a0f6:	46bd      	mov	sp, r7
 801a0f8:	bd80      	pop	{r7, pc}

0801a0fa <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801a0fa:	b580      	push	{r7, lr}
 801a0fc:	b082      	sub	sp, #8
 801a0fe:	af00      	add	r7, sp, #0
 801a100:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801a102:	2208      	movs	r2, #8
 801a104:	6879      	ldr	r1, [r7, #4]
 801a106:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 801a10a:	f000 fe9d 	bl	801ae48 <SUBGRF_WriteRegisters>
    return 0;
 801a10e:	2300      	movs	r3, #0
}
 801a110:	4618      	mov	r0, r3
 801a112:	3708      	adds	r7, #8
 801a114:	46bd      	mov	sp, r7
 801a116:	bd80      	pop	{r7, pc}

0801a118 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801a118:	b580      	push	{r7, lr}
 801a11a:	b084      	sub	sp, #16
 801a11c:	af00      	add	r7, sp, #0
 801a11e:	4603      	mov	r3, r0
 801a120:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801a122:	88fb      	ldrh	r3, [r7, #6]
 801a124:	0a1b      	lsrs	r3, r3, #8
 801a126:	b29b      	uxth	r3, r3
 801a128:	b2db      	uxtb	r3, r3
 801a12a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801a12c:	88fb      	ldrh	r3, [r7, #6]
 801a12e:	b2db      	uxtb	r3, r3
 801a130:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801a132:	f000 fb6f 	bl	801a814 <SUBGRF_GetPacketType>
 801a136:	4603      	mov	r3, r0
 801a138:	2b00      	cmp	r3, #0
 801a13a:	d108      	bne.n	801a14e <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801a13c:	f107 030c 	add.w	r3, r7, #12
 801a140:	2202      	movs	r2, #2
 801a142:	4619      	mov	r1, r3
 801a144:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 801a148:	f000 fe7e 	bl	801ae48 <SUBGRF_WriteRegisters>
            break;
 801a14c:	e000      	b.n	801a150 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801a14e:	bf00      	nop
    }
}
 801a150:	bf00      	nop
 801a152:	3710      	adds	r7, #16
 801a154:	46bd      	mov	sp, r7
 801a156:	bd80      	pop	{r7, pc}

0801a158 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801a158:	b580      	push	{r7, lr}
 801a15a:	b084      	sub	sp, #16
 801a15c:	af00      	add	r7, sp, #0
 801a15e:	4603      	mov	r3, r0
 801a160:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801a162:	88fb      	ldrh	r3, [r7, #6]
 801a164:	0a1b      	lsrs	r3, r3, #8
 801a166:	b29b      	uxth	r3, r3
 801a168:	b2db      	uxtb	r3, r3
 801a16a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801a16c:	88fb      	ldrh	r3, [r7, #6]
 801a16e:	b2db      	uxtb	r3, r3
 801a170:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801a172:	f000 fb4f 	bl	801a814 <SUBGRF_GetPacketType>
 801a176:	4603      	mov	r3, r0
 801a178:	2b00      	cmp	r3, #0
 801a17a:	d108      	bne.n	801a18e <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801a17c:	f107 030c 	add.w	r3, r7, #12
 801a180:	2202      	movs	r2, #2
 801a182:	4619      	mov	r1, r3
 801a184:	f240 60be 	movw	r0, #1726	@ 0x6be
 801a188:	f000 fe5e 	bl	801ae48 <SUBGRF_WriteRegisters>
            break;
 801a18c:	e000      	b.n	801a190 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801a18e:	bf00      	nop
    }
}
 801a190:	bf00      	nop
 801a192:	3710      	adds	r7, #16
 801a194:	46bd      	mov	sp, r7
 801a196:	bd80      	pop	{r7, pc}

0801a198 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801a198:	b580      	push	{r7, lr}
 801a19a:	b084      	sub	sp, #16
 801a19c:	af00      	add	r7, sp, #0
 801a19e:	4603      	mov	r3, r0
 801a1a0:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801a1a2:	2300      	movs	r3, #0
 801a1a4:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801a1a6:	f000 fb35 	bl	801a814 <SUBGRF_GetPacketType>
 801a1aa:	4603      	mov	r3, r0
 801a1ac:	2b00      	cmp	r3, #0
 801a1ae:	d121      	bne.n	801a1f4 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801a1b0:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 801a1b4:	f000 fe34 	bl	801ae20 <SUBGRF_ReadRegister>
 801a1b8:	4603      	mov	r3, r0
 801a1ba:	f023 0301 	bic.w	r3, r3, #1
 801a1be:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801a1c0:	88fb      	ldrh	r3, [r7, #6]
 801a1c2:	0a1b      	lsrs	r3, r3, #8
 801a1c4:	b29b      	uxth	r3, r3
 801a1c6:	b25b      	sxtb	r3, r3
 801a1c8:	f003 0301 	and.w	r3, r3, #1
 801a1cc:	b25a      	sxtb	r2, r3
 801a1ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a1d2:	4313      	orrs	r3, r2
 801a1d4:	b25b      	sxtb	r3, r3
 801a1d6:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801a1d8:	7bfb      	ldrb	r3, [r7, #15]
 801a1da:	4619      	mov	r1, r3
 801a1dc:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 801a1e0:	f000 fe0a 	bl	801adf8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801a1e4:	88fb      	ldrh	r3, [r7, #6]
 801a1e6:	b2db      	uxtb	r3, r3
 801a1e8:	4619      	mov	r1, r3
 801a1ea:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 801a1ee:	f000 fe03 	bl	801adf8 <SUBGRF_WriteRegister>
            break;
 801a1f2:	e000      	b.n	801a1f6 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801a1f4:	bf00      	nop
    }
}
 801a1f6:	bf00      	nop
 801a1f8:	3710      	adds	r7, #16
 801a1fa:	46bd      	mov	sp, r7
 801a1fc:	bd80      	pop	{r7, pc}

0801a1fe <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801a1fe:	b580      	push	{r7, lr}
 801a200:	b082      	sub	sp, #8
 801a202:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801a204:	2300      	movs	r3, #0
 801a206:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801a208:	2300      	movs	r3, #0
 801a20a:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801a20c:	2300      	movs	r3, #0
 801a20e:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801a210:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801a214:	f000 fe04 	bl	801ae20 <SUBGRF_ReadRegister>
 801a218:	4603      	mov	r3, r0
 801a21a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801a21c:	79fb      	ldrb	r3, [r7, #7]
 801a21e:	f023 0301 	bic.w	r3, r3, #1
 801a222:	b2db      	uxtb	r3, r3
 801a224:	4619      	mov	r1, r3
 801a226:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801a22a:	f000 fde5 	bl	801adf8 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801a22e:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801a232:	f000 fdf5 	bl	801ae20 <SUBGRF_ReadRegister>
 801a236:	4603      	mov	r3, r0
 801a238:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801a23a:	79bb      	ldrb	r3, [r7, #6]
 801a23c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a240:	b2db      	uxtb	r3, r3
 801a242:	4619      	mov	r1, r3
 801a244:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801a248:	f000 fdd6 	bl	801adf8 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801a24c:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 801a250:	f000 f88a 	bl	801a368 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801a254:	463b      	mov	r3, r7
 801a256:	2204      	movs	r2, #4
 801a258:	4619      	mov	r1, r3
 801a25a:	f640 0019 	movw	r0, #2073	@ 0x819
 801a25e:	f000 fe15 	bl	801ae8c <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801a262:	2000      	movs	r0, #0
 801a264:	f000 f844 	bl	801a2f0 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801a268:	79fb      	ldrb	r3, [r7, #7]
 801a26a:	4619      	mov	r1, r3
 801a26c:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801a270:	f000 fdc2 	bl	801adf8 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801a274:	79bb      	ldrb	r3, [r7, #6]
 801a276:	4619      	mov	r1, r3
 801a278:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801a27c:	f000 fdbc 	bl	801adf8 <SUBGRF_WriteRegister>

    return number;
 801a280:	683b      	ldr	r3, [r7, #0]
}
 801a282:	4618      	mov	r0, r3
 801a284:	3708      	adds	r7, #8
 801a286:	46bd      	mov	sp, r7
 801a288:	bd80      	pop	{r7, pc}
	...

0801a28c <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801a28c:	b580      	push	{r7, lr}
 801a28e:	b084      	sub	sp, #16
 801a290:	af00      	add	r7, sp, #0
 801a292:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801a294:	2000      	movs	r0, #0
 801a296:	f7f0 fda4 	bl	800ade2 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801a29a:	2002      	movs	r0, #2
 801a29c:	f000 ffa4 	bl	801b1e8 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801a2a0:	793b      	ldrb	r3, [r7, #4]
 801a2a2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801a2a6:	b2db      	uxtb	r3, r3
 801a2a8:	009b      	lsls	r3, r3, #2
 801a2aa:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801a2ac:	793b      	ldrb	r3, [r7, #4]
 801a2ae:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801a2b2:	b2db      	uxtb	r3, r3
 801a2b4:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801a2b6:	b25b      	sxtb	r3, r3
 801a2b8:	4313      	orrs	r3, r2
 801a2ba:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801a2bc:	793b      	ldrb	r3, [r7, #4]
 801a2be:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801a2c2:	b2db      	uxtb	r3, r3
 801a2c4:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801a2c6:	4313      	orrs	r3, r2
 801a2c8:	b25b      	sxtb	r3, r3
 801a2ca:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801a2cc:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801a2ce:	f107 030f 	add.w	r3, r7, #15
 801a2d2:	2201      	movs	r2, #1
 801a2d4:	4619      	mov	r1, r3
 801a2d6:	2084      	movs	r0, #132	@ 0x84
 801a2d8:	f000 fe3e 	bl	801af58 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801a2dc:	4b03      	ldr	r3, [pc, #12]	@ (801a2ec <SUBGRF_SetSleep+0x60>)
 801a2de:	2200      	movs	r2, #0
 801a2e0:	701a      	strb	r2, [r3, #0]
}
 801a2e2:	bf00      	nop
 801a2e4:	3710      	adds	r7, #16
 801a2e6:	46bd      	mov	sp, r7
 801a2e8:	bd80      	pop	{r7, pc}
 801a2ea:	bf00      	nop
 801a2ec:	20001e30 	.word	0x20001e30

0801a2f0 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801a2f0:	b580      	push	{r7, lr}
 801a2f2:	b082      	sub	sp, #8
 801a2f4:	af00      	add	r7, sp, #0
 801a2f6:	4603      	mov	r3, r0
 801a2f8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801a2fa:	1dfb      	adds	r3, r7, #7
 801a2fc:	2201      	movs	r2, #1
 801a2fe:	4619      	mov	r1, r3
 801a300:	2080      	movs	r0, #128	@ 0x80
 801a302:	f000 fe29 	bl	801af58 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801a306:	79fb      	ldrb	r3, [r7, #7]
 801a308:	2b00      	cmp	r3, #0
 801a30a:	d103      	bne.n	801a314 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801a30c:	4b05      	ldr	r3, [pc, #20]	@ (801a324 <SUBGRF_SetStandby+0x34>)
 801a30e:	2201      	movs	r2, #1
 801a310:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801a312:	e002      	b.n	801a31a <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801a314:	4b03      	ldr	r3, [pc, #12]	@ (801a324 <SUBGRF_SetStandby+0x34>)
 801a316:	2202      	movs	r2, #2
 801a318:	701a      	strb	r2, [r3, #0]
}
 801a31a:	bf00      	nop
 801a31c:	3708      	adds	r7, #8
 801a31e:	46bd      	mov	sp, r7
 801a320:	bd80      	pop	{r7, pc}
 801a322:	bf00      	nop
 801a324:	20001e30 	.word	0x20001e30

0801a328 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801a328:	b580      	push	{r7, lr}
 801a32a:	b084      	sub	sp, #16
 801a32c:	af00      	add	r7, sp, #0
 801a32e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801a330:	4b0c      	ldr	r3, [pc, #48]	@ (801a364 <SUBGRF_SetTx+0x3c>)
 801a332:	2204      	movs	r2, #4
 801a334:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a336:	687b      	ldr	r3, [r7, #4]
 801a338:	0c1b      	lsrs	r3, r3, #16
 801a33a:	b2db      	uxtb	r3, r3
 801a33c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a33e:	687b      	ldr	r3, [r7, #4]
 801a340:	0a1b      	lsrs	r3, r3, #8
 801a342:	b2db      	uxtb	r3, r3
 801a344:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801a346:	687b      	ldr	r3, [r7, #4]
 801a348:	b2db      	uxtb	r3, r3
 801a34a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801a34c:	f107 030c 	add.w	r3, r7, #12
 801a350:	2203      	movs	r2, #3
 801a352:	4619      	mov	r1, r3
 801a354:	2083      	movs	r0, #131	@ 0x83
 801a356:	f000 fdff 	bl	801af58 <SUBGRF_WriteCommand>
}
 801a35a:	bf00      	nop
 801a35c:	3710      	adds	r7, #16
 801a35e:	46bd      	mov	sp, r7
 801a360:	bd80      	pop	{r7, pc}
 801a362:	bf00      	nop
 801a364:	20001e30 	.word	0x20001e30

0801a368 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801a368:	b580      	push	{r7, lr}
 801a36a:	b084      	sub	sp, #16
 801a36c:	af00      	add	r7, sp, #0
 801a36e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801a370:	4b0c      	ldr	r3, [pc, #48]	@ (801a3a4 <SUBGRF_SetRx+0x3c>)
 801a372:	2205      	movs	r2, #5
 801a374:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a376:	687b      	ldr	r3, [r7, #4]
 801a378:	0c1b      	lsrs	r3, r3, #16
 801a37a:	b2db      	uxtb	r3, r3
 801a37c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a37e:	687b      	ldr	r3, [r7, #4]
 801a380:	0a1b      	lsrs	r3, r3, #8
 801a382:	b2db      	uxtb	r3, r3
 801a384:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801a386:	687b      	ldr	r3, [r7, #4]
 801a388:	b2db      	uxtb	r3, r3
 801a38a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801a38c:	f107 030c 	add.w	r3, r7, #12
 801a390:	2203      	movs	r2, #3
 801a392:	4619      	mov	r1, r3
 801a394:	2082      	movs	r0, #130	@ 0x82
 801a396:	f000 fddf 	bl	801af58 <SUBGRF_WriteCommand>
}
 801a39a:	bf00      	nop
 801a39c:	3710      	adds	r7, #16
 801a39e:	46bd      	mov	sp, r7
 801a3a0:	bd80      	pop	{r7, pc}
 801a3a2:	bf00      	nop
 801a3a4:	20001e30 	.word	0x20001e30

0801a3a8 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801a3a8:	b580      	push	{r7, lr}
 801a3aa:	b084      	sub	sp, #16
 801a3ac:	af00      	add	r7, sp, #0
 801a3ae:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801a3b0:	4b0e      	ldr	r3, [pc, #56]	@ (801a3ec <SUBGRF_SetRxBoosted+0x44>)
 801a3b2:	2205      	movs	r2, #5
 801a3b4:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801a3b6:	2197      	movs	r1, #151	@ 0x97
 801a3b8:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 801a3bc:	f000 fd1c 	bl	801adf8 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a3c0:	687b      	ldr	r3, [r7, #4]
 801a3c2:	0c1b      	lsrs	r3, r3, #16
 801a3c4:	b2db      	uxtb	r3, r3
 801a3c6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	0a1b      	lsrs	r3, r3, #8
 801a3cc:	b2db      	uxtb	r3, r3
 801a3ce:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801a3d0:	687b      	ldr	r3, [r7, #4]
 801a3d2:	b2db      	uxtb	r3, r3
 801a3d4:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801a3d6:	f107 030c 	add.w	r3, r7, #12
 801a3da:	2203      	movs	r2, #3
 801a3dc:	4619      	mov	r1, r3
 801a3de:	2082      	movs	r0, #130	@ 0x82
 801a3e0:	f000 fdba 	bl	801af58 <SUBGRF_WriteCommand>
}
 801a3e4:	bf00      	nop
 801a3e6:	3710      	adds	r7, #16
 801a3e8:	46bd      	mov	sp, r7
 801a3ea:	bd80      	pop	{r7, pc}
 801a3ec:	20001e30 	.word	0x20001e30

0801a3f0 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801a3f0:	b580      	push	{r7, lr}
 801a3f2:	b084      	sub	sp, #16
 801a3f4:	af00      	add	r7, sp, #0
 801a3f6:	6078      	str	r0, [r7, #4]
 801a3f8:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801a3fa:	687b      	ldr	r3, [r7, #4]
 801a3fc:	0c1b      	lsrs	r3, r3, #16
 801a3fe:	b2db      	uxtb	r3, r3
 801a400:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801a402:	687b      	ldr	r3, [r7, #4]
 801a404:	0a1b      	lsrs	r3, r3, #8
 801a406:	b2db      	uxtb	r3, r3
 801a408:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801a40a:	687b      	ldr	r3, [r7, #4]
 801a40c:	b2db      	uxtb	r3, r3
 801a40e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801a410:	683b      	ldr	r3, [r7, #0]
 801a412:	0c1b      	lsrs	r3, r3, #16
 801a414:	b2db      	uxtb	r3, r3
 801a416:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801a418:	683b      	ldr	r3, [r7, #0]
 801a41a:	0a1b      	lsrs	r3, r3, #8
 801a41c:	b2db      	uxtb	r3, r3
 801a41e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801a420:	683b      	ldr	r3, [r7, #0]
 801a422:	b2db      	uxtb	r3, r3
 801a424:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801a426:	f107 0308 	add.w	r3, r7, #8
 801a42a:	2206      	movs	r2, #6
 801a42c:	4619      	mov	r1, r3
 801a42e:	2094      	movs	r0, #148	@ 0x94
 801a430:	f000 fd92 	bl	801af58 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801a434:	4b03      	ldr	r3, [pc, #12]	@ (801a444 <SUBGRF_SetRxDutyCycle+0x54>)
 801a436:	2206      	movs	r2, #6
 801a438:	701a      	strb	r2, [r3, #0]
}
 801a43a:	bf00      	nop
 801a43c:	3710      	adds	r7, #16
 801a43e:	46bd      	mov	sp, r7
 801a440:	bd80      	pop	{r7, pc}
 801a442:	bf00      	nop
 801a444:	20001e30 	.word	0x20001e30

0801a448 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801a448:	b580      	push	{r7, lr}
 801a44a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801a44c:	2200      	movs	r2, #0
 801a44e:	2100      	movs	r1, #0
 801a450:	20c5      	movs	r0, #197	@ 0xc5
 801a452:	f000 fd81 	bl	801af58 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801a456:	4b02      	ldr	r3, [pc, #8]	@ (801a460 <SUBGRF_SetCad+0x18>)
 801a458:	2207      	movs	r2, #7
 801a45a:	701a      	strb	r2, [r3, #0]
}
 801a45c:	bf00      	nop
 801a45e:	bd80      	pop	{r7, pc}
 801a460:	20001e30 	.word	0x20001e30

0801a464 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801a464:	b580      	push	{r7, lr}
 801a466:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801a468:	2200      	movs	r2, #0
 801a46a:	2100      	movs	r1, #0
 801a46c:	20d1      	movs	r0, #209	@ 0xd1
 801a46e:	f000 fd73 	bl	801af58 <SUBGRF_WriteCommand>
}
 801a472:	bf00      	nop
 801a474:	bd80      	pop	{r7, pc}

0801a476 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801a476:	b580      	push	{r7, lr}
 801a478:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801a47a:	2200      	movs	r2, #0
 801a47c:	2100      	movs	r1, #0
 801a47e:	20d2      	movs	r0, #210	@ 0xd2
 801a480:	f000 fd6a 	bl	801af58 <SUBGRF_WriteCommand>
}
 801a484:	bf00      	nop
 801a486:	bd80      	pop	{r7, pc}

0801a488 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801a488:	b580      	push	{r7, lr}
 801a48a:	b082      	sub	sp, #8
 801a48c:	af00      	add	r7, sp, #0
 801a48e:	4603      	mov	r3, r0
 801a490:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801a492:	1dfb      	adds	r3, r7, #7
 801a494:	2201      	movs	r2, #1
 801a496:	4619      	mov	r1, r3
 801a498:	209f      	movs	r0, #159	@ 0x9f
 801a49a:	f000 fd5d 	bl	801af58 <SUBGRF_WriteCommand>
}
 801a49e:	bf00      	nop
 801a4a0:	3708      	adds	r7, #8
 801a4a2:	46bd      	mov	sp, r7
 801a4a4:	bd80      	pop	{r7, pc}

0801a4a6 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801a4a6:	b580      	push	{r7, lr}
 801a4a8:	b084      	sub	sp, #16
 801a4aa:	af00      	add	r7, sp, #0
 801a4ac:	4603      	mov	r3, r0
 801a4ae:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801a4b0:	1dfb      	adds	r3, r7, #7
 801a4b2:	2201      	movs	r2, #1
 801a4b4:	4619      	mov	r1, r3
 801a4b6:	20a0      	movs	r0, #160	@ 0xa0
 801a4b8:	f000 fd4e 	bl	801af58 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801a4bc:	79fb      	ldrb	r3, [r7, #7]
 801a4be:	2b3f      	cmp	r3, #63	@ 0x3f
 801a4c0:	d91c      	bls.n	801a4fc <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801a4c2:	79fb      	ldrb	r3, [r7, #7]
 801a4c4:	085b      	lsrs	r3, r3, #1
 801a4c6:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801a4c8:	2300      	movs	r3, #0
 801a4ca:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801a4cc:	2300      	movs	r3, #0
 801a4ce:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801a4d0:	e005      	b.n	801a4de <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801a4d2:	7bfb      	ldrb	r3, [r7, #15]
 801a4d4:	089b      	lsrs	r3, r3, #2
 801a4d6:	73fb      	strb	r3, [r7, #15]
            exp++;
 801a4d8:	7bbb      	ldrb	r3, [r7, #14]
 801a4da:	3301      	adds	r3, #1
 801a4dc:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801a4de:	7bfb      	ldrb	r3, [r7, #15]
 801a4e0:	2b1f      	cmp	r3, #31
 801a4e2:	d8f6      	bhi.n	801a4d2 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801a4e4:	7bfb      	ldrb	r3, [r7, #15]
 801a4e6:	00db      	lsls	r3, r3, #3
 801a4e8:	b2da      	uxtb	r2, r3
 801a4ea:	7bbb      	ldrb	r3, [r7, #14]
 801a4ec:	4413      	add	r3, r2
 801a4ee:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801a4f0:	7b7b      	ldrb	r3, [r7, #13]
 801a4f2:	4619      	mov	r1, r3
 801a4f4:	f240 7006 	movw	r0, #1798	@ 0x706
 801a4f8:	f000 fc7e 	bl	801adf8 <SUBGRF_WriteRegister>
    }
}
 801a4fc:	bf00      	nop
 801a4fe:	3710      	adds	r7, #16
 801a500:	46bd      	mov	sp, r7
 801a502:	bd80      	pop	{r7, pc}

0801a504 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801a504:	b580      	push	{r7, lr}
 801a506:	b082      	sub	sp, #8
 801a508:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801a50a:	f7f0 fc86 	bl	800ae1a <RBI_IsDCDC>
 801a50e:	4603      	mov	r3, r0
 801a510:	2b01      	cmp	r3, #1
 801a512:	d102      	bne.n	801a51a <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801a514:	2301      	movs	r3, #1
 801a516:	71fb      	strb	r3, [r7, #7]
 801a518:	e001      	b.n	801a51e <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801a51a:	2300      	movs	r3, #0
 801a51c:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801a51e:	1dfb      	adds	r3, r7, #7
 801a520:	2201      	movs	r2, #1
 801a522:	4619      	mov	r1, r3
 801a524:	2096      	movs	r0, #150	@ 0x96
 801a526:	f000 fd17 	bl	801af58 <SUBGRF_WriteCommand>
}
 801a52a:	bf00      	nop
 801a52c:	3708      	adds	r7, #8
 801a52e:	46bd      	mov	sp, r7
 801a530:	bd80      	pop	{r7, pc}

0801a532 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801a532:	b580      	push	{r7, lr}
 801a534:	b084      	sub	sp, #16
 801a536:	af00      	add	r7, sp, #0
 801a538:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801a53a:	793b      	ldrb	r3, [r7, #4]
 801a53c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801a540:	b2db      	uxtb	r3, r3
 801a542:	019b      	lsls	r3, r3, #6
 801a544:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801a546:	793b      	ldrb	r3, [r7, #4]
 801a548:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801a54c:	b2db      	uxtb	r3, r3
 801a54e:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801a550:	b25b      	sxtb	r3, r3
 801a552:	4313      	orrs	r3, r2
 801a554:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801a556:	793b      	ldrb	r3, [r7, #4]
 801a558:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801a55c:	b2db      	uxtb	r3, r3
 801a55e:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801a560:	b25b      	sxtb	r3, r3
 801a562:	4313      	orrs	r3, r2
 801a564:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801a566:	793b      	ldrb	r3, [r7, #4]
 801a568:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801a56c:	b2db      	uxtb	r3, r3
 801a56e:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801a570:	b25b      	sxtb	r3, r3
 801a572:	4313      	orrs	r3, r2
 801a574:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801a576:	793b      	ldrb	r3, [r7, #4]
 801a578:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801a57c:	b2db      	uxtb	r3, r3
 801a57e:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801a580:	b25b      	sxtb	r3, r3
 801a582:	4313      	orrs	r3, r2
 801a584:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801a586:	793b      	ldrb	r3, [r7, #4]
 801a588:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801a58c:	b2db      	uxtb	r3, r3
 801a58e:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801a590:	b25b      	sxtb	r3, r3
 801a592:	4313      	orrs	r3, r2
 801a594:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801a596:	793b      	ldrb	r3, [r7, #4]
 801a598:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801a59c:	b2db      	uxtb	r3, r3
 801a59e:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801a5a0:	4313      	orrs	r3, r2
 801a5a2:	b25b      	sxtb	r3, r3
 801a5a4:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801a5a6:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801a5a8:	f107 030f 	add.w	r3, r7, #15
 801a5ac:	2201      	movs	r2, #1
 801a5ae:	4619      	mov	r1, r3
 801a5b0:	2089      	movs	r0, #137	@ 0x89
 801a5b2:	f000 fcd1 	bl	801af58 <SUBGRF_WriteCommand>
}
 801a5b6:	bf00      	nop
 801a5b8:	3710      	adds	r7, #16
 801a5ba:	46bd      	mov	sp, r7
 801a5bc:	bd80      	pop	{r7, pc}
	...

0801a5c0 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801a5c0:	b580      	push	{r7, lr}
 801a5c2:	b084      	sub	sp, #16
 801a5c4:	af00      	add	r7, sp, #0
 801a5c6:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801a5c8:	687b      	ldr	r3, [r7, #4]
 801a5ca:	4a1d      	ldr	r2, [pc, #116]	@ (801a640 <SUBGRF_CalibrateImage+0x80>)
 801a5cc:	4293      	cmp	r3, r2
 801a5ce:	d904      	bls.n	801a5da <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801a5d0:	23e1      	movs	r3, #225	@ 0xe1
 801a5d2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801a5d4:	23e9      	movs	r3, #233	@ 0xe9
 801a5d6:	737b      	strb	r3, [r7, #13]
 801a5d8:	e027      	b.n	801a62a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 801a5da:	687b      	ldr	r3, [r7, #4]
 801a5dc:	4a19      	ldr	r2, [pc, #100]	@ (801a644 <SUBGRF_CalibrateImage+0x84>)
 801a5de:	4293      	cmp	r3, r2
 801a5e0:	d904      	bls.n	801a5ec <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801a5e2:	23d7      	movs	r3, #215	@ 0xd7
 801a5e4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801a5e6:	23db      	movs	r3, #219	@ 0xdb
 801a5e8:	737b      	strb	r3, [r7, #13]
 801a5ea:	e01e      	b.n	801a62a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 801a5ec:	687b      	ldr	r3, [r7, #4]
 801a5ee:	4a16      	ldr	r2, [pc, #88]	@ (801a648 <SUBGRF_CalibrateImage+0x88>)
 801a5f0:	4293      	cmp	r3, r2
 801a5f2:	d904      	bls.n	801a5fe <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801a5f4:	23c1      	movs	r3, #193	@ 0xc1
 801a5f6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801a5f8:	23c5      	movs	r3, #197	@ 0xc5
 801a5fa:	737b      	strb	r3, [r7, #13]
 801a5fc:	e015      	b.n	801a62a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 801a5fe:	687b      	ldr	r3, [r7, #4]
 801a600:	4a12      	ldr	r2, [pc, #72]	@ (801a64c <SUBGRF_CalibrateImage+0x8c>)
 801a602:	4293      	cmp	r3, r2
 801a604:	d904      	bls.n	801a610 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801a606:	2375      	movs	r3, #117	@ 0x75
 801a608:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801a60a:	2381      	movs	r3, #129	@ 0x81
 801a60c:	737b      	strb	r3, [r7, #13]
 801a60e:	e00c      	b.n	801a62a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 801a610:	687b      	ldr	r3, [r7, #4]
 801a612:	4a0f      	ldr	r2, [pc, #60]	@ (801a650 <SUBGRF_CalibrateImage+0x90>)
 801a614:	4293      	cmp	r3, r2
 801a616:	d904      	bls.n	801a622 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 801a618:	236b      	movs	r3, #107	@ 0x6b
 801a61a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801a61c:	236f      	movs	r3, #111	@ 0x6f
 801a61e:	737b      	strb	r3, [r7, #13]
 801a620:	e003      	b.n	801a62a <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 801a622:	2329      	movs	r3, #41	@ 0x29
 801a624:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 801a626:	232b      	movs	r3, #43	@ 0x2b
 801a628:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801a62a:	f107 030c 	add.w	r3, r7, #12
 801a62e:	2202      	movs	r2, #2
 801a630:	4619      	mov	r1, r3
 801a632:	2098      	movs	r0, #152	@ 0x98
 801a634:	f000 fc90 	bl	801af58 <SUBGRF_WriteCommand>
}
 801a638:	bf00      	nop
 801a63a:	3710      	adds	r7, #16
 801a63c:	46bd      	mov	sp, r7
 801a63e:	bd80      	pop	{r7, pc}
 801a640:	35a4e900 	.word	0x35a4e900
 801a644:	32a9f880 	.word	0x32a9f880
 801a648:	2de54480 	.word	0x2de54480
 801a64c:	1b6b0b00 	.word	0x1b6b0b00
 801a650:	1954fc40 	.word	0x1954fc40

0801a654 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801a654:	b590      	push	{r4, r7, lr}
 801a656:	b085      	sub	sp, #20
 801a658:	af00      	add	r7, sp, #0
 801a65a:	4604      	mov	r4, r0
 801a65c:	4608      	mov	r0, r1
 801a65e:	4611      	mov	r1, r2
 801a660:	461a      	mov	r2, r3
 801a662:	4623      	mov	r3, r4
 801a664:	71fb      	strb	r3, [r7, #7]
 801a666:	4603      	mov	r3, r0
 801a668:	71bb      	strb	r3, [r7, #6]
 801a66a:	460b      	mov	r3, r1
 801a66c:	717b      	strb	r3, [r7, #5]
 801a66e:	4613      	mov	r3, r2
 801a670:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801a672:	79fb      	ldrb	r3, [r7, #7]
 801a674:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801a676:	79bb      	ldrb	r3, [r7, #6]
 801a678:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801a67a:	797b      	ldrb	r3, [r7, #5]
 801a67c:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801a67e:	793b      	ldrb	r3, [r7, #4]
 801a680:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801a682:	f107 030c 	add.w	r3, r7, #12
 801a686:	2204      	movs	r2, #4
 801a688:	4619      	mov	r1, r3
 801a68a:	2095      	movs	r0, #149	@ 0x95
 801a68c:	f000 fc64 	bl	801af58 <SUBGRF_WriteCommand>
}
 801a690:	bf00      	nop
 801a692:	3714      	adds	r7, #20
 801a694:	46bd      	mov	sp, r7
 801a696:	bd90      	pop	{r4, r7, pc}

0801a698 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801a698:	b590      	push	{r4, r7, lr}
 801a69a:	b085      	sub	sp, #20
 801a69c:	af00      	add	r7, sp, #0
 801a69e:	4604      	mov	r4, r0
 801a6a0:	4608      	mov	r0, r1
 801a6a2:	4611      	mov	r1, r2
 801a6a4:	461a      	mov	r2, r3
 801a6a6:	4623      	mov	r3, r4
 801a6a8:	80fb      	strh	r3, [r7, #6]
 801a6aa:	4603      	mov	r3, r0
 801a6ac:	80bb      	strh	r3, [r7, #4]
 801a6ae:	460b      	mov	r3, r1
 801a6b0:	807b      	strh	r3, [r7, #2]
 801a6b2:	4613      	mov	r3, r2
 801a6b4:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801a6b6:	88fb      	ldrh	r3, [r7, #6]
 801a6b8:	0a1b      	lsrs	r3, r3, #8
 801a6ba:	b29b      	uxth	r3, r3
 801a6bc:	b2db      	uxtb	r3, r3
 801a6be:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801a6c0:	88fb      	ldrh	r3, [r7, #6]
 801a6c2:	b2db      	uxtb	r3, r3
 801a6c4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801a6c6:	88bb      	ldrh	r3, [r7, #4]
 801a6c8:	0a1b      	lsrs	r3, r3, #8
 801a6ca:	b29b      	uxth	r3, r3
 801a6cc:	b2db      	uxtb	r3, r3
 801a6ce:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801a6d0:	88bb      	ldrh	r3, [r7, #4]
 801a6d2:	b2db      	uxtb	r3, r3
 801a6d4:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801a6d6:	887b      	ldrh	r3, [r7, #2]
 801a6d8:	0a1b      	lsrs	r3, r3, #8
 801a6da:	b29b      	uxth	r3, r3
 801a6dc:	b2db      	uxtb	r3, r3
 801a6de:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801a6e0:	887b      	ldrh	r3, [r7, #2]
 801a6e2:	b2db      	uxtb	r3, r3
 801a6e4:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801a6e6:	883b      	ldrh	r3, [r7, #0]
 801a6e8:	0a1b      	lsrs	r3, r3, #8
 801a6ea:	b29b      	uxth	r3, r3
 801a6ec:	b2db      	uxtb	r3, r3
 801a6ee:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801a6f0:	883b      	ldrh	r3, [r7, #0]
 801a6f2:	b2db      	uxtb	r3, r3
 801a6f4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801a6f6:	f107 0308 	add.w	r3, r7, #8
 801a6fa:	2208      	movs	r2, #8
 801a6fc:	4619      	mov	r1, r3
 801a6fe:	2008      	movs	r0, #8
 801a700:	f000 fc2a 	bl	801af58 <SUBGRF_WriteCommand>
}
 801a704:	bf00      	nop
 801a706:	3714      	adds	r7, #20
 801a708:	46bd      	mov	sp, r7
 801a70a:	bd90      	pop	{r4, r7, pc}

0801a70c <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801a70c:	b580      	push	{r7, lr}
 801a70e:	b084      	sub	sp, #16
 801a710:	af00      	add	r7, sp, #0
 801a712:	4603      	mov	r3, r0
 801a714:	6039      	str	r1, [r7, #0]
 801a716:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801a718:	79fb      	ldrb	r3, [r7, #7]
 801a71a:	f003 0307 	and.w	r3, r3, #7
 801a71e:	b2db      	uxtb	r3, r3
 801a720:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a722:	683b      	ldr	r3, [r7, #0]
 801a724:	0c1b      	lsrs	r3, r3, #16
 801a726:	b2db      	uxtb	r3, r3
 801a728:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a72a:	683b      	ldr	r3, [r7, #0]
 801a72c:	0a1b      	lsrs	r3, r3, #8
 801a72e:	b2db      	uxtb	r3, r3
 801a730:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801a732:	683b      	ldr	r3, [r7, #0]
 801a734:	b2db      	uxtb	r3, r3
 801a736:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801a738:	f107 030c 	add.w	r3, r7, #12
 801a73c:	2204      	movs	r2, #4
 801a73e:	4619      	mov	r1, r3
 801a740:	2097      	movs	r0, #151	@ 0x97
 801a742:	f000 fc09 	bl	801af58 <SUBGRF_WriteCommand>
}
 801a746:	bf00      	nop
 801a748:	3710      	adds	r7, #16
 801a74a:	46bd      	mov	sp, r7
 801a74c:	bd80      	pop	{r7, pc}
	...

0801a750 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801a750:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801a754:	b084      	sub	sp, #16
 801a756:	af00      	add	r7, sp, #0
 801a758:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801a75a:	2300      	movs	r3, #0
 801a75c:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801a75e:	4b1d      	ldr	r3, [pc, #116]	@ (801a7d4 <SUBGRF_SetRfFrequency+0x84>)
 801a760:	781b      	ldrb	r3, [r3, #0]
 801a762:	f083 0301 	eor.w	r3, r3, #1
 801a766:	b2db      	uxtb	r3, r3
 801a768:	2b00      	cmp	r3, #0
 801a76a:	d005      	beq.n	801a778 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801a76c:	6878      	ldr	r0, [r7, #4]
 801a76e:	f7ff ff27 	bl	801a5c0 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801a772:	4b18      	ldr	r3, [pc, #96]	@ (801a7d4 <SUBGRF_SetRfFrequency+0x84>)
 801a774:	2201      	movs	r2, #1
 801a776:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801a778:	687b      	ldr	r3, [r7, #4]
 801a77a:	2200      	movs	r2, #0
 801a77c:	461c      	mov	r4, r3
 801a77e:	4615      	mov	r5, r2
 801a780:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801a784:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801a788:	4a13      	ldr	r2, [pc, #76]	@ (801a7d8 <SUBGRF_SetRfFrequency+0x88>)
 801a78a:	f04f 0300 	mov.w	r3, #0
 801a78e:	4640      	mov	r0, r8
 801a790:	4649      	mov	r1, r9
 801a792:	f7e6 fa09 	bl	8000ba8 <__aeabi_uldivmod>
 801a796:	4602      	mov	r2, r0
 801a798:	460b      	mov	r3, r1
 801a79a:	4613      	mov	r3, r2
 801a79c:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801a79e:	68fb      	ldr	r3, [r7, #12]
 801a7a0:	0e1b      	lsrs	r3, r3, #24
 801a7a2:	b2db      	uxtb	r3, r3
 801a7a4:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801a7a6:	68fb      	ldr	r3, [r7, #12]
 801a7a8:	0c1b      	lsrs	r3, r3, #16
 801a7aa:	b2db      	uxtb	r3, r3
 801a7ac:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801a7ae:	68fb      	ldr	r3, [r7, #12]
 801a7b0:	0a1b      	lsrs	r3, r3, #8
 801a7b2:	b2db      	uxtb	r3, r3
 801a7b4:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801a7b6:	68fb      	ldr	r3, [r7, #12]
 801a7b8:	b2db      	uxtb	r3, r3
 801a7ba:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801a7bc:	f107 0308 	add.w	r3, r7, #8
 801a7c0:	2204      	movs	r2, #4
 801a7c2:	4619      	mov	r1, r3
 801a7c4:	2086      	movs	r0, #134	@ 0x86
 801a7c6:	f000 fbc7 	bl	801af58 <SUBGRF_WriteCommand>
}
 801a7ca:	bf00      	nop
 801a7cc:	3710      	adds	r7, #16
 801a7ce:	46bd      	mov	sp, r7
 801a7d0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801a7d4:	20001e38 	.word	0x20001e38
 801a7d8:	01e84800 	.word	0x01e84800

0801a7dc <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801a7dc:	b580      	push	{r7, lr}
 801a7de:	b082      	sub	sp, #8
 801a7e0:	af00      	add	r7, sp, #0
 801a7e2:	4603      	mov	r3, r0
 801a7e4:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801a7e6:	79fa      	ldrb	r2, [r7, #7]
 801a7e8:	4b09      	ldr	r3, [pc, #36]	@ (801a810 <SUBGRF_SetPacketType+0x34>)
 801a7ea:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801a7ec:	79fb      	ldrb	r3, [r7, #7]
 801a7ee:	2b00      	cmp	r3, #0
 801a7f0:	d104      	bne.n	801a7fc <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801a7f2:	2100      	movs	r1, #0
 801a7f4:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 801a7f8:	f000 fafe 	bl	801adf8 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801a7fc:	1dfb      	adds	r3, r7, #7
 801a7fe:	2201      	movs	r2, #1
 801a800:	4619      	mov	r1, r3
 801a802:	208a      	movs	r0, #138	@ 0x8a
 801a804:	f000 fba8 	bl	801af58 <SUBGRF_WriteCommand>
}
 801a808:	bf00      	nop
 801a80a:	3708      	adds	r7, #8
 801a80c:	46bd      	mov	sp, r7
 801a80e:	bd80      	pop	{r7, pc}
 801a810:	20001e31 	.word	0x20001e31

0801a814 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801a814:	b480      	push	{r7}
 801a816:	af00      	add	r7, sp, #0
    return PacketType;
 801a818:	4b02      	ldr	r3, [pc, #8]	@ (801a824 <SUBGRF_GetPacketType+0x10>)
 801a81a:	781b      	ldrb	r3, [r3, #0]
}
 801a81c:	4618      	mov	r0, r3
 801a81e:	46bd      	mov	sp, r7
 801a820:	bc80      	pop	{r7}
 801a822:	4770      	bx	lr
 801a824:	20001e31 	.word	0x20001e31

0801a828 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801a828:	b580      	push	{r7, lr}
 801a82a:	b084      	sub	sp, #16
 801a82c:	af00      	add	r7, sp, #0
 801a82e:	4603      	mov	r3, r0
 801a830:	71fb      	strb	r3, [r7, #7]
 801a832:	460b      	mov	r3, r1
 801a834:	71bb      	strb	r3, [r7, #6]
 801a836:	4613      	mov	r3, r2
 801a838:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801a83a:	79fb      	ldrb	r3, [r7, #7]
 801a83c:	2b01      	cmp	r3, #1
 801a83e:	d149      	bne.n	801a8d4 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801a840:	2000      	movs	r0, #0
 801a842:	f7f0 faf1 	bl	800ae28 <RBI_GetRFOMaxPowerConfig>
 801a846:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801a848:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a84c:	68fa      	ldr	r2, [r7, #12]
 801a84e:	429a      	cmp	r2, r3
 801a850:	da01      	bge.n	801a856 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801a852:	68fb      	ldr	r3, [r7, #12]
 801a854:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801a856:	68fb      	ldr	r3, [r7, #12]
 801a858:	2b0e      	cmp	r3, #14
 801a85a:	d10e      	bne.n	801a87a <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801a85c:	2301      	movs	r3, #1
 801a85e:	2201      	movs	r2, #1
 801a860:	2100      	movs	r1, #0
 801a862:	2004      	movs	r0, #4
 801a864:	f7ff fef6 	bl	801a654 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801a868:	79ba      	ldrb	r2, [r7, #6]
 801a86a:	68fb      	ldr	r3, [r7, #12]
 801a86c:	b2db      	uxtb	r3, r3
 801a86e:	1ad3      	subs	r3, r2, r3
 801a870:	b2db      	uxtb	r3, r3
 801a872:	330e      	adds	r3, #14
 801a874:	b2db      	uxtb	r3, r3
 801a876:	71bb      	strb	r3, [r7, #6]
 801a878:	e01f      	b.n	801a8ba <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801a87a:	68fb      	ldr	r3, [r7, #12]
 801a87c:	2b0a      	cmp	r3, #10
 801a87e:	d10e      	bne.n	801a89e <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801a880:	2301      	movs	r3, #1
 801a882:	2201      	movs	r2, #1
 801a884:	2100      	movs	r1, #0
 801a886:	2001      	movs	r0, #1
 801a888:	f7ff fee4 	bl	801a654 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801a88c:	79ba      	ldrb	r2, [r7, #6]
 801a88e:	68fb      	ldr	r3, [r7, #12]
 801a890:	b2db      	uxtb	r3, r3
 801a892:	1ad3      	subs	r3, r2, r3
 801a894:	b2db      	uxtb	r3, r3
 801a896:	330d      	adds	r3, #13
 801a898:	b2db      	uxtb	r3, r3
 801a89a:	71bb      	strb	r3, [r7, #6]
 801a89c:	e00d      	b.n	801a8ba <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801a89e:	2301      	movs	r3, #1
 801a8a0:	2201      	movs	r2, #1
 801a8a2:	2100      	movs	r1, #0
 801a8a4:	2007      	movs	r0, #7
 801a8a6:	f7ff fed5 	bl	801a654 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801a8aa:	79ba      	ldrb	r2, [r7, #6]
 801a8ac:	68fb      	ldr	r3, [r7, #12]
 801a8ae:	b2db      	uxtb	r3, r3
 801a8b0:	1ad3      	subs	r3, r2, r3
 801a8b2:	b2db      	uxtb	r3, r3
 801a8b4:	330e      	adds	r3, #14
 801a8b6:	b2db      	uxtb	r3, r3
 801a8b8:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801a8ba:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a8be:	f113 0f11 	cmn.w	r3, #17
 801a8c2:	da01      	bge.n	801a8c8 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801a8c4:	23ef      	movs	r3, #239	@ 0xef
 801a8c6:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801a8c8:	2118      	movs	r1, #24
 801a8ca:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801a8ce:	f000 fa93 	bl	801adf8 <SUBGRF_WriteRegister>
 801a8d2:	e067      	b.n	801a9a4 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801a8d4:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 801a8d8:	f000 faa2 	bl	801ae20 <SUBGRF_ReadRegister>
 801a8dc:	4603      	mov	r3, r0
 801a8de:	f043 031e 	orr.w	r3, r3, #30
 801a8e2:	b2db      	uxtb	r3, r3
 801a8e4:	4619      	mov	r1, r3
 801a8e6:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 801a8ea:	f000 fa85 	bl	801adf8 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801a8ee:	2001      	movs	r0, #1
 801a8f0:	f7f0 fa9a 	bl	800ae28 <RBI_GetRFOMaxPowerConfig>
 801a8f4:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801a8f6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a8fa:	68fa      	ldr	r2, [r7, #12]
 801a8fc:	429a      	cmp	r2, r3
 801a8fe:	da01      	bge.n	801a904 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801a900:	68fb      	ldr	r3, [r7, #12]
 801a902:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801a904:	68fb      	ldr	r3, [r7, #12]
 801a906:	2b14      	cmp	r3, #20
 801a908:	d10e      	bne.n	801a928 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801a90a:	2301      	movs	r3, #1
 801a90c:	2200      	movs	r2, #0
 801a90e:	2105      	movs	r1, #5
 801a910:	2003      	movs	r0, #3
 801a912:	f7ff fe9f 	bl	801a654 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801a916:	79ba      	ldrb	r2, [r7, #6]
 801a918:	68fb      	ldr	r3, [r7, #12]
 801a91a:	b2db      	uxtb	r3, r3
 801a91c:	1ad3      	subs	r3, r2, r3
 801a91e:	b2db      	uxtb	r3, r3
 801a920:	3316      	adds	r3, #22
 801a922:	b2db      	uxtb	r3, r3
 801a924:	71bb      	strb	r3, [r7, #6]
 801a926:	e031      	b.n	801a98c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801a928:	68fb      	ldr	r3, [r7, #12]
 801a92a:	2b11      	cmp	r3, #17
 801a92c:	d10e      	bne.n	801a94c <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801a92e:	2301      	movs	r3, #1
 801a930:	2200      	movs	r2, #0
 801a932:	2103      	movs	r1, #3
 801a934:	2002      	movs	r0, #2
 801a936:	f7ff fe8d 	bl	801a654 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801a93a:	79ba      	ldrb	r2, [r7, #6]
 801a93c:	68fb      	ldr	r3, [r7, #12]
 801a93e:	b2db      	uxtb	r3, r3
 801a940:	1ad3      	subs	r3, r2, r3
 801a942:	b2db      	uxtb	r3, r3
 801a944:	3316      	adds	r3, #22
 801a946:	b2db      	uxtb	r3, r3
 801a948:	71bb      	strb	r3, [r7, #6]
 801a94a:	e01f      	b.n	801a98c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801a94c:	68fb      	ldr	r3, [r7, #12]
 801a94e:	2b0e      	cmp	r3, #14
 801a950:	d10e      	bne.n	801a970 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801a952:	2301      	movs	r3, #1
 801a954:	2200      	movs	r2, #0
 801a956:	2102      	movs	r1, #2
 801a958:	2002      	movs	r0, #2
 801a95a:	f7ff fe7b 	bl	801a654 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801a95e:	79ba      	ldrb	r2, [r7, #6]
 801a960:	68fb      	ldr	r3, [r7, #12]
 801a962:	b2db      	uxtb	r3, r3
 801a964:	1ad3      	subs	r3, r2, r3
 801a966:	b2db      	uxtb	r3, r3
 801a968:	330e      	adds	r3, #14
 801a96a:	b2db      	uxtb	r3, r3
 801a96c:	71bb      	strb	r3, [r7, #6]
 801a96e:	e00d      	b.n	801a98c <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801a970:	2301      	movs	r3, #1
 801a972:	2200      	movs	r2, #0
 801a974:	2107      	movs	r1, #7
 801a976:	2004      	movs	r0, #4
 801a978:	f7ff fe6c 	bl	801a654 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801a97c:	79ba      	ldrb	r2, [r7, #6]
 801a97e:	68fb      	ldr	r3, [r7, #12]
 801a980:	b2db      	uxtb	r3, r3
 801a982:	1ad3      	subs	r3, r2, r3
 801a984:	b2db      	uxtb	r3, r3
 801a986:	3316      	adds	r3, #22
 801a988:	b2db      	uxtb	r3, r3
 801a98a:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801a98c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a990:	f113 0f09 	cmn.w	r3, #9
 801a994:	da01      	bge.n	801a99a <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801a996:	23f7      	movs	r3, #247	@ 0xf7
 801a998:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801a99a:	2138      	movs	r1, #56	@ 0x38
 801a99c:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801a9a0:	f000 fa2a 	bl	801adf8 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801a9a4:	79bb      	ldrb	r3, [r7, #6]
 801a9a6:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801a9a8:	797b      	ldrb	r3, [r7, #5]
 801a9aa:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801a9ac:	f107 0308 	add.w	r3, r7, #8
 801a9b0:	2202      	movs	r2, #2
 801a9b2:	4619      	mov	r1, r3
 801a9b4:	208e      	movs	r0, #142	@ 0x8e
 801a9b6:	f000 facf 	bl	801af58 <SUBGRF_WriteCommand>
}
 801a9ba:	bf00      	nop
 801a9bc:	3710      	adds	r7, #16
 801a9be:	46bd      	mov	sp, r7
 801a9c0:	bd80      	pop	{r7, pc}
	...

0801a9c4 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801a9c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801a9c8:	b086      	sub	sp, #24
 801a9ca:	af00      	add	r7, sp, #0
 801a9cc:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801a9ce:	2300      	movs	r3, #0
 801a9d0:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801a9d2:	4a61      	ldr	r2, [pc, #388]	@ (801ab58 <SUBGRF_SetModulationParams+0x194>)
 801a9d4:	f107 0308 	add.w	r3, r7, #8
 801a9d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a9dc:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801a9e0:	687b      	ldr	r3, [r7, #4]
 801a9e2:	781a      	ldrb	r2, [r3, #0]
 801a9e4:	4b5d      	ldr	r3, [pc, #372]	@ (801ab5c <SUBGRF_SetModulationParams+0x198>)
 801a9e6:	781b      	ldrb	r3, [r3, #0]
 801a9e8:	429a      	cmp	r2, r3
 801a9ea:	d004      	beq.n	801a9f6 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	781b      	ldrb	r3, [r3, #0]
 801a9f0:	4618      	mov	r0, r3
 801a9f2:	f7ff fef3 	bl	801a7dc <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801a9f6:	687b      	ldr	r3, [r7, #4]
 801a9f8:	781b      	ldrb	r3, [r3, #0]
 801a9fa:	2b03      	cmp	r3, #3
 801a9fc:	f200 80a5 	bhi.w	801ab4a <SUBGRF_SetModulationParams+0x186>
 801aa00:	a201      	add	r2, pc, #4	@ (adr r2, 801aa08 <SUBGRF_SetModulationParams+0x44>)
 801aa02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aa06:	bf00      	nop
 801aa08:	0801aa19 	.word	0x0801aa19
 801aa0c:	0801aad9 	.word	0x0801aad9
 801aa10:	0801aa9b 	.word	0x0801aa9b
 801aa14:	0801ab07 	.word	0x0801ab07
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801aa18:	2308      	movs	r3, #8
 801aa1a:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801aa1c:	687b      	ldr	r3, [r7, #4]
 801aa1e:	685b      	ldr	r3, [r3, #4]
 801aa20:	4a4f      	ldr	r2, [pc, #316]	@ (801ab60 <SUBGRF_SetModulationParams+0x19c>)
 801aa22:	fbb2 f3f3 	udiv	r3, r2, r3
 801aa26:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801aa28:	697b      	ldr	r3, [r7, #20]
 801aa2a:	0c1b      	lsrs	r3, r3, #16
 801aa2c:	b2db      	uxtb	r3, r3
 801aa2e:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801aa30:	697b      	ldr	r3, [r7, #20]
 801aa32:	0a1b      	lsrs	r3, r3, #8
 801aa34:	b2db      	uxtb	r3, r3
 801aa36:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801aa38:	697b      	ldr	r3, [r7, #20]
 801aa3a:	b2db      	uxtb	r3, r3
 801aa3c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801aa3e:	687b      	ldr	r3, [r7, #4]
 801aa40:	7b1b      	ldrb	r3, [r3, #12]
 801aa42:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801aa44:	687b      	ldr	r3, [r7, #4]
 801aa46:	7b5b      	ldrb	r3, [r3, #13]
 801aa48:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	689b      	ldr	r3, [r3, #8]
 801aa4e:	2200      	movs	r2, #0
 801aa50:	461c      	mov	r4, r3
 801aa52:	4615      	mov	r5, r2
 801aa54:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801aa58:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801aa5c:	4a41      	ldr	r2, [pc, #260]	@ (801ab64 <SUBGRF_SetModulationParams+0x1a0>)
 801aa5e:	f04f 0300 	mov.w	r3, #0
 801aa62:	4640      	mov	r0, r8
 801aa64:	4649      	mov	r1, r9
 801aa66:	f7e6 f89f 	bl	8000ba8 <__aeabi_uldivmod>
 801aa6a:	4602      	mov	r2, r0
 801aa6c:	460b      	mov	r3, r1
 801aa6e:	4613      	mov	r3, r2
 801aa70:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801aa72:	697b      	ldr	r3, [r7, #20]
 801aa74:	0c1b      	lsrs	r3, r3, #16
 801aa76:	b2db      	uxtb	r3, r3
 801aa78:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801aa7a:	697b      	ldr	r3, [r7, #20]
 801aa7c:	0a1b      	lsrs	r3, r3, #8
 801aa7e:	b2db      	uxtb	r3, r3
 801aa80:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801aa82:	697b      	ldr	r3, [r7, #20]
 801aa84:	b2db      	uxtb	r3, r3
 801aa86:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801aa88:	7cfb      	ldrb	r3, [r7, #19]
 801aa8a:	b29a      	uxth	r2, r3
 801aa8c:	f107 0308 	add.w	r3, r7, #8
 801aa90:	4619      	mov	r1, r3
 801aa92:	208b      	movs	r0, #139	@ 0x8b
 801aa94:	f000 fa60 	bl	801af58 <SUBGRF_WriteCommand>
        break;
 801aa98:	e058      	b.n	801ab4c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801aa9a:	2304      	movs	r3, #4
 801aa9c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801aa9e:	687b      	ldr	r3, [r7, #4]
 801aaa0:	691b      	ldr	r3, [r3, #16]
 801aaa2:	4a2f      	ldr	r2, [pc, #188]	@ (801ab60 <SUBGRF_SetModulationParams+0x19c>)
 801aaa4:	fbb2 f3f3 	udiv	r3, r2, r3
 801aaa8:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801aaaa:	697b      	ldr	r3, [r7, #20]
 801aaac:	0c1b      	lsrs	r3, r3, #16
 801aaae:	b2db      	uxtb	r3, r3
 801aab0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801aab2:	697b      	ldr	r3, [r7, #20]
 801aab4:	0a1b      	lsrs	r3, r3, #8
 801aab6:	b2db      	uxtb	r3, r3
 801aab8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801aaba:	697b      	ldr	r3, [r7, #20]
 801aabc:	b2db      	uxtb	r3, r3
 801aabe:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801aac0:	687b      	ldr	r3, [r7, #4]
 801aac2:	7d1b      	ldrb	r3, [r3, #20]
 801aac4:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801aac6:	7cfb      	ldrb	r3, [r7, #19]
 801aac8:	b29a      	uxth	r2, r3
 801aaca:	f107 0308 	add.w	r3, r7, #8
 801aace:	4619      	mov	r1, r3
 801aad0:	208b      	movs	r0, #139	@ 0x8b
 801aad2:	f000 fa41 	bl	801af58 <SUBGRF_WriteCommand>
        break;
 801aad6:	e039      	b.n	801ab4c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801aad8:	2304      	movs	r3, #4
 801aada:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801aadc:	687b      	ldr	r3, [r7, #4]
 801aade:	7e1b      	ldrb	r3, [r3, #24]
 801aae0:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801aae2:	687b      	ldr	r3, [r7, #4]
 801aae4:	7e5b      	ldrb	r3, [r3, #25]
 801aae6:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801aae8:	687b      	ldr	r3, [r7, #4]
 801aaea:	7e9b      	ldrb	r3, [r3, #26]
 801aaec:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801aaee:	687b      	ldr	r3, [r7, #4]
 801aaf0:	7edb      	ldrb	r3, [r3, #27]
 801aaf2:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801aaf4:	7cfb      	ldrb	r3, [r7, #19]
 801aaf6:	b29a      	uxth	r2, r3
 801aaf8:	f107 0308 	add.w	r3, r7, #8
 801aafc:	4619      	mov	r1, r3
 801aafe:	208b      	movs	r0, #139	@ 0x8b
 801ab00:	f000 fa2a 	bl	801af58 <SUBGRF_WriteCommand>

        break;
 801ab04:	e022      	b.n	801ab4c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801ab06:	2305      	movs	r3, #5
 801ab08:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801ab0a:	687b      	ldr	r3, [r7, #4]
 801ab0c:	685b      	ldr	r3, [r3, #4]
 801ab0e:	4a14      	ldr	r2, [pc, #80]	@ (801ab60 <SUBGRF_SetModulationParams+0x19c>)
 801ab10:	fbb2 f3f3 	udiv	r3, r2, r3
 801ab14:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801ab16:	697b      	ldr	r3, [r7, #20]
 801ab18:	0c1b      	lsrs	r3, r3, #16
 801ab1a:	b2db      	uxtb	r3, r3
 801ab1c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801ab1e:	697b      	ldr	r3, [r7, #20]
 801ab20:	0a1b      	lsrs	r3, r3, #8
 801ab22:	b2db      	uxtb	r3, r3
 801ab24:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801ab26:	697b      	ldr	r3, [r7, #20]
 801ab28:	b2db      	uxtb	r3, r3
 801ab2a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801ab2c:	687b      	ldr	r3, [r7, #4]
 801ab2e:	7b1b      	ldrb	r3, [r3, #12]
 801ab30:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801ab32:	687b      	ldr	r3, [r7, #4]
 801ab34:	7b5b      	ldrb	r3, [r3, #13]
 801ab36:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ab38:	7cfb      	ldrb	r3, [r7, #19]
 801ab3a:	b29a      	uxth	r2, r3
 801ab3c:	f107 0308 	add.w	r3, r7, #8
 801ab40:	4619      	mov	r1, r3
 801ab42:	208b      	movs	r0, #139	@ 0x8b
 801ab44:	f000 fa08 	bl	801af58 <SUBGRF_WriteCommand>
        break;
 801ab48:	e000      	b.n	801ab4c <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801ab4a:	bf00      	nop
    }
}
 801ab4c:	bf00      	nop
 801ab4e:	3718      	adds	r7, #24
 801ab50:	46bd      	mov	sp, r7
 801ab52:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801ab56:	bf00      	nop
 801ab58:	0801d494 	.word	0x0801d494
 801ab5c:	20001e31 	.word	0x20001e31
 801ab60:	3d090000 	.word	0x3d090000
 801ab64:	01e84800 	.word	0x01e84800

0801ab68 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801ab68:	b580      	push	{r7, lr}
 801ab6a:	b086      	sub	sp, #24
 801ab6c:	af00      	add	r7, sp, #0
 801ab6e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801ab70:	2300      	movs	r3, #0
 801ab72:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801ab74:	4a48      	ldr	r2, [pc, #288]	@ (801ac98 <SUBGRF_SetPacketParams+0x130>)
 801ab76:	f107 030c 	add.w	r3, r7, #12
 801ab7a:	ca07      	ldmia	r2, {r0, r1, r2}
 801ab7c:	c303      	stmia	r3!, {r0, r1}
 801ab7e:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801ab80:	687b      	ldr	r3, [r7, #4]
 801ab82:	781a      	ldrb	r2, [r3, #0]
 801ab84:	4b45      	ldr	r3, [pc, #276]	@ (801ac9c <SUBGRF_SetPacketParams+0x134>)
 801ab86:	781b      	ldrb	r3, [r3, #0]
 801ab88:	429a      	cmp	r2, r3
 801ab8a:	d004      	beq.n	801ab96 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801ab8c:	687b      	ldr	r3, [r7, #4]
 801ab8e:	781b      	ldrb	r3, [r3, #0]
 801ab90:	4618      	mov	r0, r3
 801ab92:	f7ff fe23 	bl	801a7dc <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801ab96:	687b      	ldr	r3, [r7, #4]
 801ab98:	781b      	ldrb	r3, [r3, #0]
 801ab9a:	2b03      	cmp	r3, #3
 801ab9c:	d878      	bhi.n	801ac90 <SUBGRF_SetPacketParams+0x128>
 801ab9e:	a201      	add	r2, pc, #4	@ (adr r2, 801aba4 <SUBGRF_SetPacketParams+0x3c>)
 801aba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aba4:	0801abb5 	.word	0x0801abb5
 801aba8:	0801ac45 	.word	0x0801ac45
 801abac:	0801ac39 	.word	0x0801ac39
 801abb0:	0801abb5 	.word	0x0801abb5
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801abb4:	687b      	ldr	r3, [r7, #4]
 801abb6:	7a5b      	ldrb	r3, [r3, #9]
 801abb8:	2bf1      	cmp	r3, #241	@ 0xf1
 801abba:	d10a      	bne.n	801abd2 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801abbc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801abc0:	f7ff faaa 	bl	801a118 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801abc4:	f248 0005 	movw	r0, #32773	@ 0x8005
 801abc8:	f7ff fac6 	bl	801a158 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801abcc:	2302      	movs	r3, #2
 801abce:	75bb      	strb	r3, [r7, #22]
 801abd0:	e011      	b.n	801abf6 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801abd2:	687b      	ldr	r3, [r7, #4]
 801abd4:	7a5b      	ldrb	r3, [r3, #9]
 801abd6:	2bf2      	cmp	r3, #242	@ 0xf2
 801abd8:	d10a      	bne.n	801abf0 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801abda:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 801abde:	f7ff fa9b 	bl	801a118 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801abe2:	f241 0021 	movw	r0, #4129	@ 0x1021
 801abe6:	f7ff fab7 	bl	801a158 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801abea:	2306      	movs	r3, #6
 801abec:	75bb      	strb	r3, [r7, #22]
 801abee:	e002      	b.n	801abf6 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801abf0:	687b      	ldr	r3, [r7, #4]
 801abf2:	7a5b      	ldrb	r3, [r3, #9]
 801abf4:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801abf6:	2309      	movs	r3, #9
 801abf8:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801abfa:	687b      	ldr	r3, [r7, #4]
 801abfc:	885b      	ldrh	r3, [r3, #2]
 801abfe:	0a1b      	lsrs	r3, r3, #8
 801ac00:	b29b      	uxth	r3, r3
 801ac02:	b2db      	uxtb	r3, r3
 801ac04:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801ac06:	687b      	ldr	r3, [r7, #4]
 801ac08:	885b      	ldrh	r3, [r3, #2]
 801ac0a:	b2db      	uxtb	r3, r3
 801ac0c:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801ac0e:	687b      	ldr	r3, [r7, #4]
 801ac10:	791b      	ldrb	r3, [r3, #4]
 801ac12:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801ac14:	687b      	ldr	r3, [r7, #4]
 801ac16:	795b      	ldrb	r3, [r3, #5]
 801ac18:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801ac1a:	687b      	ldr	r3, [r7, #4]
 801ac1c:	799b      	ldrb	r3, [r3, #6]
 801ac1e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801ac20:	687b      	ldr	r3, [r7, #4]
 801ac22:	79db      	ldrb	r3, [r3, #7]
 801ac24:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801ac26:	687b      	ldr	r3, [r7, #4]
 801ac28:	7a1b      	ldrb	r3, [r3, #8]
 801ac2a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801ac2c:	7dbb      	ldrb	r3, [r7, #22]
 801ac2e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801ac30:	687b      	ldr	r3, [r7, #4]
 801ac32:	7a9b      	ldrb	r3, [r3, #10]
 801ac34:	753b      	strb	r3, [r7, #20]
        break;
 801ac36:	e022      	b.n	801ac7e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801ac38:	2301      	movs	r3, #1
 801ac3a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	7b1b      	ldrb	r3, [r3, #12]
 801ac40:	733b      	strb	r3, [r7, #12]
        break;
 801ac42:	e01c      	b.n	801ac7e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801ac44:	2306      	movs	r3, #6
 801ac46:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801ac48:	687b      	ldr	r3, [r7, #4]
 801ac4a:	89db      	ldrh	r3, [r3, #14]
 801ac4c:	0a1b      	lsrs	r3, r3, #8
 801ac4e:	b29b      	uxth	r3, r3
 801ac50:	b2db      	uxtb	r3, r3
 801ac52:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801ac54:	687b      	ldr	r3, [r7, #4]
 801ac56:	89db      	ldrh	r3, [r3, #14]
 801ac58:	b2db      	uxtb	r3, r3
 801ac5a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801ac5c:	687b      	ldr	r3, [r7, #4]
 801ac5e:	7c1a      	ldrb	r2, [r3, #16]
 801ac60:	4b0f      	ldr	r3, [pc, #60]	@ (801aca0 <SUBGRF_SetPacketParams+0x138>)
 801ac62:	4611      	mov	r1, r2
 801ac64:	7019      	strb	r1, [r3, #0]
 801ac66:	4613      	mov	r3, r2
 801ac68:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801ac6a:	687b      	ldr	r3, [r7, #4]
 801ac6c:	7c5b      	ldrb	r3, [r3, #17]
 801ac6e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801ac70:	687b      	ldr	r3, [r7, #4]
 801ac72:	7c9b      	ldrb	r3, [r3, #18]
 801ac74:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801ac76:	687b      	ldr	r3, [r7, #4]
 801ac78:	7cdb      	ldrb	r3, [r3, #19]
 801ac7a:	747b      	strb	r3, [r7, #17]
        break;
 801ac7c:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801ac7e:	7dfb      	ldrb	r3, [r7, #23]
 801ac80:	b29a      	uxth	r2, r3
 801ac82:	f107 030c 	add.w	r3, r7, #12
 801ac86:	4619      	mov	r1, r3
 801ac88:	208c      	movs	r0, #140	@ 0x8c
 801ac8a:	f000 f965 	bl	801af58 <SUBGRF_WriteCommand>
 801ac8e:	e000      	b.n	801ac92 <SUBGRF_SetPacketParams+0x12a>
        return;
 801ac90:	bf00      	nop
}
 801ac92:	3718      	adds	r7, #24
 801ac94:	46bd      	mov	sp, r7
 801ac96:	bd80      	pop	{r7, pc}
 801ac98:	0801d49c 	.word	0x0801d49c
 801ac9c:	20001e31 	.word	0x20001e31
 801aca0:	20001e32 	.word	0x20001e32

0801aca4 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801aca4:	b580      	push	{r7, lr}
 801aca6:	b084      	sub	sp, #16
 801aca8:	af00      	add	r7, sp, #0
 801acaa:	4603      	mov	r3, r0
 801acac:	460a      	mov	r2, r1
 801acae:	71fb      	strb	r3, [r7, #7]
 801acb0:	4613      	mov	r3, r2
 801acb2:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801acb4:	79fb      	ldrb	r3, [r7, #7]
 801acb6:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801acb8:	79bb      	ldrb	r3, [r7, #6]
 801acba:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801acbc:	f107 030c 	add.w	r3, r7, #12
 801acc0:	2202      	movs	r2, #2
 801acc2:	4619      	mov	r1, r3
 801acc4:	208f      	movs	r0, #143	@ 0x8f
 801acc6:	f000 f947 	bl	801af58 <SUBGRF_WriteCommand>
}
 801acca:	bf00      	nop
 801accc:	3710      	adds	r7, #16
 801acce:	46bd      	mov	sp, r7
 801acd0:	bd80      	pop	{r7, pc}

0801acd2 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801acd2:	b580      	push	{r7, lr}
 801acd4:	b082      	sub	sp, #8
 801acd6:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801acd8:	2300      	movs	r3, #0
 801acda:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801acdc:	1d3b      	adds	r3, r7, #4
 801acde:	2201      	movs	r2, #1
 801ace0:	4619      	mov	r1, r3
 801ace2:	2015      	movs	r0, #21
 801ace4:	f000 f95a 	bl	801af9c <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801ace8:	793b      	ldrb	r3, [r7, #4]
 801acea:	425b      	negs	r3, r3
 801acec:	105b      	asrs	r3, r3, #1
 801acee:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801acf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801acf4:	4618      	mov	r0, r3
 801acf6:	3708      	adds	r7, #8
 801acf8:	46bd      	mov	sp, r7
 801acfa:	bd80      	pop	{r7, pc}

0801acfc <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801acfc:	b580      	push	{r7, lr}
 801acfe:	b084      	sub	sp, #16
 801ad00:	af00      	add	r7, sp, #0
 801ad02:	6078      	str	r0, [r7, #4]
 801ad04:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801ad06:	f107 030c 	add.w	r3, r7, #12
 801ad0a:	2202      	movs	r2, #2
 801ad0c:	4619      	mov	r1, r3
 801ad0e:	2013      	movs	r0, #19
 801ad10:	f000 f944 	bl	801af9c <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801ad14:	f7ff fd7e 	bl	801a814 <SUBGRF_GetPacketType>
 801ad18:	4603      	mov	r3, r0
 801ad1a:	2b01      	cmp	r3, #1
 801ad1c:	d10d      	bne.n	801ad3a <SUBGRF_GetRxBufferStatus+0x3e>
 801ad1e:	4b0c      	ldr	r3, [pc, #48]	@ (801ad50 <SUBGRF_GetRxBufferStatus+0x54>)
 801ad20:	781b      	ldrb	r3, [r3, #0]
 801ad22:	b2db      	uxtb	r3, r3
 801ad24:	2b01      	cmp	r3, #1
 801ad26:	d108      	bne.n	801ad3a <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801ad28:	f240 7002 	movw	r0, #1794	@ 0x702
 801ad2c:	f000 f878 	bl	801ae20 <SUBGRF_ReadRegister>
 801ad30:	4603      	mov	r3, r0
 801ad32:	461a      	mov	r2, r3
 801ad34:	687b      	ldr	r3, [r7, #4]
 801ad36:	701a      	strb	r2, [r3, #0]
 801ad38:	e002      	b.n	801ad40 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801ad3a:	7b3a      	ldrb	r2, [r7, #12]
 801ad3c:	687b      	ldr	r3, [r7, #4]
 801ad3e:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801ad40:	7b7a      	ldrb	r2, [r7, #13]
 801ad42:	683b      	ldr	r3, [r7, #0]
 801ad44:	701a      	strb	r2, [r3, #0]
}
 801ad46:	bf00      	nop
 801ad48:	3710      	adds	r7, #16
 801ad4a:	46bd      	mov	sp, r7
 801ad4c:	bd80      	pop	{r7, pc}
 801ad4e:	bf00      	nop
 801ad50:	20001e32 	.word	0x20001e32

0801ad54 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801ad54:	b580      	push	{r7, lr}
 801ad56:	b084      	sub	sp, #16
 801ad58:	af00      	add	r7, sp, #0
 801ad5a:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801ad5c:	f107 030c 	add.w	r3, r7, #12
 801ad60:	2203      	movs	r2, #3
 801ad62:	4619      	mov	r1, r3
 801ad64:	2014      	movs	r0, #20
 801ad66:	f000 f919 	bl	801af9c <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801ad6a:	f7ff fd53 	bl	801a814 <SUBGRF_GetPacketType>
 801ad6e:	4603      	mov	r3, r0
 801ad70:	461a      	mov	r2, r3
 801ad72:	687b      	ldr	r3, [r7, #4]
 801ad74:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801ad76:	687b      	ldr	r3, [r7, #4]
 801ad78:	781b      	ldrb	r3, [r3, #0]
 801ad7a:	2b00      	cmp	r3, #0
 801ad7c:	d002      	beq.n	801ad84 <SUBGRF_GetPacketStatus+0x30>
 801ad7e:	2b01      	cmp	r3, #1
 801ad80:	d013      	beq.n	801adaa <SUBGRF_GetPacketStatus+0x56>
 801ad82:	e02a      	b.n	801adda <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801ad84:	7b3a      	ldrb	r2, [r7, #12]
 801ad86:	687b      	ldr	r3, [r7, #4]
 801ad88:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801ad8a:	7b7b      	ldrb	r3, [r7, #13]
 801ad8c:	425b      	negs	r3, r3
 801ad8e:	105b      	asrs	r3, r3, #1
 801ad90:	b25a      	sxtb	r2, r3
 801ad92:	687b      	ldr	r3, [r7, #4]
 801ad94:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801ad96:	7bbb      	ldrb	r3, [r7, #14]
 801ad98:	425b      	negs	r3, r3
 801ad9a:	105b      	asrs	r3, r3, #1
 801ad9c:	b25a      	sxtb	r2, r3
 801ad9e:	687b      	ldr	r3, [r7, #4]
 801ada0:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801ada2:	687b      	ldr	r3, [r7, #4]
 801ada4:	2200      	movs	r2, #0
 801ada6:	609a      	str	r2, [r3, #8]
            break;
 801ada8:	e020      	b.n	801adec <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801adaa:	7b3b      	ldrb	r3, [r7, #12]
 801adac:	425b      	negs	r3, r3
 801adae:	105b      	asrs	r3, r3, #1
 801adb0:	b25a      	sxtb	r2, r3
 801adb2:	687b      	ldr	r3, [r7, #4]
 801adb4:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801adb6:	7b7b      	ldrb	r3, [r7, #13]
 801adb8:	b25b      	sxtb	r3, r3
 801adba:	3302      	adds	r3, #2
 801adbc:	109b      	asrs	r3, r3, #2
 801adbe:	b25a      	sxtb	r2, r3
 801adc0:	687b      	ldr	r3, [r7, #4]
 801adc2:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801adc4:	7bbb      	ldrb	r3, [r7, #14]
 801adc6:	425b      	negs	r3, r3
 801adc8:	105b      	asrs	r3, r3, #1
 801adca:	b25a      	sxtb	r2, r3
 801adcc:	687b      	ldr	r3, [r7, #4]
 801adce:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801add0:	4b08      	ldr	r3, [pc, #32]	@ (801adf4 <SUBGRF_GetPacketStatus+0xa0>)
 801add2:	681a      	ldr	r2, [r3, #0]
 801add4:	687b      	ldr	r3, [r7, #4]
 801add6:	611a      	str	r2, [r3, #16]
            break;
 801add8:	e008      	b.n	801adec <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801adda:	2214      	movs	r2, #20
 801addc:	2100      	movs	r1, #0
 801adde:	6878      	ldr	r0, [r7, #4]
 801ade0:	f000 fbf5 	bl	801b5ce <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801ade4:	687b      	ldr	r3, [r7, #4]
 801ade6:	220f      	movs	r2, #15
 801ade8:	701a      	strb	r2, [r3, #0]
            break;
 801adea:	bf00      	nop
    }
}
 801adec:	bf00      	nop
 801adee:	3710      	adds	r7, #16
 801adf0:	46bd      	mov	sp, r7
 801adf2:	bd80      	pop	{r7, pc}
 801adf4:	20001e34 	.word	0x20001e34

0801adf8 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801adf8:	b580      	push	{r7, lr}
 801adfa:	b082      	sub	sp, #8
 801adfc:	af00      	add	r7, sp, #0
 801adfe:	4603      	mov	r3, r0
 801ae00:	460a      	mov	r2, r1
 801ae02:	80fb      	strh	r3, [r7, #6]
 801ae04:	4613      	mov	r3, r2
 801ae06:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801ae08:	1d7a      	adds	r2, r7, #5
 801ae0a:	88f9      	ldrh	r1, [r7, #6]
 801ae0c:	2301      	movs	r3, #1
 801ae0e:	4803      	ldr	r0, [pc, #12]	@ (801ae1c <SUBGRF_WriteRegister+0x24>)
 801ae10:	f7ec fb88 	bl	8007524 <HAL_SUBGHZ_WriteRegisters>
}
 801ae14:	bf00      	nop
 801ae16:	3708      	adds	r7, #8
 801ae18:	46bd      	mov	sp, r7
 801ae1a:	bd80      	pop	{r7, pc}
 801ae1c:	20000218 	.word	0x20000218

0801ae20 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801ae20:	b580      	push	{r7, lr}
 801ae22:	b084      	sub	sp, #16
 801ae24:	af00      	add	r7, sp, #0
 801ae26:	4603      	mov	r3, r0
 801ae28:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801ae2a:	f107 020f 	add.w	r2, r7, #15
 801ae2e:	88f9      	ldrh	r1, [r7, #6]
 801ae30:	2301      	movs	r3, #1
 801ae32:	4804      	ldr	r0, [pc, #16]	@ (801ae44 <SUBGRF_ReadRegister+0x24>)
 801ae34:	f7ec fbd5 	bl	80075e2 <HAL_SUBGHZ_ReadRegisters>
    return data;
 801ae38:	7bfb      	ldrb	r3, [r7, #15]
}
 801ae3a:	4618      	mov	r0, r3
 801ae3c:	3710      	adds	r7, #16
 801ae3e:	46bd      	mov	sp, r7
 801ae40:	bd80      	pop	{r7, pc}
 801ae42:	bf00      	nop
 801ae44:	20000218 	.word	0x20000218

0801ae48 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801ae48:	b580      	push	{r7, lr}
 801ae4a:	b086      	sub	sp, #24
 801ae4c:	af00      	add	r7, sp, #0
 801ae4e:	4603      	mov	r3, r0
 801ae50:	6039      	str	r1, [r7, #0]
 801ae52:	80fb      	strh	r3, [r7, #6]
 801ae54:	4613      	mov	r3, r2
 801ae56:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ae58:	f3ef 8310 	mrs	r3, PRIMASK
 801ae5c:	60fb      	str	r3, [r7, #12]
  return(result);
 801ae5e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801ae60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ae62:	b672      	cpsid	i
}
 801ae64:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801ae66:	88bb      	ldrh	r3, [r7, #4]
 801ae68:	88f9      	ldrh	r1, [r7, #6]
 801ae6a:	683a      	ldr	r2, [r7, #0]
 801ae6c:	4806      	ldr	r0, [pc, #24]	@ (801ae88 <SUBGRF_WriteRegisters+0x40>)
 801ae6e:	f7ec fb59 	bl	8007524 <HAL_SUBGHZ_WriteRegisters>
 801ae72:	697b      	ldr	r3, [r7, #20]
 801ae74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ae76:	693b      	ldr	r3, [r7, #16]
 801ae78:	f383 8810 	msr	PRIMASK, r3
}
 801ae7c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801ae7e:	bf00      	nop
 801ae80:	3718      	adds	r7, #24
 801ae82:	46bd      	mov	sp, r7
 801ae84:	bd80      	pop	{r7, pc}
 801ae86:	bf00      	nop
 801ae88:	20000218 	.word	0x20000218

0801ae8c <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801ae8c:	b580      	push	{r7, lr}
 801ae8e:	b086      	sub	sp, #24
 801ae90:	af00      	add	r7, sp, #0
 801ae92:	4603      	mov	r3, r0
 801ae94:	6039      	str	r1, [r7, #0]
 801ae96:	80fb      	strh	r3, [r7, #6]
 801ae98:	4613      	mov	r3, r2
 801ae9a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ae9c:	f3ef 8310 	mrs	r3, PRIMASK
 801aea0:	60fb      	str	r3, [r7, #12]
  return(result);
 801aea2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801aea4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801aea6:	b672      	cpsid	i
}
 801aea8:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801aeaa:	88bb      	ldrh	r3, [r7, #4]
 801aeac:	88f9      	ldrh	r1, [r7, #6]
 801aeae:	683a      	ldr	r2, [r7, #0]
 801aeb0:	4806      	ldr	r0, [pc, #24]	@ (801aecc <SUBGRF_ReadRegisters+0x40>)
 801aeb2:	f7ec fb96 	bl	80075e2 <HAL_SUBGHZ_ReadRegisters>
 801aeb6:	697b      	ldr	r3, [r7, #20]
 801aeb8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aeba:	693b      	ldr	r3, [r7, #16]
 801aebc:	f383 8810 	msr	PRIMASK, r3
}
 801aec0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801aec2:	bf00      	nop
 801aec4:	3718      	adds	r7, #24
 801aec6:	46bd      	mov	sp, r7
 801aec8:	bd80      	pop	{r7, pc}
 801aeca:	bf00      	nop
 801aecc:	20000218 	.word	0x20000218

0801aed0 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801aed0:	b580      	push	{r7, lr}
 801aed2:	b086      	sub	sp, #24
 801aed4:	af00      	add	r7, sp, #0
 801aed6:	4603      	mov	r3, r0
 801aed8:	6039      	str	r1, [r7, #0]
 801aeda:	71fb      	strb	r3, [r7, #7]
 801aedc:	4613      	mov	r3, r2
 801aede:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aee0:	f3ef 8310 	mrs	r3, PRIMASK
 801aee4:	60fb      	str	r3, [r7, #12]
  return(result);
 801aee6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801aee8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801aeea:	b672      	cpsid	i
}
 801aeec:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801aeee:	79bb      	ldrb	r3, [r7, #6]
 801aef0:	b29b      	uxth	r3, r3
 801aef2:	79f9      	ldrb	r1, [r7, #7]
 801aef4:	683a      	ldr	r2, [r7, #0]
 801aef6:	4806      	ldr	r0, [pc, #24]	@ (801af10 <SUBGRF_WriteBuffer+0x40>)
 801aef8:	f7ec fc87 	bl	800780a <HAL_SUBGHZ_WriteBuffer>
 801aefc:	697b      	ldr	r3, [r7, #20]
 801aefe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801af00:	693b      	ldr	r3, [r7, #16]
 801af02:	f383 8810 	msr	PRIMASK, r3
}
 801af06:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801af08:	bf00      	nop
 801af0a:	3718      	adds	r7, #24
 801af0c:	46bd      	mov	sp, r7
 801af0e:	bd80      	pop	{r7, pc}
 801af10:	20000218 	.word	0x20000218

0801af14 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801af14:	b580      	push	{r7, lr}
 801af16:	b086      	sub	sp, #24
 801af18:	af00      	add	r7, sp, #0
 801af1a:	4603      	mov	r3, r0
 801af1c:	6039      	str	r1, [r7, #0]
 801af1e:	71fb      	strb	r3, [r7, #7]
 801af20:	4613      	mov	r3, r2
 801af22:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801af24:	f3ef 8310 	mrs	r3, PRIMASK
 801af28:	60fb      	str	r3, [r7, #12]
  return(result);
 801af2a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801af2c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801af2e:	b672      	cpsid	i
}
 801af30:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801af32:	79bb      	ldrb	r3, [r7, #6]
 801af34:	b29b      	uxth	r3, r3
 801af36:	79f9      	ldrb	r1, [r7, #7]
 801af38:	683a      	ldr	r2, [r7, #0]
 801af3a:	4806      	ldr	r0, [pc, #24]	@ (801af54 <SUBGRF_ReadBuffer+0x40>)
 801af3c:	f7ec fcb8 	bl	80078b0 <HAL_SUBGHZ_ReadBuffer>
 801af40:	697b      	ldr	r3, [r7, #20]
 801af42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801af44:	693b      	ldr	r3, [r7, #16]
 801af46:	f383 8810 	msr	PRIMASK, r3
}
 801af4a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801af4c:	bf00      	nop
 801af4e:	3718      	adds	r7, #24
 801af50:	46bd      	mov	sp, r7
 801af52:	bd80      	pop	{r7, pc}
 801af54:	20000218 	.word	0x20000218

0801af58 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801af58:	b580      	push	{r7, lr}
 801af5a:	b086      	sub	sp, #24
 801af5c:	af00      	add	r7, sp, #0
 801af5e:	4603      	mov	r3, r0
 801af60:	6039      	str	r1, [r7, #0]
 801af62:	71fb      	strb	r3, [r7, #7]
 801af64:	4613      	mov	r3, r2
 801af66:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801af68:	f3ef 8310 	mrs	r3, PRIMASK
 801af6c:	60fb      	str	r3, [r7, #12]
  return(result);
 801af6e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801af70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801af72:	b672      	cpsid	i
}
 801af74:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801af76:	88bb      	ldrh	r3, [r7, #4]
 801af78:	79f9      	ldrb	r1, [r7, #7]
 801af7a:	683a      	ldr	r2, [r7, #0]
 801af7c:	4806      	ldr	r0, [pc, #24]	@ (801af98 <SUBGRF_WriteCommand+0x40>)
 801af7e:	f7ec fb91 	bl	80076a4 <HAL_SUBGHZ_ExecSetCmd>
 801af82:	697b      	ldr	r3, [r7, #20]
 801af84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801af86:	693b      	ldr	r3, [r7, #16]
 801af88:	f383 8810 	msr	PRIMASK, r3
}
 801af8c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801af8e:	bf00      	nop
 801af90:	3718      	adds	r7, #24
 801af92:	46bd      	mov	sp, r7
 801af94:	bd80      	pop	{r7, pc}
 801af96:	bf00      	nop
 801af98:	20000218 	.word	0x20000218

0801af9c <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801af9c:	b580      	push	{r7, lr}
 801af9e:	b086      	sub	sp, #24
 801afa0:	af00      	add	r7, sp, #0
 801afa2:	4603      	mov	r3, r0
 801afa4:	6039      	str	r1, [r7, #0]
 801afa6:	71fb      	strb	r3, [r7, #7]
 801afa8:	4613      	mov	r3, r2
 801afaa:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801afac:	f3ef 8310 	mrs	r3, PRIMASK
 801afb0:	60fb      	str	r3, [r7, #12]
  return(result);
 801afb2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801afb4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801afb6:	b672      	cpsid	i
}
 801afb8:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801afba:	88bb      	ldrh	r3, [r7, #4]
 801afbc:	79f9      	ldrb	r1, [r7, #7]
 801afbe:	683a      	ldr	r2, [r7, #0]
 801afc0:	4806      	ldr	r0, [pc, #24]	@ (801afdc <SUBGRF_ReadCommand+0x40>)
 801afc2:	f7ec fbce 	bl	8007762 <HAL_SUBGHZ_ExecGetCmd>
 801afc6:	697b      	ldr	r3, [r7, #20]
 801afc8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801afca:	693b      	ldr	r3, [r7, #16]
 801afcc:	f383 8810 	msr	PRIMASK, r3
}
 801afd0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801afd2:	bf00      	nop
 801afd4:	3718      	adds	r7, #24
 801afd6:	46bd      	mov	sp, r7
 801afd8:	bd80      	pop	{r7, pc}
 801afda:	bf00      	nop
 801afdc:	20000218 	.word	0x20000218

0801afe0 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801afe0:	b580      	push	{r7, lr}
 801afe2:	b084      	sub	sp, #16
 801afe4:	af00      	add	r7, sp, #0
 801afe6:	4603      	mov	r3, r0
 801afe8:	460a      	mov	r2, r1
 801afea:	71fb      	strb	r3, [r7, #7]
 801afec:	4613      	mov	r3, r2
 801afee:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801aff0:	2301      	movs	r3, #1
 801aff2:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801aff4:	79bb      	ldrb	r3, [r7, #6]
 801aff6:	2b01      	cmp	r3, #1
 801aff8:	d10d      	bne.n	801b016 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801affa:	79fb      	ldrb	r3, [r7, #7]
 801affc:	2b01      	cmp	r3, #1
 801affe:	d104      	bne.n	801b00a <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801b000:	2302      	movs	r3, #2
 801b002:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801b004:	2004      	movs	r0, #4
 801b006:	f000 f8ef 	bl	801b1e8 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801b00a:	79fb      	ldrb	r3, [r7, #7]
 801b00c:	2b02      	cmp	r3, #2
 801b00e:	d107      	bne.n	801b020 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801b010:	2303      	movs	r3, #3
 801b012:	73fb      	strb	r3, [r7, #15]
 801b014:	e004      	b.n	801b020 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801b016:	79bb      	ldrb	r3, [r7, #6]
 801b018:	2b00      	cmp	r3, #0
 801b01a:	d101      	bne.n	801b020 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801b01c:	2301      	movs	r3, #1
 801b01e:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801b020:	7bfb      	ldrb	r3, [r7, #15]
 801b022:	4618      	mov	r0, r3
 801b024:	f7ef fedd 	bl	800ade2 <RBI_ConfigRFSwitch>
}
 801b028:	bf00      	nop
 801b02a:	3710      	adds	r7, #16
 801b02c:	46bd      	mov	sp, r7
 801b02e:	bd80      	pop	{r7, pc}

0801b030 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801b030:	b580      	push	{r7, lr}
 801b032:	b084      	sub	sp, #16
 801b034:	af00      	add	r7, sp, #0
 801b036:	4603      	mov	r3, r0
 801b038:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801b03a:	2301      	movs	r3, #1
 801b03c:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801b03e:	f7ef fede 	bl	800adfe <RBI_GetTxConfig>
 801b042:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801b044:	68bb      	ldr	r3, [r7, #8]
 801b046:	2b02      	cmp	r3, #2
 801b048:	d016      	beq.n	801b078 <SUBGRF_SetRfTxPower+0x48>
 801b04a:	68bb      	ldr	r3, [r7, #8]
 801b04c:	2b02      	cmp	r3, #2
 801b04e:	dc16      	bgt.n	801b07e <SUBGRF_SetRfTxPower+0x4e>
 801b050:	68bb      	ldr	r3, [r7, #8]
 801b052:	2b00      	cmp	r3, #0
 801b054:	d003      	beq.n	801b05e <SUBGRF_SetRfTxPower+0x2e>
 801b056:	68bb      	ldr	r3, [r7, #8]
 801b058:	2b01      	cmp	r3, #1
 801b05a:	d00a      	beq.n	801b072 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801b05c:	e00f      	b.n	801b07e <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801b05e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b062:	2b0f      	cmp	r3, #15
 801b064:	dd02      	ble.n	801b06c <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801b066:	2302      	movs	r3, #2
 801b068:	73fb      	strb	r3, [r7, #15]
            break;
 801b06a:	e009      	b.n	801b080 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801b06c:	2301      	movs	r3, #1
 801b06e:	73fb      	strb	r3, [r7, #15]
            break;
 801b070:	e006      	b.n	801b080 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801b072:	2301      	movs	r3, #1
 801b074:	73fb      	strb	r3, [r7, #15]
            break;
 801b076:	e003      	b.n	801b080 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801b078:	2302      	movs	r3, #2
 801b07a:	73fb      	strb	r3, [r7, #15]
            break;
 801b07c:	e000      	b.n	801b080 <SUBGRF_SetRfTxPower+0x50>
            break;
 801b07e:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801b080:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801b084:	7bfb      	ldrb	r3, [r7, #15]
 801b086:	2202      	movs	r2, #2
 801b088:	4618      	mov	r0, r3
 801b08a:	f7ff fbcd 	bl	801a828 <SUBGRF_SetTxParams>

    return paSelect;
 801b08e:	7bfb      	ldrb	r3, [r7, #15]
}
 801b090:	4618      	mov	r0, r3
 801b092:	3710      	adds	r7, #16
 801b094:	46bd      	mov	sp, r7
 801b096:	bd80      	pop	{r7, pc}

0801b098 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801b098:	b480      	push	{r7}
 801b09a:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801b09c:	2301      	movs	r3, #1
}
 801b09e:	4618      	mov	r0, r3
 801b0a0:	46bd      	mov	sp, r7
 801b0a2:	bc80      	pop	{r7}
 801b0a4:	4770      	bx	lr
	...

0801b0a8 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b0a8:	b580      	push	{r7, lr}
 801b0aa:	b082      	sub	sp, #8
 801b0ac:	af00      	add	r7, sp, #0
 801b0ae:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801b0b0:	4b03      	ldr	r3, [pc, #12]	@ (801b0c0 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801b0b2:	681b      	ldr	r3, [r3, #0]
 801b0b4:	2001      	movs	r0, #1
 801b0b6:	4798      	blx	r3
}
 801b0b8:	bf00      	nop
 801b0ba:	3708      	adds	r7, #8
 801b0bc:	46bd      	mov	sp, r7
 801b0be:	bd80      	pop	{r7, pc}
 801b0c0:	20001e3c 	.word	0x20001e3c

0801b0c4 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b0c4:	b580      	push	{r7, lr}
 801b0c6:	b082      	sub	sp, #8
 801b0c8:	af00      	add	r7, sp, #0
 801b0ca:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801b0cc:	4b03      	ldr	r3, [pc, #12]	@ (801b0dc <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801b0ce:	681b      	ldr	r3, [r3, #0]
 801b0d0:	2002      	movs	r0, #2
 801b0d2:	4798      	blx	r3
}
 801b0d4:	bf00      	nop
 801b0d6:	3708      	adds	r7, #8
 801b0d8:	46bd      	mov	sp, r7
 801b0da:	bd80      	pop	{r7, pc}
 801b0dc:	20001e3c 	.word	0x20001e3c

0801b0e0 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801b0e0:	b580      	push	{r7, lr}
 801b0e2:	b082      	sub	sp, #8
 801b0e4:	af00      	add	r7, sp, #0
 801b0e6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801b0e8:	4b03      	ldr	r3, [pc, #12]	@ (801b0f8 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801b0ea:	681b      	ldr	r3, [r3, #0]
 801b0ec:	2040      	movs	r0, #64	@ 0x40
 801b0ee:	4798      	blx	r3
}
 801b0f0:	bf00      	nop
 801b0f2:	3708      	adds	r7, #8
 801b0f4:	46bd      	mov	sp, r7
 801b0f6:	bd80      	pop	{r7, pc}
 801b0f8:	20001e3c 	.word	0x20001e3c

0801b0fc <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801b0fc:	b580      	push	{r7, lr}
 801b0fe:	b082      	sub	sp, #8
 801b100:	af00      	add	r7, sp, #0
 801b102:	6078      	str	r0, [r7, #4]
 801b104:	460b      	mov	r3, r1
 801b106:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801b108:	78fb      	ldrb	r3, [r7, #3]
 801b10a:	2b00      	cmp	r3, #0
 801b10c:	d002      	beq.n	801b114 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801b10e:	2b01      	cmp	r3, #1
 801b110:	d005      	beq.n	801b11e <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801b112:	e00a      	b.n	801b12a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801b114:	4b07      	ldr	r3, [pc, #28]	@ (801b134 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801b116:	681b      	ldr	r3, [r3, #0]
 801b118:	2080      	movs	r0, #128	@ 0x80
 801b11a:	4798      	blx	r3
            break;
 801b11c:	e005      	b.n	801b12a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801b11e:	4b05      	ldr	r3, [pc, #20]	@ (801b134 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801b120:	681b      	ldr	r3, [r3, #0]
 801b122:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801b126:	4798      	blx	r3
            break;
 801b128:	bf00      	nop
    }
}
 801b12a:	bf00      	nop
 801b12c:	3708      	adds	r7, #8
 801b12e:	46bd      	mov	sp, r7
 801b130:	bd80      	pop	{r7, pc}
 801b132:	bf00      	nop
 801b134:	20001e3c 	.word	0x20001e3c

0801b138 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b138:	b580      	push	{r7, lr}
 801b13a:	b082      	sub	sp, #8
 801b13c:	af00      	add	r7, sp, #0
 801b13e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801b140:	4b04      	ldr	r3, [pc, #16]	@ (801b154 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801b142:	681b      	ldr	r3, [r3, #0]
 801b144:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801b148:	4798      	blx	r3
}
 801b14a:	bf00      	nop
 801b14c:	3708      	adds	r7, #8
 801b14e:	46bd      	mov	sp, r7
 801b150:	bd80      	pop	{r7, pc}
 801b152:	bf00      	nop
 801b154:	20001e3c 	.word	0x20001e3c

0801b158 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b158:	b580      	push	{r7, lr}
 801b15a:	b082      	sub	sp, #8
 801b15c:	af00      	add	r7, sp, #0
 801b15e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801b160:	4b03      	ldr	r3, [pc, #12]	@ (801b170 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801b162:	681b      	ldr	r3, [r3, #0]
 801b164:	2020      	movs	r0, #32
 801b166:	4798      	blx	r3
}
 801b168:	bf00      	nop
 801b16a:	3708      	adds	r7, #8
 801b16c:	46bd      	mov	sp, r7
 801b16e:	bd80      	pop	{r7, pc}
 801b170:	20001e3c 	.word	0x20001e3c

0801b174 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b174:	b580      	push	{r7, lr}
 801b176:	b082      	sub	sp, #8
 801b178:	af00      	add	r7, sp, #0
 801b17a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801b17c:	4b03      	ldr	r3, [pc, #12]	@ (801b18c <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801b17e:	681b      	ldr	r3, [r3, #0]
 801b180:	2004      	movs	r0, #4
 801b182:	4798      	blx	r3
}
 801b184:	bf00      	nop
 801b186:	3708      	adds	r7, #8
 801b188:	46bd      	mov	sp, r7
 801b18a:	bd80      	pop	{r7, pc}
 801b18c:	20001e3c 	.word	0x20001e3c

0801b190 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b190:	b580      	push	{r7, lr}
 801b192:	b082      	sub	sp, #8
 801b194:	af00      	add	r7, sp, #0
 801b196:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801b198:	4b03      	ldr	r3, [pc, #12]	@ (801b1a8 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801b19a:	681b      	ldr	r3, [r3, #0]
 801b19c:	2008      	movs	r0, #8
 801b19e:	4798      	blx	r3
}
 801b1a0:	bf00      	nop
 801b1a2:	3708      	adds	r7, #8
 801b1a4:	46bd      	mov	sp, r7
 801b1a6:	bd80      	pop	{r7, pc}
 801b1a8:	20001e3c 	.word	0x20001e3c

0801b1ac <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b1ac:	b580      	push	{r7, lr}
 801b1ae:	b082      	sub	sp, #8
 801b1b0:	af00      	add	r7, sp, #0
 801b1b2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801b1b4:	4b03      	ldr	r3, [pc, #12]	@ (801b1c4 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801b1b6:	681b      	ldr	r3, [r3, #0]
 801b1b8:	2010      	movs	r0, #16
 801b1ba:	4798      	blx	r3
}
 801b1bc:	bf00      	nop
 801b1be:	3708      	adds	r7, #8
 801b1c0:	46bd      	mov	sp, r7
 801b1c2:	bd80      	pop	{r7, pc}
 801b1c4:	20001e3c 	.word	0x20001e3c

0801b1c8 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b1c8:	b580      	push	{r7, lr}
 801b1ca:	b082      	sub	sp, #8
 801b1cc:	af00      	add	r7, sp, #0
 801b1ce:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801b1d0:	4b04      	ldr	r3, [pc, #16]	@ (801b1e4 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801b1d2:	681b      	ldr	r3, [r3, #0]
 801b1d4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 801b1d8:	4798      	blx	r3
}
 801b1da:	bf00      	nop
 801b1dc:	3708      	adds	r7, #8
 801b1de:	46bd      	mov	sp, r7
 801b1e0:	bd80      	pop	{r7, pc}
 801b1e2:	bf00      	nop
 801b1e4:	20001e3c 	.word	0x20001e3c

0801b1e8 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801b1e8:	b580      	push	{r7, lr}
 801b1ea:	b084      	sub	sp, #16
 801b1ec:	af00      	add	r7, sp, #0
 801b1ee:	4603      	mov	r3, r0
 801b1f0:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801b1f2:	f7ef fe12 	bl	800ae1a <RBI_IsDCDC>
 801b1f6:	4603      	mov	r3, r0
 801b1f8:	2b01      	cmp	r3, #1
 801b1fa:	d112      	bne.n	801b222 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801b1fc:	f640 1023 	movw	r0, #2339	@ 0x923
 801b200:	f7ff fe0e 	bl	801ae20 <SUBGRF_ReadRegister>
 801b204:	4603      	mov	r3, r0
 801b206:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801b208:	7bfb      	ldrb	r3, [r7, #15]
 801b20a:	f023 0306 	bic.w	r3, r3, #6
 801b20e:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801b210:	7bfa      	ldrb	r2, [r7, #15]
 801b212:	79fb      	ldrb	r3, [r7, #7]
 801b214:	4313      	orrs	r3, r2
 801b216:	b2db      	uxtb	r3, r3
 801b218:	4619      	mov	r1, r3
 801b21a:	f640 1023 	movw	r0, #2339	@ 0x923
 801b21e:	f7ff fdeb 	bl	801adf8 <SUBGRF_WriteRegister>
  }
}
 801b222:	bf00      	nop
 801b224:	3710      	adds	r7, #16
 801b226:	46bd      	mov	sp, r7
 801b228:	bd80      	pop	{r7, pc}
	...

0801b22c <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801b22c:	b480      	push	{r7}
 801b22e:	b085      	sub	sp, #20
 801b230:	af00      	add	r7, sp, #0
 801b232:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801b234:	687b      	ldr	r3, [r7, #4]
 801b236:	2b00      	cmp	r3, #0
 801b238:	d101      	bne.n	801b23e <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801b23a:	231f      	movs	r3, #31
 801b23c:	e017      	b.n	801b26e <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801b23e:	2300      	movs	r3, #0
 801b240:	73fb      	strb	r3, [r7, #15]
 801b242:	e00f      	b.n	801b264 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801b244:	7bfb      	ldrb	r3, [r7, #15]
 801b246:	4a0c      	ldr	r2, [pc, #48]	@ (801b278 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801b248:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801b24c:	687a      	ldr	r2, [r7, #4]
 801b24e:	429a      	cmp	r2, r3
 801b250:	d205      	bcs.n	801b25e <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801b252:	7bfb      	ldrb	r3, [r7, #15]
 801b254:	4a08      	ldr	r2, [pc, #32]	@ (801b278 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801b256:	00db      	lsls	r3, r3, #3
 801b258:	4413      	add	r3, r2
 801b25a:	791b      	ldrb	r3, [r3, #4]
 801b25c:	e007      	b.n	801b26e <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801b25e:	7bfb      	ldrb	r3, [r7, #15]
 801b260:	3301      	adds	r3, #1
 801b262:	73fb      	strb	r3, [r7, #15]
 801b264:	7bfb      	ldrb	r3, [r7, #15]
 801b266:	2b15      	cmp	r3, #21
 801b268:	d9ec      	bls.n	801b244 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801b26a:	bf00      	nop
 801b26c:	e7fd      	b.n	801b26a <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801b26e:	4618      	mov	r0, r3
 801b270:	3714      	adds	r7, #20
 801b272:	46bd      	mov	sp, r7
 801b274:	bc80      	pop	{r7}
 801b276:	4770      	bx	lr
 801b278:	0801db10 	.word	0x0801db10

0801b27c <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801b27c:	b580      	push	{r7, lr}
 801b27e:	b08a      	sub	sp, #40	@ 0x28
 801b280:	af00      	add	r7, sp, #0
 801b282:	6078      	str	r0, [r7, #4]
 801b284:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801b286:	4b35      	ldr	r3, [pc, #212]	@ (801b35c <SUBGRF_GetCFO+0xe0>)
 801b288:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801b28a:	f640 0007 	movw	r0, #2055	@ 0x807
 801b28e:	f7ff fdc7 	bl	801ae20 <SUBGRF_ReadRegister>
 801b292:	4603      	mov	r3, r0
 801b294:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801b296:	7ffb      	ldrb	r3, [r7, #31]
 801b298:	08db      	lsrs	r3, r3, #3
 801b29a:	b2db      	uxtb	r3, r3
 801b29c:	f003 0303 	and.w	r3, r3, #3
 801b2a0:	3328      	adds	r3, #40	@ 0x28
 801b2a2:	443b      	add	r3, r7
 801b2a4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801b2a8:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801b2aa:	7ffb      	ldrb	r3, [r7, #31]
 801b2ac:	f003 0307 	and.w	r3, r3, #7
 801b2b0:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801b2b2:	7fba      	ldrb	r2, [r7, #30]
 801b2b4:	7f7b      	ldrb	r3, [r7, #29]
 801b2b6:	3301      	adds	r3, #1
 801b2b8:	fa02 f303 	lsl.w	r3, r2, r3
 801b2bc:	461a      	mov	r2, r3
 801b2be:	4b28      	ldr	r3, [pc, #160]	@ (801b360 <SUBGRF_GetCFO+0xe4>)
 801b2c0:	fbb3 f3f2 	udiv	r3, r3, r2
 801b2c4:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801b2c6:	69ba      	ldr	r2, [r7, #24]
 801b2c8:	687b      	ldr	r3, [r7, #4]
 801b2ca:	fbb2 f3f3 	udiv	r3, r2, r3
 801b2ce:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801b2d0:	2301      	movs	r3, #1
 801b2d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801b2d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b2da:	697a      	ldr	r2, [r7, #20]
 801b2dc:	fb02 f303 	mul.w	r3, r2, r3
 801b2e0:	2b07      	cmp	r3, #7
 801b2e2:	d802      	bhi.n	801b2ea <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801b2e4:	2302      	movs	r3, #2
 801b2e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 801b2ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b2ee:	697a      	ldr	r2, [r7, #20]
 801b2f0:	fb02 f303 	mul.w	r3, r2, r3
 801b2f4:	2b03      	cmp	r3, #3
 801b2f6:	d802      	bhi.n	801b2fe <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801b2f8:	2304      	movs	r3, #4
 801b2fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801b2fe:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801b302:	69bb      	ldr	r3, [r7, #24]
 801b304:	fb02 f303 	mul.w	r3, r2, r3
 801b308:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801b30a:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 801b30e:	f7ff fd87 	bl	801ae20 <SUBGRF_ReadRegister>
 801b312:	4603      	mov	r3, r0
 801b314:	021b      	lsls	r3, r3, #8
 801b316:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 801b31a:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801b31c:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 801b320:	f7ff fd7e 	bl	801ae20 <SUBGRF_ReadRegister>
 801b324:	4603      	mov	r3, r0
 801b326:	461a      	mov	r2, r3
 801b328:	6a3b      	ldr	r3, [r7, #32]
 801b32a:	4313      	orrs	r3, r2
 801b32c:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801b32e:	6a3b      	ldr	r3, [r7, #32]
 801b330:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801b334:	2b00      	cmp	r3, #0
 801b336:	d005      	beq.n	801b344 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801b338:	6a3b      	ldr	r3, [r7, #32]
 801b33a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801b33e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801b342:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801b344:	693b      	ldr	r3, [r7, #16]
 801b346:	095b      	lsrs	r3, r3, #5
 801b348:	6a3a      	ldr	r2, [r7, #32]
 801b34a:	fb02 f303 	mul.w	r3, r2, r3
 801b34e:	11da      	asrs	r2, r3, #7
 801b350:	683b      	ldr	r3, [r7, #0]
 801b352:	601a      	str	r2, [r3, #0]
}
 801b354:	bf00      	nop
 801b356:	3728      	adds	r7, #40	@ 0x28
 801b358:	46bd      	mov	sp, r7
 801b35a:	bd80      	pop	{r7, pc}
 801b35c:	0c0a0804 	.word	0x0c0a0804
 801b360:	01e84800 	.word	0x01e84800

0801b364 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801b364:	b480      	push	{r7}
 801b366:	b087      	sub	sp, #28
 801b368:	af00      	add	r7, sp, #0
 801b36a:	4603      	mov	r3, r0
 801b36c:	60b9      	str	r1, [r7, #8]
 801b36e:	607a      	str	r2, [r7, #4]
 801b370:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801b372:	2300      	movs	r3, #0
 801b374:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801b376:	f04f 33ff 	mov.w	r3, #4294967295
 801b37a:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801b37c:	697b      	ldr	r3, [r7, #20]
}
 801b37e:	4618      	mov	r0, r3
 801b380:	371c      	adds	r7, #28
 801b382:	46bd      	mov	sp, r7
 801b384:	bc80      	pop	{r7}
 801b386:	4770      	bx	lr

0801b388 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 801b388:	b480      	push	{r7}
 801b38a:	b087      	sub	sp, #28
 801b38c:	af00      	add	r7, sp, #0
 801b38e:	4603      	mov	r3, r0
 801b390:	60b9      	str	r1, [r7, #8]
 801b392:	607a      	str	r2, [r7, #4]
 801b394:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801b396:	2300      	movs	r3, #0
 801b398:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 801b39a:	f04f 33ff 	mov.w	r3, #4294967295
 801b39e:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801b3a0:	697b      	ldr	r3, [r7, #20]
}
 801b3a2:	4618      	mov	r0, r3
 801b3a4:	371c      	adds	r7, #28
 801b3a6:	46bd      	mov	sp, r7
 801b3a8:	bc80      	pop	{r7}
 801b3aa:	4770      	bx	lr

0801b3ac <RFW_DeInit>:
    return -1;
#endif /* RFW_ENABLE == 1 */
}

void RFW_DeInit( void )
{
 801b3ac:	b480      	push	{r7}
 801b3ae:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801b3b0:	bf00      	nop
 801b3b2:	46bd      	mov	sp, r7
 801b3b4:	bc80      	pop	{r7}
 801b3b6:	4770      	bx	lr

0801b3b8 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 801b3b8:	b480      	push	{r7}
 801b3ba:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 801b3bc:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801b3be:	4618      	mov	r0, r3
 801b3c0:	46bd      	mov	sp, r7
 801b3c2:	bc80      	pop	{r7}
 801b3c4:	4770      	bx	lr

0801b3c6 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 801b3c6:	b480      	push	{r7}
 801b3c8:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801b3ca:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801b3cc:	4618      	mov	r0, r3
 801b3ce:	46bd      	mov	sp, r7
 801b3d0:	bc80      	pop	{r7}
 801b3d2:	4770      	bx	lr

0801b3d4 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 801b3d4:	b480      	push	{r7}
 801b3d6:	b083      	sub	sp, #12
 801b3d8:	af00      	add	r7, sp, #0
 801b3da:	4603      	mov	r3, r0
 801b3dc:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801b3de:	bf00      	nop
 801b3e0:	370c      	adds	r7, #12
 801b3e2:	46bd      	mov	sp, r7
 801b3e4:	bc80      	pop	{r7}
 801b3e6:	4770      	bx	lr

0801b3e8 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801b3e8:	b480      	push	{r7}
 801b3ea:	b087      	sub	sp, #28
 801b3ec:	af00      	add	r7, sp, #0
 801b3ee:	60f8      	str	r0, [r7, #12]
 801b3f0:	460b      	mov	r3, r1
 801b3f2:	607a      	str	r2, [r7, #4]
 801b3f4:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801b3f6:	f04f 33ff 	mov.w	r3, #4294967295
 801b3fa:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801b3fc:	697b      	ldr	r3, [r7, #20]
}
 801b3fe:	4618      	mov	r0, r3
 801b400:	371c      	adds	r7, #28
 801b402:	46bd      	mov	sp, r7
 801b404:	bc80      	pop	{r7}
 801b406:	4770      	bx	lr

0801b408 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801b408:	b480      	push	{r7}
 801b40a:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801b40c:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801b410:	4618      	mov	r0, r3
 801b412:	46bd      	mov	sp, r7
 801b414:	bc80      	pop	{r7}
 801b416:	4770      	bx	lr

0801b418 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801b418:	b480      	push	{r7}
 801b41a:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801b41c:	bf00      	nop
 801b41e:	46bd      	mov	sp, r7
 801b420:	bc80      	pop	{r7}
 801b422:	4770      	bx	lr

0801b424 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801b424:	b480      	push	{r7}
 801b426:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801b428:	bf00      	nop
 801b42a:	46bd      	mov	sp, r7
 801b42c:	bc80      	pop	{r7}
 801b42e:	4770      	bx	lr

0801b430 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 801b430:	b480      	push	{r7}
 801b432:	b083      	sub	sp, #12
 801b434:	af00      	add	r7, sp, #0
 801b436:	4603      	mov	r3, r0
 801b438:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801b43a:	bf00      	nop
 801b43c:	370c      	adds	r7, #12
 801b43e:	46bd      	mov	sp, r7
 801b440:	bc80      	pop	{r7}
 801b442:	4770      	bx	lr

0801b444 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801b444:	b480      	push	{r7}
 801b446:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801b448:	4b04      	ldr	r3, [pc, #16]	@ (801b45c <UTIL_LPM_Init+0x18>)
 801b44a:	2200      	movs	r2, #0
 801b44c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801b44e:	4b04      	ldr	r3, [pc, #16]	@ (801b460 <UTIL_LPM_Init+0x1c>)
 801b450:	2200      	movs	r2, #0
 801b452:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801b454:	bf00      	nop
 801b456:	46bd      	mov	sp, r7
 801b458:	bc80      	pop	{r7}
 801b45a:	4770      	bx	lr
 801b45c:	20001e40 	.word	0x20001e40
 801b460:	20001e44 	.word	0x20001e44

0801b464 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801b464:	b480      	push	{r7}
 801b466:	b087      	sub	sp, #28
 801b468:	af00      	add	r7, sp, #0
 801b46a:	6078      	str	r0, [r7, #4]
 801b46c:	460b      	mov	r3, r1
 801b46e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b470:	f3ef 8310 	mrs	r3, PRIMASK
 801b474:	613b      	str	r3, [r7, #16]
  return(result);
 801b476:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801b478:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b47a:	b672      	cpsid	i
}
 801b47c:	bf00      	nop
  
  switch( state )
 801b47e:	78fb      	ldrb	r3, [r7, #3]
 801b480:	2b00      	cmp	r3, #0
 801b482:	d008      	beq.n	801b496 <UTIL_LPM_SetStopMode+0x32>
 801b484:	2b01      	cmp	r3, #1
 801b486:	d10e      	bne.n	801b4a6 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801b488:	4b0d      	ldr	r3, [pc, #52]	@ (801b4c0 <UTIL_LPM_SetStopMode+0x5c>)
 801b48a:	681a      	ldr	r2, [r3, #0]
 801b48c:	687b      	ldr	r3, [r7, #4]
 801b48e:	4313      	orrs	r3, r2
 801b490:	4a0b      	ldr	r2, [pc, #44]	@ (801b4c0 <UTIL_LPM_SetStopMode+0x5c>)
 801b492:	6013      	str	r3, [r2, #0]
      break;
 801b494:	e008      	b.n	801b4a8 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801b496:	687b      	ldr	r3, [r7, #4]
 801b498:	43da      	mvns	r2, r3
 801b49a:	4b09      	ldr	r3, [pc, #36]	@ (801b4c0 <UTIL_LPM_SetStopMode+0x5c>)
 801b49c:	681b      	ldr	r3, [r3, #0]
 801b49e:	4013      	ands	r3, r2
 801b4a0:	4a07      	ldr	r2, [pc, #28]	@ (801b4c0 <UTIL_LPM_SetStopMode+0x5c>)
 801b4a2:	6013      	str	r3, [r2, #0]
      break;
 801b4a4:	e000      	b.n	801b4a8 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801b4a6:	bf00      	nop
 801b4a8:	697b      	ldr	r3, [r7, #20]
 801b4aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b4ac:	68fb      	ldr	r3, [r7, #12]
 801b4ae:	f383 8810 	msr	PRIMASK, r3
}
 801b4b2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801b4b4:	bf00      	nop
 801b4b6:	371c      	adds	r7, #28
 801b4b8:	46bd      	mov	sp, r7
 801b4ba:	bc80      	pop	{r7}
 801b4bc:	4770      	bx	lr
 801b4be:	bf00      	nop
 801b4c0:	20001e40 	.word	0x20001e40

0801b4c4 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801b4c4:	b480      	push	{r7}
 801b4c6:	b087      	sub	sp, #28
 801b4c8:	af00      	add	r7, sp, #0
 801b4ca:	6078      	str	r0, [r7, #4]
 801b4cc:	460b      	mov	r3, r1
 801b4ce:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b4d0:	f3ef 8310 	mrs	r3, PRIMASK
 801b4d4:	613b      	str	r3, [r7, #16]
  return(result);
 801b4d6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801b4d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b4da:	b672      	cpsid	i
}
 801b4dc:	bf00      	nop
  
  switch(state)
 801b4de:	78fb      	ldrb	r3, [r7, #3]
 801b4e0:	2b00      	cmp	r3, #0
 801b4e2:	d008      	beq.n	801b4f6 <UTIL_LPM_SetOffMode+0x32>
 801b4e4:	2b01      	cmp	r3, #1
 801b4e6:	d10e      	bne.n	801b506 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801b4e8:	4b0d      	ldr	r3, [pc, #52]	@ (801b520 <UTIL_LPM_SetOffMode+0x5c>)
 801b4ea:	681a      	ldr	r2, [r3, #0]
 801b4ec:	687b      	ldr	r3, [r7, #4]
 801b4ee:	4313      	orrs	r3, r2
 801b4f0:	4a0b      	ldr	r2, [pc, #44]	@ (801b520 <UTIL_LPM_SetOffMode+0x5c>)
 801b4f2:	6013      	str	r3, [r2, #0]
      break;
 801b4f4:	e008      	b.n	801b508 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801b4f6:	687b      	ldr	r3, [r7, #4]
 801b4f8:	43da      	mvns	r2, r3
 801b4fa:	4b09      	ldr	r3, [pc, #36]	@ (801b520 <UTIL_LPM_SetOffMode+0x5c>)
 801b4fc:	681b      	ldr	r3, [r3, #0]
 801b4fe:	4013      	ands	r3, r2
 801b500:	4a07      	ldr	r2, [pc, #28]	@ (801b520 <UTIL_LPM_SetOffMode+0x5c>)
 801b502:	6013      	str	r3, [r2, #0]
      break;
 801b504:	e000      	b.n	801b508 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801b506:	bf00      	nop
 801b508:	697b      	ldr	r3, [r7, #20]
 801b50a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b50c:	68fb      	ldr	r3, [r7, #12]
 801b50e:	f383 8810 	msr	PRIMASK, r3
}
 801b512:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801b514:	bf00      	nop
 801b516:	371c      	adds	r7, #28
 801b518:	46bd      	mov	sp, r7
 801b51a:	bc80      	pop	{r7}
 801b51c:	4770      	bx	lr
 801b51e:	bf00      	nop
 801b520:	20001e44 	.word	0x20001e44

0801b524 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801b524:	b580      	push	{r7, lr}
 801b526:	b084      	sub	sp, #16
 801b528:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b52a:	f3ef 8310 	mrs	r3, PRIMASK
 801b52e:	60bb      	str	r3, [r7, #8]
  return(result);
 801b530:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801b532:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801b534:	b672      	cpsid	i
}
 801b536:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801b538:	4b12      	ldr	r3, [pc, #72]	@ (801b584 <UTIL_LPM_EnterLowPower+0x60>)
 801b53a:	681b      	ldr	r3, [r3, #0]
 801b53c:	2b00      	cmp	r3, #0
 801b53e:	d006      	beq.n	801b54e <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801b540:	4b11      	ldr	r3, [pc, #68]	@ (801b588 <UTIL_LPM_EnterLowPower+0x64>)
 801b542:	681b      	ldr	r3, [r3, #0]
 801b544:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801b546:	4b10      	ldr	r3, [pc, #64]	@ (801b588 <UTIL_LPM_EnterLowPower+0x64>)
 801b548:	685b      	ldr	r3, [r3, #4]
 801b54a:	4798      	blx	r3
 801b54c:	e010      	b.n	801b570 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801b54e:	4b0f      	ldr	r3, [pc, #60]	@ (801b58c <UTIL_LPM_EnterLowPower+0x68>)
 801b550:	681b      	ldr	r3, [r3, #0]
 801b552:	2b00      	cmp	r3, #0
 801b554:	d006      	beq.n	801b564 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801b556:	4b0c      	ldr	r3, [pc, #48]	@ (801b588 <UTIL_LPM_EnterLowPower+0x64>)
 801b558:	689b      	ldr	r3, [r3, #8]
 801b55a:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801b55c:	4b0a      	ldr	r3, [pc, #40]	@ (801b588 <UTIL_LPM_EnterLowPower+0x64>)
 801b55e:	68db      	ldr	r3, [r3, #12]
 801b560:	4798      	blx	r3
 801b562:	e005      	b.n	801b570 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801b564:	4b08      	ldr	r3, [pc, #32]	@ (801b588 <UTIL_LPM_EnterLowPower+0x64>)
 801b566:	691b      	ldr	r3, [r3, #16]
 801b568:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801b56a:	4b07      	ldr	r3, [pc, #28]	@ (801b588 <UTIL_LPM_EnterLowPower+0x64>)
 801b56c:	695b      	ldr	r3, [r3, #20]
 801b56e:	4798      	blx	r3
 801b570:	68fb      	ldr	r3, [r7, #12]
 801b572:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b574:	687b      	ldr	r3, [r7, #4]
 801b576:	f383 8810 	msr	PRIMASK, r3
}
 801b57a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801b57c:	bf00      	nop
 801b57e:	3710      	adds	r7, #16
 801b580:	46bd      	mov	sp, r7
 801b582:	bd80      	pop	{r7, pc}
 801b584:	20001e40 	.word	0x20001e40
 801b588:	0801d500 	.word	0x0801d500
 801b58c:	20001e44 	.word	0x20001e44

0801b590 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801b590:	b480      	push	{r7}
 801b592:	b087      	sub	sp, #28
 801b594:	af00      	add	r7, sp, #0
 801b596:	60f8      	str	r0, [r7, #12]
 801b598:	60b9      	str	r1, [r7, #8]
 801b59a:	4613      	mov	r3, r2
 801b59c:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801b59e:	68fb      	ldr	r3, [r7, #12]
 801b5a0:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801b5a2:	68bb      	ldr	r3, [r7, #8]
 801b5a4:	613b      	str	r3, [r7, #16]

  while( size-- )
 801b5a6:	e007      	b.n	801b5b8 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801b5a8:	693a      	ldr	r2, [r7, #16]
 801b5aa:	1c53      	adds	r3, r2, #1
 801b5ac:	613b      	str	r3, [r7, #16]
 801b5ae:	697b      	ldr	r3, [r7, #20]
 801b5b0:	1c59      	adds	r1, r3, #1
 801b5b2:	6179      	str	r1, [r7, #20]
 801b5b4:	7812      	ldrb	r2, [r2, #0]
 801b5b6:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801b5b8:	88fb      	ldrh	r3, [r7, #6]
 801b5ba:	1e5a      	subs	r2, r3, #1
 801b5bc:	80fa      	strh	r2, [r7, #6]
 801b5be:	2b00      	cmp	r3, #0
 801b5c0:	d1f2      	bne.n	801b5a8 <UTIL_MEM_cpy_8+0x18>
    }
}
 801b5c2:	bf00      	nop
 801b5c4:	bf00      	nop
 801b5c6:	371c      	adds	r7, #28
 801b5c8:	46bd      	mov	sp, r7
 801b5ca:	bc80      	pop	{r7}
 801b5cc:	4770      	bx	lr

0801b5ce <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801b5ce:	b480      	push	{r7}
 801b5d0:	b085      	sub	sp, #20
 801b5d2:	af00      	add	r7, sp, #0
 801b5d4:	6078      	str	r0, [r7, #4]
 801b5d6:	460b      	mov	r3, r1
 801b5d8:	70fb      	strb	r3, [r7, #3]
 801b5da:	4613      	mov	r3, r2
 801b5dc:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801b5de:	687b      	ldr	r3, [r7, #4]
 801b5e0:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801b5e2:	e004      	b.n	801b5ee <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801b5e4:	68fb      	ldr	r3, [r7, #12]
 801b5e6:	1c5a      	adds	r2, r3, #1
 801b5e8:	60fa      	str	r2, [r7, #12]
 801b5ea:	78fa      	ldrb	r2, [r7, #3]
 801b5ec:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801b5ee:	883b      	ldrh	r3, [r7, #0]
 801b5f0:	1e5a      	subs	r2, r3, #1
 801b5f2:	803a      	strh	r2, [r7, #0]
 801b5f4:	2b00      	cmp	r3, #0
 801b5f6:	d1f5      	bne.n	801b5e4 <UTIL_MEM_set_8+0x16>
  }
}
 801b5f8:	bf00      	nop
 801b5fa:	bf00      	nop
 801b5fc:	3714      	adds	r7, #20
 801b5fe:	46bd      	mov	sp, r7
 801b600:	bc80      	pop	{r7}
 801b602:	4770      	bx	lr

0801b604 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801b604:	b082      	sub	sp, #8
 801b606:	b480      	push	{r7}
 801b608:	b087      	sub	sp, #28
 801b60a:	af00      	add	r7, sp, #0
 801b60c:	60f8      	str	r0, [r7, #12]
 801b60e:	1d38      	adds	r0, r7, #4
 801b610:	e880 0006 	stmia.w	r0, {r1, r2}
 801b614:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801b616:	2300      	movs	r3, #0
 801b618:	613b      	str	r3, [r7, #16]
 801b61a:	2300      	movs	r3, #0
 801b61c:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801b61e:	687a      	ldr	r2, [r7, #4]
 801b620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b622:	4413      	add	r3, r2
 801b624:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801b626:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801b62a:	b29a      	uxth	r2, r3
 801b62c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801b630:	b29b      	uxth	r3, r3
 801b632:	4413      	add	r3, r2
 801b634:	b29b      	uxth	r3, r3
 801b636:	b21b      	sxth	r3, r3
 801b638:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801b63a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b63e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801b642:	db0a      	blt.n	801b65a <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801b644:	693b      	ldr	r3, [r7, #16]
 801b646:	3301      	adds	r3, #1
 801b648:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801b64a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b64e:	b29b      	uxth	r3, r3
 801b650:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 801b654:	b29b      	uxth	r3, r3
 801b656:	b21b      	sxth	r3, r3
 801b658:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801b65a:	68fb      	ldr	r3, [r7, #12]
 801b65c:	461a      	mov	r2, r3
 801b65e:	f107 0310 	add.w	r3, r7, #16
 801b662:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b666:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801b66a:	68f8      	ldr	r0, [r7, #12]
 801b66c:	371c      	adds	r7, #28
 801b66e:	46bd      	mov	sp, r7
 801b670:	bc80      	pop	{r7}
 801b672:	b002      	add	sp, #8
 801b674:	4770      	bx	lr

0801b676 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801b676:	b082      	sub	sp, #8
 801b678:	b480      	push	{r7}
 801b67a:	b087      	sub	sp, #28
 801b67c:	af00      	add	r7, sp, #0
 801b67e:	60f8      	str	r0, [r7, #12]
 801b680:	1d38      	adds	r0, r7, #4
 801b682:	e880 0006 	stmia.w	r0, {r1, r2}
 801b686:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801b688:	2300      	movs	r3, #0
 801b68a:	613b      	str	r3, [r7, #16]
 801b68c:	2300      	movs	r3, #0
 801b68e:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801b690:	687a      	ldr	r2, [r7, #4]
 801b692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b694:	1ad3      	subs	r3, r2, r3
 801b696:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801b698:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801b69c:	b29a      	uxth	r2, r3
 801b69e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801b6a2:	b29b      	uxth	r3, r3
 801b6a4:	1ad3      	subs	r3, r2, r3
 801b6a6:	b29b      	uxth	r3, r3
 801b6a8:	b21b      	sxth	r3, r3
 801b6aa:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801b6ac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b6b0:	2b00      	cmp	r3, #0
 801b6b2:	da0a      	bge.n	801b6ca <SysTimeSub+0x54>
  {
    c.Seconds--;
 801b6b4:	693b      	ldr	r3, [r7, #16]
 801b6b6:	3b01      	subs	r3, #1
 801b6b8:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801b6ba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b6be:	b29b      	uxth	r3, r3
 801b6c0:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 801b6c4:	b29b      	uxth	r3, r3
 801b6c6:	b21b      	sxth	r3, r3
 801b6c8:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801b6ca:	68fb      	ldr	r3, [r7, #12]
 801b6cc:	461a      	mov	r2, r3
 801b6ce:	f107 0310 	add.w	r3, r7, #16
 801b6d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b6d6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801b6da:	68f8      	ldr	r0, [r7, #12]
 801b6dc:	371c      	adds	r7, #28
 801b6de:	46bd      	mov	sp, r7
 801b6e0:	bc80      	pop	{r7}
 801b6e2:	b002      	add	sp, #8
 801b6e4:	4770      	bx	lr
	...

0801b6e8 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801b6e8:	b580      	push	{r7, lr}
 801b6ea:	b088      	sub	sp, #32
 801b6ec:	af02      	add	r7, sp, #8
 801b6ee:	463b      	mov	r3, r7
 801b6f0:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801b6f4:	2300      	movs	r3, #0
 801b6f6:	60bb      	str	r3, [r7, #8]
 801b6f8:	2300      	movs	r3, #0
 801b6fa:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801b6fc:	4b10      	ldr	r3, [pc, #64]	@ (801b740 <SysTimeSet+0x58>)
 801b6fe:	691b      	ldr	r3, [r3, #16]
 801b700:	f107 0208 	add.w	r2, r7, #8
 801b704:	3204      	adds	r2, #4
 801b706:	4610      	mov	r0, r2
 801b708:	4798      	blx	r3
 801b70a:	4603      	mov	r3, r0
 801b70c:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801b70e:	f107 0010 	add.w	r0, r7, #16
 801b712:	68fb      	ldr	r3, [r7, #12]
 801b714:	9300      	str	r3, [sp, #0]
 801b716:	68bb      	ldr	r3, [r7, #8]
 801b718:	463a      	mov	r2, r7
 801b71a:	ca06      	ldmia	r2, {r1, r2}
 801b71c:	f7ff ffab 	bl	801b676 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801b720:	4b07      	ldr	r3, [pc, #28]	@ (801b740 <SysTimeSet+0x58>)
 801b722:	681b      	ldr	r3, [r3, #0]
 801b724:	693a      	ldr	r2, [r7, #16]
 801b726:	4610      	mov	r0, r2
 801b728:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801b72a:	4b05      	ldr	r3, [pc, #20]	@ (801b740 <SysTimeSet+0x58>)
 801b72c:	689b      	ldr	r3, [r3, #8]
 801b72e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801b732:	4610      	mov	r0, r2
 801b734:	4798      	blx	r3
}
 801b736:	bf00      	nop
 801b738:	3718      	adds	r7, #24
 801b73a:	46bd      	mov	sp, r7
 801b73c:	bd80      	pop	{r7, pc}
 801b73e:	bf00      	nop
 801b740:	0801d5e4 	.word	0x0801d5e4

0801b744 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801b744:	b580      	push	{r7, lr}
 801b746:	b08a      	sub	sp, #40	@ 0x28
 801b748:	af02      	add	r7, sp, #8
 801b74a:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801b74c:	2300      	movs	r3, #0
 801b74e:	61bb      	str	r3, [r7, #24]
 801b750:	2300      	movs	r3, #0
 801b752:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801b754:	2300      	movs	r3, #0
 801b756:	613b      	str	r3, [r7, #16]
 801b758:	2300      	movs	r3, #0
 801b75a:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801b75c:	4b14      	ldr	r3, [pc, #80]	@ (801b7b0 <SysTimeGet+0x6c>)
 801b75e:	691b      	ldr	r3, [r3, #16]
 801b760:	f107 0218 	add.w	r2, r7, #24
 801b764:	3204      	adds	r2, #4
 801b766:	4610      	mov	r0, r2
 801b768:	4798      	blx	r3
 801b76a:	4603      	mov	r3, r0
 801b76c:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801b76e:	4b10      	ldr	r3, [pc, #64]	@ (801b7b0 <SysTimeGet+0x6c>)
 801b770:	68db      	ldr	r3, [r3, #12]
 801b772:	4798      	blx	r3
 801b774:	4603      	mov	r3, r0
 801b776:	b21b      	sxth	r3, r3
 801b778:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801b77a:	4b0d      	ldr	r3, [pc, #52]	@ (801b7b0 <SysTimeGet+0x6c>)
 801b77c:	685b      	ldr	r3, [r3, #4]
 801b77e:	4798      	blx	r3
 801b780:	4603      	mov	r3, r0
 801b782:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801b784:	f107 0010 	add.w	r0, r7, #16
 801b788:	69fb      	ldr	r3, [r7, #28]
 801b78a:	9300      	str	r3, [sp, #0]
 801b78c:	69bb      	ldr	r3, [r7, #24]
 801b78e:	f107 0208 	add.w	r2, r7, #8
 801b792:	ca06      	ldmia	r2, {r1, r2}
 801b794:	f7ff ff36 	bl	801b604 <SysTimeAdd>

  return sysTime;
 801b798:	687b      	ldr	r3, [r7, #4]
 801b79a:	461a      	mov	r2, r3
 801b79c:	f107 0310 	add.w	r3, r7, #16
 801b7a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b7a4:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801b7a8:	6878      	ldr	r0, [r7, #4]
 801b7aa:	3720      	adds	r7, #32
 801b7ac:	46bd      	mov	sp, r7
 801b7ae:	bd80      	pop	{r7, pc}
 801b7b0:	0801d5e4 	.word	0x0801d5e4

0801b7b4 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801b7b4:	b580      	push	{r7, lr}
 801b7b6:	b084      	sub	sp, #16
 801b7b8:	af00      	add	r7, sp, #0
 801b7ba:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801b7bc:	2300      	movs	r3, #0
 801b7be:	60bb      	str	r3, [r7, #8]
 801b7c0:	2300      	movs	r3, #0
 801b7c2:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801b7c4:	4b0a      	ldr	r3, [pc, #40]	@ (801b7f0 <SysTimeGetMcuTime+0x3c>)
 801b7c6:	691b      	ldr	r3, [r3, #16]
 801b7c8:	f107 0208 	add.w	r2, r7, #8
 801b7cc:	3204      	adds	r2, #4
 801b7ce:	4610      	mov	r0, r2
 801b7d0:	4798      	blx	r3
 801b7d2:	4603      	mov	r3, r0
 801b7d4:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801b7d6:	687b      	ldr	r3, [r7, #4]
 801b7d8:	461a      	mov	r2, r3
 801b7da:	f107 0308 	add.w	r3, r7, #8
 801b7de:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b7e2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801b7e6:	6878      	ldr	r0, [r7, #4]
 801b7e8:	3710      	adds	r7, #16
 801b7ea:	46bd      	mov	sp, r7
 801b7ec:	bd80      	pop	{r7, pc}
 801b7ee:	bf00      	nop
 801b7f0:	0801d5e4 	.word	0x0801d5e4

0801b7f4 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801b7f4:	b580      	push	{r7, lr}
 801b7f6:	b088      	sub	sp, #32
 801b7f8:	af02      	add	r7, sp, #8
 801b7fa:	463b      	mov	r3, r7
 801b7fc:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801b800:	4b0f      	ldr	r3, [pc, #60]	@ (801b840 <SysTimeToMs+0x4c>)
 801b802:	68db      	ldr	r3, [r3, #12]
 801b804:	4798      	blx	r3
 801b806:	4603      	mov	r3, r0
 801b808:	b21b      	sxth	r3, r3
 801b80a:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801b80c:	4b0c      	ldr	r3, [pc, #48]	@ (801b840 <SysTimeToMs+0x4c>)
 801b80e:	685b      	ldr	r3, [r3, #4]
 801b810:	4798      	blx	r3
 801b812:	4603      	mov	r3, r0
 801b814:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801b816:	f107 0008 	add.w	r0, r7, #8
 801b81a:	697b      	ldr	r3, [r7, #20]
 801b81c:	9300      	str	r3, [sp, #0]
 801b81e:	693b      	ldr	r3, [r7, #16]
 801b820:	463a      	mov	r2, r7
 801b822:	ca06      	ldmia	r2, {r1, r2}
 801b824:	f7ff ff27 	bl	801b676 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801b828:	68bb      	ldr	r3, [r7, #8]
 801b82a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801b82e:	fb02 f303 	mul.w	r3, r2, r3
 801b832:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801b836:	4413      	add	r3, r2
}
 801b838:	4618      	mov	r0, r3
 801b83a:	3718      	adds	r7, #24
 801b83c:	46bd      	mov	sp, r7
 801b83e:	bd80      	pop	{r7, pc}
 801b840:	0801d5e4 	.word	0x0801d5e4

0801b844 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801b844:	b580      	push	{r7, lr}
 801b846:	b08a      	sub	sp, #40	@ 0x28
 801b848:	af02      	add	r7, sp, #8
 801b84a:	6078      	str	r0, [r7, #4]
 801b84c:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801b84e:	683b      	ldr	r3, [r7, #0]
 801b850:	4a19      	ldr	r2, [pc, #100]	@ (801b8b8 <SysTimeFromMs+0x74>)
 801b852:	fba2 2303 	umull	r2, r3, r2, r3
 801b856:	099b      	lsrs	r3, r3, #6
 801b858:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801b85a:	69fb      	ldr	r3, [r7, #28]
 801b85c:	617b      	str	r3, [r7, #20]
 801b85e:	683b      	ldr	r3, [r7, #0]
 801b860:	b29a      	uxth	r2, r3
 801b862:	69fb      	ldr	r3, [r7, #28]
 801b864:	b29b      	uxth	r3, r3
 801b866:	4619      	mov	r1, r3
 801b868:	0149      	lsls	r1, r1, #5
 801b86a:	1ac9      	subs	r1, r1, r3
 801b86c:	0089      	lsls	r1, r1, #2
 801b86e:	440b      	add	r3, r1
 801b870:	00db      	lsls	r3, r3, #3
 801b872:	b29b      	uxth	r3, r3
 801b874:	1ad3      	subs	r3, r2, r3
 801b876:	b29b      	uxth	r3, r3
 801b878:	b21b      	sxth	r3, r3
 801b87a:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801b87c:	f107 030c 	add.w	r3, r7, #12
 801b880:	2200      	movs	r2, #0
 801b882:	601a      	str	r2, [r3, #0]
 801b884:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801b886:	4b0d      	ldr	r3, [pc, #52]	@ (801b8bc <SysTimeFromMs+0x78>)
 801b888:	68db      	ldr	r3, [r3, #12]
 801b88a:	4798      	blx	r3
 801b88c:	4603      	mov	r3, r0
 801b88e:	b21b      	sxth	r3, r3
 801b890:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801b892:	4b0a      	ldr	r3, [pc, #40]	@ (801b8bc <SysTimeFromMs+0x78>)
 801b894:	685b      	ldr	r3, [r3, #4]
 801b896:	4798      	blx	r3
 801b898:	4603      	mov	r3, r0
 801b89a:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801b89c:	6878      	ldr	r0, [r7, #4]
 801b89e:	693b      	ldr	r3, [r7, #16]
 801b8a0:	9300      	str	r3, [sp, #0]
 801b8a2:	68fb      	ldr	r3, [r7, #12]
 801b8a4:	f107 0214 	add.w	r2, r7, #20
 801b8a8:	ca06      	ldmia	r2, {r1, r2}
 801b8aa:	f7ff feab 	bl	801b604 <SysTimeAdd>
}
 801b8ae:	6878      	ldr	r0, [r7, #4]
 801b8b0:	3720      	adds	r7, #32
 801b8b2:	46bd      	mov	sp, r7
 801b8b4:	bd80      	pop	{r7, pc}
 801b8b6:	bf00      	nop
 801b8b8:	10624dd3 	.word	0x10624dd3
 801b8bc:	0801d5e4 	.word	0x0801d5e4

0801b8c0 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801b8c0:	b480      	push	{r7}
 801b8c2:	b085      	sub	sp, #20
 801b8c4:	af00      	add	r7, sp, #0
 801b8c6:	6078      	str	r0, [r7, #4]
  int i = 0;
 801b8c8:	2300      	movs	r3, #0
 801b8ca:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801b8cc:	e00e      	b.n	801b8ec <ee_skip_atoi+0x2c>
 801b8ce:	68fa      	ldr	r2, [r7, #12]
 801b8d0:	4613      	mov	r3, r2
 801b8d2:	009b      	lsls	r3, r3, #2
 801b8d4:	4413      	add	r3, r2
 801b8d6:	005b      	lsls	r3, r3, #1
 801b8d8:	4618      	mov	r0, r3
 801b8da:	687b      	ldr	r3, [r7, #4]
 801b8dc:	681b      	ldr	r3, [r3, #0]
 801b8de:	1c59      	adds	r1, r3, #1
 801b8e0:	687a      	ldr	r2, [r7, #4]
 801b8e2:	6011      	str	r1, [r2, #0]
 801b8e4:	781b      	ldrb	r3, [r3, #0]
 801b8e6:	4403      	add	r3, r0
 801b8e8:	3b30      	subs	r3, #48	@ 0x30
 801b8ea:	60fb      	str	r3, [r7, #12]
 801b8ec:	687b      	ldr	r3, [r7, #4]
 801b8ee:	681b      	ldr	r3, [r3, #0]
 801b8f0:	781b      	ldrb	r3, [r3, #0]
 801b8f2:	2b2f      	cmp	r3, #47	@ 0x2f
 801b8f4:	d904      	bls.n	801b900 <ee_skip_atoi+0x40>
 801b8f6:	687b      	ldr	r3, [r7, #4]
 801b8f8:	681b      	ldr	r3, [r3, #0]
 801b8fa:	781b      	ldrb	r3, [r3, #0]
 801b8fc:	2b39      	cmp	r3, #57	@ 0x39
 801b8fe:	d9e6      	bls.n	801b8ce <ee_skip_atoi+0xe>
  return i;
 801b900:	68fb      	ldr	r3, [r7, #12]
}
 801b902:	4618      	mov	r0, r3
 801b904:	3714      	adds	r7, #20
 801b906:	46bd      	mov	sp, r7
 801b908:	bc80      	pop	{r7}
 801b90a:	4770      	bx	lr

0801b90c <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801b90c:	b480      	push	{r7}
 801b90e:	b099      	sub	sp, #100	@ 0x64
 801b910:	af00      	add	r7, sp, #0
 801b912:	60f8      	str	r0, [r7, #12]
 801b914:	60b9      	str	r1, [r7, #8]
 801b916:	607a      	str	r2, [r7, #4]
 801b918:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801b91a:	4b71      	ldr	r3, [pc, #452]	@ (801bae0 <ee_number+0x1d4>)
 801b91c:	681b      	ldr	r3, [r3, #0]
 801b91e:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801b920:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b922:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b926:	2b00      	cmp	r3, #0
 801b928:	d002      	beq.n	801b930 <ee_number+0x24>
 801b92a:	4b6e      	ldr	r3, [pc, #440]	@ (801bae4 <ee_number+0x1d8>)
 801b92c:	681b      	ldr	r3, [r3, #0]
 801b92e:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801b930:	683b      	ldr	r3, [r7, #0]
 801b932:	2b01      	cmp	r3, #1
 801b934:	dd02      	ble.n	801b93c <ee_number+0x30>
 801b936:	683b      	ldr	r3, [r7, #0]
 801b938:	2b24      	cmp	r3, #36	@ 0x24
 801b93a:	dd01      	ble.n	801b940 <ee_number+0x34>
 801b93c:	2300      	movs	r3, #0
 801b93e:	e0ca      	b.n	801bad6 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801b940:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b942:	f003 0301 	and.w	r3, r3, #1
 801b946:	2b00      	cmp	r3, #0
 801b948:	d001      	beq.n	801b94e <ee_number+0x42>
 801b94a:	2330      	movs	r3, #48	@ 0x30
 801b94c:	e000      	b.n	801b950 <ee_number+0x44>
 801b94e:	2320      	movs	r3, #32
 801b950:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 801b954:	2300      	movs	r3, #0
 801b956:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 801b95a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b95c:	f003 0302 	and.w	r3, r3, #2
 801b960:	2b00      	cmp	r3, #0
 801b962:	d00b      	beq.n	801b97c <ee_number+0x70>
  {
    if (num < 0)
 801b964:	687b      	ldr	r3, [r7, #4]
 801b966:	2b00      	cmp	r3, #0
 801b968:	da08      	bge.n	801b97c <ee_number+0x70>
    {
      sign = '-';
 801b96a:	232d      	movs	r3, #45	@ 0x2d
 801b96c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 801b970:	687b      	ldr	r3, [r7, #4]
 801b972:	425b      	negs	r3, r3
 801b974:	607b      	str	r3, [r7, #4]
      size--;
 801b976:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b978:	3b01      	subs	r3, #1
 801b97a:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801b97c:	2300      	movs	r3, #0
 801b97e:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 801b980:	687b      	ldr	r3, [r7, #4]
 801b982:	2b00      	cmp	r3, #0
 801b984:	d11e      	bne.n	801b9c4 <ee_number+0xb8>
    tmp[i++] = '0';
 801b986:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b988:	1c5a      	adds	r2, r3, #1
 801b98a:	657a      	str	r2, [r7, #84]	@ 0x54
 801b98c:	3360      	adds	r3, #96	@ 0x60
 801b98e:	443b      	add	r3, r7
 801b990:	2230      	movs	r2, #48	@ 0x30
 801b992:	f803 2c50 	strb.w	r2, [r3, #-80]
 801b996:	e018      	b.n	801b9ca <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801b998:	687b      	ldr	r3, [r7, #4]
 801b99a:	683a      	ldr	r2, [r7, #0]
 801b99c:	fbb3 f1f2 	udiv	r1, r3, r2
 801b9a0:	fb01 f202 	mul.w	r2, r1, r2
 801b9a4:	1a9b      	subs	r3, r3, r2
 801b9a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801b9a8:	441a      	add	r2, r3
 801b9aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b9ac:	1c59      	adds	r1, r3, #1
 801b9ae:	6579      	str	r1, [r7, #84]	@ 0x54
 801b9b0:	7812      	ldrb	r2, [r2, #0]
 801b9b2:	3360      	adds	r3, #96	@ 0x60
 801b9b4:	443b      	add	r3, r7
 801b9b6:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801b9ba:	687a      	ldr	r2, [r7, #4]
 801b9bc:	683b      	ldr	r3, [r7, #0]
 801b9be:	fbb2 f3f3 	udiv	r3, r2, r3
 801b9c2:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801b9c4:	687b      	ldr	r3, [r7, #4]
 801b9c6:	2b00      	cmp	r3, #0
 801b9c8:	d1e6      	bne.n	801b998 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801b9ca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b9cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b9ce:	429a      	cmp	r2, r3
 801b9d0:	dd01      	ble.n	801b9d6 <ee_number+0xca>
 801b9d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b9d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 801b9d6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801b9d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b9da:	1ad3      	subs	r3, r2, r3
 801b9dc:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801b9de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b9e0:	f003 0301 	and.w	r3, r3, #1
 801b9e4:	2b00      	cmp	r3, #0
 801b9e6:	d112      	bne.n	801ba0e <ee_number+0x102>
 801b9e8:	e00c      	b.n	801ba04 <ee_number+0xf8>
 801b9ea:	68fb      	ldr	r3, [r7, #12]
 801b9ec:	1c5a      	adds	r2, r3, #1
 801b9ee:	60fa      	str	r2, [r7, #12]
 801b9f0:	2220      	movs	r2, #32
 801b9f2:	701a      	strb	r2, [r3, #0]
 801b9f4:	68bb      	ldr	r3, [r7, #8]
 801b9f6:	3b01      	subs	r3, #1
 801b9f8:	60bb      	str	r3, [r7, #8]
 801b9fa:	68bb      	ldr	r3, [r7, #8]
 801b9fc:	2b00      	cmp	r3, #0
 801b9fe:	d101      	bne.n	801ba04 <ee_number+0xf8>
 801ba00:	68fb      	ldr	r3, [r7, #12]
 801ba02:	e068      	b.n	801bad6 <ee_number+0x1ca>
 801ba04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801ba06:	1e5a      	subs	r2, r3, #1
 801ba08:	66ba      	str	r2, [r7, #104]	@ 0x68
 801ba0a:	2b00      	cmp	r3, #0
 801ba0c:	dced      	bgt.n	801b9ea <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801ba0e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801ba12:	2b00      	cmp	r3, #0
 801ba14:	d01b      	beq.n	801ba4e <ee_number+0x142>
 801ba16:	68fb      	ldr	r3, [r7, #12]
 801ba18:	1c5a      	adds	r2, r3, #1
 801ba1a:	60fa      	str	r2, [r7, #12]
 801ba1c:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801ba20:	701a      	strb	r2, [r3, #0]
 801ba22:	68bb      	ldr	r3, [r7, #8]
 801ba24:	3b01      	subs	r3, #1
 801ba26:	60bb      	str	r3, [r7, #8]
 801ba28:	68bb      	ldr	r3, [r7, #8]
 801ba2a:	2b00      	cmp	r3, #0
 801ba2c:	d10f      	bne.n	801ba4e <ee_number+0x142>
 801ba2e:	68fb      	ldr	r3, [r7, #12]
 801ba30:	e051      	b.n	801bad6 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801ba32:	68fb      	ldr	r3, [r7, #12]
 801ba34:	1c5a      	adds	r2, r3, #1
 801ba36:	60fa      	str	r2, [r7, #12]
 801ba38:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 801ba3c:	701a      	strb	r2, [r3, #0]
 801ba3e:	68bb      	ldr	r3, [r7, #8]
 801ba40:	3b01      	subs	r3, #1
 801ba42:	60bb      	str	r3, [r7, #8]
 801ba44:	68bb      	ldr	r3, [r7, #8]
 801ba46:	2b00      	cmp	r3, #0
 801ba48:	d101      	bne.n	801ba4e <ee_number+0x142>
 801ba4a:	68fb      	ldr	r3, [r7, #12]
 801ba4c:	e043      	b.n	801bad6 <ee_number+0x1ca>
 801ba4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801ba50:	1e5a      	subs	r2, r3, #1
 801ba52:	66ba      	str	r2, [r7, #104]	@ 0x68
 801ba54:	2b00      	cmp	r3, #0
 801ba56:	dcec      	bgt.n	801ba32 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801ba58:	e00c      	b.n	801ba74 <ee_number+0x168>
 801ba5a:	68fb      	ldr	r3, [r7, #12]
 801ba5c:	1c5a      	adds	r2, r3, #1
 801ba5e:	60fa      	str	r2, [r7, #12]
 801ba60:	2230      	movs	r2, #48	@ 0x30
 801ba62:	701a      	strb	r2, [r3, #0]
 801ba64:	68bb      	ldr	r3, [r7, #8]
 801ba66:	3b01      	subs	r3, #1
 801ba68:	60bb      	str	r3, [r7, #8]
 801ba6a:	68bb      	ldr	r3, [r7, #8]
 801ba6c:	2b00      	cmp	r3, #0
 801ba6e:	d101      	bne.n	801ba74 <ee_number+0x168>
 801ba70:	68fb      	ldr	r3, [r7, #12]
 801ba72:	e030      	b.n	801bad6 <ee_number+0x1ca>
 801ba74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ba76:	1e5a      	subs	r2, r3, #1
 801ba78:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801ba7a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801ba7c:	429a      	cmp	r2, r3
 801ba7e:	dbec      	blt.n	801ba5a <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801ba80:	e010      	b.n	801baa4 <ee_number+0x198>
 801ba82:	68fb      	ldr	r3, [r7, #12]
 801ba84:	1c5a      	adds	r2, r3, #1
 801ba86:	60fa      	str	r2, [r7, #12]
 801ba88:	f107 0110 	add.w	r1, r7, #16
 801ba8c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801ba8e:	440a      	add	r2, r1
 801ba90:	7812      	ldrb	r2, [r2, #0]
 801ba92:	701a      	strb	r2, [r3, #0]
 801ba94:	68bb      	ldr	r3, [r7, #8]
 801ba96:	3b01      	subs	r3, #1
 801ba98:	60bb      	str	r3, [r7, #8]
 801ba9a:	68bb      	ldr	r3, [r7, #8]
 801ba9c:	2b00      	cmp	r3, #0
 801ba9e:	d101      	bne.n	801baa4 <ee_number+0x198>
 801baa0:	68fb      	ldr	r3, [r7, #12]
 801baa2:	e018      	b.n	801bad6 <ee_number+0x1ca>
 801baa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801baa6:	1e5a      	subs	r2, r3, #1
 801baa8:	657a      	str	r2, [r7, #84]	@ 0x54
 801baaa:	2b00      	cmp	r3, #0
 801baac:	dce9      	bgt.n	801ba82 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801baae:	e00c      	b.n	801baca <ee_number+0x1be>
 801bab0:	68fb      	ldr	r3, [r7, #12]
 801bab2:	1c5a      	adds	r2, r3, #1
 801bab4:	60fa      	str	r2, [r7, #12]
 801bab6:	2220      	movs	r2, #32
 801bab8:	701a      	strb	r2, [r3, #0]
 801baba:	68bb      	ldr	r3, [r7, #8]
 801babc:	3b01      	subs	r3, #1
 801babe:	60bb      	str	r3, [r7, #8]
 801bac0:	68bb      	ldr	r3, [r7, #8]
 801bac2:	2b00      	cmp	r3, #0
 801bac4:	d101      	bne.n	801baca <ee_number+0x1be>
 801bac6:	68fb      	ldr	r3, [r7, #12]
 801bac8:	e005      	b.n	801bad6 <ee_number+0x1ca>
 801baca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801bacc:	1e5a      	subs	r2, r3, #1
 801bace:	66ba      	str	r2, [r7, #104]	@ 0x68
 801bad0:	2b00      	cmp	r3, #0
 801bad2:	dced      	bgt.n	801bab0 <ee_number+0x1a4>

  return str;
 801bad4:	68fb      	ldr	r3, [r7, #12]
}
 801bad6:	4618      	mov	r0, r3
 801bad8:	3764      	adds	r7, #100	@ 0x64
 801bada:	46bd      	mov	sp, r7
 801badc:	bc80      	pop	{r7}
 801bade:	4770      	bx	lr
 801bae0:	2000014c 	.word	0x2000014c
 801bae4:	20000150 	.word	0x20000150

0801bae8 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801bae8:	b580      	push	{r7, lr}
 801baea:	b092      	sub	sp, #72	@ 0x48
 801baec:	af04      	add	r7, sp, #16
 801baee:	60f8      	str	r0, [r7, #12]
 801baf0:	60b9      	str	r1, [r7, #8]
 801baf2:	607a      	str	r2, [r7, #4]
 801baf4:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801baf6:	68bb      	ldr	r3, [r7, #8]
 801baf8:	2b00      	cmp	r3, #0
 801bafa:	dc01      	bgt.n	801bb00 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801bafc:	2300      	movs	r3, #0
 801bafe:	e13e      	b.n	801bd7e <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801bb00:	68fb      	ldr	r3, [r7, #12]
 801bb02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801bb04:	e128      	b.n	801bd58 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801bb06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801bb08:	68fb      	ldr	r3, [r7, #12]
 801bb0a:	1ad2      	subs	r2, r2, r3
 801bb0c:	68bb      	ldr	r3, [r7, #8]
 801bb0e:	3b01      	subs	r3, #1
 801bb10:	429a      	cmp	r2, r3
 801bb12:	f280 812e 	bge.w	801bd72 <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801bb16:	687b      	ldr	r3, [r7, #4]
 801bb18:	781b      	ldrb	r3, [r3, #0]
 801bb1a:	2b25      	cmp	r3, #37	@ 0x25
 801bb1c:	d006      	beq.n	801bb2c <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801bb1e:	687a      	ldr	r2, [r7, #4]
 801bb20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bb22:	1c59      	adds	r1, r3, #1
 801bb24:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801bb26:	7812      	ldrb	r2, [r2, #0]
 801bb28:	701a      	strb	r2, [r3, #0]
      continue;
 801bb2a:	e112      	b.n	801bd52 <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801bb2c:	2300      	movs	r3, #0
 801bb2e:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801bb30:	687b      	ldr	r3, [r7, #4]
 801bb32:	3301      	adds	r3, #1
 801bb34:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801bb36:	687b      	ldr	r3, [r7, #4]
 801bb38:	781b      	ldrb	r3, [r3, #0]
 801bb3a:	2b30      	cmp	r3, #48	@ 0x30
 801bb3c:	d103      	bne.n	801bb46 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801bb3e:	6a3b      	ldr	r3, [r7, #32]
 801bb40:	f043 0301 	orr.w	r3, r3, #1
 801bb44:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801bb46:	f04f 33ff 	mov.w	r3, #4294967295
 801bb4a:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801bb4c:	687b      	ldr	r3, [r7, #4]
 801bb4e:	781b      	ldrb	r3, [r3, #0]
 801bb50:	2b2f      	cmp	r3, #47	@ 0x2f
 801bb52:	d908      	bls.n	801bb66 <tiny_vsnprintf_like+0x7e>
 801bb54:	687b      	ldr	r3, [r7, #4]
 801bb56:	781b      	ldrb	r3, [r3, #0]
 801bb58:	2b39      	cmp	r3, #57	@ 0x39
 801bb5a:	d804      	bhi.n	801bb66 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801bb5c:	1d3b      	adds	r3, r7, #4
 801bb5e:	4618      	mov	r0, r3
 801bb60:	f7ff feae 	bl	801b8c0 <ee_skip_atoi>
 801bb64:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801bb66:	f04f 33ff 	mov.w	r3, #4294967295
 801bb6a:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801bb6c:	f04f 33ff 	mov.w	r3, #4294967295
 801bb70:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801bb72:	230a      	movs	r3, #10
 801bb74:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 801bb76:	687b      	ldr	r3, [r7, #4]
 801bb78:	781b      	ldrb	r3, [r3, #0]
 801bb7a:	3b58      	subs	r3, #88	@ 0x58
 801bb7c:	2b20      	cmp	r3, #32
 801bb7e:	f200 8094 	bhi.w	801bcaa <tiny_vsnprintf_like+0x1c2>
 801bb82:	a201      	add	r2, pc, #4	@ (adr r2, 801bb88 <tiny_vsnprintf_like+0xa0>)
 801bb84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bb88:	0801bc93 	.word	0x0801bc93
 801bb8c:	0801bcab 	.word	0x0801bcab
 801bb90:	0801bcab 	.word	0x0801bcab
 801bb94:	0801bcab 	.word	0x0801bcab
 801bb98:	0801bcab 	.word	0x0801bcab
 801bb9c:	0801bcab 	.word	0x0801bcab
 801bba0:	0801bcab 	.word	0x0801bcab
 801bba4:	0801bcab 	.word	0x0801bcab
 801bba8:	0801bcab 	.word	0x0801bcab
 801bbac:	0801bcab 	.word	0x0801bcab
 801bbb0:	0801bcab 	.word	0x0801bcab
 801bbb4:	0801bc17 	.word	0x0801bc17
 801bbb8:	0801bca1 	.word	0x0801bca1
 801bbbc:	0801bcab 	.word	0x0801bcab
 801bbc0:	0801bcab 	.word	0x0801bcab
 801bbc4:	0801bcab 	.word	0x0801bcab
 801bbc8:	0801bcab 	.word	0x0801bcab
 801bbcc:	0801bca1 	.word	0x0801bca1
 801bbd0:	0801bcab 	.word	0x0801bcab
 801bbd4:	0801bcab 	.word	0x0801bcab
 801bbd8:	0801bcab 	.word	0x0801bcab
 801bbdc:	0801bcab 	.word	0x0801bcab
 801bbe0:	0801bcab 	.word	0x0801bcab
 801bbe4:	0801bcab 	.word	0x0801bcab
 801bbe8:	0801bcab 	.word	0x0801bcab
 801bbec:	0801bcab 	.word	0x0801bcab
 801bbf0:	0801bcab 	.word	0x0801bcab
 801bbf4:	0801bc37 	.word	0x0801bc37
 801bbf8:	0801bcab 	.word	0x0801bcab
 801bbfc:	0801bcf7 	.word	0x0801bcf7
 801bc00:	0801bcab 	.word	0x0801bcab
 801bc04:	0801bcab 	.word	0x0801bcab
 801bc08:	0801bc9b 	.word	0x0801bc9b
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801bc0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bc0e:	1c5a      	adds	r2, r3, #1
 801bc10:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801bc12:	2220      	movs	r2, #32
 801bc14:	701a      	strb	r2, [r3, #0]
 801bc16:	69fb      	ldr	r3, [r7, #28]
 801bc18:	3b01      	subs	r3, #1
 801bc1a:	61fb      	str	r3, [r7, #28]
 801bc1c:	69fb      	ldr	r3, [r7, #28]
 801bc1e:	2b00      	cmp	r3, #0
 801bc20:	dcf4      	bgt.n	801bc0c <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801bc22:	683b      	ldr	r3, [r7, #0]
 801bc24:	1d1a      	adds	r2, r3, #4
 801bc26:	603a      	str	r2, [r7, #0]
 801bc28:	6819      	ldr	r1, [r3, #0]
 801bc2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bc2c:	1c5a      	adds	r2, r3, #1
 801bc2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801bc30:	b2ca      	uxtb	r2, r1
 801bc32:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801bc34:	e08d      	b.n	801bd52 <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801bc36:	683b      	ldr	r3, [r7, #0]
 801bc38:	1d1a      	adds	r2, r3, #4
 801bc3a:	603a      	str	r2, [r7, #0]
 801bc3c:	681b      	ldr	r3, [r3, #0]
 801bc3e:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 801bc40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bc42:	2b00      	cmp	r3, #0
 801bc44:	d101      	bne.n	801bc4a <tiny_vsnprintf_like+0x162>
 801bc46:	4b50      	ldr	r3, [pc, #320]	@ (801bd88 <tiny_vsnprintf_like+0x2a0>)
 801bc48:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801bc4a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801bc4c:	f7e4 fa94 	bl	8000178 <strlen>
 801bc50:	4603      	mov	r3, r0
 801bc52:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801bc54:	e004      	b.n	801bc60 <tiny_vsnprintf_like+0x178>
 801bc56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bc58:	1c5a      	adds	r2, r3, #1
 801bc5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801bc5c:	2220      	movs	r2, #32
 801bc5e:	701a      	strb	r2, [r3, #0]
 801bc60:	69fb      	ldr	r3, [r7, #28]
 801bc62:	1e5a      	subs	r2, r3, #1
 801bc64:	61fa      	str	r2, [r7, #28]
 801bc66:	693a      	ldr	r2, [r7, #16]
 801bc68:	429a      	cmp	r2, r3
 801bc6a:	dbf4      	blt.n	801bc56 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801bc6c:	2300      	movs	r3, #0
 801bc6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801bc70:	e00a      	b.n	801bc88 <tiny_vsnprintf_like+0x1a0>
 801bc72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bc74:	1c53      	adds	r3, r2, #1
 801bc76:	627b      	str	r3, [r7, #36]	@ 0x24
 801bc78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bc7a:	1c59      	adds	r1, r3, #1
 801bc7c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801bc7e:	7812      	ldrb	r2, [r2, #0]
 801bc80:	701a      	strb	r2, [r3, #0]
 801bc82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bc84:	3301      	adds	r3, #1
 801bc86:	62bb      	str	r3, [r7, #40]	@ 0x28
 801bc88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801bc8a:	693b      	ldr	r3, [r7, #16]
 801bc8c:	429a      	cmp	r2, r3
 801bc8e:	dbf0      	blt.n	801bc72 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801bc90:	e05f      	b.n	801bd52 <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801bc92:	6a3b      	ldr	r3, [r7, #32]
 801bc94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bc98:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801bc9a:	2310      	movs	r3, #16
 801bc9c:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 801bc9e:	e02b      	b.n	801bcf8 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801bca0:	6a3b      	ldr	r3, [r7, #32]
 801bca2:	f043 0302 	orr.w	r3, r3, #2
 801bca6:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801bca8:	e025      	b.n	801bcf6 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801bcaa:	687b      	ldr	r3, [r7, #4]
 801bcac:	781b      	ldrb	r3, [r3, #0]
 801bcae:	2b25      	cmp	r3, #37	@ 0x25
 801bcb0:	d004      	beq.n	801bcbc <tiny_vsnprintf_like+0x1d4>
 801bcb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bcb4:	1c5a      	adds	r2, r3, #1
 801bcb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801bcb8:	2225      	movs	r2, #37	@ 0x25
 801bcba:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801bcbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801bcbe:	68fb      	ldr	r3, [r7, #12]
 801bcc0:	1ad2      	subs	r2, r2, r3
 801bcc2:	68bb      	ldr	r3, [r7, #8]
 801bcc4:	3b01      	subs	r3, #1
 801bcc6:	429a      	cmp	r2, r3
 801bcc8:	da16      	bge.n	801bcf8 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801bcca:	687b      	ldr	r3, [r7, #4]
 801bccc:	781b      	ldrb	r3, [r3, #0]
 801bcce:	2b00      	cmp	r3, #0
 801bcd0:	d006      	beq.n	801bce0 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801bcd2:	687a      	ldr	r2, [r7, #4]
 801bcd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bcd6:	1c59      	adds	r1, r3, #1
 801bcd8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801bcda:	7812      	ldrb	r2, [r2, #0]
 801bcdc:	701a      	strb	r2, [r3, #0]
 801bcde:	e002      	b.n	801bce6 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801bce0:	687b      	ldr	r3, [r7, #4]
 801bce2:	3b01      	subs	r3, #1
 801bce4:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801bce6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801bce8:	68fb      	ldr	r3, [r7, #12]
 801bcea:	1ad2      	subs	r2, r2, r3
 801bcec:	68bb      	ldr	r3, [r7, #8]
 801bcee:	3b01      	subs	r3, #1
 801bcf0:	429a      	cmp	r2, r3
 801bcf2:	db2d      	blt.n	801bd50 <tiny_vsnprintf_like+0x268>
 801bcf4:	e000      	b.n	801bcf8 <tiny_vsnprintf_like+0x210>
        break;
 801bcf6:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801bcf8:	697b      	ldr	r3, [r7, #20]
 801bcfa:	2b6c      	cmp	r3, #108	@ 0x6c
 801bcfc:	d105      	bne.n	801bd0a <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801bcfe:	683b      	ldr	r3, [r7, #0]
 801bd00:	1d1a      	adds	r2, r3, #4
 801bd02:	603a      	str	r2, [r7, #0]
 801bd04:	681b      	ldr	r3, [r3, #0]
 801bd06:	637b      	str	r3, [r7, #52]	@ 0x34
 801bd08:	e00f      	b.n	801bd2a <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801bd0a:	6a3b      	ldr	r3, [r7, #32]
 801bd0c:	f003 0302 	and.w	r3, r3, #2
 801bd10:	2b00      	cmp	r3, #0
 801bd12:	d005      	beq.n	801bd20 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801bd14:	683b      	ldr	r3, [r7, #0]
 801bd16:	1d1a      	adds	r2, r3, #4
 801bd18:	603a      	str	r2, [r7, #0]
 801bd1a:	681b      	ldr	r3, [r3, #0]
 801bd1c:	637b      	str	r3, [r7, #52]	@ 0x34
 801bd1e:	e004      	b.n	801bd2a <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801bd20:	683b      	ldr	r3, [r7, #0]
 801bd22:	1d1a      	adds	r2, r3, #4
 801bd24:	603a      	str	r2, [r7, #0]
 801bd26:	681b      	ldr	r3, [r3, #0]
 801bd28:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801bd2a:	68bb      	ldr	r3, [r7, #8]
 801bd2c:	1e5a      	subs	r2, r3, #1
 801bd2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801bd30:	68fb      	ldr	r3, [r7, #12]
 801bd32:	1acb      	subs	r3, r1, r3
 801bd34:	1ad1      	subs	r1, r2, r3
 801bd36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801bd38:	6a3b      	ldr	r3, [r7, #32]
 801bd3a:	9302      	str	r3, [sp, #8]
 801bd3c:	69bb      	ldr	r3, [r7, #24]
 801bd3e:	9301      	str	r3, [sp, #4]
 801bd40:	69fb      	ldr	r3, [r7, #28]
 801bd42:	9300      	str	r3, [sp, #0]
 801bd44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bd46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801bd48:	f7ff fde0 	bl	801b90c <ee_number>
 801bd4c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801bd4e:	e000      	b.n	801bd52 <tiny_vsnprintf_like+0x26a>
        continue;
 801bd50:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801bd52:	687b      	ldr	r3, [r7, #4]
 801bd54:	3301      	adds	r3, #1
 801bd56:	607b      	str	r3, [r7, #4]
 801bd58:	687b      	ldr	r3, [r7, #4]
 801bd5a:	781b      	ldrb	r3, [r3, #0]
 801bd5c:	2b00      	cmp	r3, #0
 801bd5e:	f47f aed2 	bne.w	801bb06 <tiny_vsnprintf_like+0x1e>
 801bd62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801bd64:	68fb      	ldr	r3, [r7, #12]
 801bd66:	1ad2      	subs	r2, r2, r3
 801bd68:	68bb      	ldr	r3, [r7, #8]
 801bd6a:	3b01      	subs	r3, #1
 801bd6c:	429a      	cmp	r2, r3
 801bd6e:	f6bf aeca 	bge.w	801bb06 <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801bd72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd74:	2200      	movs	r2, #0
 801bd76:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801bd78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801bd7a:	68fb      	ldr	r3, [r7, #12]
 801bd7c:	1ad3      	subs	r3, r2, r3
}
 801bd7e:	4618      	mov	r0, r3
 801bd80:	3738      	adds	r7, #56	@ 0x38
 801bd82:	46bd      	mov	sp, r7
 801bd84:	bd80      	pop	{r7, pc}
 801bd86:	bf00      	nop
 801bd88:	0801d4f8 	.word	0x0801d4f8

0801bd8c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801bd8c:	b580      	push	{r7, lr}
 801bd8e:	b090      	sub	sp, #64	@ 0x40
 801bd90:	af00      	add	r7, sp, #0
 801bd92:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801bd94:	4b73      	ldr	r3, [pc, #460]	@ (801bf64 <UTIL_SEQ_Run+0x1d8>)
 801bd96:	681b      	ldr	r3, [r3, #0]
 801bd98:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 801bd9a:	4b72      	ldr	r3, [pc, #456]	@ (801bf64 <UTIL_SEQ_Run+0x1d8>)
 801bd9c:	681a      	ldr	r2, [r3, #0]
 801bd9e:	687b      	ldr	r3, [r7, #4]
 801bda0:	4013      	ands	r3, r2
 801bda2:	4a70      	ldr	r2, [pc, #448]	@ (801bf64 <UTIL_SEQ_Run+0x1d8>)
 801bda4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801bda6:	4b70      	ldr	r3, [pc, #448]	@ (801bf68 <UTIL_SEQ_Run+0x1dc>)
 801bda8:	681b      	ldr	r3, [r3, #0]
 801bdaa:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801bdac:	4b6f      	ldr	r3, [pc, #444]	@ (801bf6c <UTIL_SEQ_Run+0x1e0>)
 801bdae:	681b      	ldr	r3, [r3, #0]
 801bdb0:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801bdb2:	4b6f      	ldr	r3, [pc, #444]	@ (801bf70 <UTIL_SEQ_Run+0x1e4>)
 801bdb4:	681b      	ldr	r3, [r3, #0]
 801bdb6:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 801bdb8:	4b6e      	ldr	r3, [pc, #440]	@ (801bf74 <UTIL_SEQ_Run+0x1e8>)
 801bdba:	681b      	ldr	r3, [r3, #0]
 801bdbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801bdbe:	e08d      	b.n	801bedc <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801bdc0:	2300      	movs	r3, #0
 801bdc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801bdc4:	e002      	b.n	801bdcc <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801bdc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bdc8:	3301      	adds	r3, #1
 801bdca:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801bdcc:	4a6a      	ldr	r2, [pc, #424]	@ (801bf78 <UTIL_SEQ_Run+0x1ec>)
 801bdce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bdd0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801bdd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bdd6:	401a      	ands	r2, r3
 801bdd8:	4b62      	ldr	r3, [pc, #392]	@ (801bf64 <UTIL_SEQ_Run+0x1d8>)
 801bdda:	681b      	ldr	r3, [r3, #0]
 801bddc:	4013      	ands	r3, r2
 801bdde:	2b00      	cmp	r3, #0
 801bde0:	d0f1      	beq.n	801bdc6 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801bde2:	4a65      	ldr	r2, [pc, #404]	@ (801bf78 <UTIL_SEQ_Run+0x1ec>)
 801bde4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bde6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801bdea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bdec:	401a      	ands	r2, r3
 801bdee:	4b5d      	ldr	r3, [pc, #372]	@ (801bf64 <UTIL_SEQ_Run+0x1d8>)
 801bdf0:	681b      	ldr	r3, [r3, #0]
 801bdf2:	4013      	ands	r3, r2
 801bdf4:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801bdf6:	4a60      	ldr	r2, [pc, #384]	@ (801bf78 <UTIL_SEQ_Run+0x1ec>)
 801bdf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bdfa:	00db      	lsls	r3, r3, #3
 801bdfc:	4413      	add	r3, r2
 801bdfe:	685a      	ldr	r2, [r3, #4]
 801be00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be02:	4013      	ands	r3, r2
 801be04:	2b00      	cmp	r3, #0
 801be06:	d106      	bne.n	801be16 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801be08:	4a5b      	ldr	r2, [pc, #364]	@ (801bf78 <UTIL_SEQ_Run+0x1ec>)
 801be0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801be0c:	00db      	lsls	r3, r3, #3
 801be0e:	4413      	add	r3, r2
 801be10:	f04f 32ff 	mov.w	r2, #4294967295
 801be14:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801be16:	4a58      	ldr	r2, [pc, #352]	@ (801bf78 <UTIL_SEQ_Run+0x1ec>)
 801be18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801be1a:	00db      	lsls	r3, r3, #3
 801be1c:	4413      	add	r3, r2
 801be1e:	685a      	ldr	r2, [r3, #4]
 801be20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be22:	4013      	ands	r3, r2
 801be24:	4618      	mov	r0, r3
 801be26:	f000 f907 	bl	801c038 <SEQ_BitPosition>
 801be2a:	4603      	mov	r3, r0
 801be2c:	461a      	mov	r2, r3
 801be2e:	4b53      	ldr	r3, [pc, #332]	@ (801bf7c <UTIL_SEQ_Run+0x1f0>)
 801be30:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801be32:	4a51      	ldr	r2, [pc, #324]	@ (801bf78 <UTIL_SEQ_Run+0x1ec>)
 801be34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801be36:	00db      	lsls	r3, r3, #3
 801be38:	4413      	add	r3, r2
 801be3a:	685a      	ldr	r2, [r3, #4]
 801be3c:	4b4f      	ldr	r3, [pc, #316]	@ (801bf7c <UTIL_SEQ_Run+0x1f0>)
 801be3e:	681b      	ldr	r3, [r3, #0]
 801be40:	2101      	movs	r1, #1
 801be42:	fa01 f303 	lsl.w	r3, r1, r3
 801be46:	43db      	mvns	r3, r3
 801be48:	401a      	ands	r2, r3
 801be4a:	494b      	ldr	r1, [pc, #300]	@ (801bf78 <UTIL_SEQ_Run+0x1ec>)
 801be4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801be4e:	00db      	lsls	r3, r3, #3
 801be50:	440b      	add	r3, r1
 801be52:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801be54:	f3ef 8310 	mrs	r3, PRIMASK
 801be58:	61bb      	str	r3, [r7, #24]
  return(result);
 801be5a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801be5c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801be5e:	b672      	cpsid	i
}
 801be60:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801be62:	4b46      	ldr	r3, [pc, #280]	@ (801bf7c <UTIL_SEQ_Run+0x1f0>)
 801be64:	681b      	ldr	r3, [r3, #0]
 801be66:	2201      	movs	r2, #1
 801be68:	fa02 f303 	lsl.w	r3, r2, r3
 801be6c:	43da      	mvns	r2, r3
 801be6e:	4b3e      	ldr	r3, [pc, #248]	@ (801bf68 <UTIL_SEQ_Run+0x1dc>)
 801be70:	681b      	ldr	r3, [r3, #0]
 801be72:	4013      	ands	r3, r2
 801be74:	4a3c      	ldr	r2, [pc, #240]	@ (801bf68 <UTIL_SEQ_Run+0x1dc>)
 801be76:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801be78:	2301      	movs	r3, #1
 801be7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801be7c:	e013      	b.n	801bea6 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801be7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801be80:	3b01      	subs	r3, #1
 801be82:	4a3d      	ldr	r2, [pc, #244]	@ (801bf78 <UTIL_SEQ_Run+0x1ec>)
 801be84:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801be88:	4b3c      	ldr	r3, [pc, #240]	@ (801bf7c <UTIL_SEQ_Run+0x1f0>)
 801be8a:	681b      	ldr	r3, [r3, #0]
 801be8c:	2201      	movs	r2, #1
 801be8e:	fa02 f303 	lsl.w	r3, r2, r3
 801be92:	43da      	mvns	r2, r3
 801be94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801be96:	3b01      	subs	r3, #1
 801be98:	400a      	ands	r2, r1
 801be9a:	4937      	ldr	r1, [pc, #220]	@ (801bf78 <UTIL_SEQ_Run+0x1ec>)
 801be9c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801bea0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bea2:	3b01      	subs	r3, #1
 801bea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801bea6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bea8:	2b00      	cmp	r3, #0
 801beaa:	d1e8      	bne.n	801be7e <UTIL_SEQ_Run+0xf2>
 801beac:	6a3b      	ldr	r3, [r7, #32]
 801beae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801beb0:	697b      	ldr	r3, [r7, #20]
 801beb2:	f383 8810 	msr	PRIMASK, r3
}
 801beb6:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801beb8:	4b30      	ldr	r3, [pc, #192]	@ (801bf7c <UTIL_SEQ_Run+0x1f0>)
 801beba:	681b      	ldr	r3, [r3, #0]
 801bebc:	4a30      	ldr	r2, [pc, #192]	@ (801bf80 <UTIL_SEQ_Run+0x1f4>)
 801bebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bec2:	4798      	blx	r3

    local_taskset = TaskSet;
 801bec4:	4b28      	ldr	r3, [pc, #160]	@ (801bf68 <UTIL_SEQ_Run+0x1dc>)
 801bec6:	681b      	ldr	r3, [r3, #0]
 801bec8:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 801beca:	4b28      	ldr	r3, [pc, #160]	@ (801bf6c <UTIL_SEQ_Run+0x1e0>)
 801becc:	681b      	ldr	r3, [r3, #0]
 801bece:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 801bed0:	4b27      	ldr	r3, [pc, #156]	@ (801bf70 <UTIL_SEQ_Run+0x1e4>)
 801bed2:	681b      	ldr	r3, [r3, #0]
 801bed4:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 801bed6:	4b27      	ldr	r3, [pc, #156]	@ (801bf74 <UTIL_SEQ_Run+0x1e8>)
 801bed8:	681b      	ldr	r3, [r3, #0]
 801beda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801bedc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801bede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bee0:	401a      	ands	r2, r3
 801bee2:	4b20      	ldr	r3, [pc, #128]	@ (801bf64 <UTIL_SEQ_Run+0x1d8>)
 801bee4:	681b      	ldr	r3, [r3, #0]
 801bee6:	4013      	ands	r3, r2
 801bee8:	2b00      	cmp	r3, #0
 801beea:	d005      	beq.n	801bef8 <UTIL_SEQ_Run+0x16c>
 801beec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801beee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bef0:	4013      	ands	r3, r2
 801bef2:	2b00      	cmp	r3, #0
 801bef4:	f43f af64 	beq.w	801bdc0 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801bef8:	4b20      	ldr	r3, [pc, #128]	@ (801bf7c <UTIL_SEQ_Run+0x1f0>)
 801befa:	f04f 32ff 	mov.w	r2, #4294967295
 801befe:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801bf00:	f000 f88e 	bl	801c020 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bf04:	f3ef 8310 	mrs	r3, PRIMASK
 801bf08:	613b      	str	r3, [r7, #16]
  return(result);
 801bf0a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801bf0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801bf0e:	b672      	cpsid	i
}
 801bf10:	bf00      	nop
  local_taskset = TaskSet;
 801bf12:	4b15      	ldr	r3, [pc, #84]	@ (801bf68 <UTIL_SEQ_Run+0x1dc>)
 801bf14:	681b      	ldr	r3, [r3, #0]
 801bf16:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801bf18:	4b14      	ldr	r3, [pc, #80]	@ (801bf6c <UTIL_SEQ_Run+0x1e0>)
 801bf1a:	681b      	ldr	r3, [r3, #0]
 801bf1c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801bf1e:	4b14      	ldr	r3, [pc, #80]	@ (801bf70 <UTIL_SEQ_Run+0x1e4>)
 801bf20:	681b      	ldr	r3, [r3, #0]
 801bf22:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801bf24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801bf26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bf28:	401a      	ands	r2, r3
 801bf2a:	4b0e      	ldr	r3, [pc, #56]	@ (801bf64 <UTIL_SEQ_Run+0x1d8>)
 801bf2c:	681b      	ldr	r3, [r3, #0]
 801bf2e:	4013      	ands	r3, r2
 801bf30:	2b00      	cmp	r3, #0
 801bf32:	d107      	bne.n	801bf44 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801bf34:	4b0f      	ldr	r3, [pc, #60]	@ (801bf74 <UTIL_SEQ_Run+0x1e8>)
 801bf36:	681a      	ldr	r2, [r3, #0]
 801bf38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bf3a:	4013      	ands	r3, r2
 801bf3c:	2b00      	cmp	r3, #0
 801bf3e:	d101      	bne.n	801bf44 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801bf40:	f7e5 ff04 	bl	8001d4c <UTIL_SEQ_Idle>
 801bf44:	69fb      	ldr	r3, [r7, #28]
 801bf46:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bf48:	68fb      	ldr	r3, [r7, #12]
 801bf4a:	f383 8810 	msr	PRIMASK, r3
}
 801bf4e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801bf50:	f000 f86c 	bl	801c02c <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801bf54:	4a03      	ldr	r2, [pc, #12]	@ (801bf64 <UTIL_SEQ_Run+0x1d8>)
 801bf56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf58:	6013      	str	r3, [r2, #0]

  return;
 801bf5a:	bf00      	nop
}
 801bf5c:	3740      	adds	r7, #64	@ 0x40
 801bf5e:	46bd      	mov	sp, r7
 801bf60:	bd80      	pop	{r7, pc}
 801bf62:	bf00      	nop
 801bf64:	20000158 	.word	0x20000158
 801bf68:	20001e48 	.word	0x20001e48
 801bf6c:	20001e4c 	.word	0x20001e4c
 801bf70:	20000154 	.word	0x20000154
 801bf74:	20001e50 	.word	0x20001e50
 801bf78:	20001e68 	.word	0x20001e68
 801bf7c:	20001e54 	.word	0x20001e54
 801bf80:	20001e58 	.word	0x20001e58

0801bf84 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801bf84:	b580      	push	{r7, lr}
 801bf86:	b088      	sub	sp, #32
 801bf88:	af00      	add	r7, sp, #0
 801bf8a:	60f8      	str	r0, [r7, #12]
 801bf8c:	60b9      	str	r1, [r7, #8]
 801bf8e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bf90:	f3ef 8310 	mrs	r3, PRIMASK
 801bf94:	617b      	str	r3, [r7, #20]
  return(result);
 801bf96:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801bf98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801bf9a:	b672      	cpsid	i
}
 801bf9c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801bf9e:	68f8      	ldr	r0, [r7, #12]
 801bfa0:	f000 f84a 	bl	801c038 <SEQ_BitPosition>
 801bfa4:	4603      	mov	r3, r0
 801bfa6:	4619      	mov	r1, r3
 801bfa8:	4a06      	ldr	r2, [pc, #24]	@ (801bfc4 <UTIL_SEQ_RegTask+0x40>)
 801bfaa:	687b      	ldr	r3, [r7, #4]
 801bfac:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801bfb0:	69fb      	ldr	r3, [r7, #28]
 801bfb2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bfb4:	69bb      	ldr	r3, [r7, #24]
 801bfb6:	f383 8810 	msr	PRIMASK, r3
}
 801bfba:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801bfbc:	bf00      	nop
}
 801bfbe:	3720      	adds	r7, #32
 801bfc0:	46bd      	mov	sp, r7
 801bfc2:	bd80      	pop	{r7, pc}
 801bfc4:	20001e58 	.word	0x20001e58

0801bfc8 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801bfc8:	b480      	push	{r7}
 801bfca:	b087      	sub	sp, #28
 801bfcc:	af00      	add	r7, sp, #0
 801bfce:	6078      	str	r0, [r7, #4]
 801bfd0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bfd2:	f3ef 8310 	mrs	r3, PRIMASK
 801bfd6:	60fb      	str	r3, [r7, #12]
  return(result);
 801bfd8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801bfda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bfdc:	b672      	cpsid	i
}
 801bfde:	bf00      	nop

  TaskSet |= TaskId_bm;
 801bfe0:	4b0d      	ldr	r3, [pc, #52]	@ (801c018 <UTIL_SEQ_SetTask+0x50>)
 801bfe2:	681a      	ldr	r2, [r3, #0]
 801bfe4:	687b      	ldr	r3, [r7, #4]
 801bfe6:	4313      	orrs	r3, r2
 801bfe8:	4a0b      	ldr	r2, [pc, #44]	@ (801c018 <UTIL_SEQ_SetTask+0x50>)
 801bfea:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801bfec:	4a0b      	ldr	r2, [pc, #44]	@ (801c01c <UTIL_SEQ_SetTask+0x54>)
 801bfee:	683b      	ldr	r3, [r7, #0]
 801bff0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801bff4:	687b      	ldr	r3, [r7, #4]
 801bff6:	431a      	orrs	r2, r3
 801bff8:	4908      	ldr	r1, [pc, #32]	@ (801c01c <UTIL_SEQ_SetTask+0x54>)
 801bffa:	683b      	ldr	r3, [r7, #0]
 801bffc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801c000:	697b      	ldr	r3, [r7, #20]
 801c002:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c004:	693b      	ldr	r3, [r7, #16]
 801c006:	f383 8810 	msr	PRIMASK, r3
}
 801c00a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801c00c:	bf00      	nop
}
 801c00e:	371c      	adds	r7, #28
 801c010:	46bd      	mov	sp, r7
 801c012:	bc80      	pop	{r7}
 801c014:	4770      	bx	lr
 801c016:	bf00      	nop
 801c018:	20001e48 	.word	0x20001e48
 801c01c:	20001e68 	.word	0x20001e68

0801c020 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801c020:	b480      	push	{r7}
 801c022:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c024:	bf00      	nop
}
 801c026:	46bd      	mov	sp, r7
 801c028:	bc80      	pop	{r7}
 801c02a:	4770      	bx	lr

0801c02c <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801c02c:	b480      	push	{r7}
 801c02e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c030:	bf00      	nop
}
 801c032:	46bd      	mov	sp, r7
 801c034:	bc80      	pop	{r7}
 801c036:	4770      	bx	lr

0801c038 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801c038:	b480      	push	{r7}
 801c03a:	b085      	sub	sp, #20
 801c03c:	af00      	add	r7, sp, #0
 801c03e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801c040:	2300      	movs	r3, #0
 801c042:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801c044:	687b      	ldr	r3, [r7, #4]
 801c046:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801c048:	68bb      	ldr	r3, [r7, #8]
 801c04a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c04e:	d204      	bcs.n	801c05a <SEQ_BitPosition+0x22>
 801c050:	2310      	movs	r3, #16
 801c052:	73fb      	strb	r3, [r7, #15]
 801c054:	68bb      	ldr	r3, [r7, #8]
 801c056:	041b      	lsls	r3, r3, #16
 801c058:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801c05a:	68bb      	ldr	r3, [r7, #8]
 801c05c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801c060:	d205      	bcs.n	801c06e <SEQ_BitPosition+0x36>
 801c062:	7bfb      	ldrb	r3, [r7, #15]
 801c064:	3308      	adds	r3, #8
 801c066:	73fb      	strb	r3, [r7, #15]
 801c068:	68bb      	ldr	r3, [r7, #8]
 801c06a:	021b      	lsls	r3, r3, #8
 801c06c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801c06e:	68bb      	ldr	r3, [r7, #8]
 801c070:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801c074:	d205      	bcs.n	801c082 <SEQ_BitPosition+0x4a>
 801c076:	7bfb      	ldrb	r3, [r7, #15]
 801c078:	3304      	adds	r3, #4
 801c07a:	73fb      	strb	r3, [r7, #15]
 801c07c:	68bb      	ldr	r3, [r7, #8]
 801c07e:	011b      	lsls	r3, r3, #4
 801c080:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801c082:	68bb      	ldr	r3, [r7, #8]
 801c084:	0f1b      	lsrs	r3, r3, #28
 801c086:	4a07      	ldr	r2, [pc, #28]	@ (801c0a4 <SEQ_BitPosition+0x6c>)
 801c088:	5cd2      	ldrb	r2, [r2, r3]
 801c08a:	7bfb      	ldrb	r3, [r7, #15]
 801c08c:	4413      	add	r3, r2
 801c08e:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801c090:	7bfb      	ldrb	r3, [r7, #15]
 801c092:	f1c3 031f 	rsb	r3, r3, #31
 801c096:	b2db      	uxtb	r3, r3
}
 801c098:	4618      	mov	r0, r3
 801c09a:	3714      	adds	r7, #20
 801c09c:	46bd      	mov	sp, r7
 801c09e:	bc80      	pop	{r7}
 801c0a0:	4770      	bx	lr
 801c0a2:	bf00      	nop
 801c0a4:	0801dbc0 	.word	0x0801dbc0

0801c0a8 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801c0a8:	b580      	push	{r7, lr}
 801c0aa:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801c0ac:	4b04      	ldr	r3, [pc, #16]	@ (801c0c0 <UTIL_TIMER_Init+0x18>)
 801c0ae:	2200      	movs	r2, #0
 801c0b0:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801c0b2:	4b04      	ldr	r3, [pc, #16]	@ (801c0c4 <UTIL_TIMER_Init+0x1c>)
 801c0b4:	681b      	ldr	r3, [r3, #0]
 801c0b6:	4798      	blx	r3
 801c0b8:	4603      	mov	r3, r0
}
 801c0ba:	4618      	mov	r0, r3
 801c0bc:	bd80      	pop	{r7, pc}
 801c0be:	bf00      	nop
 801c0c0:	20001e70 	.word	0x20001e70
 801c0c4:	0801d5b8 	.word	0x0801d5b8

0801c0c8 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801c0c8:	b580      	push	{r7, lr}
 801c0ca:	b084      	sub	sp, #16
 801c0cc:	af00      	add	r7, sp, #0
 801c0ce:	60f8      	str	r0, [r7, #12]
 801c0d0:	60b9      	str	r1, [r7, #8]
 801c0d2:	603b      	str	r3, [r7, #0]
 801c0d4:	4613      	mov	r3, r2
 801c0d6:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801c0d8:	68fb      	ldr	r3, [r7, #12]
 801c0da:	2b00      	cmp	r3, #0
 801c0dc:	d023      	beq.n	801c126 <UTIL_TIMER_Create+0x5e>
 801c0de:	683b      	ldr	r3, [r7, #0]
 801c0e0:	2b00      	cmp	r3, #0
 801c0e2:	d020      	beq.n	801c126 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801c0e4:	68fb      	ldr	r3, [r7, #12]
 801c0e6:	2200      	movs	r2, #0
 801c0e8:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801c0ea:	4b11      	ldr	r3, [pc, #68]	@ (801c130 <UTIL_TIMER_Create+0x68>)
 801c0ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c0ee:	68b8      	ldr	r0, [r7, #8]
 801c0f0:	4798      	blx	r3
 801c0f2:	4602      	mov	r2, r0
 801c0f4:	68fb      	ldr	r3, [r7, #12]
 801c0f6:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801c0f8:	68fb      	ldr	r3, [r7, #12]
 801c0fa:	2200      	movs	r2, #0
 801c0fc:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801c0fe:	68fb      	ldr	r3, [r7, #12]
 801c100:	2200      	movs	r2, #0
 801c102:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801c104:	68fb      	ldr	r3, [r7, #12]
 801c106:	2200      	movs	r2, #0
 801c108:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801c10a:	68fb      	ldr	r3, [r7, #12]
 801c10c:	683a      	ldr	r2, [r7, #0]
 801c10e:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801c110:	68fb      	ldr	r3, [r7, #12]
 801c112:	69ba      	ldr	r2, [r7, #24]
 801c114:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801c116:	68fb      	ldr	r3, [r7, #12]
 801c118:	79fa      	ldrb	r2, [r7, #7]
 801c11a:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801c11c:	68fb      	ldr	r3, [r7, #12]
 801c11e:	2200      	movs	r2, #0
 801c120:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801c122:	2300      	movs	r3, #0
 801c124:	e000      	b.n	801c128 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801c126:	2301      	movs	r3, #1
  }
}
 801c128:	4618      	mov	r0, r3
 801c12a:	3710      	adds	r7, #16
 801c12c:	46bd      	mov	sp, r7
 801c12e:	bd80      	pop	{r7, pc}
 801c130:	0801d5b8 	.word	0x0801d5b8

0801c134 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801c134:	b580      	push	{r7, lr}
 801c136:	b08a      	sub	sp, #40	@ 0x28
 801c138:	af00      	add	r7, sp, #0
 801c13a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c13c:	2300      	movs	r3, #0
 801c13e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801c142:	687b      	ldr	r3, [r7, #4]
 801c144:	2b00      	cmp	r3, #0
 801c146:	d056      	beq.n	801c1f6 <UTIL_TIMER_Start+0xc2>
 801c148:	6878      	ldr	r0, [r7, #4]
 801c14a:	f000 f9a9 	bl	801c4a0 <TimerExists>
 801c14e:	4603      	mov	r3, r0
 801c150:	f083 0301 	eor.w	r3, r3, #1
 801c154:	b2db      	uxtb	r3, r3
 801c156:	2b00      	cmp	r3, #0
 801c158:	d04d      	beq.n	801c1f6 <UTIL_TIMER_Start+0xc2>
 801c15a:	687b      	ldr	r3, [r7, #4]
 801c15c:	7a5b      	ldrb	r3, [r3, #9]
 801c15e:	2b00      	cmp	r3, #0
 801c160:	d149      	bne.n	801c1f6 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c162:	f3ef 8310 	mrs	r3, PRIMASK
 801c166:	613b      	str	r3, [r7, #16]
  return(result);
 801c168:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c16a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c16c:	b672      	cpsid	i
}
 801c16e:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801c170:	687b      	ldr	r3, [r7, #4]
 801c172:	685b      	ldr	r3, [r3, #4]
 801c174:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801c176:	4b24      	ldr	r3, [pc, #144]	@ (801c208 <UTIL_TIMER_Start+0xd4>)
 801c178:	6a1b      	ldr	r3, [r3, #32]
 801c17a:	4798      	blx	r3
 801c17c:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801c17e:	6a3a      	ldr	r2, [r7, #32]
 801c180:	69bb      	ldr	r3, [r7, #24]
 801c182:	429a      	cmp	r2, r3
 801c184:	d201      	bcs.n	801c18a <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801c186:	69bb      	ldr	r3, [r7, #24]
 801c188:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801c18a:	687b      	ldr	r3, [r7, #4]
 801c18c:	6a3a      	ldr	r2, [r7, #32]
 801c18e:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801c190:	687b      	ldr	r3, [r7, #4]
 801c192:	2200      	movs	r2, #0
 801c194:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801c196:	687b      	ldr	r3, [r7, #4]
 801c198:	2201      	movs	r2, #1
 801c19a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801c19c:	687b      	ldr	r3, [r7, #4]
 801c19e:	2200      	movs	r2, #0
 801c1a0:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801c1a2:	4b1a      	ldr	r3, [pc, #104]	@ (801c20c <UTIL_TIMER_Start+0xd8>)
 801c1a4:	681b      	ldr	r3, [r3, #0]
 801c1a6:	2b00      	cmp	r3, #0
 801c1a8:	d106      	bne.n	801c1b8 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801c1aa:	4b17      	ldr	r3, [pc, #92]	@ (801c208 <UTIL_TIMER_Start+0xd4>)
 801c1ac:	691b      	ldr	r3, [r3, #16]
 801c1ae:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801c1b0:	6878      	ldr	r0, [r7, #4]
 801c1b2:	f000 f9eb 	bl	801c58c <TimerInsertNewHeadTimer>
 801c1b6:	e017      	b.n	801c1e8 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801c1b8:	4b13      	ldr	r3, [pc, #76]	@ (801c208 <UTIL_TIMER_Start+0xd4>)
 801c1ba:	699b      	ldr	r3, [r3, #24]
 801c1bc:	4798      	blx	r3
 801c1be:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801c1c0:	687b      	ldr	r3, [r7, #4]
 801c1c2:	681a      	ldr	r2, [r3, #0]
 801c1c4:	697b      	ldr	r3, [r7, #20]
 801c1c6:	441a      	add	r2, r3
 801c1c8:	687b      	ldr	r3, [r7, #4]
 801c1ca:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801c1cc:	687b      	ldr	r3, [r7, #4]
 801c1ce:	681a      	ldr	r2, [r3, #0]
 801c1d0:	4b0e      	ldr	r3, [pc, #56]	@ (801c20c <UTIL_TIMER_Start+0xd8>)
 801c1d2:	681b      	ldr	r3, [r3, #0]
 801c1d4:	681b      	ldr	r3, [r3, #0]
 801c1d6:	429a      	cmp	r2, r3
 801c1d8:	d203      	bcs.n	801c1e2 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801c1da:	6878      	ldr	r0, [r7, #4]
 801c1dc:	f000 f9d6 	bl	801c58c <TimerInsertNewHeadTimer>
 801c1e0:	e002      	b.n	801c1e8 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801c1e2:	6878      	ldr	r0, [r7, #4]
 801c1e4:	f000 f9a2 	bl	801c52c <TimerInsertTimer>
 801c1e8:	69fb      	ldr	r3, [r7, #28]
 801c1ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c1ec:	68fb      	ldr	r3, [r7, #12]
 801c1ee:	f383 8810 	msr	PRIMASK, r3
}
 801c1f2:	bf00      	nop
  {
 801c1f4:	e002      	b.n	801c1fc <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801c1f6:	2301      	movs	r3, #1
 801c1f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 801c1fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801c200:	4618      	mov	r0, r3
 801c202:	3728      	adds	r7, #40	@ 0x28
 801c204:	46bd      	mov	sp, r7
 801c206:	bd80      	pop	{r7, pc}
 801c208:	0801d5b8 	.word	0x0801d5b8
 801c20c:	20001e70 	.word	0x20001e70

0801c210 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801c210:	b580      	push	{r7, lr}
 801c212:	b088      	sub	sp, #32
 801c214:	af00      	add	r7, sp, #0
 801c216:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c218:	2300      	movs	r3, #0
 801c21a:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801c21c:	687b      	ldr	r3, [r7, #4]
 801c21e:	2b00      	cmp	r3, #0
 801c220:	d05b      	beq.n	801c2da <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c222:	f3ef 8310 	mrs	r3, PRIMASK
 801c226:	60fb      	str	r3, [r7, #12]
  return(result);
 801c228:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c22a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801c22c:	b672      	cpsid	i
}
 801c22e:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801c230:	4b2d      	ldr	r3, [pc, #180]	@ (801c2e8 <UTIL_TIMER_Stop+0xd8>)
 801c232:	681b      	ldr	r3, [r3, #0]
 801c234:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801c236:	4b2c      	ldr	r3, [pc, #176]	@ (801c2e8 <UTIL_TIMER_Stop+0xd8>)
 801c238:	681b      	ldr	r3, [r3, #0]
 801c23a:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801c23c:	687b      	ldr	r3, [r7, #4]
 801c23e:	2201      	movs	r2, #1
 801c240:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801c242:	4b29      	ldr	r3, [pc, #164]	@ (801c2e8 <UTIL_TIMER_Stop+0xd8>)
 801c244:	681b      	ldr	r3, [r3, #0]
 801c246:	2b00      	cmp	r3, #0
 801c248:	d041      	beq.n	801c2ce <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801c24a:	687b      	ldr	r3, [r7, #4]
 801c24c:	2200      	movs	r2, #0
 801c24e:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801c250:	4b25      	ldr	r3, [pc, #148]	@ (801c2e8 <UTIL_TIMER_Stop+0xd8>)
 801c252:	681b      	ldr	r3, [r3, #0]
 801c254:	687a      	ldr	r2, [r7, #4]
 801c256:	429a      	cmp	r2, r3
 801c258:	d134      	bne.n	801c2c4 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801c25a:	4b23      	ldr	r3, [pc, #140]	@ (801c2e8 <UTIL_TIMER_Stop+0xd8>)
 801c25c:	681b      	ldr	r3, [r3, #0]
 801c25e:	2200      	movs	r2, #0
 801c260:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801c262:	4b21      	ldr	r3, [pc, #132]	@ (801c2e8 <UTIL_TIMER_Stop+0xd8>)
 801c264:	681b      	ldr	r3, [r3, #0]
 801c266:	695b      	ldr	r3, [r3, #20]
 801c268:	2b00      	cmp	r3, #0
 801c26a:	d00a      	beq.n	801c282 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801c26c:	4b1e      	ldr	r3, [pc, #120]	@ (801c2e8 <UTIL_TIMER_Stop+0xd8>)
 801c26e:	681b      	ldr	r3, [r3, #0]
 801c270:	695b      	ldr	r3, [r3, #20]
 801c272:	4a1d      	ldr	r2, [pc, #116]	@ (801c2e8 <UTIL_TIMER_Stop+0xd8>)
 801c274:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801c276:	4b1c      	ldr	r3, [pc, #112]	@ (801c2e8 <UTIL_TIMER_Stop+0xd8>)
 801c278:	681b      	ldr	r3, [r3, #0]
 801c27a:	4618      	mov	r0, r3
 801c27c:	f000 f92c 	bl	801c4d8 <TimerSetTimeout>
 801c280:	e023      	b.n	801c2ca <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801c282:	4b1a      	ldr	r3, [pc, #104]	@ (801c2ec <UTIL_TIMER_Stop+0xdc>)
 801c284:	68db      	ldr	r3, [r3, #12]
 801c286:	4798      	blx	r3
            TimerListHead = NULL;
 801c288:	4b17      	ldr	r3, [pc, #92]	@ (801c2e8 <UTIL_TIMER_Stop+0xd8>)
 801c28a:	2200      	movs	r2, #0
 801c28c:	601a      	str	r2, [r3, #0]
 801c28e:	e01c      	b.n	801c2ca <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801c290:	697a      	ldr	r2, [r7, #20]
 801c292:	687b      	ldr	r3, [r7, #4]
 801c294:	429a      	cmp	r2, r3
 801c296:	d110      	bne.n	801c2ba <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801c298:	697b      	ldr	r3, [r7, #20]
 801c29a:	695b      	ldr	r3, [r3, #20]
 801c29c:	2b00      	cmp	r3, #0
 801c29e:	d006      	beq.n	801c2ae <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801c2a0:	697b      	ldr	r3, [r7, #20]
 801c2a2:	695b      	ldr	r3, [r3, #20]
 801c2a4:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801c2a6:	69bb      	ldr	r3, [r7, #24]
 801c2a8:	697a      	ldr	r2, [r7, #20]
 801c2aa:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801c2ac:	e00d      	b.n	801c2ca <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801c2ae:	2300      	movs	r3, #0
 801c2b0:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801c2b2:	69bb      	ldr	r3, [r7, #24]
 801c2b4:	697a      	ldr	r2, [r7, #20]
 801c2b6:	615a      	str	r2, [r3, #20]
            break;
 801c2b8:	e007      	b.n	801c2ca <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801c2ba:	697b      	ldr	r3, [r7, #20]
 801c2bc:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801c2be:	697b      	ldr	r3, [r7, #20]
 801c2c0:	695b      	ldr	r3, [r3, #20]
 801c2c2:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801c2c4:	697b      	ldr	r3, [r7, #20]
 801c2c6:	2b00      	cmp	r3, #0
 801c2c8:	d1e2      	bne.n	801c290 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801c2ca:	2300      	movs	r3, #0
 801c2cc:	77fb      	strb	r3, [r7, #31]
 801c2ce:	693b      	ldr	r3, [r7, #16]
 801c2d0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c2d2:	68bb      	ldr	r3, [r7, #8]
 801c2d4:	f383 8810 	msr	PRIMASK, r3
}
 801c2d8:	e001      	b.n	801c2de <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801c2da:	2301      	movs	r3, #1
 801c2dc:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801c2de:	7ffb      	ldrb	r3, [r7, #31]
}
 801c2e0:	4618      	mov	r0, r3
 801c2e2:	3720      	adds	r7, #32
 801c2e4:	46bd      	mov	sp, r7
 801c2e6:	bd80      	pop	{r7, pc}
 801c2e8:	20001e70 	.word	0x20001e70
 801c2ec:	0801d5b8 	.word	0x0801d5b8

0801c2f0 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801c2f0:	b580      	push	{r7, lr}
 801c2f2:	b084      	sub	sp, #16
 801c2f4:	af00      	add	r7, sp, #0
 801c2f6:	6078      	str	r0, [r7, #4]
 801c2f8:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c2fa:	2300      	movs	r3, #0
 801c2fc:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801c2fe:	687b      	ldr	r3, [r7, #4]
 801c300:	2b00      	cmp	r3, #0
 801c302:	d102      	bne.n	801c30a <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801c304:	2301      	movs	r3, #1
 801c306:	73fb      	strb	r3, [r7, #15]
 801c308:	e014      	b.n	801c334 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801c30a:	4b0d      	ldr	r3, [pc, #52]	@ (801c340 <UTIL_TIMER_SetPeriod+0x50>)
 801c30c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c30e:	6838      	ldr	r0, [r7, #0]
 801c310:	4798      	blx	r3
 801c312:	4602      	mov	r2, r0
 801c314:	687b      	ldr	r3, [r7, #4]
 801c316:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801c318:	6878      	ldr	r0, [r7, #4]
 801c31a:	f000 f8c1 	bl	801c4a0 <TimerExists>
 801c31e:	4603      	mov	r3, r0
 801c320:	2b00      	cmp	r3, #0
 801c322:	d007      	beq.n	801c334 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801c324:	6878      	ldr	r0, [r7, #4]
 801c326:	f7ff ff73 	bl	801c210 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801c32a:	6878      	ldr	r0, [r7, #4]
 801c32c:	f7ff ff02 	bl	801c134 <UTIL_TIMER_Start>
 801c330:	4603      	mov	r3, r0
 801c332:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801c334:	7bfb      	ldrb	r3, [r7, #15]
}
 801c336:	4618      	mov	r0, r3
 801c338:	3710      	adds	r7, #16
 801c33a:	46bd      	mov	sp, r7
 801c33c:	bd80      	pop	{r7, pc}
 801c33e:	bf00      	nop
 801c340:	0801d5b8 	.word	0x0801d5b8

0801c344 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801c344:	b590      	push	{r4, r7, lr}
 801c346:	b089      	sub	sp, #36	@ 0x24
 801c348:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c34a:	f3ef 8310 	mrs	r3, PRIMASK
 801c34e:	60bb      	str	r3, [r7, #8]
  return(result);
 801c350:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c352:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801c354:	b672      	cpsid	i
}
 801c356:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801c358:	4b38      	ldr	r3, [pc, #224]	@ (801c43c <UTIL_TIMER_IRQ_Handler+0xf8>)
 801c35a:	695b      	ldr	r3, [r3, #20]
 801c35c:	4798      	blx	r3
 801c35e:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801c360:	4b36      	ldr	r3, [pc, #216]	@ (801c43c <UTIL_TIMER_IRQ_Handler+0xf8>)
 801c362:	691b      	ldr	r3, [r3, #16]
 801c364:	4798      	blx	r3
 801c366:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801c368:	693a      	ldr	r2, [r7, #16]
 801c36a:	697b      	ldr	r3, [r7, #20]
 801c36c:	1ad3      	subs	r3, r2, r3
 801c36e:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801c370:	4b33      	ldr	r3, [pc, #204]	@ (801c440 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c372:	681b      	ldr	r3, [r3, #0]
 801c374:	2b00      	cmp	r3, #0
 801c376:	d037      	beq.n	801c3e8 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801c378:	4b31      	ldr	r3, [pc, #196]	@ (801c440 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c37a:	681b      	ldr	r3, [r3, #0]
 801c37c:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801c37e:	69fb      	ldr	r3, [r7, #28]
 801c380:	681b      	ldr	r3, [r3, #0]
 801c382:	68fa      	ldr	r2, [r7, #12]
 801c384:	429a      	cmp	r2, r3
 801c386:	d206      	bcs.n	801c396 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801c388:	69fb      	ldr	r3, [r7, #28]
 801c38a:	681a      	ldr	r2, [r3, #0]
 801c38c:	68fb      	ldr	r3, [r7, #12]
 801c38e:	1ad2      	subs	r2, r2, r3
 801c390:	69fb      	ldr	r3, [r7, #28]
 801c392:	601a      	str	r2, [r3, #0]
 801c394:	e002      	b.n	801c39c <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801c396:	69fb      	ldr	r3, [r7, #28]
 801c398:	2200      	movs	r2, #0
 801c39a:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801c39c:	69fb      	ldr	r3, [r7, #28]
 801c39e:	695b      	ldr	r3, [r3, #20]
 801c3a0:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801c3a2:	69fb      	ldr	r3, [r7, #28]
 801c3a4:	2b00      	cmp	r3, #0
 801c3a6:	d1ea      	bne.n	801c37e <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801c3a8:	e01e      	b.n	801c3e8 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801c3aa:	4b25      	ldr	r3, [pc, #148]	@ (801c440 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c3ac:	681b      	ldr	r3, [r3, #0]
 801c3ae:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801c3b0:	4b23      	ldr	r3, [pc, #140]	@ (801c440 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c3b2:	681b      	ldr	r3, [r3, #0]
 801c3b4:	695b      	ldr	r3, [r3, #20]
 801c3b6:	4a22      	ldr	r2, [pc, #136]	@ (801c440 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c3b8:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801c3ba:	69fb      	ldr	r3, [r7, #28]
 801c3bc:	2200      	movs	r2, #0
 801c3be:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801c3c0:	69fb      	ldr	r3, [r7, #28]
 801c3c2:	2200      	movs	r2, #0
 801c3c4:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801c3c6:	69fb      	ldr	r3, [r7, #28]
 801c3c8:	68db      	ldr	r3, [r3, #12]
 801c3ca:	69fa      	ldr	r2, [r7, #28]
 801c3cc:	6912      	ldr	r2, [r2, #16]
 801c3ce:	4610      	mov	r0, r2
 801c3d0:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801c3d2:	69fb      	ldr	r3, [r7, #28]
 801c3d4:	7adb      	ldrb	r3, [r3, #11]
 801c3d6:	2b01      	cmp	r3, #1
 801c3d8:	d106      	bne.n	801c3e8 <UTIL_TIMER_IRQ_Handler+0xa4>
 801c3da:	69fb      	ldr	r3, [r7, #28]
 801c3dc:	7a9b      	ldrb	r3, [r3, #10]
 801c3de:	2b00      	cmp	r3, #0
 801c3e0:	d102      	bne.n	801c3e8 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801c3e2:	69f8      	ldr	r0, [r7, #28]
 801c3e4:	f7ff fea6 	bl	801c134 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801c3e8:	4b15      	ldr	r3, [pc, #84]	@ (801c440 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c3ea:	681b      	ldr	r3, [r3, #0]
 801c3ec:	2b00      	cmp	r3, #0
 801c3ee:	d00d      	beq.n	801c40c <UTIL_TIMER_IRQ_Handler+0xc8>
 801c3f0:	4b13      	ldr	r3, [pc, #76]	@ (801c440 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c3f2:	681b      	ldr	r3, [r3, #0]
 801c3f4:	681b      	ldr	r3, [r3, #0]
 801c3f6:	2b00      	cmp	r3, #0
 801c3f8:	d0d7      	beq.n	801c3aa <UTIL_TIMER_IRQ_Handler+0x66>
 801c3fa:	4b11      	ldr	r3, [pc, #68]	@ (801c440 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c3fc:	681b      	ldr	r3, [r3, #0]
 801c3fe:	681c      	ldr	r4, [r3, #0]
 801c400:	4b0e      	ldr	r3, [pc, #56]	@ (801c43c <UTIL_TIMER_IRQ_Handler+0xf8>)
 801c402:	699b      	ldr	r3, [r3, #24]
 801c404:	4798      	blx	r3
 801c406:	4603      	mov	r3, r0
 801c408:	429c      	cmp	r4, r3
 801c40a:	d3ce      	bcc.n	801c3aa <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801c40c:	4b0c      	ldr	r3, [pc, #48]	@ (801c440 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c40e:	681b      	ldr	r3, [r3, #0]
 801c410:	2b00      	cmp	r3, #0
 801c412:	d009      	beq.n	801c428 <UTIL_TIMER_IRQ_Handler+0xe4>
 801c414:	4b0a      	ldr	r3, [pc, #40]	@ (801c440 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c416:	681b      	ldr	r3, [r3, #0]
 801c418:	7a1b      	ldrb	r3, [r3, #8]
 801c41a:	2b00      	cmp	r3, #0
 801c41c:	d104      	bne.n	801c428 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801c41e:	4b08      	ldr	r3, [pc, #32]	@ (801c440 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c420:	681b      	ldr	r3, [r3, #0]
 801c422:	4618      	mov	r0, r3
 801c424:	f000 f858 	bl	801c4d8 <TimerSetTimeout>
 801c428:	69bb      	ldr	r3, [r7, #24]
 801c42a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c42c:	687b      	ldr	r3, [r7, #4]
 801c42e:	f383 8810 	msr	PRIMASK, r3
}
 801c432:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801c434:	bf00      	nop
 801c436:	3724      	adds	r7, #36	@ 0x24
 801c438:	46bd      	mov	sp, r7
 801c43a:	bd90      	pop	{r4, r7, pc}
 801c43c:	0801d5b8 	.word	0x0801d5b8
 801c440:	20001e70 	.word	0x20001e70

0801c444 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801c444:	b580      	push	{r7, lr}
 801c446:	b082      	sub	sp, #8
 801c448:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801c44a:	4b06      	ldr	r3, [pc, #24]	@ (801c464 <UTIL_TIMER_GetCurrentTime+0x20>)
 801c44c:	69db      	ldr	r3, [r3, #28]
 801c44e:	4798      	blx	r3
 801c450:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801c452:	4b04      	ldr	r3, [pc, #16]	@ (801c464 <UTIL_TIMER_GetCurrentTime+0x20>)
 801c454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c456:	6878      	ldr	r0, [r7, #4]
 801c458:	4798      	blx	r3
 801c45a:	4603      	mov	r3, r0
}
 801c45c:	4618      	mov	r0, r3
 801c45e:	3708      	adds	r7, #8
 801c460:	46bd      	mov	sp, r7
 801c462:	bd80      	pop	{r7, pc}
 801c464:	0801d5b8 	.word	0x0801d5b8

0801c468 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801c468:	b580      	push	{r7, lr}
 801c46a:	b084      	sub	sp, #16
 801c46c:	af00      	add	r7, sp, #0
 801c46e:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801c470:	4b0a      	ldr	r3, [pc, #40]	@ (801c49c <UTIL_TIMER_GetElapsedTime+0x34>)
 801c472:	69db      	ldr	r3, [r3, #28]
 801c474:	4798      	blx	r3
 801c476:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801c478:	4b08      	ldr	r3, [pc, #32]	@ (801c49c <UTIL_TIMER_GetElapsedTime+0x34>)
 801c47a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c47c:	6878      	ldr	r0, [r7, #4]
 801c47e:	4798      	blx	r3
 801c480:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801c482:	4b06      	ldr	r3, [pc, #24]	@ (801c49c <UTIL_TIMER_GetElapsedTime+0x34>)
 801c484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c486:	68f9      	ldr	r1, [r7, #12]
 801c488:	68ba      	ldr	r2, [r7, #8]
 801c48a:	1a8a      	subs	r2, r1, r2
 801c48c:	4610      	mov	r0, r2
 801c48e:	4798      	blx	r3
 801c490:	4603      	mov	r3, r0
}
 801c492:	4618      	mov	r0, r3
 801c494:	3710      	adds	r7, #16
 801c496:	46bd      	mov	sp, r7
 801c498:	bd80      	pop	{r7, pc}
 801c49a:	bf00      	nop
 801c49c:	0801d5b8 	.word	0x0801d5b8

0801c4a0 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801c4a0:	b480      	push	{r7}
 801c4a2:	b085      	sub	sp, #20
 801c4a4:	af00      	add	r7, sp, #0
 801c4a6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801c4a8:	4b0a      	ldr	r3, [pc, #40]	@ (801c4d4 <TimerExists+0x34>)
 801c4aa:	681b      	ldr	r3, [r3, #0]
 801c4ac:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801c4ae:	e008      	b.n	801c4c2 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801c4b0:	68fa      	ldr	r2, [r7, #12]
 801c4b2:	687b      	ldr	r3, [r7, #4]
 801c4b4:	429a      	cmp	r2, r3
 801c4b6:	d101      	bne.n	801c4bc <TimerExists+0x1c>
    {
      return true;
 801c4b8:	2301      	movs	r3, #1
 801c4ba:	e006      	b.n	801c4ca <TimerExists+0x2a>
    }
    cur = cur->Next;
 801c4bc:	68fb      	ldr	r3, [r7, #12]
 801c4be:	695b      	ldr	r3, [r3, #20]
 801c4c0:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801c4c2:	68fb      	ldr	r3, [r7, #12]
 801c4c4:	2b00      	cmp	r3, #0
 801c4c6:	d1f3      	bne.n	801c4b0 <TimerExists+0x10>
  }
  return false;
 801c4c8:	2300      	movs	r3, #0
}
 801c4ca:	4618      	mov	r0, r3
 801c4cc:	3714      	adds	r7, #20
 801c4ce:	46bd      	mov	sp, r7
 801c4d0:	bc80      	pop	{r7}
 801c4d2:	4770      	bx	lr
 801c4d4:	20001e70 	.word	0x20001e70

0801c4d8 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801c4d8:	b590      	push	{r4, r7, lr}
 801c4da:	b085      	sub	sp, #20
 801c4dc:	af00      	add	r7, sp, #0
 801c4de:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801c4e0:	4b11      	ldr	r3, [pc, #68]	@ (801c528 <TimerSetTimeout+0x50>)
 801c4e2:	6a1b      	ldr	r3, [r3, #32]
 801c4e4:	4798      	blx	r3
 801c4e6:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801c4e8:	687b      	ldr	r3, [r7, #4]
 801c4ea:	2201      	movs	r2, #1
 801c4ec:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801c4ee:	687b      	ldr	r3, [r7, #4]
 801c4f0:	681c      	ldr	r4, [r3, #0]
 801c4f2:	4b0d      	ldr	r3, [pc, #52]	@ (801c528 <TimerSetTimeout+0x50>)
 801c4f4:	699b      	ldr	r3, [r3, #24]
 801c4f6:	4798      	blx	r3
 801c4f8:	4602      	mov	r2, r0
 801c4fa:	68fb      	ldr	r3, [r7, #12]
 801c4fc:	4413      	add	r3, r2
 801c4fe:	429c      	cmp	r4, r3
 801c500:	d207      	bcs.n	801c512 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801c502:	4b09      	ldr	r3, [pc, #36]	@ (801c528 <TimerSetTimeout+0x50>)
 801c504:	699b      	ldr	r3, [r3, #24]
 801c506:	4798      	blx	r3
 801c508:	4602      	mov	r2, r0
 801c50a:	68fb      	ldr	r3, [r7, #12]
 801c50c:	441a      	add	r2, r3
 801c50e:	687b      	ldr	r3, [r7, #4]
 801c510:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801c512:	4b05      	ldr	r3, [pc, #20]	@ (801c528 <TimerSetTimeout+0x50>)
 801c514:	689b      	ldr	r3, [r3, #8]
 801c516:	687a      	ldr	r2, [r7, #4]
 801c518:	6812      	ldr	r2, [r2, #0]
 801c51a:	4610      	mov	r0, r2
 801c51c:	4798      	blx	r3
}
 801c51e:	bf00      	nop
 801c520:	3714      	adds	r7, #20
 801c522:	46bd      	mov	sp, r7
 801c524:	bd90      	pop	{r4, r7, pc}
 801c526:	bf00      	nop
 801c528:	0801d5b8 	.word	0x0801d5b8

0801c52c <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801c52c:	b480      	push	{r7}
 801c52e:	b085      	sub	sp, #20
 801c530:	af00      	add	r7, sp, #0
 801c532:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801c534:	4b14      	ldr	r3, [pc, #80]	@ (801c588 <TimerInsertTimer+0x5c>)
 801c536:	681b      	ldr	r3, [r3, #0]
 801c538:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801c53a:	4b13      	ldr	r3, [pc, #76]	@ (801c588 <TimerInsertTimer+0x5c>)
 801c53c:	681b      	ldr	r3, [r3, #0]
 801c53e:	695b      	ldr	r3, [r3, #20]
 801c540:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801c542:	e012      	b.n	801c56a <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801c544:	687b      	ldr	r3, [r7, #4]
 801c546:	681a      	ldr	r2, [r3, #0]
 801c548:	68bb      	ldr	r3, [r7, #8]
 801c54a:	681b      	ldr	r3, [r3, #0]
 801c54c:	429a      	cmp	r2, r3
 801c54e:	d905      	bls.n	801c55c <TimerInsertTimer+0x30>
    {
        cur = next;
 801c550:	68bb      	ldr	r3, [r7, #8]
 801c552:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801c554:	68bb      	ldr	r3, [r7, #8]
 801c556:	695b      	ldr	r3, [r3, #20]
 801c558:	60bb      	str	r3, [r7, #8]
 801c55a:	e006      	b.n	801c56a <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801c55c:	68fb      	ldr	r3, [r7, #12]
 801c55e:	687a      	ldr	r2, [r7, #4]
 801c560:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801c562:	687b      	ldr	r3, [r7, #4]
 801c564:	68ba      	ldr	r2, [r7, #8]
 801c566:	615a      	str	r2, [r3, #20]
        return;
 801c568:	e009      	b.n	801c57e <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801c56a:	68fb      	ldr	r3, [r7, #12]
 801c56c:	695b      	ldr	r3, [r3, #20]
 801c56e:	2b00      	cmp	r3, #0
 801c570:	d1e8      	bne.n	801c544 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801c572:	68fb      	ldr	r3, [r7, #12]
 801c574:	687a      	ldr	r2, [r7, #4]
 801c576:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801c578:	687b      	ldr	r3, [r7, #4]
 801c57a:	2200      	movs	r2, #0
 801c57c:	615a      	str	r2, [r3, #20]
}
 801c57e:	3714      	adds	r7, #20
 801c580:	46bd      	mov	sp, r7
 801c582:	bc80      	pop	{r7}
 801c584:	4770      	bx	lr
 801c586:	bf00      	nop
 801c588:	20001e70 	.word	0x20001e70

0801c58c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801c58c:	b580      	push	{r7, lr}
 801c58e:	b084      	sub	sp, #16
 801c590:	af00      	add	r7, sp, #0
 801c592:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801c594:	4b0b      	ldr	r3, [pc, #44]	@ (801c5c4 <TimerInsertNewHeadTimer+0x38>)
 801c596:	681b      	ldr	r3, [r3, #0]
 801c598:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801c59a:	68fb      	ldr	r3, [r7, #12]
 801c59c:	2b00      	cmp	r3, #0
 801c59e:	d002      	beq.n	801c5a6 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801c5a0:	68fb      	ldr	r3, [r7, #12]
 801c5a2:	2200      	movs	r2, #0
 801c5a4:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801c5a6:	687b      	ldr	r3, [r7, #4]
 801c5a8:	68fa      	ldr	r2, [r7, #12]
 801c5aa:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801c5ac:	4a05      	ldr	r2, [pc, #20]	@ (801c5c4 <TimerInsertNewHeadTimer+0x38>)
 801c5ae:	687b      	ldr	r3, [r7, #4]
 801c5b0:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801c5b2:	4b04      	ldr	r3, [pc, #16]	@ (801c5c4 <TimerInsertNewHeadTimer+0x38>)
 801c5b4:	681b      	ldr	r3, [r3, #0]
 801c5b6:	4618      	mov	r0, r3
 801c5b8:	f7ff ff8e 	bl	801c4d8 <TimerSetTimeout>
}
 801c5bc:	bf00      	nop
 801c5be:	3710      	adds	r7, #16
 801c5c0:	46bd      	mov	sp, r7
 801c5c2:	bd80      	pop	{r7, pc}
 801c5c4:	20001e70 	.word	0x20001e70

0801c5c8 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801c5c8:	b580      	push	{r7, lr}
 801c5ca:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801c5cc:	2218      	movs	r2, #24
 801c5ce:	2100      	movs	r1, #0
 801c5d0:	4807      	ldr	r0, [pc, #28]	@ (801c5f0 <UTIL_ADV_TRACE_Init+0x28>)
 801c5d2:	f7fe fffc 	bl	801b5ce <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801c5d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801c5da:	2100      	movs	r1, #0
 801c5dc:	4805      	ldr	r0, [pc, #20]	@ (801c5f4 <UTIL_ADV_TRACE_Init+0x2c>)
 801c5de:	f7fe fff6 	bl	801b5ce <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801c5e2:	4b05      	ldr	r3, [pc, #20]	@ (801c5f8 <UTIL_ADV_TRACE_Init+0x30>)
 801c5e4:	681b      	ldr	r3, [r3, #0]
 801c5e6:	4805      	ldr	r0, [pc, #20]	@ (801c5fc <UTIL_ADV_TRACE_Init+0x34>)
 801c5e8:	4798      	blx	r3
 801c5ea:	4603      	mov	r3, r0
}
 801c5ec:	4618      	mov	r0, r3
 801c5ee:	bd80      	pop	{r7, pc}
 801c5f0:	20001e74 	.word	0x20001e74
 801c5f4:	20001e8c 	.word	0x20001e8c
 801c5f8:	0801d5f8 	.word	0x0801d5f8
 801c5fc:	0801c869 	.word	0x0801c869

0801c600 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801c600:	b480      	push	{r7}
 801c602:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801c604:	4b06      	ldr	r3, [pc, #24]	@ (801c620 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801c606:	8a5a      	ldrh	r2, [r3, #18]
 801c608:	4b05      	ldr	r3, [pc, #20]	@ (801c620 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801c60a:	8a1b      	ldrh	r3, [r3, #16]
 801c60c:	429a      	cmp	r2, r3
 801c60e:	d101      	bne.n	801c614 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801c610:	2301      	movs	r3, #1
 801c612:	e000      	b.n	801c616 <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801c614:	2300      	movs	r3, #0
}
 801c616:	4618      	mov	r0, r3
 801c618:	46bd      	mov	sp, r7
 801c61a:	bc80      	pop	{r7}
 801c61c:	4770      	bx	lr
 801c61e:	bf00      	nop
 801c620:	20001e74 	.word	0x20001e74

0801c624 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801c624:	b408      	push	{r3}
 801c626:	b580      	push	{r7, lr}
 801c628:	b08d      	sub	sp, #52	@ 0x34
 801c62a:	af00      	add	r7, sp, #0
 801c62c:	60f8      	str	r0, [r7, #12]
 801c62e:	60b9      	str	r1, [r7, #8]
 801c630:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801c632:	2300      	movs	r3, #0
 801c634:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801c636:	2300      	movs	r3, #0
 801c638:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801c63a:	4b37      	ldr	r3, [pc, #220]	@ (801c718 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c63c:	7a1b      	ldrb	r3, [r3, #8]
 801c63e:	461a      	mov	r2, r3
 801c640:	68fb      	ldr	r3, [r7, #12]
 801c642:	4293      	cmp	r3, r2
 801c644:	d902      	bls.n	801c64c <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801c646:	f06f 0304 	mvn.w	r3, #4
 801c64a:	e05e      	b.n	801c70a <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801c64c:	4b32      	ldr	r3, [pc, #200]	@ (801c718 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c64e:	68da      	ldr	r2, [r3, #12]
 801c650:	68bb      	ldr	r3, [r7, #8]
 801c652:	4013      	ands	r3, r2
 801c654:	68ba      	ldr	r2, [r7, #8]
 801c656:	429a      	cmp	r2, r3
 801c658:	d002      	beq.n	801c660 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801c65a:	f06f 0305 	mvn.w	r3, #5
 801c65e:	e054      	b.n	801c70a <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801c660:	4b2d      	ldr	r3, [pc, #180]	@ (801c718 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c662:	685b      	ldr	r3, [r3, #4]
 801c664:	2b00      	cmp	r3, #0
 801c666:	d00a      	beq.n	801c67e <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801c668:	687b      	ldr	r3, [r7, #4]
 801c66a:	2b00      	cmp	r3, #0
 801c66c:	d007      	beq.n	801c67e <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801c66e:	4b2a      	ldr	r3, [pc, #168]	@ (801c718 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c670:	685b      	ldr	r3, [r3, #4]
 801c672:	f107 0116 	add.w	r1, r7, #22
 801c676:	f107 0218 	add.w	r2, r7, #24
 801c67a:	4610      	mov	r0, r2
 801c67c:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801c67e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801c682:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801c684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c686:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801c688:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801c68c:	4823      	ldr	r0, [pc, #140]	@ (801c71c <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801c68e:	f7ff fa2b 	bl	801bae8 <tiny_vsnprintf_like>
 801c692:	4603      	mov	r3, r0
 801c694:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 801c696:	f000 f9f1 	bl	801ca7c <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801c69a:	8afa      	ldrh	r2, [r7, #22]
 801c69c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801c69e:	4413      	add	r3, r2
 801c6a0:	b29b      	uxth	r3, r3
 801c6a2:	f107 0214 	add.w	r2, r7, #20
 801c6a6:	4611      	mov	r1, r2
 801c6a8:	4618      	mov	r0, r3
 801c6aa:	f000 f969 	bl	801c980 <TRACE_AllocateBufer>
 801c6ae:	4603      	mov	r3, r0
 801c6b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c6b4:	d025      	beq.n	801c702 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801c6b6:	2300      	movs	r3, #0
 801c6b8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801c6ba:	e00e      	b.n	801c6da <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801c6bc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801c6be:	8aba      	ldrh	r2, [r7, #20]
 801c6c0:	3330      	adds	r3, #48	@ 0x30
 801c6c2:	443b      	add	r3, r7
 801c6c4:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801c6c8:	4b15      	ldr	r3, [pc, #84]	@ (801c720 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801c6ca:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801c6cc:	8abb      	ldrh	r3, [r7, #20]
 801c6ce:	3301      	adds	r3, #1
 801c6d0:	b29b      	uxth	r3, r3
 801c6d2:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801c6d4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801c6d6:	3301      	adds	r3, #1
 801c6d8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801c6da:	8afb      	ldrh	r3, [r7, #22]
 801c6dc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801c6de:	429a      	cmp	r2, r3
 801c6e0:	d3ec      	bcc.n	801c6bc <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801c6e2:	8abb      	ldrh	r3, [r7, #20]
 801c6e4:	461a      	mov	r2, r3
 801c6e6:	4b0e      	ldr	r3, [pc, #56]	@ (801c720 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801c6e8:	18d0      	adds	r0, r2, r3
 801c6ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c6ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801c6ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801c6f2:	f7ff f9f9 	bl	801bae8 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801c6f6:	f000 f9df 	bl	801cab8 <TRACE_UnLock>

    return TRACE_Send();
 801c6fa:	f000 f831 	bl	801c760 <TRACE_Send>
 801c6fe:	4603      	mov	r3, r0
 801c700:	e003      	b.n	801c70a <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801c702:	f000 f9d9 	bl	801cab8 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801c706:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801c70a:	4618      	mov	r0, r3
 801c70c:	3734      	adds	r7, #52	@ 0x34
 801c70e:	46bd      	mov	sp, r7
 801c710:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801c714:	b001      	add	sp, #4
 801c716:	4770      	bx	lr
 801c718:	20001e74 	.word	0x20001e74
 801c71c:	2000228c 	.word	0x2000228c
 801c720:	20001e8c 	.word	0x20001e8c

0801c724 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801c724:	b480      	push	{r7}
 801c726:	b083      	sub	sp, #12
 801c728:	af00      	add	r7, sp, #0
 801c72a:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801c72c:	4a03      	ldr	r2, [pc, #12]	@ (801c73c <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801c72e:	687b      	ldr	r3, [r7, #4]
 801c730:	6053      	str	r3, [r2, #4]
}
 801c732:	bf00      	nop
 801c734:	370c      	adds	r7, #12
 801c736:	46bd      	mov	sp, r7
 801c738:	bc80      	pop	{r7}
 801c73a:	4770      	bx	lr
 801c73c:	20001e74 	.word	0x20001e74

0801c740 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801c740:	b480      	push	{r7}
 801c742:	b083      	sub	sp, #12
 801c744:	af00      	add	r7, sp, #0
 801c746:	4603      	mov	r3, r0
 801c748:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801c74a:	4a04      	ldr	r2, [pc, #16]	@ (801c75c <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801c74c:	79fb      	ldrb	r3, [r7, #7]
 801c74e:	7213      	strb	r3, [r2, #8]
}
 801c750:	bf00      	nop
 801c752:	370c      	adds	r7, #12
 801c754:	46bd      	mov	sp, r7
 801c756:	bc80      	pop	{r7}
 801c758:	4770      	bx	lr
 801c75a:	bf00      	nop
 801c75c:	20001e74 	.word	0x20001e74

0801c760 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801c760:	b580      	push	{r7, lr}
 801c762:	b088      	sub	sp, #32
 801c764:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801c766:	2300      	movs	r3, #0
 801c768:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801c76a:	2300      	movs	r3, #0
 801c76c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c76e:	f3ef 8310 	mrs	r3, PRIMASK
 801c772:	613b      	str	r3, [r7, #16]
  return(result);
 801c774:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c776:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c778:	b672      	cpsid	i
}
 801c77a:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801c77c:	f000 f9ba 	bl	801caf4 <TRACE_IsLocked>
 801c780:	4603      	mov	r3, r0
 801c782:	2b00      	cmp	r3, #0
 801c784:	d15d      	bne.n	801c842 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801c786:	f000 f979 	bl	801ca7c <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801c78a:	4b34      	ldr	r3, [pc, #208]	@ (801c85c <TRACE_Send+0xfc>)
 801c78c:	8a1a      	ldrh	r2, [r3, #16]
 801c78e:	4b33      	ldr	r3, [pc, #204]	@ (801c85c <TRACE_Send+0xfc>)
 801c790:	8a5b      	ldrh	r3, [r3, #18]
 801c792:	429a      	cmp	r2, r3
 801c794:	d04d      	beq.n	801c832 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801c796:	4b31      	ldr	r3, [pc, #196]	@ (801c85c <TRACE_Send+0xfc>)
 801c798:	789b      	ldrb	r3, [r3, #2]
 801c79a:	2b01      	cmp	r3, #1
 801c79c:	d117      	bne.n	801c7ce <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801c79e:	4b2f      	ldr	r3, [pc, #188]	@ (801c85c <TRACE_Send+0xfc>)
 801c7a0:	881a      	ldrh	r2, [r3, #0]
 801c7a2:	4b2e      	ldr	r3, [pc, #184]	@ (801c85c <TRACE_Send+0xfc>)
 801c7a4:	8a1b      	ldrh	r3, [r3, #16]
 801c7a6:	1ad3      	subs	r3, r2, r3
 801c7a8:	b29a      	uxth	r2, r3
 801c7aa:	4b2c      	ldr	r3, [pc, #176]	@ (801c85c <TRACE_Send+0xfc>)
 801c7ac:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801c7ae:	4b2b      	ldr	r3, [pc, #172]	@ (801c85c <TRACE_Send+0xfc>)
 801c7b0:	2202      	movs	r2, #2
 801c7b2:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801c7b4:	4b29      	ldr	r3, [pc, #164]	@ (801c85c <TRACE_Send+0xfc>)
 801c7b6:	2200      	movs	r2, #0
 801c7b8:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801c7ba:	4b28      	ldr	r3, [pc, #160]	@ (801c85c <TRACE_Send+0xfc>)
 801c7bc:	8a9b      	ldrh	r3, [r3, #20]
 801c7be:	2b00      	cmp	r3, #0
 801c7c0:	d105      	bne.n	801c7ce <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c7c2:	4b26      	ldr	r3, [pc, #152]	@ (801c85c <TRACE_Send+0xfc>)
 801c7c4:	2200      	movs	r2, #0
 801c7c6:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c7c8:	4b24      	ldr	r3, [pc, #144]	@ (801c85c <TRACE_Send+0xfc>)
 801c7ca:	2200      	movs	r2, #0
 801c7cc:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801c7ce:	4b23      	ldr	r3, [pc, #140]	@ (801c85c <TRACE_Send+0xfc>)
 801c7d0:	789b      	ldrb	r3, [r3, #2]
 801c7d2:	2b00      	cmp	r3, #0
 801c7d4:	d115      	bne.n	801c802 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c7d6:	4b21      	ldr	r3, [pc, #132]	@ (801c85c <TRACE_Send+0xfc>)
 801c7d8:	8a5a      	ldrh	r2, [r3, #18]
 801c7da:	4b20      	ldr	r3, [pc, #128]	@ (801c85c <TRACE_Send+0xfc>)
 801c7dc:	8a1b      	ldrh	r3, [r3, #16]
 801c7de:	429a      	cmp	r2, r3
 801c7e0:	d908      	bls.n	801c7f4 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801c7e2:	4b1e      	ldr	r3, [pc, #120]	@ (801c85c <TRACE_Send+0xfc>)
 801c7e4:	8a5a      	ldrh	r2, [r3, #18]
 801c7e6:	4b1d      	ldr	r3, [pc, #116]	@ (801c85c <TRACE_Send+0xfc>)
 801c7e8:	8a1b      	ldrh	r3, [r3, #16]
 801c7ea:	1ad3      	subs	r3, r2, r3
 801c7ec:	b29a      	uxth	r2, r3
 801c7ee:	4b1b      	ldr	r3, [pc, #108]	@ (801c85c <TRACE_Send+0xfc>)
 801c7f0:	829a      	strh	r2, [r3, #20]
 801c7f2:	e006      	b.n	801c802 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801c7f4:	4b19      	ldr	r3, [pc, #100]	@ (801c85c <TRACE_Send+0xfc>)
 801c7f6:	8a1b      	ldrh	r3, [r3, #16]
 801c7f8:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801c7fc:	b29a      	uxth	r2, r3
 801c7fe:	4b17      	ldr	r3, [pc, #92]	@ (801c85c <TRACE_Send+0xfc>)
 801c800:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801c802:	4b16      	ldr	r3, [pc, #88]	@ (801c85c <TRACE_Send+0xfc>)
 801c804:	8a1b      	ldrh	r3, [r3, #16]
 801c806:	461a      	mov	r2, r3
 801c808:	4b15      	ldr	r3, [pc, #84]	@ (801c860 <TRACE_Send+0x100>)
 801c80a:	4413      	add	r3, r2
 801c80c:	61bb      	str	r3, [r7, #24]
 801c80e:	697b      	ldr	r3, [r7, #20]
 801c810:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c812:	68fb      	ldr	r3, [r7, #12]
 801c814:	f383 8810 	msr	PRIMASK, r3
}
 801c818:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801c81a:	f7e5 fb9d 	bl	8001f58 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801c81e:	4b11      	ldr	r3, [pc, #68]	@ (801c864 <TRACE_Send+0x104>)
 801c820:	68db      	ldr	r3, [r3, #12]
 801c822:	4a0e      	ldr	r2, [pc, #56]	@ (801c85c <TRACE_Send+0xfc>)
 801c824:	8a92      	ldrh	r2, [r2, #20]
 801c826:	4611      	mov	r1, r2
 801c828:	69b8      	ldr	r0, [r7, #24]
 801c82a:	4798      	blx	r3
 801c82c:	4603      	mov	r3, r0
 801c82e:	77fb      	strb	r3, [r7, #31]
 801c830:	e00d      	b.n	801c84e <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801c832:	f000 f941 	bl	801cab8 <TRACE_UnLock>
 801c836:	697b      	ldr	r3, [r7, #20]
 801c838:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c83a:	68bb      	ldr	r3, [r7, #8]
 801c83c:	f383 8810 	msr	PRIMASK, r3
}
 801c840:	e005      	b.n	801c84e <TRACE_Send+0xee>
 801c842:	697b      	ldr	r3, [r7, #20]
 801c844:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c846:	687b      	ldr	r3, [r7, #4]
 801c848:	f383 8810 	msr	PRIMASK, r3
}
 801c84c:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801c84e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c852:	4618      	mov	r0, r3
 801c854:	3720      	adds	r7, #32
 801c856:	46bd      	mov	sp, r7
 801c858:	bd80      	pop	{r7, pc}
 801c85a:	bf00      	nop
 801c85c:	20001e74 	.word	0x20001e74
 801c860:	20001e8c 	.word	0x20001e8c
 801c864:	0801d5f8 	.word	0x0801d5f8

0801c868 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801c868:	b580      	push	{r7, lr}
 801c86a:	b088      	sub	sp, #32
 801c86c:	af00      	add	r7, sp, #0
 801c86e:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801c870:	2300      	movs	r3, #0
 801c872:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c874:	f3ef 8310 	mrs	r3, PRIMASK
 801c878:	617b      	str	r3, [r7, #20]
  return(result);
 801c87a:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c87c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801c87e:	b672      	cpsid	i
}
 801c880:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801c882:	4b3c      	ldr	r3, [pc, #240]	@ (801c974 <TRACE_TxCpltCallback+0x10c>)
 801c884:	789b      	ldrb	r3, [r3, #2]
 801c886:	2b02      	cmp	r3, #2
 801c888:	d106      	bne.n	801c898 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c88a:	4b3a      	ldr	r3, [pc, #232]	@ (801c974 <TRACE_TxCpltCallback+0x10c>)
 801c88c:	2200      	movs	r2, #0
 801c88e:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c890:	4b38      	ldr	r3, [pc, #224]	@ (801c974 <TRACE_TxCpltCallback+0x10c>)
 801c892:	2200      	movs	r2, #0
 801c894:	821a      	strh	r2, [r3, #16]
 801c896:	e00a      	b.n	801c8ae <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801c898:	4b36      	ldr	r3, [pc, #216]	@ (801c974 <TRACE_TxCpltCallback+0x10c>)
 801c89a:	8a1a      	ldrh	r2, [r3, #16]
 801c89c:	4b35      	ldr	r3, [pc, #212]	@ (801c974 <TRACE_TxCpltCallback+0x10c>)
 801c89e:	8a9b      	ldrh	r3, [r3, #20]
 801c8a0:	4413      	add	r3, r2
 801c8a2:	b29b      	uxth	r3, r3
 801c8a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801c8a8:	b29a      	uxth	r2, r3
 801c8aa:	4b32      	ldr	r3, [pc, #200]	@ (801c974 <TRACE_TxCpltCallback+0x10c>)
 801c8ac:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801c8ae:	4b31      	ldr	r3, [pc, #196]	@ (801c974 <TRACE_TxCpltCallback+0x10c>)
 801c8b0:	8a1a      	ldrh	r2, [r3, #16]
 801c8b2:	4b30      	ldr	r3, [pc, #192]	@ (801c974 <TRACE_TxCpltCallback+0x10c>)
 801c8b4:	8a5b      	ldrh	r3, [r3, #18]
 801c8b6:	429a      	cmp	r2, r3
 801c8b8:	d04d      	beq.n	801c956 <TRACE_TxCpltCallback+0xee>
 801c8ba:	4b2e      	ldr	r3, [pc, #184]	@ (801c974 <TRACE_TxCpltCallback+0x10c>)
 801c8bc:	8adb      	ldrh	r3, [r3, #22]
 801c8be:	2b01      	cmp	r3, #1
 801c8c0:	d149      	bne.n	801c956 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801c8c2:	4b2c      	ldr	r3, [pc, #176]	@ (801c974 <TRACE_TxCpltCallback+0x10c>)
 801c8c4:	789b      	ldrb	r3, [r3, #2]
 801c8c6:	2b01      	cmp	r3, #1
 801c8c8:	d117      	bne.n	801c8fa <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801c8ca:	4b2a      	ldr	r3, [pc, #168]	@ (801c974 <TRACE_TxCpltCallback+0x10c>)
 801c8cc:	881a      	ldrh	r2, [r3, #0]
 801c8ce:	4b29      	ldr	r3, [pc, #164]	@ (801c974 <TRACE_TxCpltCallback+0x10c>)
 801c8d0:	8a1b      	ldrh	r3, [r3, #16]
 801c8d2:	1ad3      	subs	r3, r2, r3
 801c8d4:	b29a      	uxth	r2, r3
 801c8d6:	4b27      	ldr	r3, [pc, #156]	@ (801c974 <TRACE_TxCpltCallback+0x10c>)
 801c8d8:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801c8da:	4b26      	ldr	r3, [pc, #152]	@ (801c974 <TRACE_TxCpltCallback+0x10c>)
 801c8dc:	2202      	movs	r2, #2
 801c8de:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801c8e0:	4b24      	ldr	r3, [pc, #144]	@ (801c974 <TRACE_TxCpltCallback+0x10c>)
 801c8e2:	2200      	movs	r2, #0
 801c8e4:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801c8e6:	4b23      	ldr	r3, [pc, #140]	@ (801c974 <TRACE_TxCpltCallback+0x10c>)
 801c8e8:	8a9b      	ldrh	r3, [r3, #20]
 801c8ea:	2b00      	cmp	r3, #0
 801c8ec:	d105      	bne.n	801c8fa <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c8ee:	4b21      	ldr	r3, [pc, #132]	@ (801c974 <TRACE_TxCpltCallback+0x10c>)
 801c8f0:	2200      	movs	r2, #0
 801c8f2:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c8f4:	4b1f      	ldr	r3, [pc, #124]	@ (801c974 <TRACE_TxCpltCallback+0x10c>)
 801c8f6:	2200      	movs	r2, #0
 801c8f8:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801c8fa:	4b1e      	ldr	r3, [pc, #120]	@ (801c974 <TRACE_TxCpltCallback+0x10c>)
 801c8fc:	789b      	ldrb	r3, [r3, #2]
 801c8fe:	2b00      	cmp	r3, #0
 801c900:	d115      	bne.n	801c92e <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c902:	4b1c      	ldr	r3, [pc, #112]	@ (801c974 <TRACE_TxCpltCallback+0x10c>)
 801c904:	8a5a      	ldrh	r2, [r3, #18]
 801c906:	4b1b      	ldr	r3, [pc, #108]	@ (801c974 <TRACE_TxCpltCallback+0x10c>)
 801c908:	8a1b      	ldrh	r3, [r3, #16]
 801c90a:	429a      	cmp	r2, r3
 801c90c:	d908      	bls.n	801c920 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801c90e:	4b19      	ldr	r3, [pc, #100]	@ (801c974 <TRACE_TxCpltCallback+0x10c>)
 801c910:	8a5a      	ldrh	r2, [r3, #18]
 801c912:	4b18      	ldr	r3, [pc, #96]	@ (801c974 <TRACE_TxCpltCallback+0x10c>)
 801c914:	8a1b      	ldrh	r3, [r3, #16]
 801c916:	1ad3      	subs	r3, r2, r3
 801c918:	b29a      	uxth	r2, r3
 801c91a:	4b16      	ldr	r3, [pc, #88]	@ (801c974 <TRACE_TxCpltCallback+0x10c>)
 801c91c:	829a      	strh	r2, [r3, #20]
 801c91e:	e006      	b.n	801c92e <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801c920:	4b14      	ldr	r3, [pc, #80]	@ (801c974 <TRACE_TxCpltCallback+0x10c>)
 801c922:	8a1b      	ldrh	r3, [r3, #16]
 801c924:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801c928:	b29a      	uxth	r2, r3
 801c92a:	4b12      	ldr	r3, [pc, #72]	@ (801c974 <TRACE_TxCpltCallback+0x10c>)
 801c92c:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801c92e:	4b11      	ldr	r3, [pc, #68]	@ (801c974 <TRACE_TxCpltCallback+0x10c>)
 801c930:	8a1b      	ldrh	r3, [r3, #16]
 801c932:	461a      	mov	r2, r3
 801c934:	4b10      	ldr	r3, [pc, #64]	@ (801c978 <TRACE_TxCpltCallback+0x110>)
 801c936:	4413      	add	r3, r2
 801c938:	61fb      	str	r3, [r7, #28]
 801c93a:	69bb      	ldr	r3, [r7, #24]
 801c93c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c93e:	693b      	ldr	r3, [r7, #16]
 801c940:	f383 8810 	msr	PRIMASK, r3
}
 801c944:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801c946:	4b0d      	ldr	r3, [pc, #52]	@ (801c97c <TRACE_TxCpltCallback+0x114>)
 801c948:	68db      	ldr	r3, [r3, #12]
 801c94a:	4a0a      	ldr	r2, [pc, #40]	@ (801c974 <TRACE_TxCpltCallback+0x10c>)
 801c94c:	8a92      	ldrh	r2, [r2, #20]
 801c94e:	4611      	mov	r1, r2
 801c950:	69f8      	ldr	r0, [r7, #28]
 801c952:	4798      	blx	r3
 801c954:	e00a      	b.n	801c96c <TRACE_TxCpltCallback+0x104>
 801c956:	69bb      	ldr	r3, [r7, #24]
 801c958:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c95a:	68fb      	ldr	r3, [r7, #12]
 801c95c:	f383 8810 	msr	PRIMASK, r3
}
 801c960:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801c962:	f7e5 fb01 	bl	8001f68 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801c966:	f000 f8a7 	bl	801cab8 <TRACE_UnLock>
  }
}
 801c96a:	bf00      	nop
 801c96c:	bf00      	nop
 801c96e:	3720      	adds	r7, #32
 801c970:	46bd      	mov	sp, r7
 801c972:	bd80      	pop	{r7, pc}
 801c974:	20001e74 	.word	0x20001e74
 801c978:	20001e8c 	.word	0x20001e8c
 801c97c:	0801d5f8 	.word	0x0801d5f8

0801c980 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801c980:	b480      	push	{r7}
 801c982:	b087      	sub	sp, #28
 801c984:	af00      	add	r7, sp, #0
 801c986:	4603      	mov	r3, r0
 801c988:	6039      	str	r1, [r7, #0]
 801c98a:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801c98c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c990:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c992:	f3ef 8310 	mrs	r3, PRIMASK
 801c996:	60fb      	str	r3, [r7, #12]
  return(result);
 801c998:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c99a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801c99c:	b672      	cpsid	i
}
 801c99e:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801c9a0:	4b35      	ldr	r3, [pc, #212]	@ (801ca78 <TRACE_AllocateBufer+0xf8>)
 801c9a2:	8a5a      	ldrh	r2, [r3, #18]
 801c9a4:	4b34      	ldr	r3, [pc, #208]	@ (801ca78 <TRACE_AllocateBufer+0xf8>)
 801c9a6:	8a1b      	ldrh	r3, [r3, #16]
 801c9a8:	429a      	cmp	r2, r3
 801c9aa:	d11b      	bne.n	801c9e4 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801c9ac:	4b32      	ldr	r3, [pc, #200]	@ (801ca78 <TRACE_AllocateBufer+0xf8>)
 801c9ae:	8a5b      	ldrh	r3, [r3, #18]
 801c9b0:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801c9b4:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801c9b6:	88fa      	ldrh	r2, [r7, #6]
 801c9b8:	8afb      	ldrh	r3, [r7, #22]
 801c9ba:	429a      	cmp	r2, r3
 801c9bc:	d33a      	bcc.n	801ca34 <TRACE_AllocateBufer+0xb4>
 801c9be:	4b2e      	ldr	r3, [pc, #184]	@ (801ca78 <TRACE_AllocateBufer+0xf8>)
 801c9c0:	8a1b      	ldrh	r3, [r3, #16]
 801c9c2:	88fa      	ldrh	r2, [r7, #6]
 801c9c4:	429a      	cmp	r2, r3
 801c9c6:	d235      	bcs.n	801ca34 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801c9c8:	4b2b      	ldr	r3, [pc, #172]	@ (801ca78 <TRACE_AllocateBufer+0xf8>)
 801c9ca:	2201      	movs	r2, #1
 801c9cc:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801c9ce:	4b2a      	ldr	r3, [pc, #168]	@ (801ca78 <TRACE_AllocateBufer+0xf8>)
 801c9d0:	8a5a      	ldrh	r2, [r3, #18]
 801c9d2:	4b29      	ldr	r3, [pc, #164]	@ (801ca78 <TRACE_AllocateBufer+0xf8>)
 801c9d4:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801c9d6:	4b28      	ldr	r3, [pc, #160]	@ (801ca78 <TRACE_AllocateBufer+0xf8>)
 801c9d8:	8a1b      	ldrh	r3, [r3, #16]
 801c9da:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801c9dc:	4b26      	ldr	r3, [pc, #152]	@ (801ca78 <TRACE_AllocateBufer+0xf8>)
 801c9de:	2200      	movs	r2, #0
 801c9e0:	825a      	strh	r2, [r3, #18]
 801c9e2:	e027      	b.n	801ca34 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c9e4:	4b24      	ldr	r3, [pc, #144]	@ (801ca78 <TRACE_AllocateBufer+0xf8>)
 801c9e6:	8a5a      	ldrh	r2, [r3, #18]
 801c9e8:	4b23      	ldr	r3, [pc, #140]	@ (801ca78 <TRACE_AllocateBufer+0xf8>)
 801c9ea:	8a1b      	ldrh	r3, [r3, #16]
 801c9ec:	429a      	cmp	r2, r3
 801c9ee:	d91b      	bls.n	801ca28 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801c9f0:	4b21      	ldr	r3, [pc, #132]	@ (801ca78 <TRACE_AllocateBufer+0xf8>)
 801c9f2:	8a5b      	ldrh	r3, [r3, #18]
 801c9f4:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801c9f8:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801c9fa:	88fa      	ldrh	r2, [r7, #6]
 801c9fc:	8afb      	ldrh	r3, [r7, #22]
 801c9fe:	429a      	cmp	r2, r3
 801ca00:	d318      	bcc.n	801ca34 <TRACE_AllocateBufer+0xb4>
 801ca02:	4b1d      	ldr	r3, [pc, #116]	@ (801ca78 <TRACE_AllocateBufer+0xf8>)
 801ca04:	8a1b      	ldrh	r3, [r3, #16]
 801ca06:	88fa      	ldrh	r2, [r7, #6]
 801ca08:	429a      	cmp	r2, r3
 801ca0a:	d213      	bcs.n	801ca34 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801ca0c:	4b1a      	ldr	r3, [pc, #104]	@ (801ca78 <TRACE_AllocateBufer+0xf8>)
 801ca0e:	2201      	movs	r2, #1
 801ca10:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801ca12:	4b19      	ldr	r3, [pc, #100]	@ (801ca78 <TRACE_AllocateBufer+0xf8>)
 801ca14:	8a5a      	ldrh	r2, [r3, #18]
 801ca16:	4b18      	ldr	r3, [pc, #96]	@ (801ca78 <TRACE_AllocateBufer+0xf8>)
 801ca18:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801ca1a:	4b17      	ldr	r3, [pc, #92]	@ (801ca78 <TRACE_AllocateBufer+0xf8>)
 801ca1c:	8a1b      	ldrh	r3, [r3, #16]
 801ca1e:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801ca20:	4b15      	ldr	r3, [pc, #84]	@ (801ca78 <TRACE_AllocateBufer+0xf8>)
 801ca22:	2200      	movs	r2, #0
 801ca24:	825a      	strh	r2, [r3, #18]
 801ca26:	e005      	b.n	801ca34 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801ca28:	4b13      	ldr	r3, [pc, #76]	@ (801ca78 <TRACE_AllocateBufer+0xf8>)
 801ca2a:	8a1a      	ldrh	r2, [r3, #16]
 801ca2c:	4b12      	ldr	r3, [pc, #72]	@ (801ca78 <TRACE_AllocateBufer+0xf8>)
 801ca2e:	8a5b      	ldrh	r3, [r3, #18]
 801ca30:	1ad3      	subs	r3, r2, r3
 801ca32:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801ca34:	8afa      	ldrh	r2, [r7, #22]
 801ca36:	88fb      	ldrh	r3, [r7, #6]
 801ca38:	429a      	cmp	r2, r3
 801ca3a:	d90f      	bls.n	801ca5c <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801ca3c:	4b0e      	ldr	r3, [pc, #56]	@ (801ca78 <TRACE_AllocateBufer+0xf8>)
 801ca3e:	8a5a      	ldrh	r2, [r3, #18]
 801ca40:	683b      	ldr	r3, [r7, #0]
 801ca42:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801ca44:	4b0c      	ldr	r3, [pc, #48]	@ (801ca78 <TRACE_AllocateBufer+0xf8>)
 801ca46:	8a5a      	ldrh	r2, [r3, #18]
 801ca48:	88fb      	ldrh	r3, [r7, #6]
 801ca4a:	4413      	add	r3, r2
 801ca4c:	b29b      	uxth	r3, r3
 801ca4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801ca52:	b29a      	uxth	r2, r3
 801ca54:	4b08      	ldr	r3, [pc, #32]	@ (801ca78 <TRACE_AllocateBufer+0xf8>)
 801ca56:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801ca58:	2300      	movs	r3, #0
 801ca5a:	82bb      	strh	r3, [r7, #20]
 801ca5c:	693b      	ldr	r3, [r7, #16]
 801ca5e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ca60:	68bb      	ldr	r3, [r7, #8]
 801ca62:	f383 8810 	msr	PRIMASK, r3
}
 801ca66:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801ca68:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801ca6c:	4618      	mov	r0, r3
 801ca6e:	371c      	adds	r7, #28
 801ca70:	46bd      	mov	sp, r7
 801ca72:	bc80      	pop	{r7}
 801ca74:	4770      	bx	lr
 801ca76:	bf00      	nop
 801ca78:	20001e74 	.word	0x20001e74

0801ca7c <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801ca7c:	b480      	push	{r7}
 801ca7e:	b085      	sub	sp, #20
 801ca80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ca82:	f3ef 8310 	mrs	r3, PRIMASK
 801ca86:	607b      	str	r3, [r7, #4]
  return(result);
 801ca88:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ca8a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801ca8c:	b672      	cpsid	i
}
 801ca8e:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801ca90:	4b08      	ldr	r3, [pc, #32]	@ (801cab4 <TRACE_Lock+0x38>)
 801ca92:	8adb      	ldrh	r3, [r3, #22]
 801ca94:	3301      	adds	r3, #1
 801ca96:	b29a      	uxth	r2, r3
 801ca98:	4b06      	ldr	r3, [pc, #24]	@ (801cab4 <TRACE_Lock+0x38>)
 801ca9a:	82da      	strh	r2, [r3, #22]
 801ca9c:	68fb      	ldr	r3, [r7, #12]
 801ca9e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801caa0:	68bb      	ldr	r3, [r7, #8]
 801caa2:	f383 8810 	msr	PRIMASK, r3
}
 801caa6:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801caa8:	bf00      	nop
 801caaa:	3714      	adds	r7, #20
 801caac:	46bd      	mov	sp, r7
 801caae:	bc80      	pop	{r7}
 801cab0:	4770      	bx	lr
 801cab2:	bf00      	nop
 801cab4:	20001e74 	.word	0x20001e74

0801cab8 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801cab8:	b480      	push	{r7}
 801caba:	b085      	sub	sp, #20
 801cabc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cabe:	f3ef 8310 	mrs	r3, PRIMASK
 801cac2:	607b      	str	r3, [r7, #4]
  return(result);
 801cac4:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801cac6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801cac8:	b672      	cpsid	i
}
 801caca:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801cacc:	4b08      	ldr	r3, [pc, #32]	@ (801caf0 <TRACE_UnLock+0x38>)
 801cace:	8adb      	ldrh	r3, [r3, #22]
 801cad0:	3b01      	subs	r3, #1
 801cad2:	b29a      	uxth	r2, r3
 801cad4:	4b06      	ldr	r3, [pc, #24]	@ (801caf0 <TRACE_UnLock+0x38>)
 801cad6:	82da      	strh	r2, [r3, #22]
 801cad8:	68fb      	ldr	r3, [r7, #12]
 801cada:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cadc:	68bb      	ldr	r3, [r7, #8]
 801cade:	f383 8810 	msr	PRIMASK, r3
}
 801cae2:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801cae4:	bf00      	nop
 801cae6:	3714      	adds	r7, #20
 801cae8:	46bd      	mov	sp, r7
 801caea:	bc80      	pop	{r7}
 801caec:	4770      	bx	lr
 801caee:	bf00      	nop
 801caf0:	20001e74 	.word	0x20001e74

0801caf4 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801caf4:	b480      	push	{r7}
 801caf6:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801caf8:	4b05      	ldr	r3, [pc, #20]	@ (801cb10 <TRACE_IsLocked+0x1c>)
 801cafa:	8adb      	ldrh	r3, [r3, #22]
 801cafc:	2b00      	cmp	r3, #0
 801cafe:	bf14      	ite	ne
 801cb00:	2301      	movne	r3, #1
 801cb02:	2300      	moveq	r3, #0
 801cb04:	b2db      	uxtb	r3, r3
}
 801cb06:	4618      	mov	r0, r3
 801cb08:	46bd      	mov	sp, r7
 801cb0a:	bc80      	pop	{r7}
 801cb0c:	4770      	bx	lr
 801cb0e:	bf00      	nop
 801cb10:	20001e74 	.word	0x20001e74

0801cb14 <memset>:
 801cb14:	4402      	add	r2, r0
 801cb16:	4603      	mov	r3, r0
 801cb18:	4293      	cmp	r3, r2
 801cb1a:	d100      	bne.n	801cb1e <memset+0xa>
 801cb1c:	4770      	bx	lr
 801cb1e:	f803 1b01 	strb.w	r1, [r3], #1
 801cb22:	e7f9      	b.n	801cb18 <memset+0x4>

0801cb24 <__libc_init_array>:
 801cb24:	b570      	push	{r4, r5, r6, lr}
 801cb26:	4d0d      	ldr	r5, [pc, #52]	@ (801cb5c <__libc_init_array+0x38>)
 801cb28:	4c0d      	ldr	r4, [pc, #52]	@ (801cb60 <__libc_init_array+0x3c>)
 801cb2a:	1b64      	subs	r4, r4, r5
 801cb2c:	10a4      	asrs	r4, r4, #2
 801cb2e:	2600      	movs	r6, #0
 801cb30:	42a6      	cmp	r6, r4
 801cb32:	d109      	bne.n	801cb48 <__libc_init_array+0x24>
 801cb34:	4d0b      	ldr	r5, [pc, #44]	@ (801cb64 <__libc_init_array+0x40>)
 801cb36:	4c0c      	ldr	r4, [pc, #48]	@ (801cb68 <__libc_init_array+0x44>)
 801cb38:	f000 f89a 	bl	801cc70 <_init>
 801cb3c:	1b64      	subs	r4, r4, r5
 801cb3e:	10a4      	asrs	r4, r4, #2
 801cb40:	2600      	movs	r6, #0
 801cb42:	42a6      	cmp	r6, r4
 801cb44:	d105      	bne.n	801cb52 <__libc_init_array+0x2e>
 801cb46:	bd70      	pop	{r4, r5, r6, pc}
 801cb48:	f855 3b04 	ldr.w	r3, [r5], #4
 801cb4c:	4798      	blx	r3
 801cb4e:	3601      	adds	r6, #1
 801cb50:	e7ee      	b.n	801cb30 <__libc_init_array+0xc>
 801cb52:	f855 3b04 	ldr.w	r3, [r5], #4
 801cb56:	4798      	blx	r3
 801cb58:	3601      	adds	r6, #1
 801cb5a:	e7f2      	b.n	801cb42 <__libc_init_array+0x1e>
 801cb5c:	0801dcb0 	.word	0x0801dcb0
 801cb60:	0801dcb0 	.word	0x0801dcb0
 801cb64:	0801dcb0 	.word	0x0801dcb0
 801cb68:	0801dcb4 	.word	0x0801dcb4
 801cb6c:	00000000 	.word	0x00000000

0801cb70 <floor>:
 801cb70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cb74:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801cb78:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 801cb7c:	2e13      	cmp	r6, #19
 801cb7e:	4602      	mov	r2, r0
 801cb80:	460b      	mov	r3, r1
 801cb82:	460c      	mov	r4, r1
 801cb84:	4605      	mov	r5, r0
 801cb86:	4680      	mov	r8, r0
 801cb88:	dc35      	bgt.n	801cbf6 <floor+0x86>
 801cb8a:	2e00      	cmp	r6, #0
 801cb8c:	da17      	bge.n	801cbbe <floor+0x4e>
 801cb8e:	a334      	add	r3, pc, #208	@ (adr r3, 801cc60 <floor+0xf0>)
 801cb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb94:	f7e3 fafe 	bl	8000194 <__adddf3>
 801cb98:	2200      	movs	r2, #0
 801cb9a:	2300      	movs	r3, #0
 801cb9c:	f7e3 fd2e 	bl	80005fc <__aeabi_dcmpgt>
 801cba0:	b150      	cbz	r0, 801cbb8 <floor+0x48>
 801cba2:	2c00      	cmp	r4, #0
 801cba4:	da57      	bge.n	801cc56 <floor+0xe6>
 801cba6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801cbaa:	432c      	orrs	r4, r5
 801cbac:	2500      	movs	r5, #0
 801cbae:	42ac      	cmp	r4, r5
 801cbb0:	4c2d      	ldr	r4, [pc, #180]	@ (801cc68 <floor+0xf8>)
 801cbb2:	bf08      	it	eq
 801cbb4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801cbb8:	4623      	mov	r3, r4
 801cbba:	462a      	mov	r2, r5
 801cbbc:	e024      	b.n	801cc08 <floor+0x98>
 801cbbe:	4f2b      	ldr	r7, [pc, #172]	@ (801cc6c <floor+0xfc>)
 801cbc0:	4137      	asrs	r7, r6
 801cbc2:	ea01 0c07 	and.w	ip, r1, r7
 801cbc6:	ea5c 0c00 	orrs.w	ip, ip, r0
 801cbca:	d01d      	beq.n	801cc08 <floor+0x98>
 801cbcc:	a324      	add	r3, pc, #144	@ (adr r3, 801cc60 <floor+0xf0>)
 801cbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbd2:	f7e3 fadf 	bl	8000194 <__adddf3>
 801cbd6:	2200      	movs	r2, #0
 801cbd8:	2300      	movs	r3, #0
 801cbda:	f7e3 fd0f 	bl	80005fc <__aeabi_dcmpgt>
 801cbde:	2800      	cmp	r0, #0
 801cbe0:	d0ea      	beq.n	801cbb8 <floor+0x48>
 801cbe2:	2c00      	cmp	r4, #0
 801cbe4:	bfbe      	ittt	lt
 801cbe6:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801cbea:	4133      	asrlt	r3, r6
 801cbec:	18e4      	addlt	r4, r4, r3
 801cbee:	ea24 0407 	bic.w	r4, r4, r7
 801cbf2:	2500      	movs	r5, #0
 801cbf4:	e7e0      	b.n	801cbb8 <floor+0x48>
 801cbf6:	2e33      	cmp	r6, #51	@ 0x33
 801cbf8:	dd0a      	ble.n	801cc10 <floor+0xa0>
 801cbfa:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801cbfe:	d103      	bne.n	801cc08 <floor+0x98>
 801cc00:	f7e3 fac8 	bl	8000194 <__adddf3>
 801cc04:	4602      	mov	r2, r0
 801cc06:	460b      	mov	r3, r1
 801cc08:	4610      	mov	r0, r2
 801cc0a:	4619      	mov	r1, r3
 801cc0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cc10:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 801cc14:	f04f 3cff 	mov.w	ip, #4294967295
 801cc18:	fa2c f707 	lsr.w	r7, ip, r7
 801cc1c:	4207      	tst	r7, r0
 801cc1e:	d0f3      	beq.n	801cc08 <floor+0x98>
 801cc20:	a30f      	add	r3, pc, #60	@ (adr r3, 801cc60 <floor+0xf0>)
 801cc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc26:	f7e3 fab5 	bl	8000194 <__adddf3>
 801cc2a:	2200      	movs	r2, #0
 801cc2c:	2300      	movs	r3, #0
 801cc2e:	f7e3 fce5 	bl	80005fc <__aeabi_dcmpgt>
 801cc32:	2800      	cmp	r0, #0
 801cc34:	d0c0      	beq.n	801cbb8 <floor+0x48>
 801cc36:	2c00      	cmp	r4, #0
 801cc38:	da0a      	bge.n	801cc50 <floor+0xe0>
 801cc3a:	2e14      	cmp	r6, #20
 801cc3c:	d101      	bne.n	801cc42 <floor+0xd2>
 801cc3e:	3401      	adds	r4, #1
 801cc40:	e006      	b.n	801cc50 <floor+0xe0>
 801cc42:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801cc46:	2301      	movs	r3, #1
 801cc48:	40b3      	lsls	r3, r6
 801cc4a:	441d      	add	r5, r3
 801cc4c:	4545      	cmp	r5, r8
 801cc4e:	d3f6      	bcc.n	801cc3e <floor+0xce>
 801cc50:	ea25 0507 	bic.w	r5, r5, r7
 801cc54:	e7b0      	b.n	801cbb8 <floor+0x48>
 801cc56:	2500      	movs	r5, #0
 801cc58:	462c      	mov	r4, r5
 801cc5a:	e7ad      	b.n	801cbb8 <floor+0x48>
 801cc5c:	f3af 8000 	nop.w
 801cc60:	8800759c 	.word	0x8800759c
 801cc64:	7e37e43c 	.word	0x7e37e43c
 801cc68:	bff00000 	.word	0xbff00000
 801cc6c:	000fffff 	.word	0x000fffff

0801cc70 <_init>:
 801cc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cc72:	bf00      	nop
 801cc74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cc76:	bc08      	pop	{r3}
 801cc78:	469e      	mov	lr, r3
 801cc7a:	4770      	bx	lr

0801cc7c <_fini>:
 801cc7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cc7e:	bf00      	nop
 801cc80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cc82:	bc08      	pop	{r3}
 801cc84:	469e      	mov	lr, r3
 801cc86:	4770      	bx	lr
